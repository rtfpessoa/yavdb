---
- id: snykio:pypi:tensorflow:451636
  title: Buffer Overflow
  description: |
    [tensorflow][1] is a machine learning framework.

    Affected versions of this package are vulnerable to Buffer Overflow. A
    malicious user could pass a malformed version of a `TFLite` graph into
    `TOCO` will cause `TOCO` to crash or cause a buffer overflow,
    potentially allowing malicious code to be executed.



    [1]: https://pypi.org/project/tensorflow/
  affected_package: tensorflow
  vulnerable_versions:
  - ">= 1.5.0 < 1.7.1"
  severity: high
  package_manager: pypi
  cve:
  - CVE-2018-8825
  cwe:
  - CWE-121
  disclosed_date: 2019-04-23
  created_date: 2019-04-25
  last_modified_date: 2019-04-25
  credit:
  - Blade Team of Tencent
  references:
  - https://github.com/tensorflow/tensorflow/blob/master/tensorflow/security/advisory/tfsa-2018-003.md
  - https://github.com/tensorflow/tensorflow/commit/41335abb46f80ca644b5738550daef6136ba5476
  - https://github.com/tensorflow/tensorflow/commit/8badd11d875a826bd318ed439909d5c47a7fb811
  source_url: https://snyk.io/vuln/SNYK-PYTHON-TENSORFLOW-451636
- id: snykio:pypi:tensorflow:451669
  title: Denial of Service (DoS)
  description: "[tensorflow][1] is a machine learning framework.\n\nAffected versions
    of this package are vulnerable to Denial of Service\n(DoS). It was possible to
    pass a `null` value into `strcat` when parsing\na GIF, causing DoS attacks.\n\n\n\n[1]:
    https://pypi.org/project/tensorflow/\n\\nDenial of Service (DoS) describes a family
    of attacks, all aimed at\nmaking a system inaccessible to its original and legitimate
    users. There\nare many types of DoS attacks, ranging from trying to clog the network\npipes
    to the system by generating a large volume of traffic from many\nmachines (a Distributed
    Denial of Service - DDoS - attack) to sending\ncrafted requests that cause a system
    to crash or take a disproportional\namount of time to process.\n\nThe Regular
    expression Denial of Service (ReDoS) is a type of Denial of\nService attack. Regular
    expressions are incredibly powerful, but they\naren\\'t very intuitive and can
    ultimately end up making it easy for\nattackers to take your site down.\n\nLet’s
    take the following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n{:
    .language-js}\n\nThis regular expression accomplishes the following:\n\n* `A`
    The string must start with the letter \\'A\\'\n* `(B|C+)+` The string must then
    follow the letter A with either the\n  letter \\'B\\' or some number of occurrences
    of the letter \\'C\\' (the\n  `+` matches one or more times). The `+` at the end
    of this section\n  states that we can look for one or more matches of this section.\n*
    `D` Finally, we ensure this section of the string ends with a \\'D\\'\n\nThe expression
    would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt
    most cases, it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n
    \   $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s
    user 0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n{: .language-bash}\n\nThe entire
    process of testing it against a 30 characters long string\ntakes around ~52ms.
    But when given an invalid string, it takes nearly\ntwo seconds to complete the
    test, over ten times as long as it took to\ntest a valid string. The dramatic
    difference is due to the way regular\nexpressions get evaluated.\n\nMost Regex
    engines will work very similarly (with minor differences).\nThe engine will match
    the first possible way to accept the current\ncharacter and proceed to the next
    one. If it then fails to match the\nnext one, it will backtrack and see if there
    was another way to digest\nthe previous character. If it goes too far down the
    rabbit hole only to\nfind out the string doesn’t match in the end, and if many
    characters\nhave multiple valid regex paths, the number of backtracking steps
    can\nbecome very large, resulting in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s
    look at how our expression runs into this problem, using a\nshorter string: \\\"ACCCX\\\".
    While it seems fairly straightforward, there\nare still four different ways that
    the engine could match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.
    \ C+C+C.\n\nThe engine has to try each of those combinations to see if any of
    them\npotentially match against the expression. When you combine that with the\nother
    steps the engine must take, we can use [RegEx 101 debugger][1] to\nsee the engine
    has to take a total of 38 steps before it can determine\nthe string doesn\\'t
    match.\n\nFrom there, the number of steps the engine must use to validate a string\njust
    continues to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n|
    ACCCX | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX
    | 14 | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to
    take over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n"
  affected_package: tensorflow
  vulnerable_versions:
  - "< 1.6.0"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2018-7576
  cwe:
  - CWE-400
  disclosed_date: 2019-04-23
  created_date: 2019-07-21
  last_modified_date: 2019-07-21
  credit:
  - Unknown
  references:
  - https://github.com/tensorflow/tensorflow/blob/master/tensorflow/security/advisory/tfsa-2018-002.md
  - https://github.com/tensorflow/tensorflow/commit/c48431588e7cf8aff61d4c299231e3e925144df8
  source_url: https://snyk.io/vuln/SNYK-PYTHON-TENSORFLOW-451669
- id: snykio:pypi:tensorflow:451670
  title: Buffer Overflow
  description: |
    [tensorflow][1] is a machine learning framework.

    Affected versions of this package are vulnerable to Buffer Overflow when
    parsing a malicious meta checkpoint, resulting in an out of bounds read.



    [1]: https://pypi.org/project/tensorflow/
  affected_package: tensorflow
  vulnerable_versions:
  - ">= 1.0.0 < 1.7.1"
  severity: high
  package_manager: pypi
  cve:
  - CVE-2018-7575
  cwe:
  - CWE-190
  disclosed_date: 2019-04-24
  created_date: 2019-07-21
  last_modified_date: 2019-07-21
  credit:
  - Unknown
  references:
  - https://github.com/tensorflow/tensorflow/blob/master/tensorflow/security/advisory/tfsa-2018-004.md
  - https://github.com/tensorflow/tensorflow/commit/2006ef57602012939dc10d7e8961925b320d3ef6
  source_url: https://snyk.io/vuln/SNYK-PYTHON-TENSORFLOW-451670
- id: snykio:pypi:tensorflow:451671
  title: Out-of-bounds Read
  description: |
    [tensorflow][1] is a machine learning framework.

    Affected versions of this package are vulnerable to Out-of-bounds Read.
    A malicious user could crash the process or gain access to unintended
    regions of the process memory.



    [1]: https://pypi.org/project/tensorflow/
  affected_package: tensorflow
  vulnerable_versions:
  - "< 1.7.0"
  severity: high
  package_manager: pypi
  cve:
  - CVE-2018-7574
  cwe:
  - CWE-125
  disclosed_date: 2019-04-24
  created_date: 2019-07-21
  last_modified_date: 2019-07-21
  credit:
  - Unknown
  references:
  - https://github.com/tensorflow/tensorflow/blob/master/tensorflow/security/advisory/tfsa-2018-001.md
  - https://github.com/tensorflow/tensorflow/commit/49f73c55d56edffebde4bca4a407ad69c1cae433
  source_url: https://snyk.io/vuln/SNYK-PYTHON-TENSORFLOW-451671
- id: snykio:pypi:tensorflow:451681
  title: Buffer Overflow
  description: |
    [tensorflow][1] is a machine learning framework.

    Affected versions of this package are vulnerable to Buffer Overflow. It
    could cause a crash or read from other parts of process memory via a
    crafted configuration file.



    [1]: https://pypi.org/project/tensorflow/
  affected_package: tensorflow
  vulnerable_versions:
  - ">= 1.1.0 < 1.7.1"
  severity: high
  package_manager: pypi
  cve:
  - CVE-2018-10055
  cwe:
  - CWE-119
  disclosed_date: 2019-04-24
  created_date: 2019-07-22
  last_modified_date: 2019-07-22
  credit:
  - Unknown
  references:
  - https://github.com/tensorflow/tensorflow/blob/master/tensorflow/security/advisory/tfsa-2018-006.md
  - https://github.com/tensorflow/tensorflow/commit/c89ab82a82585cdaa90bf4911980e9e845909e78
  source_url: https://snyk.io/vuln/SNYK-PYTHON-TENSORFLOW-451681
- id: snykio:pypi:tensorflow:537867
  title: Heap-based Buffer Overflow
  description: |
    [tensorflow][1] is a machine learning framework.

    Affected versions of this package are vulnerable to Heap-based Buffer
    Overflow via `UnsortedSegmentSum`. When the Index template argument is
    int32 `data_size` and `num_segments` fields are truncated from int64 to
    int32 and can produce negative numbers, resulting in accessing out of
    bounds heap memory.



    [1]: https://pypi.org/project/tensorflow/
  affected_package: tensorflow
  vulnerable_versions:
  - "< 1.15"
  severity: low
  package_manager: pypi
  cve:
  - CVE-2019-16778
  cwe:
  - CWE-122
  disclosed_date: 2019-12-16
  created_date: 2019-12-17
  last_modified_date: 2019-12-17
  credit:
  - Unknown
  references:
  - https://github.com/tensorflow/tensorflow/blob/master/tensorflow/security/advisory/tfsa-2019-002.md
  - https://github.com/tensorflow/tensorflow/commit/db4f9717c41bccc3ce10099ab61996b246099892
  - https://github.com/tensorflow/tensorflow/security/advisories/GHSA-844w-j86r-4x2j
  source_url: https://snyk.io/vuln/SNYK-PYTHON-TENSORFLOW-537867
- id: snykio:pypi:tensorflow:543629
  title: Denial of Service (DoS)
  description: "[tensorflow][1] is a machine learning framework.\n\nAffected versions
    of this package are vulnerable to Denial of Service\n(DoS). Converting a string
    (from Python) to a `tf.float16` value results\nin a segmentation fault in eager
    mode as the format checks for this use\ncase are only in the graph mode. A malicious
    attacker can send a data\npoint which contains a string instead of a `tf.float16`
    value. Similar\neffects can be obtained by manipulating saved models and checkpoints\nwhereby
    replacing a scalar `tf.float16` value with a scalar string will\ntrigger this
    issue due to automatic conversions.\n\n\n\n[1]: https://pypi.org/project/tensorflow/\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n{: .language-js}\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n{: .language-bash}\n\nThe entire
    process of testing it against a 30 characters long string\ntakes around ~52ms.
    But when given an invalid string, it takes nearly\ntwo seconds to complete the
    test, over ten times as long as it took to\ntest a valid string. The dramatic
    difference is due to the way regular\nexpressions get evaluated.\n\nMost Regex
    engines will work very similarly (with minor differences).\nThe engine will match
    the first possible way to accept the current\ncharacter and proceed to the next
    one. If it then fails to match the\nnext one, it will backtrack and see if there
    was another way to digest\nthe previous character. If it goes too far down the
    rabbit hole only to\nfind out the string doesn’t match in the end, and if many
    characters\nhave multiple valid regex paths, the number of backtracking steps
    can\nbecome very large, resulting in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s
    look at how our expression runs into this problem, using a\nshorter string: \\\"ACCCX\\\".
    While it seems fairly straightforward, there\nare still four different ways that
    the engine could match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.
    \ C+C+C.\n\nThe engine has to try each of those combinations to see if any of
    them\npotentially match against the expression. When you combine that with the\nother
    steps the engine must take, we can use [RegEx 101 debugger][1] to\nsee the engine
    has to take a total of 38 steps before it can determine\nthe string doesn\\'t
    match.\n\nFrom there, the number of steps the engine must use to validate a string\njust
    continues to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n|
    ACCCX | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX
    | 14 | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to
    take over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n"
  affected_package: tensorflow
  vulnerable_versions:
  - ">= 1.12.0 < 1.15.2"
  - ">= 2.0.0a0 < 2.0.1"
  severity: high
  package_manager: pypi
  cve:
  - CVE-2020-5215
  cwe:
  - CWE-400
  disclosed_date: 2020-01-28
  created_date: 2020-01-29
  last_modified_date: 2020-01-29
  credit:
  - Unknown
  references:
  - https://github.com/tensorflow/tensorflow/commit/5ac1b9e24ff6afc465756edf845d2e9660bd34bf
  - https://github.com/tensorflow/tensorflow/releases/tag/v1.15.2
  - https://github.com/tensorflow/tensorflow/releases/tag/v2.0.1
  - https://github.com/tensorflow/tensorflow/security/advisories/GHSA-977j-xj7q-2jr9
  source_url: https://snyk.io/vuln/SNYK-PYTHON-TENSORFLOW-543629
- id: snykio:pypi:tensorflow:564349
  title: NULL Pointer Dereference
  description: |
    [tensorflow][1] is a machine learning framework.

    Affected versions of this package are vulnerable to NULL Pointer
    Dereference. A carefully crafted GIF images can produce a null pointer
    dereference during decoding.



    [1]: https://pypi.org/project/tensorflow/
  affected_package: tensorflow
  vulnerable_versions:
  - "< 1.12.2"
  severity: medium
  package_manager: pypi
  cwe:
  - CWE-476
  disclosed_date: 2020-04-01
  created_date: 2020-04-01
  last_modified_date: 2020-04-01
  credit:
  - Unknown
  references:
  - https://github.com/tensorflow/tensorflow/blob/622a516e710e249ddc65a8a977ff1ae78b4d2e4d/RELEASE.md#release-1122
  source_url: https://snyk.io/vuln/SNYK-PYTHON-TENSORFLOW-564349
- id: snykio:pypi:tensorflow:564351
  title: Out-of-bounds Read
  description: |
    [tensorflow][1] is a machine learning framework.

    Affected versions of this package are vulnerable to Out-of-bounds Read.
    Decoding variant tensors from proto could result in heap out of bounds
    memory access.



    [1]: https://pypi.org/project/tensorflow/
  affected_package: tensorflow
  vulnerable_versions:
  - "< 2.0.0"
  severity: medium
  package_manager: pypi
  cwe:
  - CWE-125
  disclosed_date: 2019-09-30
  created_date: 2020-04-01
  last_modified_date: 2020-04-01
  credit:
  - Unknown
  references:
  - https://github.com/tensorflow/tensorflow/blob/622a516e710e249ddc65a8a977ff1ae78b4d2e4d/RELEASE.md#release-200
  source_url: https://snyk.io/vuln/SNYK-PYTHON-TENSORFLOW-564351
- id: snykio:pypi:tensorflow:568085
  title: Out-of-bounds Read
  description: |
    [tensorflow][1] is a machine learning framework.

    Affected versions of this package are vulnerable to Out-of-bounds Read.
    An integer overflow that causes an out-of-bounds read, possibly causing
    disclosure of the contents of process memory. This occurs in the
    `DecodeBmp` feature of the BMP decoder in
    `core/kernels/decode_bmp_op.cc`.



    [1]: https://pypi.org/project/tensorflow/
  affected_package: tensorflow
  vulnerable_versions:
  - "< 1.7.0"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2018-21233
  cwe:
  - CWE-125
  disclosed_date: 2020-05-04
  created_date: 2020-05-04
  last_modified_date: 2020-05-04
  credit:
  - Unknown
  references:
  - https://github.com/tensorflow/tensorflow/blob/master/tensorflow/security/advisory/tfsa-2018-001.md
  - https://github.com/tensorflow/tensorflow/commit/49f73c55d56edffebde4bca4a407ad69c1cae433
  source_url: https://snyk.io/vuln/SNYK-PYTHON-TENSORFLOW-568085
- id: snykio:pypi:tensorflow:597084
  title: Denial of Service (DoS)
  description: |+
    [tensorflow][1] is a machine learning framework.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS). A NULL pointer dereference could cause a denial of service via an
    invalid GIF file.



    [1]: https://pypi.org/project/tensorflow/
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: tensorflow
  vulnerable_versions:
  - ">= 0 < 1.12.2"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2019-9635
  cwe:
  - CWE-400
  disclosed_date: 2019-04-18
  created_date: 2020-07-31
  last_modified_date: 2020-07-31
  credit:
  - Yakun Zhang of Baidu Security Lab
  - Zheng Huang of Baidu Security Lab
  references:
  - https://github.com/tensorflow/tensorflow/blob/master/tensorflow/security/advisory/tfsa-2019-001.md
  source_url: https://snyk.io/vuln/SNYK-PYTHON-TENSORFLOW-597084
