---
- id: snykio:pypi:moin:1038822
  title: Remote Code Execution (RCE)
  description: |+
    Affected versions of this package are vulnerable to Remote Code
    Execution (RCE). The cache action in `action/cache.py` allows directory
    traversal through a crafted HTTP request. An attacker who can upload
    attachments to the wiki can use this to achieve remote code execution.

  affected_package: moin
  vulnerable_versions:
  - "< 1.9.11"
  severity: high
  package_manager: pypi
  cve:
  - CVE-2020-25074
  cwe:
  - CWE-94
  disclosed_date: 2020-11-11
  created_date: 2020-11-11
  last_modified_date: 2020-11-11
  credit:
  - Michael Chapman
  references:
  - http://moinmo.in/SecurityFixes
  - https://github.com/moinwiki/moin-1.9/commit/6b96a9060069302996b5af47fd4a388fc80172b7
  source_url: https://snyk.io/vuln/SNYK-PYTHON-MOIN-1038822
- id: snykio:pypi:moin:1038833
  title: Cross-site Scripting (XSS)
  description: |+
    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). An attacker with write permissions can upload an SVG file that
    contains malicious javascript. This javascript will be executed in a
    user\'s browser when the user is viewing that SVG file on the wiki.

    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: moin
  vulnerable_versions:
  - "< 1.9.11"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2020-15275
  cwe:
  - CWE-79
  disclosed_date: 2020-11-11
  created_date: 2020-11-11
  last_modified_date: 2020-11-11
  credit:
  - Catarina Leite from the Checkmarx SCA AppSec team
  references:
  - https://github.com/moinwiki/moin-1.9/commit/64e16037a60646a4d834f0203c75481b9c3fa74c
  source_url: https://snyk.io/vuln/SNYK-PYTHON-MOIN-1038833
- id: snykio:pypi:moin:40040
  title: Information Exposure
  description: |
    [`moin`][1] is an easy to use, full-featured and extensible wiki
    software package.

    MoinMoin 1.9 before 1.9.1 does not perform the expected clearing of the
    sys.argv array in situations where the GATEWAY\_INTERFACE environment
    variable is set, which allows remote attackers to obtain sensitive
    information via unspecified vectors.



    [1]: https://pypi.python.org/pypi/moin
  affected_package: moin
  vulnerable_versions:
  - "< 1.9.1"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2010-0667
  cwe:
  - CWE-200
  disclosed_date: 2010-01-18
  created_date: 2010-01-18
  last_modified_date: 2010-01-18
  credit:
  - Thomas Waldmann
  references:
  - http://www.openwall.com/lists/oss-security/2010/02/15/2
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2010-0667
  source_url: https://snyk.io/vuln/SNYK-PYTHON-MOIN-40040
- id: snykio:pypi:moin:40041
  title: Cross-site Scripting (XSS)
  description: |+
    [`moin`][1] is an easy to use, full-featured and extensible wiki
    software package.

    Unspecified vulnerability in MoinMoin 1.5.x through 1.7.x, 1.8.x before
    1.8.7, and 1.9.x before 1.9.2 has unknown impact and attack vectors,
    related to configurations that have a non-empty superuser list, the
    xmlrpc action enabled, the SyncPages action enabled, or OpenID
    configured.



    [1]: https://pypi.python.org/pypi/moin
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: moin
  vulnerable_versions:
  - "< 1.8.7"
  - ">= 1.9 < 1.9.2"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2010-0668
  cwe:
  - CWE-79
  disclosed_date: 2010-02-26
  created_date: 2010-02-26
  last_modified_date: 2010-02-26
  credit:
  - Unknown
  references:
  - https://moinmo.in/SecurityFixes
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2010-0668
  source_url: https://snyk.io/vuln/SNYK-PYTHON-MOIN-40041
- id: snykio:pypi:moin:40042
  title: Cross-site Scripting (XSS)
  description: |+
    [`moin`][1] is an easy to use, full-featured and extensible wiki
    software package.

    MoinMoin before 1.8.7 and 1.9.x before 1.9.2 does not properly sanitize
    user profiles, which has unspecified impact and attack vectors.



    [1]: https://pypi.python.org/pypi/moin
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: moin
  vulnerable_versions:
  - "< 1.8.7"
  - ">= 1.9 < 1.9.2"
  severity: high
  package_manager: pypi
  cve:
  - CVE-2010-0669
  cwe:
  - CWE-79
  disclosed_date: 2010-02-26
  created_date: 2010-02-26
  last_modified_date: 2010-02-26
  credit:
  - Unknown
  references:
  - https://moinmo.in/SecurityFixes
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2010-0669
  source_url: https://snyk.io/vuln/SNYK-PYTHON-MOIN-40042
- id: snykio:pypi:moin:40043
  title: Cross-site Scripting (XSS)
  description: |+
    [`moin`][1] is an easy to use, full-featured and extensible wiki
    software package.

    The default configuration of cfg.packagepages\_actions\_excluded in
    MoinMoin before 1.8.7 does not prevent unsafe package actions, which has
    unspecified impact and attack vectors.



    [1]: https://pypi.python.org/pypi/moin
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: moin
  vulnerable_versions:
  - "< 1.8.7"
  severity: high
  package_manager: pypi
  cve:
  - CVE-2010-0717
  cwe:
  - CWE-79
  disclosed_date: 2010-02-26
  created_date: 2010-02-26
  last_modified_date: 2010-02-26
  credit:
  - Unknown
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2010-0717
  source_url: https://snyk.io/vuln/SNYK-PYTHON-MOIN-40043
- id: snykio:pypi:moin:40044
  title: Cross-site Scripting (XSS)
  description: |+
    [`moin`][1] is an easy to use, full-featured and extensible wiki
    software package.

    Cross-site Scripting (XSS) vulnerability in action/Despam.py in the
    Despam action module in MoinMoin 1.8.7 and 1.9.2 allows remote
    authenticated users to inject arbitrary web script or HTML by creating a
    page with a crafted URI.



    [1]: https://pypi.python.org/pypi/moin
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: moin
  vulnerable_versions:
  - "< 1.9.3"
  severity: low
  package_manager: pypi
  cve:
  - CVE-2010-0828
  cwe:
  - CWE-79
  disclosed_date: 2010-04-05
  created_date: 2010-05-04
  last_modified_date: 2010-05-04
  credit:
  - Unknown
  references:
  - https://bugzilla.redhat.com/show_bug.cgi?id=578801
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2010-0828
  source_url: https://snyk.io/vuln/SNYK-PYTHON-MOIN-40044
- id: snykio:pypi:moin:40049
  title: Cross-site Scripting (XSS)
  description: |+
    [`moin`][1] is an easy to use, full-featured and extensible wiki
    software package.

    Multiple Cross-site Scripting (XSS) vulnerabilities in MoinMoin 1.7.3
    and earlier, 1.8.x before 1.8.8, and 1.9.x before 1.9.3 allow remote
    attackers to inject arbitrary web script or HTML via crafted content,
    related to (1) Page.py, (2) PageEditor.py, (3) PageGraphicalEditor.py,
    (4) action/CopyPage.py, (5) action/Load.py, (6) action/RenamePage.py,
    (7) action/backup.py, (8) action/login.py, (9) action/newaccount.py, and
    (10) action/recoverpass.py.



    [1]: https://pypi.python.org/pypi/moin
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: moin
  vulnerable_versions:
  - "< 1.7.3"
  - ">= 1.8 < 1.8.8"
  - ">= 1.9 < 1.9.3"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2010-2487
  cwe:
  - CWE-79
  disclosed_date: 2010-05-08
  created_date: 2010-05-08
  last_modified_date: 2010-05-08
  credit:
  - Unknown
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2010-2487
  source_url: https://snyk.io/vuln/SNYK-PYTHON-MOIN-40049
- id: snykio:pypi:moin:40051
  title: Cross-site Scripting (XSS)
  description: |+
    [`moin`][1] is an easy to use, full-featured and extensible wiki
    software package.

    Multiple Cross-site Scripting (XSS) vulnerabilities in MoinMoin 1.7.3
    and earlier, and 1.9.x before 1.9.3, allow remote attackers to inject
    arbitrary web script or HTML via crafted content, related to (1)
    action/LikePages.py, (2) action/chart.py, and (3) action/userprofile.py,
    a similar issue to CVE-2010-2487.



    [1]: https://pypi.python.org/pypi/moin
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: moin
  vulnerable_versions:
  - "< 1.7.3"
  - ">= 1.9 < 1.9.3"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2010-2969
  cwe:
  - CWE-79
  disclosed_date: 2010-05-08
  created_date: 2010-05-08
  last_modified_date: 2010-05-08
  credit:
  - Unknown
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2010-2969
  source_url: https://snyk.io/vuln/SNYK-PYTHON-MOIN-40051
- id: snykio:pypi:moin:40052
  title: Cross-site Scripting (XSS)
  description: |+
    [`moin`][1] is an easy to use, full-featured and extensible wiki
    software package.

    Multiple Cross-site Scripting (XSS) vulnerabilities in MoinMoin 1.9.x
    before 1.9.3 allow remote attackers to inject arbitrary web script or
    HTML via crafted content, related to (1) action/SlideShow.py, (2)
    action/anywikidraw.py, and (3) action/language\_setup.py, a similar
    issue to CVE-2010-2487.



    [1]: https://pypi.python.org/pypi/moin
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: moin
  vulnerable_versions:
  - ">= 1.9 < 1.9.3"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2010-2970
  cwe:
  - CWE-79
  disclosed_date: 2010-05-08
  created_date: 2010-05-08
  last_modified_date: 2010-05-08
  credit:
  - Unknown
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2010-2970
  source_url: https://snyk.io/vuln/SNYK-PYTHON-MOIN-40052
- id: snykio:pypi:moin:40063
  title: Cross-site Scripting (XSS)
  description: |+
    [`moin`][1] is an easy to use, full-featured and extensible wiki
    software package.

    Cross-site Scripting (XSS) vulnerability in the reStructuredText (rst)
    parser in parser/text\_rst.py in MoinMoin before 1.9.3, when docutils is
    installed or when \"format rst\" is set, allows remote attackers to
    inject arbitrary web script or HTML via a javascript: URL in the refuri
    attribute. NOTE: some of these details are obtained from third party
    information.



    [1]: https://pypi.python.org/pypi/moin
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: moin
  vulnerable_versions:
  - "< 1.9.3"
  severity: low
  package_manager: pypi
  cve:
  - CVE-2011-1058
  cwe:
  - CWE-79
  disclosed_date: 2011-02-21
  created_date: 2011-02-21
  last_modified_date: 2011-02-21
  credit:
  - Unknown
  references:
  - https://moinmo.in/SecurityFixes
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2011-1058
  source_url: https://snyk.io/vuln/SNYK-PYTHON-MOIN-40063
- id: snykio:pypi:moin:40103
  title: Improper Access Control
  description: |
    [`moin`][1] is an easy to use, full-featured and extensible wiki
    software package.

    security/**init**.py in MoinMoin 1.9 through 1.9.4 does not properly
    handle group names that contain virtual group names such as \"All,\"
    \"Known,\" or \"Trusted,\" which allows remote authenticated users with
    virtual group membership to be treated as a member of the group.



    [1]: https://pypi.python.org/pypi/moin
  affected_package: moin
  vulnerable_versions:
  - ">= 1.9 < 1.9.5"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2012-4404
  cwe:
  - CWE-284
  disclosed_date: 2012-09-10
  created_date: 2012-09-10
  last_modified_date: 2012-09-10
  credit:
  - Unknown
  references:
  - http://hg.moinmo.in/moin/1.9/rev/7b9f39289e16
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2012-4404
  source_url: https://snyk.io/vuln/SNYK-PYTHON-MOIN-40103
- id: snykio:pypi:moin:40161
  title: Directory Traversal
  description: |
    [`moin`][1] is an easy to use, full-featured and extensible wiki
    software package.

    Directory traversal vulnerability in the `_do_attachment_move` function
    in the AttachFile action (action/AttachFile.py) in MoinMoin 1.9.3
    through 1.9.5 allows remote attackers to overwrite arbitrary files via a
    .. (dot dot) in a file name.



    [1]: https://pypi.python.org/pypi/moin
  affected_package: moin
  vulnerable_versions:
  - ">= 1.9.3 < 1.9.6"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2012-6080
  cwe:
  - CWE-22
  disclosed_date: 2012-12-29
  created_date: 2012-12-29
  last_modified_date: 2012-12-29
  credit:
  - Unknown
  references:
  - http://hg.moinmo.in/moin/1.9/rev/3c27131a3c52
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2012-6080
  source_url: https://snyk.io/vuln/SNYK-PYTHON-MOIN-40161
- id: snykio:pypi:moin:40162
  title: Arbitrary Code Execution
  description: |
    [`moin`][1] is an easy to use, full-featured and extensible wiki
    software package.

    Multiple unrestricted file upload vulnerabilities in the (1) twikidraw
    (action/twikidraw.py) and (2) anywikidraw (action/anywikidraw.py)
    actions in MoinMoin before 1.9.6 allow remote authenticated users with
    write permissions to execute arbitrary code by uploading a file with an
    executable extension, then accessing it via a direct request to the file
    in an unspecified directory, as exploited in the wild in July 2012.



    [1]: https://pypi.python.org/pypi/moin
  affected_package: moin
  vulnerable_versions:
  - "< 1.9.6"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2012-6081
  cwe:
  - CWE-94
  disclosed_date: 2012-12-29
  created_date: 2012-12-29
  last_modified_date: 2012-12-29
  credit:
  - Unknown
  references:
  - http://hg.moinmo.in/moin/1.9/rev/7e7e1cbb9d3f
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2012-6081
  source_url: https://snyk.io/vuln/SNYK-PYTHON-MOIN-40162
- id: snykio:pypi:moin:40163
  title: Cross-site Scripting (XSS)
  description: |+
    [`moin`][1] is an easy to use, full-featured and extensible wiki
    software package.

    Cross-site Scripting (XSS) vulnerability in the rsslink function in
    theme/**init**.py in MoinMoin 1.9.5 allows remote attackers to inject
    arbitrary web script or HTML via the page name in a rss link.



    [1]: https://pypi.python.org/pypi/moin
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: moin
  vulnerable_versions:
  - "< 1.9.5"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2012-6082
  cwe:
  - CWE-79
  disclosed_date: 2012-12-08
  created_date: 2012-12-08
  last_modified_date: 2012-12-08
  credit:
  - Unknown
  references:
  - http://hg.moinmo.in/moin/1.9/rev/c98ec456e493
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2012-6082
  source_url: https://snyk.io/vuln/SNYK-PYTHON-MOIN-40163
- id: snykio:pypi:moin:40167
  title: Directory Traversal
  description: |
    [`moin`][1] is an easy to use, full-featured and extensible wiki
    software package.

    Multiple directory traversal vulnerabilities in the (1) twikidraw
    (action/twikidraw.py) and (2) anywikidraw (action/anywikidraw.py)
    actions in MoinMoin before 1.9.6 allow remote authenticated users with
    write permissions to overwrite arbitrary files via unspecified vectors.
    NOTE: this can be leveraged with CVE-2012-6081 to execute arbitrary
    code.



    [1]: https://pypi.python.org/pypi/moin
  affected_package: moin
  vulnerable_versions:
  - "< 1.9.6"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2012-6495
  cwe:
  - CWE-22
  disclosed_date: 2013-01-03
  created_date: 2016-02-24
  last_modified_date: 2016-02-24
  credit:
  - Unknown
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2012-6495
  source_url: https://snyk.io/vuln/SNYK-PYTHON-MOIN-40167
- id: snykio:pypi:moin:40431
  title: Cross-site Scripting (XSS)
  description: |+
    [`moin`][1] is an easy to use, full-featured and extensible wiki
    software package.

    MoinMoin 1.9.8 allows remote attackers to conduct \"JavaScript
    injection\" attacks by using the \"page creation or crafted URL\"
    approach, related to a \"Cross Site Scripting (XSS)\" issue affecting
    the action=fckdialog&amp;dialog=attachment (via page name) component.



    [1]: https://pypi.python.org/pypi/moin
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: moin
  vulnerable_versions:
  - "< 1.9.9"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2016-7146
  cwe:
  - CWE-79
  disclosed_date: 2016-11-01
  created_date: 2016-11-01
  last_modified_date: 2016-11-01
  credit:
  - Unknown
  references:
  - https://moinmo.in/SecurityFixes
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-7146
  source_url: https://snyk.io/vuln/SNYK-PYTHON-MOIN-40431
- id: snykio:pypi:moin:40433
  title: Cross-site Scripting (XSS)
  description: |+
    [`moin`][1] is an easy to use, full-featured and extensible wiki
    software package.

    MoinMoin 1.9.8 allows remote attackers to conduct \"JavaScript
    injection\" attacks by using the \"page creation\" approach, related to
    a \"Cross Site Scripting (XSS)\" issue affecting the action=AttachFile
    (via page name) component.



    [1]: https://pypi.python.org/pypi/moin
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: moin
  vulnerable_versions:
  - "< 1.9.9"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2016-7148
  cwe:
  - CWE-79
  disclosed_date: 2016-11-01
  created_date: 2016-11-01
  last_modified_date: 2016-11-01
  credit:
  - Unknown
  references:
  - https://moinmo.in/SecurityFixes
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-7146
  source_url: https://snyk.io/vuln/SNYK-PYTHON-MOIN-40433
- id: snykio:pypi:moin:40442
  title: Cross-site Scripting (XSS)
  description: |+
    [`moin`][1] is an easy to use, full-featured and extensible wiki
    software package.

    Cross-site Scripting (XSS) vulnerability in the link dialogue in GUI
    editor in MoinMoin before 1.9.8 allows remote attackers to inject
    arbitrary web script or HTML via unspecified vectors.



    [1]: https://pypi.python.org/pypi/moin
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: moin
  vulnerable_versions:
  - "< 1.9.8"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2016-9119
  cwe:
  - CWE-79
  disclosed_date: 2016-11-01
  created_date: 2016-11-01
  last_modified_date: 2016-11-01
  credit:
  - Unknown
  references:
  - https://moinmo.in/SecurityFixes
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-7146
  source_url: https://snyk.io/vuln/SNYK-PYTHON-MOIN-40442
- id: snykio:pypi:moin:40641
  title: Denial of Service (DoS)
  description: |+
    [`moin`][1] is an easy to use, full-featured and extensible wiki
    software package.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS).

    The password\_checker function in config/multiconfig.py in MoinMoin
    1.6.1 uses the cracklib and python-crack features even though they are
    not thread-safe, which allows remote attackers to cause a denial of
    service (segmentation fault and crash) via unknown vectors.



    [1]: https://pypi.python.org/pypi/moin
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: moin
  vulnerable_versions:
  - "< 1.6.1"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2008-6549
  cwe:
  - CWE-399
  disclosed_date: 2008-03-18
  created_date: 2017-09-14
  last_modified_date: 2017-09-14
  credit:
  - Unknown
  references:
  - https://nvd.nist.gov/vuln/detail/CVE-2008-6549
  source_url: https://snyk.io/vuln/SNYK-PYTHON-MOIN-40641
- id: snykio:pypi:moin:40788
  title: Access Restriction Bypass
  description: |
    [moin][1] is an easy to use, full-featured and extensible wiki software
    package.

    Affected versions of this package are vulnerable to Access Restriction
    Bypass. It checks parent `ACLs` in certain inappropriate circumstances
    during processing of hierarchical `ACLs`, which allows remote attackers
    to bypass intended access restrictions by requesting an item.



    [1]: https://pypi.org/project/moin/
  affected_package: moin
  vulnerable_versions:
  - ">= 1.7.0 < 1.7.3"
  - ">= 1.8.0 < 1.8.3"
  severity: high
  package_manager: pypi
  cve:
  - CVE-2009-4762
  cwe:
  - CWE-264
  disclosed_date: 2010-03-29
  created_date: 2018-03-11
  last_modified_date: 2018-03-11
  credit:
  - Unknown
  references:
  - https://nvd.nist.gov/vuln/detail/CVE-2009-4762
  source_url: https://snyk.io/vuln/SNYK-PYTHON-MOIN-40788
- id: snykio:pypi:moin:42148
  title: Privilege Escalation
  description: |
    [moin][1] is an easy to use, full-featured and extensible wiki software
    package.

    Affected versions of this package are vulnerable to Privilege
    Escalation. When using ACLs or a non-empty superusers list, the user
    form processing does not properly manage users, which allows remote
    attackers to gain privileges.



    [1]: https://pypi.org/project/moin/
  affected_package: moin
  vulnerable_versions:
  - "< 1.6.3"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2008-1937
  cwe:
  - CWE-264
  disclosed_date: 2008-04-25
  created_date: 2018-06-04
  last_modified_date: 2018-06-04
  credit:
  - Unknown
  references:
  - https://nvd.nist.gov/vuln/detail/CVE-2008-1937
  source_url: https://snyk.io/vuln/SNYK-PYTHON-MOIN-42148
- id: snykio:pypi:moin:42149
  title: Cross-site Scripting (XSS)
  description: |+
    [moin][1] is an easy to use, full-featured and extensible wiki software
    package.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks. A malicious user could inject arbitrary web script or
    HTML via an `AttachFile` action to the `WikiSandBox` component.



    [1]: https://pypi.org/project/moin/
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: moin
  vulnerable_versions:
  - "< 1.8.1"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2009-0260
  cwe:
  - CWE-79
  disclosed_date: 2009-01-23
  created_date: 2018-06-04
  last_modified_date: 2018-06-04
  credit:
  - Unknown
  references:
  - https://nvd.nist.gov/vuln/detail/CVE-2009-0312
  source_url: https://snyk.io/vuln/SNYK-PYTHON-MOIN-42149
- id: snykio:pypi:moin:42150
  title: Cross-site Scripting (XSS)
  description: |+
    [moin][1] is an easy to use, full-featured and extensible wiki software
    package.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks. A malicious user could inject arbitrary web script or
    HTML via the page info, or the page name.



    [1]: https://pypi.org/project/moin/
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: moin
  vulnerable_versions:
  - "< 1.5.7"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2007-0857
  cwe:
  - CWE-79
  disclosed_date: 2007-02-08
  created_date: 2018-06-04
  last_modified_date: 2018-06-04
  credit:
  - Unknown
  references:
  - https://nvd.nist.gov/vuln/detail/CVE-2007-0857
  source_url: https://snyk.io/vuln/SNYK-PYTHON-MOIN-42150
- id: snykio:pypi:moin:72485
  title: Cross-site Scripting (XSS)
  description: |+
    [moin][1] is a wiki software package written in Python.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks via the `GUI` editor.



    [1]: https://pypi.org/project/moin/
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: moin
  vulnerable_versions:
  - "< 1.9.10"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2017-5934
  cwe:
  - CWE-79
  disclosed_date: 2018-10-12
  created_date: 2018-10-23
  last_modified_date: 2018-10-23
  credit:
  - Nitin Venkatesh
  references:
  - https://github.com/moinwiki/moin-1.9/commit/70955a8eae091cc88fd9a6e510177e70289ec024
  source_url: https://snyk.io/vuln/SNYK-PYTHON-MOIN-72485
