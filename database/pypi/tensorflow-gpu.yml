---
- id: snykio:pypi:tensorflow-gpu:1013442
  title: Denial of Service (DoS)
  description: |
    [tensorflow-gpu][1] is a machine learning framework.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS). The `tf.raw_ops.Switch` operation takes as input a tensor and a
    boolean and outputs two tensors. Depending on the boolean value, one of
    the tensors is exactly the input tensor whereas the other one should be
    an empty tensor. Since only one of the tensors is defined, the other one
    is `nullptr`, hence we are binding a reference to `nullptr`. This is
    undefined behavior and reported as an error if compiling with
    `-fsanitize=null`. In this case, this results in a segmentation fault



    [1]: https://pypi.org/project/tensorflow/
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package][1]



    [1]: https://snyk.io/vuln/npm:ws:20171108
  affected_package: tensorflow-gpu
  vulnerable_versions:
  - "< 1.15.4"
  - ">= 2.0.0 < 2.0.3"
  - ">= 2.1.0 < 2.1.2"
  - ">= 2.2.0 < 2.2.1"
  - ">= 2.3.0 < 2.3.1"
  severity: low
  package_manager: pypi
  cve:
  - CVE-2020-15190
  cwe:
  - CWE-400
  disclosed_date: 2020-09-25
  created_date: 2020-09-28
  last_modified_date: 2020-09-28
  credit:
  - Aivul Team from Qihoo 360.
  references:
  - https://github.com/tensorflow/tensorflow/commit/da8558533d925694483d2c136a9220d6d49d843c
  - https://nvd.nist.gov/vuln/detail/CVE-2020-15190
  source_url: https://snyk.io/vuln/SNYK-PYTHON-TENSORFLOWGPU-1013442
- id: snykio:pypi:tensorflow-gpu:1013445
  title: Uninitialized Memory Exposure
  description: |
    [tensorflow-gpu][1] is a machine learning framework.

    Affected versions of this package are vulnerable to Uninitialized Memory
    Exposure. If a user passes a list of strings to `dlpack.to_dlpack` there
    is a memory leak following an expected validation failure. The issue
    occurs because the `status` argument during validation failures is not
    properly checked.



    [1]: https://pypi.org/project/tensorflow/
  affected_package: tensorflow-gpu
  vulnerable_versions:
  - ">= 2.2.0 < 2.2.1"
  - ">= 2.3.0 < 2.3.1"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2020-15192
  cwe:
  - CWE-201
  disclosed_date: 2020-09-25
  created_date: 2020-09-28
  last_modified_date: 2020-09-28
  credit:
  - Unknown
  references:
  - https://github.com/tensorflow/tensorflow/commit/22e07fb204386768e5bcbea563641ea11f96ceb8
  - https://github.com/tensorflow/tensorflow/security/advisories/GHSA-8fxw-76px-3rxv
  - https://nvd.nist.gov/vuln/detail/CVE-2020-15192
  source_url: https://snyk.io/vuln/SNYK-PYTHON-TENSORFLOWGPU-1013445
- id: snykio:pypi:tensorflow-gpu:1013448
  title: Denial of Service (DoS)
  description: |
    [tensorflow-gpu][1] is a machine learning framework.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS). Changing the TensorFlow\'s `SavedModel` protocol buffer and
    altering the name of required keys results in segfaults and data
    corruption while loading the model. This can cause a denial of service
    in products using `tensorflow-serving` or other inference-as-a-service
    installments.



    [1]: https://pypi.org/project/tensorflow/
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package][1]



    [1]: https://snyk.io/vuln/npm:ws:20171108
  affected_package: tensorflow-gpu
  vulnerable_versions:
  - "< 1.15.4"
  - ">= 2.0.0 < 2.0.3"
  - ">= 2.1.0 < 2.1.2"
  - ">= 2.2.0 < 2.2.1"
  - ">= 2.3.0 < 2.3.1"
  severity: high
  package_manager: pypi
  cve:
  - CVE-2020-15206
  cwe:
  - CWE-400
  disclosed_date: 2020-09-28
  created_date: 2020-09-28
  last_modified_date: 2020-09-28
  credit:
  - Unknown
  references:
  - https://github.com/tensorflow/tensorflow/commit/adf095206f25471e864a8e63a0f1caef53a0e3a6
  - https://github.com/tensorflow/tensorflow/releases/tag/v2.3.1
  - https://github.com/tensorflow/tensorflow/security/advisories/GHSA-w5gh-2wr2-pm6g
  source_url: https://snyk.io/vuln/SNYK-PYTHON-TENSORFLOWGPU-1013448
- id: snykio:pypi:tensorflow-gpu:1013451
  title: Heap-based Buffer Overflow
  description: |
    [tensorflow-gpu][1] is a machine learning framework.

    Affected versions of this package are vulnerable to Heap-based Buffer
    Overflow. The `SparseFillEmptyRowsGrad` implementation has incomplete
    validation of the shapes of its arguments: Although
    `reverse_index_map_t` and `grad_values_t` are accessed in a similar
    pattern, only `reverse_index_map_t` is validated to be of proper shape.
    Hence, malicious users can pass a bad `grad_values_t` to trigger an
    assertion failure in `vec`, causing denial of service in serving
    installations. This vulnerability is a variant of CVE-2020-15195.



    [1]: https://pypi.org/project/tensorflow/
  affected_package: tensorflow-gpu
  vulnerable_versions:
  - "< 1.15.4"
  - ">= 2.0.0 < 2.0.3"
  - ">= 2.1.0 < 2.1.2"
  - ">= 2.2.0 < 2.2.1"
  - ">= 2.3.0 < 2.3.1"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2020-15194
  cwe:
  - CWE-122
  disclosed_date: 2020-09-25
  created_date: 2020-09-28
  last_modified_date: 2020-09-28
  credit:
  - Unknown
  references:
  - https://github.com/advisories/GHSA-9mqp-7v2h-2382
  - https://github.com/tensorflow/tensorflow/security/advisories/GHSA-9mqp-7v2h-2382
  - https://nvd.nist.gov/vuln/detail/CVE-2020-15194
  source_url: https://snyk.io/vuln/SNYK-PYTHON-TENSORFLOWGPU-1013451
- id: snykio:pypi:tensorflow-gpu:1013457
  title: Heap-based Buffer Overflow
  description: |
    [tensorflow-gpu][1] is a machine learning framework.

    Affected versions of this package are vulnerable to Heap-based Buffer
    Overflow. The `SparseCountSparseOutput` implementation does not validate
    that the input arguments form a valid sparse tensor. In particular,
    there is no validation that the `indices` tensor has the same shape as
    the `values` one. Thus, a shape mismatch can result in accesses outside
    the bounds of heap allocated buffers.

    This vulnerability is a variant of CVE-2020-15201.



    [1]: https://pypi.org/project/tensorflow/
  affected_package: tensorflow-gpu
  vulnerable_versions:
  - ">= 2.3.0 < 2.3.1"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2020-15198
  cwe:
  - CWE-122
  disclosed_date: 2020-09-25
  created_date: 2020-09-28
  last_modified_date: 2020-09-28
  credit:
  - Aivul Team from Qihoo 360
  references:
  - https://github.com/advisories/GHSA-jc87-6vpp-7ff3
  - https://github.com/tensorflow/tensorflow/security/advisories/GHSA-jc87-6vpp-7ff3
  - https://nvd.nist.gov/vuln/detail/CVE-2020-15198
  source_url: https://snyk.io/vuln/SNYK-PYTHON-TENSORFLOWGPU-1013457
- id: snykio:pypi:tensorflow-gpu:1013462
  title: Improper Input Validation
  description: |
    [tensorflow-gpu][1] is a machine learning framework.

    Affected versions of this package are vulnerable to Improper Input
    Validation. The `RaggedCountSparseOutput` does not validate that the
    input arguments form a valid ragged tensor. In particular, there is no
    validation that the `splits` tensor has the minimum required number of
    elements. Since `BatchedMap` is equivalent to a vector, it needs to have
    at least one element to not be `nullptr`. If user passes a `splits`
    tensor that is empty or has exactly one element, we get a `SIGABRT`
    signal raised by the operating system.



    [1]: https://pypi.org/project/tensorflow/
  affected_package: tensorflow-gpu
  vulnerable_versions:
  - ">= 2.3.0 < 2.3.1"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2020-15199
  cwe:
  - CWE-20
  disclosed_date: 2020-09-25
  created_date: 2020-09-28
  last_modified_date: 2020-09-28
  credit:
  - Aivul Team from Qihoo 360
  references:
  - https://github.com/tensorflow/tensorflow/security/advisories/GHSA-x5cp-9pcf-pp3h
  - https://nvd.nist.gov/vuln/detail/CVE-2020-15199
  source_url: https://snyk.io/vuln/SNYK-PYTHON-TENSORFLOWGPU-1013462
- id: snykio:pypi:tensorflow-gpu:1013463
  title: NULL Pointer Dereference
  description: |
    [tensorflow-gpu][1] is a machine learning framework.

    Affected versions of this package are vulnerable to NULL Pointer
    Dereference. If a user passes an invalid argument to `dlpack.to_dlpack`
    the expected validations will cause variables to bind to `nullptr` while
    setting a `status` variable to the error condition.However, this
    `status` argument is not properly checked which can lead to null
    pointers. This is undefined behaviour and reported as an error if
    compiling with `-fsanitize=null`.



    [1]: https://pypi.org/project/tensorflow/
  affected_package: tensorflow-gpu
  vulnerable_versions:
  - ">= 2.2.0 < 2.2.1"
  - ">= 2.3.0 < 2.3.1"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2020-15191
  cwe:
  - CWE-476
  disclosed_date: 2020-09-25
  created_date: 2020-09-28
  last_modified_date: 2020-09-28
  credit:
  - Aivul Team from Qihoo 360
  references:
  - https://github.com/tensorflow/tensorflow/security/advisories/GHSA-q8qj-fc9q-cphr
  - https://nvd.nist.gov/vuln/detail/CVE-2020-15191
  source_url: https://snyk.io/vuln/SNYK-PYTHON-TENSORFLOWGPU-1013463
- id: snykio:pypi:tensorflow-gpu:1013466
  title: Improper Input Validation
  description: |
    [tensorflow-gpu][1] is a machine learning framework.

    Affected versions of this package are vulnerable to Improper Input
    Validation. The `SparseCountSparseOutput` implementation does not
    validate that the input arguments form a valid sparse tensor. In
    particular, there is no validation that the `indices` tensor has rank 2.
    This tensor must be a matrix because code assumes its elements are
    accessed as elements of a matrix. However, malicious users can pass in
    tensors of different rank, resulting in a `CHECK` assertion failure and
    a crash. This can be used to cause denial of service in serving
    installations, if users are allowed to control the components of the
    input sparse tensor.



    [1]: https://pypi.org/project/tensorflow/
  affected_package: tensorflow-gpu
  vulnerable_versions:
  - ">= 2.3.0 < 2.3.1"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2020-15197
  cwe:
  - CWE-20
  disclosed_date: 2020-09-25
  created_date: 2020-09-28
  last_modified_date: 2020-09-28
  credit:
  - Aivul Team from Qihoo 360
  references:
  - https://github.com/tensorflow/tensorflow/security/advisories/GHSA-qc53-44cj-vfvx
  - https://nvd.nist.gov/vuln/detail/CVE-2020-15197
  source_url: https://snyk.io/vuln/SNYK-PYTHON-TENSORFLOWGPU-1013466
- id: snykio:pypi:tensorflow-gpu:1013495
  title: Externally-Controlled Format String
  description: |
    [tensorflow-gpu][1] is a machine learning framework.

    Affected versions of this package are vulnerable to
    Externally-Controlled Format String. By controlling the `fill` argument
    of `tf.strings.as_string`, a malicious attacker is able to trigger a
    format string vulnerability due to the way the internal format use in a
    `printf` call is constructed: Passing in `n` or `s` can here result in a
    segmentation fault.



    [1]: https://pypi.org/project/tensorflow/
  affected_package: tensorflow-gpu
  vulnerable_versions:
  - "< 1.15.4"
  - ">= 2.0.0 < 2.0.3"
  - ">= 2.1.0 < 2.1.2"
  - ">= 2.2.0 < 2.2.1"
  - ">= 2.3.0 < 2.3.1"
  severity: high
  package_manager: pypi
  cve:
  - CVE-2020-15203
  cwe:
  - CWE-134
  disclosed_date: 2020-09-25
  created_date: 2020-09-28
  last_modified_date: 2020-09-28
  credit:
  - Aivul Team from Qihoo 360
  references:
  - https://github.com/advisories/GHSA-xmq7-7fxm-rr79
  - https://github.com/tensorflow/tensorflow/commit/33be22c65d86256e6826666662e40dbdfe70ee83
  - https://github.com/tensorflow/tensorflow/security/advisories/GHSA-xmq7-7fxm-rr79
  - https://nvd.nist.gov/vuln/detail/CVE-2020-15203
  source_url: https://snyk.io/vuln/SNYK-PYTHON-TENSORFLOWGPU-1013495
- id: snykio:pypi:tensorflow-gpu:1013498
  title: Out-of-bounds Read
  description: |
    [tensorflow-gpu][1] is a machine learning framework.

    Affected versions of this package are vulnerable to Out-of-bounds Read.
    To mimic Python\'s indexing with negative values, TFLite uses
    `ResolveAxis` to convert negative values to positive indices. However,
    the only check that the converted index is now valid is only present in
    debug builds. If the `DCHECK` does not trigger, then code execution
    moves ahead with a negative index. This, in turn, results in accessing
    data out of bounds which results in segfaults and/or data corruption.



    [1]: https://pypi.org/project/tensorflow/
  affected_package: tensorflow-gpu
  vulnerable_versions:
  - ">= 2.0.0 < 2.0.3"
  - ">= 2.1.0 < 2.1.2"
  - ">= 2.2.0 < 2.2.1"
  - ">= 2.3.0 < 2.3.1"
  severity: high
  package_manager: pypi
  cve:
  - CVE-2020-15207
  cwe:
  - CWE-125
  disclosed_date: 2020-09-25
  created_date: 2020-09-28
  last_modified_date: 2020-09-28
  credit:
  - Aivul Team from Qihoo 360
  references:
  - https://github.com/tensorflow/tensorflow/security/advisories/GHSA-q4qf-3fc6-8x34
  - https://nvd.nist.gov/vuln/detail/CVE-2020-15207
  source_url: https://snyk.io/vuln/SNYK-PYTHON-TENSORFLOWGPU-1013498
- id: snykio:pypi:tensorflow-gpu:1013501
  title: Out-of-Bounds
  description: |
    [tensorflow-gpu][1] is a machine learning framework.

    Affected versions of this package are vulnerable to Out-of-Bounds. When
    determining the common dimension size of two tensors, TFLite uses a
    `DCHECK` which is no-op outside of debug compilation modes.

    Since the function always returns the dimension of the first tensor,
    malicious attackers can craft cases where this is larger than that of
    the second tensor. In turn, this would result in reads/writes outside of
    bounds since the interpreter will wrongly assume that there is enough
    data in both tensors. .



    [1]: https://pypi.org/project/tensorflow/
  affected_package: tensorflow-gpu
  vulnerable_versions:
  - "< 1.15.4"
  - ">= 2.0.0 < 2.0.3"
  - ">= 2.1.0 < 2.1.2"
  - ">= 2.2.0 < 2.2.1"
  - ">= 2.3.0 < 2.3.1"
  severity: high
  package_manager: pypi
  cve:
  - CVE-2020-15208
  cwe:
  - CWE-119
  disclosed_date: 2020-09-25
  created_date: 2020-09-28
  last_modified_date: 2020-09-28
  credit:
  - Aivul Team from Qihoo 360
  references:
  - https://github.com/tensorflow/tensorflow/commit/8ee24e7949a203d234489f9da2c5bf45a7d5157d
  - https://github.com/tensorflow/tensorflow/security/advisories/GHSA-mxjj-953w-2c2v
  - https://nvd.nist.gov/vuln/detail/CVE-2020-15208
  source_url: https://snyk.io/vuln/SNYK-PYTHON-TENSORFLOWGPU-1013501
- id: snykio:pypi:tensorflow-gpu:1013535
  title: Heap-based Buffer Overflow
  description: |
    [tensorflow-gpu][1] is a machine learning framework.

    Affected versions of this package are vulnerable to Heap-based Buffer
    Overflow. The `RaggedCountSparseOutput` implementation does not validate
    that the input arguments form a valid ragged tensor. In particular,
    there is no validation that the values in the `splits` tensor generate a
    valid partitioning of the `values` tensor. Hence, the code is prone to
    heap buffer overflow.If `split_values` does not end with a value at
    least `num_values` then the `while` loop condition will trigger a read
    outside of the bounds of `split_values` once `batch_idx` grows too
    large.



    [1]: https://pypi.org/project/tensorflow/
  affected_package: tensorflow-gpu
  vulnerable_versions:
  - ">= 2.3.0 < 2.3.1"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2020-15201
  cwe:
  - CWE-20
  disclosed_date: 2020-09-28
  created_date: 2020-09-28
  last_modified_date: 2020-09-28
  credit:
  - Unknown
  references:
  - https://github.com/tensorflow/tensorflow/commit/3cbb917b4714766030b28eba9fb41bb97ce9ee02
  - https://github.com/tensorflow/tensorflow/releases/tag/v2.3.1
  - https://github.com/tensorflow/tensorflow/security/advisories/GHSA-p5f8-gfw5-33w4
  source_url: https://snyk.io/vuln/SNYK-PYTHON-TENSORFLOWGPU-1013535
- id: snykio:pypi:tensorflow-gpu:1013540
  title: NULL Pointer Dereference
  description: |
    [tensorflow-gpu][1] is a machine learning framework.

    Affected versions of this package are vulnerable to NULL Pointer
    Dereference. In eager mode, TensorFlow does not set the session state.
    Hence, calling `tf.raw_ops.GetSessionHandle` or
    `tf.raw_ops.GetSessionHandleV2` results in a null pointer dereferenceIn
    linked snippet, in eager mode, `ctx->session_state()` returns `nullptr`.
    Since code immediately dereferences this, we get a segmentation fault.



    [1]: https://pypi.org/project/tensorflow/
  affected_package: tensorflow-gpu
  vulnerable_versions:
  - "< 1.15.4"
  - ">= 2.0.0 < 2.0.3"
  - ">= 2.1.0 < 2.1.2"
  - ">= 2.2.0 < 2.2.1"
  - ">= 2.3.0 < 2.3.1"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2020-15204
  cwe:
  - CWE-476
  disclosed_date: 2020-09-28
  created_date: 2020-09-28
  last_modified_date: 2020-09-28
  credit:
  - Unknown
  references:
  - https://github.com/tensorflow/tensorflow/commit/9a133d73ae4b4664d22bd1aa6d654fec13c52ee1
  - https://github.com/tensorflow/tensorflow/releases/tag/v2.3.1
  - https://github.com/tensorflow/tensorflow/security/advisories/GHSA-q8gv-q7wr-9jf8
  source_url: https://snyk.io/vuln/SNYK-PYTHON-TENSORFLOWGPU-1013540
- id: snykio:pypi:tensorflow-gpu:1013544
  title: Heap-based Buffer Overflow
  description: |
    [tensorflow-gpu][1] is a machine learning framework.

    Affected versions of this package are vulnerable to Heap-based Buffer
    Overflow. The `data_splits` argument of `tf.raw_ops.StringNGrams` lacks
    validation. This allows a user to pass values that can cause heap
    overflow errors and even leak contents of memoryIn the linked code
    snippet, all the binary strings after `ee ff` are contents from the
    memory stack.



    [1]: https://pypi.org/project/tensorflow/
  affected_package: tensorflow-gpu
  vulnerable_versions:
  - "< 1.15.4"
  - ">= 2.0.0 < 2.0.3"
  - ">= 2.1.0 < 2.1.2"
  - ">= 2.2.0 < 2.2.1"
  - ">= 2.3.0 < 2.3.1"
  severity: high
  package_manager: pypi
  cve:
  - CVE-2020-15205
  cwe:
  - CWE-122
  disclosed_date: 2020-09-28
  created_date: 2020-09-28
  last_modified_date: 2020-09-28
  credit:
  - Aivul Team from Qihoo 360
  references:
  - https://github.com/tensorflow/tensorflow/commit/0462de5b544ed4731aa2fb23946ac22c01856b80
  - https://github.com/tensorflow/tensorflow/releases/tag/v2.3.1
  - https://github.com/tensorflow/tensorflow/security/advisories/GHSA-g7p5-5759-qv46
  source_url: https://snyk.io/vuln/SNYK-PYTHON-TENSORFLOWGPU-1013544
- id: snykio:pypi:tensorflow-gpu:1013545
  title: Numeric Truncation Error
  description: |
    [tensorflow-gpu][1] is a machine learning framework.

    Affected versions of this package are vulnerable to Numeric Truncation
    Error. The `Shard` API in TensorFlow expects the last argument to be a
    function taking two `int64` (i.e., `long long`) arguments. However,
    there are several places in TensorFlow where a lambda taking `int` or
    `int32` arguments is being used.In these cases, if the amount of work to
    be parallelized is large enough, integer truncation occurs. Depending on
    how the two arguments of the lambda are used, this can result in
    segfaults, read/write outside of heap allocated arrays, stack overflows,
    or data corruption.



    [1]: https://pypi.org/project/tensorflow/
  affected_package: tensorflow-gpu
  vulnerable_versions:
  - "< 1.15.4"
  - ">= 2.0.0 < 2.0.3"
  - ">= 2.1.0 < 2.1.2"
  - ">= 2.2.0 < 2.2.1"
  - ">= 2.3.0 < 2.3.1"
  severity: high
  package_manager: pypi
  cve:
  - CVE-2020-15202
  cwe:
  - CWE-197
  disclosed_date: 2020-09-28
  created_date: 2020-09-28
  last_modified_date: 2020-09-28
  credit:
  - Aivul Team from Qihoo 360
  references:
  - https://github.com/tensorflow/tensorflow/commit/27b417360cbd671ef55915e4bb6bb06af8b8a832
  - https://github.com/tensorflow/tensorflow/commit/ca8c013b5e97b1373b3bb1c97ea655e69f31a575
  - https://github.com/tensorflow/tensorflow/releases/tag/v2.3.1
  - https://github.com/tensorflow/tensorflow/security/advisories/GHSA-h6fg-mjxg-hqq4
  source_url: https://snyk.io/vuln/SNYK-PYTHON-TENSORFLOWGPU-1013545
- id: snykio:pypi:tensorflow-gpu:1013551
  title: Uninitialized Memory Exposure
  description: |
    [tensorflow-gpu][1] is a machine learning framework.

    Affected versions of this package are vulnerable to Uninitialized Memory
    Exposure. If a user passes a list of strings to `dlpack.to_dlpack` there
    is a memory leak following an expected validation failure.The issue
    occurs because the `status` argument during validation failures is not
    properly checked.Since each of the above methods can return an error
    status, the `status` value must be checked before continuing.



    [1]: https://pypi.org/project/tensorflow/
  affected_package: tensorflow-gpu
  vulnerable_versions:
  - ">= 2.2.0 < 2.2.1"
  - ">= 2.3.0 < 2.3.1"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2020-15192
  cwe:
  - CWE-201
  disclosed_date: 2020-09-28
  created_date: 2020-09-29
  last_modified_date: 2020-09-29
  credit:
  - Unknown
  references:
  - https://github.com/tensorflow/tensorflow/commit/22e07fb204386768e5bcbea563641ea11f96ceb8
  - https://github.com/tensorflow/tensorflow/releases/tag/v2.3.1
  - https://github.com/tensorflow/tensorflow/security/advisories/GHSA-8fxw-76px-3rxv
  source_url: https://snyk.io/vuln/SNYK-PYTHON-TENSORFLOWGPU-1013551
- id: snykio:pypi:tensorflow-gpu:1013560
  title: Uninitialized Memory Exposure
  description: |
    [tensorflow-gpu][1] is a machine learning framework.

    Affected versions of this package are vulnerable to Uninitialized Memory
    Exposure. The implementation of `dlpack.to_dlpack` can be made to use
    uninitialized memory resulting in further memory corruption. This is
    because the pybind11 glue code assumes that the argument is a tensor.
    However, there is nothing stopping users from passing in a Python object
    instead of a tensor.The uninitialized memory address is due to a
    `reinterpret_cast`Since the `PyObject` is a Python object, not a
    TensorFlow Tensor, the cast to `EagerTensor` fails.



    [1]: https://pypi.org/project/tensorflow/
  affected_package: tensorflow-gpu
  vulnerable_versions:
  - ">= 2.2.0 < 2.2.1"
  - ">= 2.3.0 < 2.3.1"
  severity: high
  package_manager: pypi
  cve:
  - CVE-2020-15193
  cwe:
  - CWE-201
  disclosed_date: 2020-09-28
  created_date: 2020-09-29
  last_modified_date: 2020-09-29
  credit:
  - Aivul Team from Qihoo 360
  references:
  - https://github.com/tensorflow/tensorflow/commit/22e07fb204386768e5bcbea563641ea11f96ceb8
  - https://github.com/tensorflow/tensorflow/releases/tag/v2.3.1
  - https://github.com/tensorflow/tensorflow/security/advisories/GHSA-rjjg-hgv6-h69v
  source_url: https://snyk.io/vuln/SNYK-PYTHON-TENSORFLOWGPU-1013560
- id: snykio:pypi:tensorflow-gpu:1013603
  title: Heap-based Buffer Overflow
  description: |
    [tensorflow-gpu][1] is a machine learning framework.

    Affected versions of this package are vulnerable to Heap-based Buffer
    Overflow. The implementation of `SparseFillEmptyRowsGrad` uses a double
    indexing pattern.It is possible for `reverse_index_map(i)` to be an
    index outside of bounds of `grad_values`, thus resulting in a heap
    buffer overflow.



    [1]: https://pypi.org/project/tensorflow/
  affected_package: tensorflow-gpu
  vulnerable_versions:
  - "< 1.15.4"
  - ">= 2.0.0 < 2.0.3"
  - ">= 2.1.0 < 2.1.2"
  - ">= 2.2.0 < 2.2.1"
  - ">= 2.3.0 < 2.3.1"
  severity: high
  package_manager: pypi
  cve:
  - CVE-2020-15195
  cwe:
  - CWE-119
  disclosed_date: 2020-09-28
  created_date: 2020-09-29
  last_modified_date: 2020-09-29
  credit:
  - Unknown
  references:
  - https://github.com/tensorflow/tensorflow/commit/390611e0d45c5793c7066110af37c8514e6a6c54
  - https://github.com/tensorflow/tensorflow/releases/tag/v2.3.1
  - https://github.com/tensorflow/tensorflow/security/advisories/GHSA-63xm-rx5p-xvqr
  source_url: https://snyk.io/vuln/SNYK-PYTHON-TENSORFLOWGPU-1013603
- id: snykio:pypi:tensorflow-gpu:1013608
  title: NULL Pointer Dereference
  description: |
    [tensorflow-gpu][1] is a machine learning framework.

    Affected versions of this package are vulnerable to NULL Pointer
    Dereference. If a user passes an invalid argument to `dlpack.to_dlpack`
    the expected validations will cause variables to bind to `nullptr` while
    setting a `status` variable to the error condition.However, this
    `status` argument is not properly checked.Hence, code following these
    methods will bind references to null pointers.This is undefined
    behaviour and reported as an error if compiling with `-fsanitize=null`.



    [1]: https://pypi.org/project/tensorflow/
  affected_package: tensorflow-gpu
  vulnerable_versions:
  - ">= 2.2.0 < 2.2.1"
  - ">= 2.3.0 < 2.3.1"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2020-15191
  cwe:
  - CWE-476
  disclosed_date: 2020-09-28
  created_date: 2020-09-29
  last_modified_date: 2020-09-29
  credit:
  - Unknown
  references:
  - https://github.com/tensorflow/tensorflow/commit/22e07fb204386768e5bcbea563641ea11f96ceb8
  - https://github.com/tensorflow/tensorflow/releases/tag/v2.3.1
  - https://github.com/tensorflow/tensorflow/security/advisories/GHSA-q8qj-fc9q-cphr
  source_url: https://snyk.io/vuln/SNYK-PYTHON-TENSORFLOWGPU-1013608
- id: snykio:pypi:tensorflow-gpu:1013611
  title: Heap-based Buffer Overflow
  description: |
    [tensorflow-gpu][1] is a machine learning framework.

    Affected versions of this package are vulnerable to Heap-based Buffer
    Overflow. The `SparseCountSparseOutput` and `RaggedCountSparseOutput`
    implementations don\'t validate that the `weights` tensor has the same
    shape as the data. The check exists for `DenseCountSparseOutput`, where
    both tensors are fully specified.In the sparse and ragged count weights
    are still accessed in parallel with the data.But, since there is no
    validation, a user passing fewer weights than the values for the tensors
    can generate a read from outside the bounds of the heap buffer allocated
    for the weights.



    [1]: https://pypi.org/project/tensorflow/
  affected_package: tensorflow-gpu
  vulnerable_versions:
  - ">= 2.3.0 < 2.3.1"
  severity: high
  package_manager: pypi
  cve:
  - CVE-2020-15196
  cwe:
  - CWE-119
  disclosed_date: 2020-09-28
  created_date: 2020-09-29
  last_modified_date: 2020-09-29
  credit:
  - Unknown
  references:
  - https://github.com/tensorflow/tensorflow/commit/3cbb917b4714766030b28eba9fb41bb97ce9ee02
  - https://github.com/tensorflow/tensorflow/releases/tag/v2.3.1
  - https://github.com/tensorflow/tensorflow/security/advisories/GHSA-pg59-2f92-5cph
  source_url: https://snyk.io/vuln/SNYK-PYTHON-TENSORFLOWGPU-1013611
- id: snykio:pypi:tensorflow-gpu:1013614
  title: Heap-based Buffer Overflow
  description: |
    [tensorflow-gpu][1] is a machine learning framework.

    Affected versions of this package are vulnerable to Heap-based Buffer
    Overflow. The `SparseCountSparseOutput` implementation does not validate
    that the input arguments form a valid sparse tensor. In particular,
    there is no validation that the `indices` tensor has the same shape as
    the `values` one. The values in these tensors are always accessed in
    parallel.Thus, a shape mismatch can result in accesses outside the
    bounds of heap allocated buffers.



    [1]: https://pypi.org/project/tensorflow/
  affected_package: tensorflow-gpu
  vulnerable_versions:
  - ">= 2.3.0 < 2.3.1"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2020-15198
  cwe:
  - CWE-122
  disclosed_date: 2020-09-28
  created_date: 2020-09-29
  last_modified_date: 2020-09-29
  credit:
  - Unknown
  references:
  - https://github.com/tensorflow/tensorflow/commit/3cbb917b4714766030b28eba9fb41bb97ce9ee02
  - https://github.com/tensorflow/tensorflow/releases/tag/v2.3.1
  - https://github.com/tensorflow/tensorflow/security/advisories/GHSA-jc87-6vpp-7ff3
  source_url: https://snyk.io/vuln/SNYK-PYTHON-TENSORFLOWGPU-1013614
- id: snykio:pypi:tensorflow-gpu:1013615
  title: Heap-based Buffer Overflow
  description: |
    [tensorflow-gpu][1] is a machine learning framework.

    Affected versions of this package are vulnerable to Heap-based Buffer
    Overflow. The `RaggedCountSparseOutput` implementation does not validate
    that the input arguments form a valid ragged tensor. In particular,
    there is no validation that the values in the `splits` tensor generate a
    valid partitioning of the `values` tensor. A `BatchedMap` is equivalent
    to a vector where each element is a hashmap. However, if the first
    element of `splits_values` is not 0, `batch_idx` will never be 1, hence
    there will be no hashmap at index 0 in `per_batch_counts`. Trying to
    access that in the user code results in a segmentation fault.



    [1]: https://pypi.org/project/tensorflow/
  affected_package: tensorflow-gpu
  vulnerable_versions:
  - ">= 2.3.0 < 2.3.1"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2020-15200
  cwe:
  - CWE-122
  disclosed_date: 2020-09-25
  created_date: 2020-09-29
  last_modified_date: 2020-09-29
  credit:
  - Unknown
  references:
  - https://github.com/tensorflow/tensorflow/security/advisories/GHSA-x7rp-74x2-mjf3
  - https://nvd.nist.gov/vuln/detail/CVE-2020-15200
  source_url: https://snyk.io/vuln/SNYK-PYTHON-TENSORFLOWGPU-1013615
- id: snykio:pypi:tensorflow-gpu:1013620
  title: Denial of Service (DoS)
  description: |
    [tensorflow-gpu][1] is a machine learning framework.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS). Changing the TensorFlow\'s `SavedModel` protocol buffer and
    altering the name of required keys results in segfaults and data
    corruption while loading the model. This can cause a denial of service
    in products using `tensorflow-serving` or other inference-as-a-service
    installments. However, this was not enough, as #41097 reports a
    different failure mode.



    [1]: https://pypi.org/project/tensorflow/
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package][1]



    [1]: https://snyk.io/vuln/npm:ws:20171108
  affected_package: tensorflow-gpu
  vulnerable_versions:
  - "< 1.15.4"
  - ">= 2.0.0 < 2.0.3"
  - ">= 2.1.0 < 2.1.2"
  - ">= 2.2.0 < 2.2.1"
  - ">= 2.3.0 < 2.3.1"
  severity: high
  package_manager: pypi
  cve:
  - CVE-2020-15206
  cwe:
  - CWE-400
  disclosed_date: 2020-09-25
  created_date: 2020-09-29
  last_modified_date: 2020-09-29
  credit:
  - CUHK
  - Shuaike Dong
  references:
  - https://github.com/advisories/GHSA-w5gh-2wr2-pm6g
  - https://github.com/tensorflow/tensorflow/security/advisories/GHSA-w5gh-2wr2-pm6g
  - https://nvd.nist.gov/vuln/detail/CVE-2020-15206
  source_url: https://snyk.io/vuln/SNYK-PYTHON-TENSORFLOWGPU-1013620
- id: snykio:pypi:tensorflow-gpu:1020815
  title: Denial of Service (DoS)
  description: |
    [tensorflow-gpu][1] is a machine learning framework.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS). When the `boxes` argument of `tf.image.crop_and_resize` has a
    very large value, the CPU kernel implementation receives it as a C++
    `nan` floating point value. Attempting to operate on this is undefined
    behavior which later produces a segmentation fault.



    [1]: https://pypi.org/project/tensorflow/
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package][1]



    [1]: https://snyk.io/vuln/npm:ws:20171108
  affected_package: tensorflow-gpu
  vulnerable_versions:
  - "< 2.4.0"
  severity: high
  package_manager: pypi
  cve:
  - CVE-2020-15266
  cwe:
  - CWE-400
  disclosed_date: 2020-10-22
  created_date: 2020-10-23
  last_modified_date: 2020-10-23
  credit:
  - Unknown
  references:
  - https://github.com/tensorflow/tensorflow/issues/42129
  - https://github.com/tensorflow/tensorflow/pull/42143/commits/3ade2efec2e90c6237de32a19680caaa3ebc2845
  source_url: https://snyk.io/vuln/SNYK-PYTHON-TENSORFLOWGPU-1020815
- id: snykio:pypi:tensorflow-gpu:1020817
  title: Denial of Service (DoS)
  description: |
    [tensorflow-gpu][1] is a machine learning framework.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS). An attacker can pass an invalid `axis` value to
    `tf.quantization.quantize_and_dequantize`. This results in accessing a
    dimension outside the rank of the input tensor in the C++ kernel
    implementation. However, dim\_size only does a DCHECK to validate the
    argument and then uses it to access the corresponding element of an
    array. Since in normal builds, `DCHECK`-like macros are no-ops, this
    results in segfault and access out of bounds of the array.



    [1]: https://pypi.org/project/tensorflow/
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package][1]



    [1]: https://snyk.io/vuln/npm:ws:20171108
  affected_package: tensorflow-gpu
  vulnerable_versions:
  - "< 2.4.0"
  severity: high
  package_manager: pypi
  cve:
  - CVE-2020-15265
  cwe:
  - CWE-400
  disclosed_date: 2020-10-22
  created_date: 2020-10-23
  last_modified_date: 2020-10-23
  credit:
  - Unknown
  references:
  - https://github.com/tensorflow/tensorflow/commit/eccb7ec454e6617738554a255d77f08e60ee0808
  - https://github.com/tensorflow/tensorflow/issues/42105
  source_url: https://snyk.io/vuln/SNYK-PYTHON-TENSORFLOWGPU-1020817
- id: snykio:pypi:tensorflow-gpu:1020820
  title: Denial of Service (DoS)
  description: |
    [tensorflow-gpu][1] is a machine learning framework.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS). An attacker can pass an invalid `axis` value to
    `tf.quantization.quantize_and_dequantize`. This results in accessing a
    dimension outside the rank of the input tensor in the C++ kernel
    implementation. However, dim\_size only does a DCHECK to validate the
    argument and then uses it to access the corresponding element of an
    array. Since in normal builds, `DCHECK`-like macros are no-ops, this
    results in segfault and access out of bounds of the array.



    [1]: https://pypi.org/project/tensorflow/
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package][1]



    [1]: https://snyk.io/vuln/npm:ws:20171108
  affected_package: tensorflow-gpu
  vulnerable_versions:
  - "< 2.4.0"
  severity: high
  package_manager: pypi
  cve:
  - CVE-2020-15265
  cwe:
  - CWE-400
  disclosed_date: 2020-10-22
  created_date: 2020-10-23
  last_modified_date: 2020-10-23
  credit:
  - Unknown
  references:
  - https://github.com/tensorflow/tensorflow/commit/eccb7ec454e6617738554a255d77f08e60ee0808
  - https://github.com/tensorflow/tensorflow/issues/42105
  source_url: https://snyk.io/vuln/SNYK-PYTHON-TENSORFLOWGPU-1020820
- id: snykio:pypi:tensorflow-gpu:1050384
  title: Improper Input Validation
  description: |
    [tensorflow-gpu][1] is a machine learning framework.

    Affected versions of this package are vulnerable to Improper Input
    Validation. Under certain cases, a saved model can trigger use of
    uninitialized values during code execution. This is caused by having
    tensor buffers be filled with the default value of the type but
    forgetting to default initialize the quantized floating point types in
    Eigen.



    [1]: https://pypi.org/project/tensorflow/
  affected_package: tensorflow-gpu
  vulnerable_versions:
  - ">= 0 < 2.4.0"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2020-26266
  cwe:
  - CWE-20
  disclosed_date: 2020-12-10
  created_date: 2020-12-11
  last_modified_date: 2020-12-11
  credit:
  - Unknown
  references:
  - https://nvd.nist.gov/vuln/detail/CVE-2020-26266
  source_url: https://snyk.io/vuln/SNYK-PYTHON-TENSORFLOWGPU-1050384
- id: snykio:pypi:tensorflow-gpu:1050393
  title: Improper Input Validation
  description: |
    [tensorflow-gpu][1] is a machine learning framework.

    Affected versions of this package are vulnerable to Improper Input
    Validation. The `tf.raw_ops.ImmutableConst` operation returns a constant
    tensor created from a memory mapped file which is assumed immutable.
    However, if the type of the tensor is not an integral type, the
    operation crashes the Python interpreter as it tries to write to the
    memory area: If the file is too small, TensorFlow properly returns an
    error as the memory area has fewer bytes than what is needed for the
    tensor it creates. However, as soon as there are enough bytes, the above
    snippet causes a segmentation fault.



    [1]: https://pypi.org/project/tensorflow/
  affected_package: tensorflow-gpu
  vulnerable_versions:
  - "< 2.4.0rc0"
  severity: low
  package_manager: pypi
  cve:
  - CVE-2020-26268
  cwe:
  - CWE-20
  disclosed_date: 2020-12-10
  created_date: 2020-12-11
  last_modified_date: 2020-12-11
  credit:
  - Aivul Team from Qihoo 360
  references:
  - https://nvd.nist.gov/vuln/detail/CVE-2020-26268
  source_url: https://snyk.io/vuln/SNYK-PYTHON-TENSORFLOWGPU-1050393
- id: snykio:pypi:tensorflow-gpu:1050402
  title: Improper Input Validation
  description: |
    [tensorflow-gpu][1] is a machine learning framework.

    Affected versions of this package are vulnerable to Improper Input
    Validation. The `tf.raw_ops.DataFormatVecPermute` API does not validate
    the `src_format` and `dst_format` attributes.



    [1]: https://pypi.org/project/tensorflow/
  affected_package: tensorflow-gpu
  vulnerable_versions:
  - ">= 0"
  severity: low
  package_manager: pypi
  cve:
  - CVE-2020-26267
  cwe:
  - CWE-20
  disclosed_date: 2020-12-10
  created_date: 2020-12-11
  last_modified_date: 2020-12-11
  credit:
  - Unknown
  references:
  - https://github.com/tensorflow/tensorflow/commit/ebc70b7a592420d3d2f359e4b1694c236b82c7ae
  - https://nvd.nist.gov/vuln/detail/CVE-2020-26267
  source_url: https://snyk.io/vuln/SNYK-PYTHON-TENSORFLOWGPU-1050402
- id: snykio:pypi:tensorflow-gpu:1050407
  title: Denial of Service (DoS)
  description: |
    [tensorflow-gpu][1] is a machine learning framework.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS). Running an LSTM/GRU model where the LSTM/GRU layer receives an
    input with zero-length results in a `CHECK` failure when using the CUDA
    backend. This can result in a query-of-death vulnerability, via denial
    of service, if users can control the input to the layer.



    [1]: https://pypi.org/project/tensorflow/
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package][1]



    [1]: https://snyk.io/vuln/npm:ws:20171108
  affected_package: tensorflow-gpu
  vulnerable_versions:
  - ">= 0"
  severity: low
  package_manager: pypi
  cve:
  - CVE-2020-26270
  cwe:
  - CWE-400
  disclosed_date: 2020-12-10
  created_date: 2020-12-11
  last_modified_date: 2020-12-11
  credit:
  - Unknown
  references:
  - https://nvd.nist.gov/vuln/detail/CVE-2020-26270
  source_url: https://snyk.io/vuln/SNYK-PYTHON-TENSORFLOWGPU-1050407
- id: snykio:pypi:tensorflow-gpu:1050411
  title: Uninitialized Memory Exposure
  description: |
    [tensorflow-gpu][1] is a machine learning framework.

    Affected versions of this package are vulnerable to Uninitialized Memory
    Exposure. Under certain cases, loading a saved model can result in
    accessing uninitialized memory while building the computation graph. The
    `MakeEdge` function creates an edge between one output tensor of the
    `src` node (given by `output_index`) and the input slot of the `dst`
    node (given by `input_index`). This is only possible if the types of the
    tensors on both sides coincide, so the function begins by obtaining the
    corresponding `DataType` values and comparing these for equality.
    However, there is no check that the indices point to inside of the
    arrays they index into. Thus, this can result in accessing data out of
    bounds of the corresponding heap allocated arrays. In most scenarios,
    this can manifest as unitialized data access, but if the index points
    far away from the boundaries of the arrays this can be used to leak
    addresses from the library.



    [1]: https://pypi.org/project/tensorflow/
  affected_package: tensorflow-gpu
  vulnerable_versions:
  - ">= 0"
  severity: high
  package_manager: pypi
  cve:
  - CVE-2020-26271
  cwe:
  - CWE-201
  disclosed_date: 2020-12-10
  created_date: 2020-12-11
  last_modified_date: 2020-12-11
  credit:
  - Unknown
  references:
  - https://nvd.nist.gov/vuln/detail/CVE-2020-26271
  source_url: https://snyk.io/vuln/SNYK-PYTHON-TENSORFLOWGPU-1050411
- id: snykio:pypi:tensorflow-gpu:1050421
  title: Out-of-bounds Read
  description: |
    [tensorflow-gpu][1] is a machine learning framework.

    Affected versions of this package are vulnerable to Out-of-bounds Read.
    In TensorFlow release candidate versions `2.4.0rc*`, the general
    implementation for matching filesystem paths to globbing pattern is
    vulnerable to an access out of bounds of the array holding the
    directories.



    [1]: https://pypi.org/project/tensorflow/
  affected_package: tensorflow-gpu
  vulnerable_versions:
  - ">= 2.4.0rc0 < 2.4.0"
  severity: high
  package_manager: pypi
  cve:
  - CVE-2020-26269
  cwe:
  - CWE-125
  disclosed_date: 2020-12-11
  created_date: 2020-12-11
  last_modified_date: 2020-12-11
  credit:
  - Aivul Team from Qihoo 360
  references:
  - https://github.com/tensorflow/tensorflow/commit/8b5b9dc96666a3a5d27fad7179ff215e3b74b67c
  source_url: https://snyk.io/vuln/SNYK-PYTHON-TENSORFLOWGPU-1050421
- id: snykio:pypi:tensorflow-gpu:543631
  title: Denial of Service (DoS)
  description: "[tensorflow-gpu][1] is a machine learning framework.\n\nAffected versions
    of this package are vulnerable to Denial of Service\n(DoS). Converting a string
    (from Python) to a `tf.float16` value results\nin a segmentation fault in eager
    mode as the format checks for this use\ncase are only in the graph mode. A malicious
    attacker can send a data\npoint which contains a string instead of a `tf.float16`
    value. Similar\neffects can be obtained by manipulating saved models and checkpoints\nwhereby
    replacing a scalar `tf.float16` value with a scalar string will\ntrigger this
    issue due to automatic conversions.\n\n\n\n[1]: https://pypi.org/project/tensorflow/\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n{: .language-js}\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n{: .language-bash}\n\nThe entire
    process of testing it against a 30 characters long string\ntakes around ~52ms.
    But when given an invalid string, it takes nearly\ntwo seconds to complete the
    test, over ten times as long as it took to\ntest a valid string. The dramatic
    difference is due to the way regular\nexpressions get evaluated.\n\nMost Regex
    engines will work very similarly (with minor differences).\nThe engine will match
    the first possible way to accept the current\ncharacter and proceed to the next
    one. If it then fails to match the\nnext one, it will backtrack and see if there
    was another way to digest\nthe previous character. If it goes too far down the
    rabbit hole only to\nfind out the string doesn’t match in the end, and if many
    characters\nhave multiple valid regex paths, the number of backtracking steps
    can\nbecome very large, resulting in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s
    look at how our expression runs into this problem, using a\nshorter string: \\\"ACCCX\\\".
    While it seems fairly straightforward, there\nare still four different ways that
    the engine could match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.
    \ C+C+C.\n\nThe engine has to try each of those combinations to see if any of
    them\npotentially match against the expression. When you combine that with the\nother
    steps the engine must take, we can use [RegEx 101 debugger][1] to\nsee the engine
    has to take a total of 38 steps before it can determine\nthe string doesn\\'t
    match.\n\nFrom there, the number of steps the engine must use to validate a string\njust
    continues to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n|
    ACCCX | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX
    | 14 | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to
    take over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n"
  affected_package: tensorflow-gpu
  vulnerable_versions:
  - ">= 1.12.0 < 1.15.2"
  - ">= 2.0.0a0 < 2.0.1"
  severity: high
  package_manager: pypi
  cve:
  - CVE-2020-5215
  cwe:
  - CWE-400
  disclosed_date: 2020-01-28
  created_date: 2020-01-29
  last_modified_date: 2020-01-29
  credit:
  - Unknown
  references:
  - https://github.com/tensorflow/tensorflow/commit/5ac1b9e24ff6afc465756edf845d2e9660bd34bf
  - https://github.com/tensorflow/tensorflow/releases/tag/v1.15.2
  - https://github.com/tensorflow/tensorflow/releases/tag/v2.0.1
  - https://github.com/tensorflow/tensorflow/security/advisories/GHSA-977j-xj7q-2jr9
  source_url: https://snyk.io/vuln/SNYK-PYTHON-TENSORFLOWGPU-543631
