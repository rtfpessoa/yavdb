---
- id: ossindex:pypi:urllib3:8402343062
  title: "[CVE-2016-9015] Versions 1.17 and 1.18 of the Python urllib3 library suffer
    from a vulnerability..."
  description: Versions 1.17 and 1.18 of the Python urllib3 library suffer from a
    vulnerability that can cause them, in certain configurations, to not correctly
    validate TLS certificates. This places users of the library with those configurations
    at risk of man-in-the-middle and information leakage attacks. This vulnerability
    affects users using versions 1.17 and 1.18 of the urllib3 library, who are using
    the optional PyOpenSSL support for TLS instead of the regular standard library
    TLS backend, and who are using OpenSSL 1.1.0 via PyOpenSSL. This is an extremely
    uncommon configuration, so the security impact of this vulnerability is low.
  affected_package: urllib3
  vulnerable_versions:
  - '1.17'
  - '1.18'
  package_manager: pypi
  cve:
  - CVE-2016-9015
  disclosed_date: 2017-01-11
  created_date: 2017-01-11
  last_modified_date: 2017-01-13
  credit:
  - OSSIndex
  references:
  - http://www.openwall.com/lists/oss-security/2016/10/27/6
  - http://www.securityfocus.com/bid/93941
  source_url: https://ossindex.net/resource/package/8401376142/vulnerabilities
- id: snykio:pypi:urllib3:1014645
  title: HTTP Header Injection
  description: |
    [urllib3][1] is a HTTP library with thread-safe connection pooling, file
    post, and more.

    Affected versions of this package are vulnerable to HTTP Header
    Injection. The \'method\' parameter is not filtered to prevent the
    injection from altering the entire request.

    For example:

        >>> conn = http.client.HTTPConnection("localhost", 80)
        >>> conn.request(method="GET / HTTP/1.1\r\nHost: abc\r\nRemainder:", url="/index.html")

    This will result in the following request being generated:

        GET / HTTP/1.1
        Host: abc
        Remainder: /index.html HTTP/1.1
        Host: localhost
        Accept-Encoding: identity



    [1]: https://pypi.org/project/urllib3/
  affected_package: urllib3
  vulnerable_versions:
  - "< 1.25.9"
  severity: high
  package_manager: pypi
  cve:
  - CVE-2020-26137
  cwe:
  - CWE-644
  disclosed_date: 2020-10-01
  created_date: 2020-10-01
  last_modified_date: 2020-10-01
  credit:
  - maxpl0it
  references:
  - https://bugs.python.org/issue39603
  - https://github.com/urllib3/urllib3/commit/1dd69c5c5982fae7c87a620d487c2ebf7a6b436b
  - https://github.com/urllib3/urllib3/pull/1800
  source_url: https://snyk.io/vuln/SNYK-PYTHON-URLLIB3-1014645
- id: snykio:pypi:urllib3:174323
  title: CRLF injection
  description: |
    [urllib3][1] is a HTTP library with thread-safe connection pooling, file
    post, and more.

    Affected versions of this package are vulnerable to CRLF injection.
    Attacker who has the control of the requesting address parameter, could
    manipulate an HTTP header and attack an internal service.



    [1]: https://pypi.org/project/urllib3/
  affected_package: urllib3
  vulnerable_versions:
  - "< 1.24.3"
  severity: high
  package_manager: pypi
  cve:
  - CVE-2019-11236
  cwe:
  - CWE-93
  disclosed_date: 2019-04-15
  created_date: 2019-04-18
  last_modified_date: 2019-04-18
  credit:
  - ragdoll
  references:
  - https://bugs.python.org/issue36276
  - https://github.com/urllib3/urllib3/commit/5d523706c7b03f947dc50a7e783758a2bfff0532
  - https://github.com/urllib3/urllib3/issues/1553
  - https://github.com/urllib3/urllib3/pull/1487
  - https://github.com/urllib3/urllib3/pull/1531
  source_url: https://snyk.io/vuln/SNYK-PYTHON-URLLIB3-174323
- id: snykio:pypi:urllib3:174464
  title: Improper Certificate Validation
  description: |
    [urllib3][1] is a HTTP library with thread-safe connection pooling, file
    post, and more.

    Affected versions of this package are vulnerable to Improper Certificate
    Validation. It mishandles certain cases where the desired set of CA
    certificates is different from the OS store of CA certificates. This can
    result in SSL connections succeeding in situations where it should have
    failed.



    [1]: https://pypi.org/project/urllib3/
  affected_package: urllib3
  vulnerable_versions:
  - "< 1.24.2"
  severity: high
  package_manager: pypi
  cve:
  - CVE-2019-11324
  cwe:
  - CWE-295
  disclosed_date: 2019-04-18
  created_date: 2019-04-18
  last_modified_date: 2019-04-18
  credit:
  - Unknown
  references:
  - https://github.com/urllib3/urllib3/compare/a6ec68a...1efadf4
  source_url: https://snyk.io/vuln/SNYK-PYTHON-URLLIB3-174464
- id: snykio:pypi:urllib3:40441
  title: Improper Certificate Validation
  description: |
    [`urllib3`][1] is a HTTP library with thread-safe connection pooling,
    file post, and more.

    Affected versions of this package fail to validate TSL certificates in
    certain configurations. This places users of the library with those
    configurations at risk of man-in-the-middle and information leakage
    attacks. This vulnerability affects users using versions 1.17 and 1.18
    of the urllib3 library, who are using the optional PyOpenSSL support for
    TLS instead of the regular standard library TLS backend, and who are
    using OpenSSL 1.1.0 via PyOpenSSL. This is an extremely uncommon
    configuration, so the security impact of this vulnerability is low.



    [1]: https://pypi.python.org/pypi/urllib3
  affected_package: urllib3
  vulnerable_versions:
  - ">= 1.17 < 1.18.1"
  severity: low
  package_manager: pypi
  cve:
  - CVE-2016-9015
  cwe:
  - CWE-295
  disclosed_date: 2016-10-27
  created_date: 2016-10-27
  last_modified_date: 2016-10-27
  credit:
  - Cory Benfield
  references:
  - https://github.com/shazow/urllib3/commit/5e36a7096455ea94fb28b623d64e1f1bad97f822
  - https://github.com/shazow/urllib3/pull/1010
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-9015
  source_url: https://snyk.io/vuln/SNYK-PYTHON-URLLIB3-40441
- id: snykio:pypi:urllib3:559452
  title: Denial of Service (DoS)
  description: "[urllib3][1] is a HTTP library with thread-safe connection pooling,
    file\npost, and more.\n\nAffected versions of this package are vulnerable to Denial
    of Service\n(DoS). The `_encode_invalid_chars` function in `util/url.py` in the\nurllib3
    allows a denial of service (CPU consumption) because of an\ninefficient algorithm.
    The percent\\_encodings array contains all matches\nof percent encodings. It is
    not deduplicated. For a URL of length N, the\nsize of percent\\_encodings may
    be up to O(N). The next step (normalize\nexisting percent-encoded bytes) also
    takes up to O(N) for each step, so\nthe total time is O(N^2). If percent\\_encodings
    were deduplicated, the\ntime to compute \\_encode\\_invalid\\_chars would be O(kN),
    where k is at\nmost 484 ((10+6\\*2)^2).\n\n\n\n[1]: https://pypi.org/project/urllib3/\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n{: .language-js}\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n{: .language-bash}\n\nThe entire
    process of testing it against a 30 characters long string\ntakes around ~52ms.
    But when given an invalid string, it takes nearly\ntwo seconds to complete the
    test, over ten times as long as it took to\ntest a valid string. The dramatic
    difference is due to the way regular\nexpressions get evaluated.\n\nMost Regex
    engines will work very similarly (with minor differences).\nThe engine will match
    the first possible way to accept the current\ncharacter and proceed to the next
    one. If it then fails to match the\nnext one, it will backtrack and see if there
    was another way to digest\nthe previous character. If it goes too far down the
    rabbit hole only to\nfind out the string doesn’t match in the end, and if many
    characters\nhave multiple valid regex paths, the number of backtracking steps
    can\nbecome very large, resulting in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s
    look at how our expression runs into this problem, using a\nshorter string: \\\"ACCCX\\\".
    While it seems fairly straightforward, there\nare still four different ways that
    the engine could match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.
    \ C+C+C.\n\nThe engine has to try each of those combinations to see if any of
    them\npotentially match against the expression. When you combine that with the\nother
    steps the engine must take, we can use [RegEx 101 debugger][1] to\nsee the engine
    has to take a total of 38 steps before it can determine\nthe string doesn\\'t
    match.\n\nFrom there, the number of steps the engine must use to validate a string\njust
    continues to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n|
    ACCCX | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX
    | 14 | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to
    take over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n"
  affected_package: urllib3
  vulnerable_versions:
  - ">= 1.25.2 < 1.25.8"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2020-7212
  cwe:
  - CWE-400
  disclosed_date: 2020-03-06
  created_date: 2020-03-06
  last_modified_date: 2020-03-06
  credit:
  - Unknown
  references:
  - https://github.com/urllib3/urllib3/commit/a2697e7c6b275f05879b60f593c5854a816489f0
  - https://github.com/urllib3/urllib3/commit/a74c9cfbaed9f811e7563cfc3dce894928e0221a
  source_url: https://snyk.io/vuln/SNYK-PYTHON-URLLIB3-559452
- id: snykio:pypi:urllib3:72681
  title: Authentication Bypass
  description: |
    [urllib3][1] is a HTTP library with thread-safe connection pooling, file
    post, and more.

    Affected versions of this package are vulnerable to Authentication
    Bypass. It did remove the Authorization HTTP header when following a
    cross-origin redirect. This can allow for credentials in the
    Authorization header to be exposed to unintended hosts or transmitted in
    cleartext.



    [1]: https://pypi.org/project/urllib3/
  affected_package: urllib3
  vulnerable_versions:
  - "< 1.23"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2018-20060
  cwe:
  - CWE-288
  disclosed_date: 2018-12-11
  created_date: 2018-12-12
  last_modified_date: 2018-12-12
  credit:
  - Unknown
  references:
  - https://bugzilla.redhat.com/show_bug.cgi?id=1649153
  - https://github.com/urllib3/urllib3/issues/1316
  - https://github.com/urllib3/urllib3/pull/1346
  source_url: https://snyk.io/vuln/SNYK-PYTHON-URLLIB3-72681
