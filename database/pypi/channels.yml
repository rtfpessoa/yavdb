---
- id: snykio:pypi:channels:1055010
  title: Information Exposure
  description: |
    [channels][1] is a Developer-friendly asynchrony for Django.

    Affected versions of this package are vulnerable to Information
    Exposure. The legacy `channels.http.AsgiHandler` class, used for
    handling HTTP type requests in an ASGI environment prior to Django 3.0,
    did not correctly separate request scopes in Channels 3.0. In many cases
    this would result in a crash but, with correct timing responses could be
    sent to the wrong client, resulting in potential leakage of session
    identifiers and other sensitive data.



    [1]: https://pypi.org/project/channels/
  affected_package: channels
  vulnerable_versions:
  - ">= 3.0.0 < 3.0.3"
  severity: high
  package_manager: pypi
  cve:
  - CVE-2020-35681
  cwe:
  - CWE-200
  disclosed_date: 2020-12-28
  created_date: 2020-12-31
  last_modified_date: 2020-12-31
  credit:
  - Unknown
  references:
  - https://bugzilla.redhat.com/show_bug.cgi?id=1911637
  - https://channels.readthedocs.io/en/latest/releases/3.0.3.html
  source_url: https://snyk.io/vuln/SNYK-PYTHON-CHANNELS-1055010
- id: snykio:pypi:channels:73623
  title: Denial of Service (DoS)
  description: "[channels][1] is a Developer-friendly asynchrony for Django.\n\nAffected
    versions of this package are vulnerable to Denial of Service\n(DoS) due to an
    unlimited size limit for request bodies.\n\n\n\n[1]: https://pypi.org/project/channels/\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n{: .language-js}\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n{: .language-bash}\n\nThe entire
    process of testing it against a 30 characters long string\ntakes around ~52ms.
    But when given an invalid string, it takes nearly\ntwo seconds to complete the
    test, over ten times as long as it took to\ntest a valid string. The dramatic
    difference is due to the way regular\nexpressions get evaluated.\n\nMost Regex
    engines will work very similarly (with minor differences).\nThe engine will match
    the first possible way to accept the current\ncharacter and proceed to the next
    one. If it then fails to match the\nnext one, it will backtrack and see if there
    was another way to digest\nthe previous character. If it goes too far down the
    rabbit hole only to\nfind out the string doesn’t match in the end, and if many
    characters\nhave multiple valid regex paths, the number of backtracking steps
    can\nbecome very large, resulting in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s
    look at how our expression runs into this problem, using a\nshorter string: \\\"ACCCX\\\".
    While it seems fairly straightforward, there\nare still four different ways that
    the engine could match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.
    \ C+C+C.\n\nThe engine has to try each of those combinations to see if any of
    them\npotentially match against the expression. When you combine that with the\nother
    steps the engine must take, we can use [RegEx 101 debugger][1] to\nsee the engine
    has to take a total of 38 steps before it can determine\nthe string doesn\\'t
    match.\n\nFrom there, the number of steps the engine must use to validate a string\njust
    continues to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n|
    ACCCX | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX
    | 14 | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to
    take over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n"
  affected_package: channels
  vulnerable_versions:
  - "< 2.1.7"
  severity: medium
  package_manager: pypi
  cwe:
  - CWE-400
  disclosed_date: 2018-10-16
  created_date: 2018-10-16
  last_modified_date: 2018-10-16
  credit:
  - dav20011
  references:
  - https://github.com/django/channels/commit/a1ecd5ee72a538f19bdd9e8f6bb91bb8aabba5d9
  - https://github.com/django/channels/issues/1170
  source_url: https://snyk.io/vuln/SNYK-PYTHON-CHANNELS-73623
