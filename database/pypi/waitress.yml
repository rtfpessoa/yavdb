---
- id: snykio:pypi:waitress:40552
  title: WSGI header spoofing
  description: |
    [`waitress`][1] is a Waitress WSGI server.

    Affected versions of this package are vulnerable to WSGI header
    spoofing. A malicious user could exploit this vulnerability by using an
    `_` character instead of a `-` in an HTTP header. In the WSGI environ,
    the `X-Auth-User` and the `X-Auth_User` headers are both converted to
    `HTTP_X_Auth_User`, allowing the attacker to bypass the protection. This
    vulnerability is related to [CVE-2015-0219][2]



    [1]: https://pypi.python.org/pypi/waitress
    [2]: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40302
  affected_package: waitress
  vulnerable_versions:
  - "< 1.0a1"
  severity: medium
  package_manager: pypi
  cwe:
  - CWE-290
  disclosed_date: 2015-01-14
  created_date: 2015-01-14
  last_modified_date: 2015-01-14
  credit:
  - Matt Russell
  references:
  - https://github.com/Pylons/waitress/commit/7f4e0f7b9c14aba74dd1da7a030072d79ca99b6b
  - https://github.com/Pylons/waitress/issues/81
  - https://github.com/Pylons/waitress/pull/129
  source_url: https://snyk.io/vuln/SNYK-PYTHON-WAITRESS-40552
- id: snykio:pypi:waitress:40566
  title: HTTP Response Splitting
  description: |
    [`waitress`][1] is a Waitress WSGI server.

    Affected versions of this package are vulnerable to HTTP response
    splitting attacks. It is possible to set arbitrary headers in the HTTP
    response by embedding a \\r or \\n character in the header value, and
    sending it to the server.



    [1]: https://pypi.python.org/pypi/waitress
  affected_package: waitress
  vulnerable_versions:
  - "< 0.8.11b0"
  severity: medium
  package_manager: pypi
  cwe:
  - CWE-113
  disclosed_date: 2015-10-07
  created_date: 2015-10-07
  last_modified_date: 2015-10-07
  credit:
  - Bert JW Regeer
  references:
  - https://github.com/Pylons/waitress/commit/07e21576ef272a1bbd5410ef34f479e31ee68665
  - https://github.com/Pylons/waitress/issues/117
  - https://github.com/Pylons/waitress/pull/121
  source_url: https://snyk.io/vuln/SNYK-PYTHON-WAITRESS-40566
- id: snykio:pypi:waitress:538573
  title: HTTP Request Smuggling
  description: |
    [waitress][1] is a production-quality pure-Python WSGI server with very
    acceptable performance.

    Affected versions of this package are vulnerable to HTTP Request
    Smuggling. If a front-end server does not parse header fields with an LF
    the same way as it does those with a CRLF it can lead to the front-end
    and the back-end server parsing the same HTTP message in two different
    ways. This could lead to a potential for HTTP request
    smuggling/splitting whereby Waitress may see two requests while the
    front-end server only sees a single HTTP message.



    [1]: https://pypi.org/project/waitress/
  affected_package: waitress
  vulnerable_versions:
  - "< 1.4.0"
  severity: high
  package_manager: pypi
  cve:
  - CVE-2019-16785
  cwe:
  - CWE-444
  disclosed_date: 2019-12-13
  created_date: 2019-12-22
  last_modified_date: 2019-12-22
  credit:
  - Unknown
  references:
  - https://docs.pylonsproject.org/projects/waitress/en/latest/#security-fixes
  - https://github.com/Pylons/waitress/commit/8eba394ad75deaf9e5cd15b78a3d16b12e6b0eba
  source_url: https://snyk.io/vuln/SNYK-PYTHON-WAITRESS-538573
- id: snykio:pypi:waitress:538575
  title: HTTP Request Smuggling
  description: |
    [waitress][1] is a production-quality pure-Python WSGI server with very
    acceptable performance.

    Affected versions of this package are vulnerable to HTTP Request
    Smuggling. It would parse the `Transfer-Encoding` header and only look
    for a single string value, if that value was not chunked it would fall
    through and use the Content-Length header instead. According to the HTTP
    standard Transfer-Encoding should be a comma separated list, with the
    inner-most encoding first, followed by any further transfer codings,
    ending with chunked. Requests sent with: `Transfer-Encoding: gzip,
    chunked` would incorrectly get ignored, and the request would use a
    Content-Length header instead to determine the body size of the HTTP
    message. This could allow for Waitress to treat a single request as
    multiple requests in the case of HTTP pipelining.



    [1]: https://pypi.org/project/waitress/
  affected_package: waitress
  vulnerable_versions:
  - "< 1.4.0"
  severity: high
  package_manager: pypi
  cve:
  - CVE-2019-16786
  cwe:
  - CWE-444
  disclosed_date: 2019-12-13
  created_date: 2019-12-21
  last_modified_date: 2019-12-21
  credit:
  - Unknown
  references:
  - https://docs.pylonsproject.org/projects/waitress/en/latest/#security-fixes
  - https://github.com/Pylons/waitress/commit/f11093a6b3240fc26830b6111e826128af7771c3
  source_url: https://snyk.io/vuln/SNYK-PYTHON-WAITRESS-538575
- id: snykio:pypi:waitress:539932
  title: HTTP Request Smuggling
  description: |
    [waitress][1] is a production-quality pure-Python WSGI server with very
    acceptable performance.

    Affected versions of this package are vulnerable to HTTP Request
    Smuggling. Potential HTTP pipelining issues and request smuggling
    attacks might be possible due to waitress not correctly responding to
    HTTP requests.

    **Note**\: An incomplete fix was released in version 1.4.1.



    [1]: https://pypi.org/project/waitress/
  affected_package: waitress
  vulnerable_versions:
  - "< 1.4.2"
  severity: high
  package_manager: pypi
  cve:
  - CVE-2019-16789
  cwe:
  - CWE-444
  disclosed_date: 2019-12-26
  created_date: 2019-12-27
  last_modified_date: 2019-12-27
  credit:
  - Unknown
  references:
  - https://docs.pylonsproject.org/projects/waitress/en/latest/#security-fixes
  - https://github.com/github/advisory-review/pull/14604
  - https://github.com/Pylons/waitress/commit/11d9e138125ad46e951027184b13242a3c1de017
  source_url: https://snyk.io/vuln/SNYK-PYTHON-WAITRESS-539932
- id: snykio:pypi:waitress:543054
  title: HTTP Request Smuggling
  description: |
    [waitress][1] is a production-quality pure-Python WSGI server with very
    acceptable performance.

    Affected versions of this package are vulnerable to HTTP Request
    Smuggling. It is possible to conduct request smuggling by sending the
    `Content-Length` header twice. Waitress would header fold a double
    `Content-Length` header and due to being unable to cast the now comma
    separated value to an integer would set the Content-Length to `0`
    internally. If two Content-Length headers are sent in a single request,
    Waitress would treat the request as having no body, thereby treating the
    body of the request as a new request in HTTP pipelining. This issue is
    fixed in Waitress



    [1]: https://pypi.org/project/waitress/
  affected_package: waitress
  vulnerable_versions:
  - "< 1.4.0"
  severity: high
  package_manager: pypi
  cve:
  - CVE-2019-16792
  cwe:
  - CWE-444
  disclosed_date: 2020-01-22
  created_date: 2020-01-22
  last_modified_date: 2020-01-22
  credit:
  - Unknown
  references:
  - https://docs.pylonsproject.org/projects/waitress/en/latest/#security-fixes
  - https://github.com/Pylons/waitress/commit/575994cd42e83fd772a5f7ec98b2c56751bd3f65
  source_url: https://snyk.io/vuln/SNYK-PYTHON-WAITRESS-543054
- id: snykio:pypi:waitress:544148
  title: Regular Expression Denial of Service (ReDoS)
  description: "[waitress][1] is a production-quality pure-Python WSGI server with
    very\nacceptable performance.\n\nAffected versions of this package are vulnerable
    to Regular Expression\nDenial of Service (ReDoS). When a header like \\\"Bad-header:\nxxxxxxxxxxxxxxx\\\\x10\\\"
    is received, it will cause the regular expression\nengine to catastrophically
    backtrack causing the process to use 100% CPU\ntime and blocking any other interactions.\n\n\n\n[1]:
    https://pypi.org/project/waitress/\n\\nDenial of Service (DoS) describes a family
    of attacks, all aimed at\nmaking a system inaccessible to its original and legitimate
    users. There\nare many types of DoS attacks, ranging from trying to clog the network\npipes
    to the system by generating a large volume of traffic from many\nmachines (a Distributed
    Denial of Service - DDoS - attack) to sending\ncrafted requests that cause a system
    to crash or take a disproportional\namount of time to process.\n\nThe Regular
    expression Denial of Service (ReDoS) is a type of Denial of\nService attack. Regular
    expressions are incredibly powerful, but they\naren\\'t very intuitive and can
    ultimately end up making it easy for\nattackers to take your site down.\n\nLetâ€™s
    take the following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n{:
    .language-js}\n\nThis regular expression accomplishes the following:\n\n* `A`
    The string must start with the letter \\'A\\'\n* `(B|C+)+` The string must then
    follow the letter A with either the\n  letter \\'B\\' or some number of occurrences
    of the letter \\'C\\' (the\n  `+` matches one or more times). The `+` at the end
    of this section\n  states that we can look for one or more matches of this section.\n*
    `D` Finally, we ensure this section of the string ends with a \\'D\\'\n\nThe expression
    would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt
    most cases, it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n
    \   $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s
    user 0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n{: .language-bash}\n\nThe entire
    process of testing it against a 30 characters long string\ntakes around ~52ms.
    But when given an invalid string, it takes nearly\ntwo seconds to complete the
    test, over ten times as long as it took to\ntest a valid string. The dramatic
    difference is due to the way regular\nexpressions get evaluated.\n\nMost Regex
    engines will work very similarly (with minor differences).\nThe engine will match
    the first possible way to accept the current\ncharacter and proceed to the next
    one. If it then fails to match the\nnext one, it will backtrack and see if there
    was another way to digest\nthe previous character. If it goes too far down the
    rabbit hole only to\nfind out the string doesnâ€™t match in the end, and if many
    characters\nhave multiple valid regex paths, the number of backtracking steps
    can\nbecome very large, resulting in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s
    look at how our expression runs into this problem, using a\nshorter string: \\\"ACCCX\\\".
    While it seems fairly straightforward, there\nare still four different ways that
    the engine could match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.
    \ C+C+C.\n\nThe engine has to try each of those combinations to see if any of
    them\npotentially match against the expression. When you combine that with the\nother
    steps the engine must take, we can use [RegEx 101 debugger][1] to\nsee the engine
    has to take a total of 38 steps before it can determine\nthe string doesn\\'t
    match.\n\nFrom there, the number of steps the engine must use to validate a string\njust
    continues to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n|
    ACCCX | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX
    | 14 | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to
    take over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\nAffected versions of this package
    are vulnerable to Regular Expression\nDenial of Service (ReDoS). When a header
    like \\\"Bad-header:\nxxxxxxxxxxxxxxx\\\\x10\\\" is received, it will cause the
    regular expression\nengine to catastrophically backtrack causing the process to
    use 100% CPU\ntime and blocking any other interactions.\n\n\n\n[1]: https://regex101.com/debugger\n"
  affected_package: waitress
  vulnerable_versions:
  - ">= 1.4.2 < 1.4.3"
  severity: high
  package_manager: pypi
  cve:
  - CVE-2020-5236
  cwe:
  - CWE-400
  disclosed_date: 2020-02-03
  created_date: 2020-02-04
  last_modified_date: 2020-02-04
  credit:
  - Unknown
  references:
  - https://github.com/Pylons/waitress/commit/6e46f9e3f014d64dd7d1e258eaf626e39870ee1f
  source_url: https://snyk.io/vuln/SNYK-PYTHON-WAITRESS-544148
- id: snykio:pypi:waitress:564339
  title: HTTP Response Splitting
  description: |
    [waitress][1] is a production-quality pure-Python WSGI server with very
    acceptable performance.

    Affected versions of this package are vulnerable to HTTP Response
    Splitting. Lack of validating for line feed/carriage return HTTP
    Response Splitting in the status line, as well as the key of a header.



    [1]: https://pypi.org/project/waitress/
  affected_package: waitress
  vulnerable_versions:
  - "< 0.9.0b1"
  severity: low
  package_manager: pypi
  cwe:
  - CWE-113
  disclosed_date: 2016-03-17
  created_date: 2020-04-01
  last_modified_date: 2020-04-01
  credit:
  - Jason Madden
  references:
  - https://github.com/Pylons/waitress/commit/4deab9f23f9eb273971da247981aa85b7a16e946
  - https://github.com/Pylons/waitress/issues/122
  - https://github.com/Pylons/waitress/pull/124
  source_url: https://snyk.io/vuln/SNYK-PYTHON-WAITRESS-564339
