---
- id: snykio:pypi:beaker:40102
  title: Information Exposure
  description: |
    [`beaker`][1] is a Session and Caching library with WSGI Middleware
    Beaker before 1.6.4, when using PyCrypto to encrypt sessions, uses AES
    in ECB cipher mode, which might allow remote attackers to obtain
    portions of sensitive session data via unspecified vectors.



    [1]: https://pypi.python.org/pypi/beaker
  affected_package: beaker
  vulnerable_versions:
  - ">= 0.5 < 1.6.4"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2012-3458
  cwe:
  - CWE-310
  disclosed_date: 2012-09-15
  created_date: 2012-09-15
  last_modified_date: 2012-09-15
  credit:
  - Unknown
  references:
  - http://www.openwall.com/lists/oss-security/2012/08/13/10
  - https://bugzilla.redhat.com/show_bug.cgi?id=809267
  - https://github.com/bbangert/beaker/commit/91becae76101cf87ce8cbfabe3af2622fc328fe5
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2012-3458
  source_url: https://snyk.io/vuln/SNYK-PYTHON-BEAKER-40102
- id: snykio:pypi:beaker:40703
  title: Cross-site Scripting (XSS)
  description: |+
    Affected versions of [`beaker`][1] are vulnerable to Cross-Site
    Scripting (XSS).



    [1]: https://pypi.python.org/pypi/beaker
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: beaker
  vulnerable_versions:
  - "< 0.9.4"
  severity: medium
  package_manager: pypi
  cwe:
  - CWE-79
  disclosed_date: 2008-04-03
  created_date: 2017-12-04
  last_modified_date: 2017-12-04
  credit:
  - Unknown
  references:
  - https://github.com/bbangert/beaker/blob/master/CHANGELOG#L415
  - https://github.com/bbangert/beaker/commit/ad45a77d199c46ddedf5d1aa54780b95d4bd3279
  source_url: https://snyk.io/vuln/SNYK-PYTHON-BEAKER-40703
- id: snykio:pypi:beaker:42070
  title: XML External Entity (XXE) Injection
  description: |+
    \n[beaker][1] is an open-source software for managing and automating labs
    of test computers.

    Affected versions of this package are vulnerable to XML External Entity
    (XXE) Injection. It does not escape `</script>` tags in string literals
    when producing JSON.



    [1]: https://github.com/beaker-project/beaker
    \nXXE Injection is a type of attack against an application that parses XML
    input. XML is a markup language that defines a set of rules for encoding
    documents in a format that is both human-readable and machine-readable.
    By default, many XML processors allow specification of an external
    entity, a URI that is dereferenced and evaluated during XML processing.
    When an XML document is being parsed, the parser can make a request and
    include the content at the specified URI inside of the XML document.

    Attacks can include disclosing local files, which may contain sensitive
    data such as passwords or private user data, using file: schemes or
    relative paths in the system identifier.

    For example, below is a sample XML document, containing an XML element-
    username.

        <?xml version="1.0" encoding="ISO-8859-1"?>
           <username>John</username>
        </xml>

    An external XML entity - `xxe`, is defined using a system identifier and
    present within a DOCTYPE header. These entities can access local or
    remote content. For example the below code contains an external XML
    entity that would fetch the content of `/etc/passwd` and display it to
    the user rendered by `username`.

        <?xml version="1.0" encoding="ISO-8859-1"?>
        <!DOCTYPE foo [
           <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
           <username>&xxe;</username>
        </xml>

    Other XXE Injection attacks can access local resources that may not stop
    returning data, possibly impacting application availability and leading
    to Denial of Service.

  affected_package: beaker
  vulnerable_versions:
  - "<= 0"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2015-3161
  cwe:
  - CWE-611
  disclosed_date: 2015-04-24
  created_date: 2018-02-26
  last_modified_date: 2018-02-26
  credit:
  - Unknown
  references:
  - https://beaker-project.org/jenkins-results/beaker-review-checks-docs/995/documentation/_build/html/whats-new/release-20.html
  - https://bugzilla.redhat.com/show_bug.cgi?id=1215024
  - https://nvd.nist.gov/vuln/detail/CVE-2015-3161
  - https://www.securityfocus.com/bid/74574
  source_url: https://snyk.io/vuln/SNYK-PYTHON-BEAKER-42070
- id: snykio:pypi:beaker:42072
  title: Cross-site Scripting (XSS)
  description: |+
    \n[beaker][1] is an open-source software for managing and automating labs
    of test computers.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). It allows remote authenticated users to inject arbitrary web
    script or HTML via writing a crafted comment.



    [1]: https://github.com/beaker-project/beaker
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: beaker
  vulnerable_versions:
  - "<= 0"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2015-3162
  cwe:
  - CWE-79
  disclosed_date: 2015-05-07
  created_date: 2018-02-26
  last_modified_date: 2018-02-26
  credit:
  - Unknown
  references:
  - https://beaker-project.org/docs/whats-new/release-20.html#bug-fixes
  - https://bugzilla.redhat.com/show_bug.cgi?id=1215030
  - https://nvd.nist.gov/vuln/detail/CVE-2015-3162
  - https://www.securityfocus.com/bid/74568
  source_url: https://snyk.io/vuln/SNYK-PYTHON-BEAKER-42072
