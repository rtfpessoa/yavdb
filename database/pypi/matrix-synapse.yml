---
- id: snykio:pypi:matrix-synapse:1019356
  title: Cross-site Scripting (XSS)
  description: |+
    [matrix-synapse][1] is an ecosystem for open federated Instant Messaging
    and VoIP.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). Depending on the configuration of the domain that Synapse is
    deployed on it may allow access to cookies and other browser data, CSRF
    vulnerabilities, and access to other resources served on the same domain
    or parent domains.



    [1]: https://pypi.org/project/matrix-synapse/
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: matrix-synapse
  vulnerable_versions:
  - "< 1.21.0"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2020-26891
  cwe:
  - CWE-79
  disclosed_date: 2020-10-16
  created_date: 2020-10-18
  last_modified_date: 2020-10-18
  credit:
  - Denis Kasak
  references:
  - https://github.com/matrix-org/synapse/pull/8444
  source_url: https://snyk.io/vuln/SNYK-PYTHON-MATRIXSYNAPSE-1019356
- id: snykio:pypi:matrix-synapse:1044043
  title: Denial of Service (DoS)
  description: |
    [matrix-synapse][1] is an ecosystem for open federated Instant Messaging
    and VoIP.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS). It permits non-standard NaN, Infinity, and Infinity JSON values
    in fields of `m.room.member` events, allowing remote attackers to
    execute a denial of service attack against the federation and common
    Matrix clients. If such a malformed event is accepted into the room\'s
    state, the impact is long-lasting and is not fixed by an upgrade to a
    newer version, requiring the event to be manually redacted instead.
    Since events are replicated to servers of other room members, the impact
    is not constrained to the server of the event sender.



    [1]: https://pypi.org/project/matrix-synapse/
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package][1]



    [1]: https://snyk.io/vuln/npm:ws:20171108
  affected_package: matrix-synapse
  vulnerable_versions:
  - "< 1.20.0"
  severity: high
  package_manager: pypi
  cve:
  - CVE-2020-26890
  cwe:
  - CWE-400
  disclosed_date: 2020-11-24
  created_date: 2020-11-24
  last_modified_date: 2020-11-24
  credit:
  - Unknown
  references:
  - https://github.com/matrix-org/synapse/pull/8106
  - https://github.com/matrix-org/synapse/pull/8291
  source_url: https://snyk.io/vuln/SNYK-PYTHON-MATRIXSYNAPSE-1044043
- id: snykio:pypi:matrix-synapse:1050122
  title: Denial of Service (DoS)
  description: |
    [matrix-synapse][1] is an ecosystem for open federated Instant Messaging
    and VoIP.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS). A malicious or poorly-implemented homeserver can inject malformed
    events into a room by specifying a different room id in the path of a
    `/send_join`, `/send_leave`, `/invite` or `/exchange_third_party_invite`
    request. This can lead to a denial of service in which future events
    will not be correctly sent to other servers over federation. This
    affects any server which accepts federation requests from untrusted
    servers.



    [1]: https://pypi.org/project/matrix-synapse/
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package][1]



    [1]: https://snyk.io/vuln/npm:ws:20171108
  affected_package: matrix-synapse
  vulnerable_versions:
  - "< 1.23.1"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2020-26257
  cwe:
  - CWE-400
  disclosed_date: 2020-12-09
  created_date: 2020-12-10
  last_modified_date: 2020-12-10
  credit:
  - Unknown
  references:
  - https://github.com/matrix-org/synapse/pull/8776
  - https://github.com/matrix-org/synapse/security/advisories/GHSA-hxmp-pqch-c8mm
  source_url: https://snyk.io/vuln/SNYK-PYTHON-MATRIXSYNAPSE-1050122
- id: snykio:pypi:matrix-synapse:480456
  title: Insufficient Verification of Data Authenticity
  description: |
    [matrix-synapse][1] is an ecosystem for open federated Instant Messaging
    and VoIP.

    Affected versions of this package are vulnerable to Insufficient
    Verification of Data Authenticity as it mishandles signature checking on
    some federation APIs. Events sent over `/send_join`, `/send_leave`, and
    `/invite` may not be correctly signed, or may not come from expected
    hosts.



    [1]: https://pypi.org/project/matrix-synapse/
  affected_package: matrix-synapse
  vulnerable_versions:
  - "< 1.5.0rc2"
  severity: high
  package_manager: pypi
  cve:
  - CVE-2019-18835
  cwe:
  - CWE-345
  disclosed_date: 2019-11-08
  created_date: 2019-11-08
  last_modified_date: 2019-11-08
  credit:
  - Unknown
  references:
  - https://github.com/matrix-org/synapse/pull/6262
  - https://github.com/matrix-org/synapse/releases/tag/v1.5.0
  source_url: https://snyk.io/vuln/SNYK-PYTHON-MATRIXSYNAPSE-480456
