---
- id: snykio:pypi:zulip:568828
  title: Denial of Service (DoS)
  description: |+
    [zulip][1] is a Bindings for the Zulip message API.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS). The Markdown parser uses a regular expression vulnerable to
    exponential backtracking. A user who is logged into the server could
    send a crafted message causing the server to spend an effectively
    arbitrary amount of CPU time and stall the processing of future
    messages.



    [1]: https://www.pypi.org/project/zulip
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: zulip
  vulnerable_versions:
  - "< 2.0.5"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2019-16215
  cwe:
  - CWE-400
  disclosed_date: 2020-05-11
  created_date: 2020-05-11
  last_modified_date: 2020-05-11
  credit:
  - Unknown
  references:
  - https://github.com/zulip/zulip/commit/5797f013b3be450c146a4141514bda525f2f1b51
  source_url: https://snyk.io/vuln/SNYK-PYTHON-ZULIP-568828
- id: snykio:pypi:zulip:568829
  title: Cross-site Scripting (XSS)
  description: |+
    [zulip][1] is a Bindings for the Zulip message API.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). It incompletely validates the MIME types of uploaded files. A
    user who is logged into the server could upload files of certain types
    to mount a stored cross-site scripting attack on other logged-in users.
    On a Zulip server using the default local uploads backend, the attack is
    only effective against browsers lacking support for
    Content-Security-Policy such as Internet Explorer 11. On a Zulip server
    using the S3 uploads backend, the attack is confined to the origin of
    the configured S3 uploads hostname and cannot reach the Zulip server
    itself.



    [1]: https://www.pypi.org/project/zulip
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: zulip
  vulnerable_versions:
  - "< 2.0.5"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2019-16216
  cwe:
  - CWE-79
  disclosed_date: 2020-05-11
  created_date: 2020-05-11
  last_modified_date: 2020-05-11
  credit:
  - Unknown
  references:
  - https://github.com/zulip/zulip/commit/1195841dfb9aa26b3b0dabc6f05d72e4af25be3e
  source_url: https://snyk.io/vuln/SNYK-PYTHON-ZULIP-568829
- id: snykio:pypi:zulip:568830
  title: Open Redirect
  description: |
    [zulip][1] is a Bindings for the Zulip message API.

    Affected versions of this package are vulnerable to Open Redirect. The
    image thumbnailing handler in Zulip Server allows an open redirect that
    was visible to logged-in users.



    [1]: https://www.pypi.org/project/zulip
  affected_package: zulip
  vulnerable_versions:
  - ">= 1.9.0 < 2.0.8"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2019-19775
  cwe:
  - CWE-601
  disclosed_date: 2020-05-11
  created_date: 2020-05-11
  last_modified_date: 2020-05-11
  credit:
  - Unknown
  references:
  - https://github.com/zulip/zulip/commit/b7c87a4d82397a5e6ac169b6098bed0b1ae7a583
  source_url: https://snyk.io/vuln/SNYK-PYTHON-ZULIP-568830
- id: snykio:pypi:zulip:568831
  title: Cross-site Scripting (XSS)
  description: |+
    [zulip][1] is a Bindings for the Zulip message API.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) in the frontend markdown processor.



    [1]: https://www.pypi.org/project/zulip
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: zulip
  vulnerable_versions:
  - "< 1.7.2"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2018-9986
  cwe:
  - CWE-79
  disclosed_date: 2018-04-12
  created_date: 2020-05-12
  last_modified_date: 2020-05-12
  credit:
  - Unknown
  references:
  - https://blog.zulip.org/2018/04/12/zulip-1-7-2-released/
  source_url: https://snyk.io/vuln/SNYK-PYTHON-ZULIP-568831
- id: snykio:pypi:zulip:568832
  title: Cross-site Scripting (XSS)
  description: |+
    [zulip][1] is a Bindings for the Zulip message API.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) with muting notifications.



    [1]: https://www.pypi.org/project/zulip
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: zulip
  vulnerable_versions:
  - ">= 1.5.0 < 1.7.2"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2018-9987
  cwe:
  - CWE-79
  disclosed_date: 2018-04-12
  created_date: 2020-05-12
  last_modified_date: 2020-05-12
  credit:
  - Unknown
  references:
  - https://blog.zulip.org/2018/04/12/zulip-1-7-2-released/
  source_url: https://snyk.io/vuln/SNYK-PYTHON-ZULIP-568832
- id: snykio:pypi:zulip:568833
  title: Cross-site Scripting (XSS)
  description: |+
    [zulip][1] is a Bindings for the Zulip message API.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) with stream names in topic typeahead.



    [1]: https://www.pypi.org/project/zulip
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: zulip
  vulnerable_versions:
  - "< 1.7.2"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2018-9990
  cwe:
  - CWE-79
  disclosed_date: 2018-04-12
  created_date: 2020-05-12
  last_modified_date: 2020-05-12
  credit:
  - Unknown
  references:
  - https://blog.zulip.org/2018/04/12/zulip-1-7-2-released/
  source_url: https://snyk.io/vuln/SNYK-PYTHON-ZULIP-568833
- id: snykio:pypi:zulip:568835
  title: Cross-site Scripting (XSS)
  description: |+
    [zulip][1] is a Bindings for the Zulip message API.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) with user uploads and the (default) `LOCAL_UPLOADS_DIR` storage
    backend.



    [1]: https://www.pypi.org/project/zulip
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: zulip
  vulnerable_versions:
  - "< 1.7.2"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2018-9999
  cwe:
  - CWE-79
  disclosed_date: 2020-05-11
  created_date: 2020-05-12
  last_modified_date: 2020-05-12
  credit:
  - Unknown
  references:
  - https://blog.zulip.org/2018/04/12/zulip-1-7-2-released/
  source_url: https://snyk.io/vuln/SNYK-PYTHON-ZULIP-568835
- id: snykio:pypi:zulip:568836
  title: Improper Access Control
  description: |
    [zulip][1] is a Bindings for the Zulip message API.

    Affected versions of this package are vulnerable to Improper Access
    Control. The `invite_by_admins_only` permission was found to be not
    validated on the backend.



    [1]: https://www.pypi.org/project/zulip
  affected_package: zulip
  vulnerable_versions:
  - "< 1.5.2"
  severity: medium
  package_manager: pypi
  cwe:
  - CWE-284
  disclosed_date: 2020-05-11
  created_date: 2020-05-12
  last_modified_date: 2020-05-12
  credit:
  - Unknown
  references:
  - https://github.com/zulip/zulip/commit/5baeb35ac8f9be322f5bdb62c04344febb4b5463
  source_url: https://snyk.io/vuln/SNYK-PYTHON-ZULIP-568836
- id: snykio:pypi:zulip:569658
  title: Improper Authorization
  description: |
    [zulip][1] is a Bindings for the Zulip message API.

    Affected versions of this package are vulnerable to Improper
    Authorization. On a server with multiple realms, a vulnerability in the
    invitation system lets an authorized user of one realm on the server
    create a user account on any other realm.



    [1]: https://www.pypi.org/project/zulip
  affected_package: zulip
  vulnerable_versions:
  - "< 1.7.1"
  severity: high
  package_manager: pypi
  cve:
  - CVE-2017-0910
  cwe:
  - CWE-285
  disclosed_date: 2017-11-27
  created_date: 2020-05-19
  last_modified_date: 2020-05-19
  credit:
  - Unknown
  references:
  - http://blog.zulip.org/2017/11/23/zulip-1-7-1-released/
  - https://github.com/zulip/zulip/commit/960d736e55cbb9386a68e4ee45f80581fd2a4e32
  source_url: https://snyk.io/vuln/SNYK-PYTHON-ZULIP-569658
- id: snykio:pypi:zulip:569659
  title: Improper Authentication
  description: |
    [zulip][1] is a Bindings for the Zulip message API.

    Affected versions of this package are vulnerable to Improper
    Authentication. A bug in the new user signup process meant that users
    who registered their account using social authentication (e.g., GitHub
    or Google SSO) in an organization that also allows password
    authentication could have their personal API key stolen by an
    unprivileged attacker, allowing nearly full access to the user\'s
    account.



    [1]: https://www.pypi.org/project/zulip
  affected_package: zulip
  vulnerable_versions:
  - ">= 1.7.0 < 2.0.7"
  severity: high
  package_manager: pypi
  cve:
  - CVE-2019-18933
  cwe:
  - CWE-287
  disclosed_date: 2019-11-21
  created_date: 2020-05-19
  last_modified_date: 2020-05-19
  credit:
  - Unknown
  references:
  - https://blog.zulip.org/2019/11/21/zulip-2-0-7-security-release/
  - https://github.com/zulip/zulip/commit/0c2cc41d2e40807baa5ee2c72987ebfb64ea2eb6
  source_url: https://snyk.io/vuln/SNYK-PYTHON-ZULIP-569659
