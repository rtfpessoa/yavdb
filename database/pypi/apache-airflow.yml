---
- id: snykio:pypi:apache-airflow:173740
  title: Cross-site Scripting (XSS)
  description: |+
    [apache-airflow][1] is a platform to programmatically author, schedule,
    and monitor workflows.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). A malicious admin user could edit the state of objects in the
    Airflow metadata database to execute arbitrary javascript on certain
    page views.



    [1]: https://pypi.org/project/apache-airflow/
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: apache-airflow
  vulnerable_versions:
  - "< 1.10.2"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2018-20244
  cwe:
  - CWE-79
  disclosed_date: 2019-02-27
  created_date: 2019-02-28
  last_modified_date: 2019-02-28
  credit:
  - Michael Cole
  references:
  - https://lists.apache.org/thread.html/f656fddf9c49293b3ec450437c46709eb01a12d1645136b2f1b8573b@%3Cdev.airflow.apache.org%3E
  source_url: https://snyk.io/vuln/SNYK-PYTHON-APACHEAIRFLOW-173740
- id: snykio:pypi:apache-airflow:173993
  title: Cross-site Scripting (XSS)
  description: |
    [apache-airflow][1] is a platform to programmatically author, schedule,
    and monitor workflows.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). The `?search=` query parameter was incorrectly escaped in the
    pagination controls. The lxml `minidom` used was incorrectly parsing
    entities such as `&gt` sue to it being a XML parser, rather than a HTML
    parser.



    [1]: https://pypi.org/project/apache-airflow/
  affected_package: apache-airflow
  vulnerable_versions:
  - "< 1.10.3"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2019-0216
  cwe:
  - CWE-79
  disclosed_date: 2019-03-18
  created_date: 2019-03-18
  last_modified_date: 2019-03-18
  credit:
  - Media Rest
  source_url: https://snyk.io/vuln/SNYK-PYTHON-APACHEAIRFLOW-173993
- id: snykio:pypi:apache-airflow:174175
  title: Cross-site Request Forgery (CSRF)
  description: |
    [apache-airflow][1] is a platform to programmatically author, schedule,
    and monitor workflows.

    Affected versions of this package are vulnerable to Cross-site Request
    Forgery (CSRF). A number of HTTP endpoints did not have adequate
    protection.



    [1]: https://pypi.org/project/apache-airflow/
  affected_package: apache-airflow
  vulnerable_versions:
  - "< 1.10.3"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2019-0229
  cwe:
  - CWE-352
  disclosed_date: 2019-04-10
  created_date: 2019-04-14
  last_modified_date: 2019-04-14
  credit:
  - Erik Mulder at bol.com
  references:
  - https://lists.apache.org/thread.html/2de387213d45bc626d27554a1bde7b8c67d08720901f82a50b6f4231@%3Cdev.airflow.apache.org%3E
  source_url: https://snyk.io/vuln/SNYK-PYTHON-APACHEAIRFLOW-174175
- id: snykio:pypi:apache-airflow:40681
  title: Cross-site Scripting (XSS)
  description: |
    [`apache-airflow`][1] is Programmatically author, schedule and monitor
    data pipelines.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks.



    [1]: http://pypi.python.org/pypi/apache-airflow
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

    You can read more about `Cross-site Scripting (XSS)` on our [blog][1].



    [1]: https://snyk.io/blog/marked-xss-vulnerability/
  affected_package: apache-airflow
  vulnerable_versions:
  - ">= 0"
  severity: medium
  package_manager: pypi
  cwe:
  - CWE-79
  disclosed_date: 2017-06-01
  created_date: 2017-10-30
  last_modified_date: 2017-10-30
  credit:
  - Unknown
  references:
  - https://issues.apache.org/jira/browse/AIRFLOW-1260
  source_url: https://snyk.io/vuln/SNYK-PYTHON-APACHEAIRFLOW-40681
- id: snykio:pypi:apache-airflow:42180
  title: Cross-site Scripting (XSS)
  description: |+
    [apache-airflow][1] is a platform to programmatically author, schedule
    and monitor workflows.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) via 404 pages.

    **Note** Chrome will detect this as a reflected XSS attempt and prevent
    the page from loading. Firefox and other browsers don\'t, and are
    vulnerable to this attack.



    [1]: https://pypi.org/project/apache-airflow/
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: apache-airflow
  vulnerable_versions:
  - "< 1.9.0"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2017-12614
  cwe:
  - CWE-79
  disclosed_date: 2018-08-06
  created_date: 2018-08-07
  last_modified_date: 2018-08-07
  credit:
  - Seth Long
  references:
  - https://lists.apache.org/thread.html/2c72480c76619c5e7793f0d213c34082f0598eaa4d212172f068940f@%3Cdev.airflow.apache.org%3E
  source_url: https://snyk.io/vuln/SNYK-PYTHON-APACHEAIRFLOW-42180
- id: snykio:pypi:apache-airflow:451565
  title: Information Exposure
  description: |
    [apache-airflow][1] is a platform to programmatically author, schedule,
    and monitor workflows.

    Affected versions of this package are vulnerable to Information
    Exposure. The databricks operator logs API keys during task instance
    run. The databricks operator implementation encourages users to put
    their API key in the connection \"extra\" field, and its accompanying
    databricks hook logs that \"extra\" field in plaintext.



    [1]: https://pypi.org/project/apache-airflow/
  affected_package: apache-airflow
  vulnerable_versions:
  - "< 1.10.5"
  severity: medium
  package_manager: pypi
  cwe:
  - CWE-200
  disclosed_date: 2019-07-09
  created_date: 2019-07-10
  last_modified_date: 2019-07-10
  credit:
  - zenyui
  references:
  - https://github.com/apache/airflow/pull/5635
  - https://github.com/apache/airflow/pull/5635/commits/89f015e6c89392b6de61dab8ab90182e6ee42b74
  - https://issues.apache.org/jira/browse/AIRFLOW-4923
  source_url: https://snyk.io/vuln/SNYK-PYTHON-APACHEAIRFLOW-451565
- id: snykio:pypi:apache-airflow:474624
  title: Arbitrary Code Execution
  description: |
    [apache-airflow][1] is a platform to programmatically author, schedule,
    and monitor workflows.

    Affected versions of this package are vulnerable to Arbitrary Code
    Execution. A malicious admin user could edit the state of objects in the
    Airflow metadata database to execute arbitrary javascript on certain
    page views. This also presented a Local File Disclosure vulnerability to
    any file readable by the webserver process.



    [1]: https://pypi.org/project/apache-airflow/
  affected_package: apache-airflow
  vulnerable_versions:
  - "< 1.10.6"
  severity: high
  package_manager: pypi
  cve:
  - CVE-2019-12417
  cwe:
  - CWE-94
  disclosed_date: 2019-10-30
  created_date: 2019-10-31
  last_modified_date: 2019-10-31
  credit:
  - Frantisek Uhrecky
  - Marek Takac
  - Pawel.Kurylowicz
  references:
  - https://lists.apache.org/thread.html/f3aa5ff9c7cdb5424b6463c9013f6cf5db83d26c66ea77130cbbe1bc@%3Cusers.airflow.apache.org%3E
  source_url: https://snyk.io/vuln/SNYK-PYTHON-APACHEAIRFLOW-474624
- id: snykio:pypi:apache-airflow:541855
  title: Cross-site Scripting (XSS)
  description: |+
    [apache-airflow][1] is a platform to programmatically author, schedule,
    and monitor workflows.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). When running with the \"classic\" UI, a malicious admin user
    could edit the state of objects in the Airflow metadata database to
    execute arbitrary javascript on certain page views.



    [1]: https://pypi.org/project/apache-airflow/
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: apache-airflow
  vulnerable_versions:
  - "< 1.10.5"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2019-12398
  cwe:
  - CWE-79
  disclosed_date: 2020-01-14
  created_date: 2020-01-14
  last_modified_date: 2020-01-14
  credit:
  - yvreddy
  references:
  - https://lists.apache.org/thread.html/r72487ad6b23d18689896962782f8c93032afe5c72a6bfd23b253352b%40%3Cusers.airflow.apache.org%3E
  - https://lists.apache.org/thread.html/r72487ad6b23d18689896962782f8c93032afe5c72a6bfd23b253352b@%3Cdev.airflow.apache.org%3E
  source_url: https://snyk.io/vuln/SNYK-PYTHON-APACHEAIRFLOW-541855
- id: snykio:pypi:apache-airflow:570290
  title: Insecure Default
  description: |
    [apache-airflow][1] is a platform to programmatically author, schedule,
    and monitor workflows.

    Affected versions of this package are vulnerable to Insecure Default.
    The celery broker `accept_content` setting was set to: `['json',
    'pickle']` by default, allowing deserialization of pickled messages,
    even if the software is configured to send messages in the JSON format.

    **Note** An attacker requires access to the message broker used to send
    messages to Celery workers in order to exploit this vulnerability.



    [1]: https://pypi.org/project/apache-airflow/
  affected_package: apache-airflow
  vulnerable_versions:
  - ">= 0 < 1.10.11"
  severity: high
  package_manager: pypi
  cve:
  - CVE-2020-11982
  cwe:
  - CWE-453
  disclosed_date: 2020-05-24
  created_date: 2020-07-14
  last_modified_date: 2020-07-14
  credit:
  - Snyk Security Team
  references:
  - https://github.com/apache/airflow/pull/7205
  - https://lists.apache.org/thread.html/r7255cf0be3566f23a768e2a04b40fb09e52fcd1872695428ba9afe91%40%3Cusers.airflow.apache.org%3E
  source_url: https://snyk.io/vuln/SNYK-PYTHON-APACHEAIRFLOW-570290
- id: snykio:pypi:apache-airflow:570291
  title: Command Injection
  description: |
    [apache-airflow][1] is a platform to programmatically author, schedule,
    and monitor workflows.

    Affected versions of this package are vulnerable to Command Injection.
    The `celery` executor gets plain commands to execute from the message
    broker, without any sanitization. An attacker can inject arbitrary
    commands into the queue and therefore achieve command injection.

    **Note** An attacker requires access to the message broker used to send
    messages to Celery workers in order to exploit this vulnerability.



    [1]: https://pypi.org/project/apache-airflow/
  affected_package: apache-airflow
  vulnerable_versions:
  - ">= 0 < 1.10.11"
  severity: high
  package_manager: pypi
  cve:
  - CVE-2020-11981
  cwe:
  - CWE-78
  disclosed_date: 2020-05-24
  created_date: 2020-07-14
  last_modified_date: 2020-07-14
  credit:
  - Snyk Security Team
  references:
  - https://github.com/apache/airflow/pull/9178
  - https://lists.apache.org/thread.html/r7255cf0be3566f23a768e2a04b40fb09e52fcd1872695428ba9afe91%40%3Cusers.airflow.apache.org%3E
  source_url: https://snyk.io/vuln/SNYK-PYTHON-APACHEAIRFLOW-570291
- id: snykio:pypi:apache-airflow:585817
  title: Remote Code Execution (RCE)
  description: |
    [apache-airflow][1] is a platform to programmatically author, schedule,
    and monitor workflows.

    Affected versions of this package are vulnerable to Remote Code
    Execution (RCE). The vulnerability was discovered in one of the example
    DAGs shipped with Airflow which would allow any authenticated user to
    run arbitrary commands as the user running airflow worker/scheduler
    (depending on the executor in use). The vulnerability has no impact if
    examples are disabled by setting `load_examples=False` in the config.



    [1]: https://pypi.org/project/apache-airflow/
  affected_package: apache-airflow
  vulnerable_versions:
  - ">= 0 < 1.10.11"
  severity: high
  package_manager: pypi
  cve:
  - CVE-2020-11978
  cwe:
  - CWE-94
  disclosed_date: 2020-07-17
  created_date: 2020-07-17
  last_modified_date: 2020-07-17
  credit:
  - xuxiang of DtDream security
  references:
  - https://lists.apache.org/thread.html/r7255cf0be3566f23a768e2a04b40fb09e52fcd1872695428ba9afe91%40%3Cusers.airflow.apache.org%3E
  source_url: https://snyk.io/vuln/SNYK-PYTHON-APACHEAIRFLOW-585817
- id: snykio:pypi:apache-airflow:585818
  title: Cross-site Scripting (XSS)
  description: |+
    [apache-airflow][1] is a platform to programmatically author, schedule,
    and monitor workflows.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). Many of the admin management screens in the new/RBAC UI handle
    escaping incorrectly, allowing authenticated users with appropriate
    permissions to create stored XSS attacks.



    [1]: https://pypi.org/project/apache-airflow/
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: apache-airflow
  vulnerable_versions:
  - ">= 0 < 1.10.11"
  severity: high
  package_manager: pypi
  cve:
  - CVE-2020-11983
  cwe:
  - CWE-79
  disclosed_date: 2020-07-17
  created_date: 2020-07-17
  last_modified_date: 2020-07-17
  credit:
  - Ali AlHabsi of Accellion
  - Inc.
  references:
  - https://lists.apache.org/thread.html/r7255cf0be3566f23a768e2a04b40fb09e52fcd1872695428ba9afe91%40%3Cusers.airflow.apache.org%3E
  source_url: https://snyk.io/vuln/SNYK-PYTHON-APACHEAIRFLOW-585818
- id: snykio:pypi:apache-airflow:585819
  title: Cross-site Scripting (XSS)
  description: |+
    [apache-airflow][1] is a platform to programmatically author, schedule,
    and monitor workflows.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). A stored XSS vulnerability was discovered in the Chart pages of
    the the \"classic\" UI.



    [1]: https://pypi.org/project/apache-airflow/
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: apache-airflow
  vulnerable_versions:
  - ">= 0 < 1.10.11"
  severity: high
  package_manager: pypi
  cve:
  - CVE-2020-9485
  cwe:
  - CWE-79
  disclosed_date: 2020-07-17
  created_date: 2020-07-17
  last_modified_date: 2020-07-17
  credit:
  - Mika Kulmala of Solita.fi
  references:
  - https://lists.apache.org/thread.html/r7255cf0be3566f23a768e2a04b40fb09e52fcd1872695428ba9afe91%40%3Cusers.airflow.apache.org%3E
  source_url: https://snyk.io/vuln/SNYK-PYTHON-APACHEAIRFLOW-585819
- id: snykio:pypi:apache-airflow:73586
  title: Arbitrary Code Execution
  description: |
    [apache-airflow][1] is a platform to programmatically author, schedule,
    and monitor workflows.

    Affected versions of this package are vulnerable to Arbitrary Code
    Execution due to not preventing the `chart_data` endpoints from using
    user-input and executing them.



    [1]: https://pypi.org/project/apache-airflow/
  affected_package: apache-airflow
  vulnerable_versions:
  - "< 1.9.0"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2017-15720
  cwe:
  - CWE-94
  disclosed_date: 2017-04-07
  created_date: 2017-04-07
  last_modified_date: 2017-04-07
  credit:
  - Unknown
  references:
  - https://github.com/apache/incubator-airflow/commit/04cacdd0a7526927137b452f38c3e894a5d2ce4a
  - https://github.com/apache/incubator-airflow/pull/2184
  - https://issues.apache.org/jira/browse/AIRFLOW-1007
  - https://lists.apache.org/thread.html/ade4d54ebf614f68dc81a08891755e60ea58ba88e0209233eeea5f57@%3Cdev.airflow.apache.org%3E
  source_url: https://snyk.io/vuln/SNYK-PYTHON-APACHEAIRFLOW-73586
- id: snykio:pypi:apache-airflow:73591
  title: Cross-site Scripting (XSS)
  description: |+
    [apache-airflow][1] is a platform to programmatically author, schedule,
    and monitor workflows.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) due to not sanitizing user-inputted HTML passed to Markup. This
    allows a malicious user to execute arbitrary code.



    [1]: https://pypi.org/project/apache-airflow/
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: apache-airflow
  vulnerable_versions:
  - ">= 1.6.0 < 1.9.0"
  severity: medium
  package_manager: pypi
  cwe:
  - CWE-79
  disclosed_date: 2017-03-28
  created_date: 2017-03-28
  last_modified_date: 2017-03-28
  credit:
  - Alex Guziel
  references:
  - https://github.com/apache/incubator-airflow/commit/fe9ebe3ccf5fec4c491343659aa0c52e4125f66b
  - https://github.com/apache/incubator-airflow/pull/2193
  - https://issues.apache.org/jira/browse/AIRFLOW-1047
  source_url: https://snyk.io/vuln/SNYK-PYTHON-APACHEAIRFLOW-73591
- id: snykio:pypi:apache-airflow:73592
  title: Cross-site Request Forgery (CSRF)
  description: |
    [apache-airflow][1] is a platform to programmatically author, schedule,
    and monitor workflows.

    Affected versions of this package are vulnerable to Cross-site Request
    Forgery (CSRF) because the `paused` and `query` endpoints are
    state-changing.



    [1]: https://pypi.org/project/apache-airflow/
  affected_package: apache-airflow
  vulnerable_versions:
  - "< 1.9.0"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2017-17835
  cwe:
  - CWE-352
  disclosed_date: 2017-02-04
  created_date: 2017-02-04
  last_modified_date: 2017-02-04
  credit:
  - Alex Guziel
  references:
  - https://github.com/apache/incubator-airflow/commit/673026c740411cc6447aede8c6a816460fe03a59
  - https://github.com/apache/incubator-airflow/pull/2054
  - https://issues.apache.org/jira/browse/AIRFLOW-836
  - https://lists.apache.org/thread.html/ade4d54ebf614f68dc81a08891755e60ea58ba88e0209233eeea5f57@%3Cdev.airflow.apache.org%3E
  source_url: https://snyk.io/vuln/SNYK-PYTHON-APACHEAIRFLOW-73592
- id: snykio:pypi:apache-airflow:73596
  title: Information Exposure
  description: |
    [apache-airflow][1] is a platform to programmatically author, schedule,
    and monitor workflows.

    Affected versions of this package are vulnerable to Information
    Exposure. An experimental Airflow feature displayed authenticated
    cookies, as well as passwords to databases used by Airflow. An attacker
    who had limited access to airflow, could get all credentials from the
    system.



    [1]: https://pypi.org/project/apache-airflow/
  affected_package: apache-airflow
  vulnerable_versions:
  - ">= 1.8.2 < 1.9.0"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2017-17836
  cwe:
  - CWE-200
  disclosed_date: 2019-01-23
  created_date: 2019-01-23
  last_modified_date: 2019-01-23
  credit:
  - Unknown
  references:
  - https://lists.apache.org/thread.html/ade4d54ebf614f68dc81a08891755e60ea58ba88e0209233eeea5f57@%3Cdev.airflow.apache.org%3E
  source_url: https://snyk.io/vuln/SNYK-PYTHON-APACHEAIRFLOW-73596
- id: snykio:pypi:apache-airflow:73597
  title: Improper Certificate Validation
  description: |
    [apache-airflow][1] is a platform to programmatically author, schedule,
    and monitor workflows.

    Affected versions of this package are vulnerable to Improper Certificate
    Validation. The LDAP auth backend
    (airflow.contrib.auth.backends.ldap\_auth) was misconfigured and
    contained improper checking of exceptions which disabled server
    certificate checking.



    [1]: https://pypi.org/project/apache-airflow/
  affected_package: apache-airflow
  vulnerable_versions:
  - "< 1.10.1"
  severity: high
  package_manager: pypi
  cve:
  - CVE-2018-20245
  cwe:
  - CWE-295
  disclosed_date: 2018-11-22
  created_date: 2019-01-23
  last_modified_date: 2019-01-23
  credit:
  - Stijn van Drongelen
  references:
  - https://lists.apache.org/thread.html/b549c7573b342a6e457e5a3225c33054244343927bbfb2a4cdc4cf73@%3Cdev.airflow.apache.org%3E
  source_url: https://snyk.io/vuln/SNYK-PYTHON-APACHEAIRFLOW-73597
