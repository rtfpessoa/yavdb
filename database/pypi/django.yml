---
- id: snykio:pypi:django:173679
  title: Uncontrolled Memory Consumption
  description: |
    [django][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Uncontrolled Memory
    Consumption. If `django.utils.numberformat.format()` that is used by
    `contrib.admin` as well as the the `floatformat`, `filesizeformat`, and
    `intcomma` templates filters - received a Decimal with a large number of
    digits or a large exponent, it could lead to significant memory usage
    due to a call to `{:f}'.format()`.



    [1]: https://pypi.org/project/Django/
  affected_package: django
  vulnerable_versions:
  - ">= 1.11.0 < 1.11.19"
  - ">= 2.0.0 < 2.0.11"
  - ">= 2.1.0 < 2.1.6"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2019-6975
  cwe:
  - CWE-789
  disclosed_date: 2019-02-11
  created_date: 2019-02-11
  last_modified_date: 2019-02-11
  credit:
  - Carlton Gibson
  references:
  - https://github.com/django/django/commit/40cd19055773705301c3428ed5e08a036d2091f3
  - https://groups.google.com/forum/#!topic/django-announce/WTwEAprR0IQ
  - https://www.djangoproject.com/weblog/2019/feb/11/security-releases/
  - https://www.openwall.com/lists/oss-security/2019/02/11/1
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-173679
- id: snykio:pypi:django:174885
  title: Cross-site Scripting (XSS)
  description: |+
    [django][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). The clickable Current URL value displayed by the
    `AdminURLFieldWidget` displays the provided value without validating it
    as a safe URL. Thus, an unvalidated value stored in the database, or a
    value provided as a URL query parameter payload, could result in an
    clickable JavaScript link.



    [1]: https://pypi.org/project/Django/
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: django
  vulnerable_versions:
  - ">= 1.11.0 < 1.11.21"
  - ">= 2.1.0 < 2.1.9"
  - ">= 2.2.0 < 2.2.2"
  severity: low
  package_manager: pypi
  cve:
  - CVE-2019-12308
  cwe:
  - CWE-79
  disclosed_date: 2019-06-03
  created_date: 2019-06-03
  last_modified_date: 2019-06-03
  credit:
  - Unknown
  references:
  - https://bugzilla.redhat.com/show_bug.cgi?id=1715915
  - https://docs.djangoproject.com/en/dev/releases/security/
  - https://github.com/django/django/commit/afddabf8428ddc89a332f7a78d0d21eaf2b5a673
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-174885
- id: snykio:pypi:django:40025
  title: Arbitrary Code Execution
  description: |
    [`Django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Arbitrary Code
    Execution attacks. The `django.core.urlresolvers.reverse` function
    allows remote attackers to import and execute arbitrary Python modules
    by leveraging a view that constructs URLs using user input and a
    \"dotted Python path.\"



    [1]: https://pypi.python.org/pypi/Django
  affected_package: django
  vulnerable_versions:
  - "< 1.4.11"
  - ">= 1.5 < 1.5.6"
  - ">= 1.6 < 1.6.3"
  - ">= 1.7 < 1.7.1"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2014-0472
  cwe:
  - CWE-94
  disclosed_date: 2014-04-23
  created_date: 2014-04-23
  last_modified_date: 2014-04-23
  credit:
  - Benjamin Bach
  references:
  - https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2014-0472
  - https://rhn.redhat.com/errata/RHSA-2014-0456.html
  - https://www.djangoproject.com/weblog/2014/apr/21/security/
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40025
- id: snykio:pypi:django:40026
  title: Cross-site Request Forgery (CSRF)
  description: |
    [`Django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Cross-site Request
    Forgery (CSRF) attacks. The caching framework reuses a cached CSRF token
    for all anonymous users, which allows remote attackers to bypass CSRF
    protections by reading the CSRF cookie for anonymous users.



    [1]: https://pypi.python.org/pypi/Django
  affected_package: django
  vulnerable_versions:
  - "< 1.4.11"
  - ">= 1.5 < 1.5.6"
  - ">= 1.6 < 1.6.3"
  - ">= 1.7 < 1.7.1"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2014-0473
  cwe:
  - CWE-264
  disclosed_date: 2014-04-23
  created_date: 2014-04-23
  last_modified_date: 2014-04-23
  credit:
  - Paul McMillan
  references:
  - https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2014-0473
  - https://rhn.redhat.com/errata/RHSA-2014-0456.html
  - https://www.djangoproject.com/weblog/2014/apr/21/security/
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40026
- id: snykio:pypi:django:40027
  title: SQL Injection
  description: |
    [`Django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to SQL Injection
    attacks. The `FilePathField`, `GenericIPAddressField`, and
    `IPAddressField` model field classes in Django do not properly perform
    type conversion, which allows remote attackers to have unspecified
    impact and vectors, related to \"MySQL typecasting.\"



    [1]: https://pypi.python.org/pypi/Django
  affected_package: django
  vulnerable_versions:
  - "< 1.4.11"
  - ">= 1.5 < 1.5.6"
  - ">= 1.6 < 1.6.3"
  - ">= 1.7 < 1.7.1"
  severity: high
  package_manager: pypi
  cve:
  - CVE-2014-0474
  cwe:
  - CWE-399
  disclosed_date: 2014-04-23
  created_date: 2014-04-23
  last_modified_date: 2014-04-23
  credit:
  - Michael Koziarski
  references:
  - https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2014-0474
  - https://rhn.redhat.com/errata/RHSA-2014-0456.html
  - https://www.djangoproject.com/weblog/2014/apr/21/security/
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40027
- id: snykio:pypi:django:40053
  title: Cross-site Scripting (XSS)
  description: |+
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks. It allows remote attackers to inject arbitrary web script
    or HTML via a `csrfmiddlewaretoken` (aka `csrf_token`) cookie.



    [1]: https://pypi.python.org/pypi/django
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: django
  vulnerable_versions:
  - ">= 1.2 < 1.2.2"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2010-3082
  cwe:
  - CWE-79
  disclosed_date: 2010-09-09
  created_date: 2010-09-09
  last_modified_date: 2010-09-09
  credit:
  - Jeff Balogh
  references:
  - http://www.djangoproject.com/weblog/2010/sep/08/security-release/
  - https://bugzilla.redhat.com/show_bug.cgi?id=632239
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2010-3082
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40053
- id: snykio:pypi:django:40055
  title: Information Exposure
  description: |
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package expose sensitive information due to
    not properly restricting the use of a query string that performs certain
    object filtering. An attacker may obtain sensitive information via a
    series of requests containing regular expressions, as demonstrated by a
    `created_by__password__regex` parameter.



    [1]: https://pypi.python.org/pypi/django
  affected_package: django
  vulnerable_versions:
  - "< 1.1.3"
  - ">= 1.2 < 1.2.4"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2010-4534
  cwe:
  - CWE-264
  disclosed_date: 2010-12-22
  created_date: 2010-12-22
  last_modified_date: 2010-12-22
  credit:
  - Adam Baldwin
  references:
  - http://www.djangoproject.com/weblog/2010/dec/22/security/
  - http://www.openwall.com/lists/oss-security/2011/01/03/5
  - https://bugzilla.redhat.com/show_bug.cgi?id=665373
  - https://github.com/django/django/commit/732198ed5c
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2010-4534
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40055
- id: snykio:pypi:django:40056
  title: Denial of Service (DoS)
  description: |+
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS) attacks. The length of a string representing a base36 timestamp
    was not validated, allowing remote attackers to cause a denial of
    service (resource consumption) via a URL that specifies a large base36
    integer.



    [1]: https://pypi.python.org/pypi/django
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: django
  vulnerable_versions:
  - "< 1.1.3"
  - ">= 1.2 < 1.2.4"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2010-4535
  cwe:
  - CWE-20
  disclosed_date: 2010-12-22
  created_date: 2010-12-22
  last_modified_date: 2010-12-22
  credit:
  - Paul McMillan
  references:
  - http://www.djangoproject.com/weblog/2010/dec/22/security
  - http://www.openwall.com/lists/oss-security/2011/01/03/5
  - https://bugzilla.redhat.com/show_bug.cgi?id=665373
  - https://github.com/django/django/commit/6819be1ea1
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2010-4535
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40056
- id: snykio:pypi:django:40058
  title: Cross-site Request Forgery (CSRF)
  description: |
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Cross-site Request
    Forgery (CSRF) attacks. It didn\'t properly validate HTTP requests
    containing an `X-Requested-With` header, which makes it easier for
    remote attackers to bypass CSRF protection with forged AJAX requests
    that leverage a \"combination of browser plugins and redirects\".



    [1]: https://pypi.python.org/pypi/django
  affected_package: django
  vulnerable_versions:
  - "< 1.1.4"
  - ">= 1.2 < 1.2.5"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2011-0696
  cwe:
  - CWE-352
  disclosed_date: 2011-02-08
  created_date: 2011-02-08
  last_modified_date: 2011-02-08
  credit:
  - Michael Koziarski
  references:
  - http://openwall.com/lists/oss-security/2011/02/09/6
  - http://www.djangoproject.com/weblog/2011/feb/08/security/
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2011-0696
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40058
- id: snykio:pypi:django:40059
  title: Cross-site Scripting (XSS)
  description: |+
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks. A filename associated with a file upload was not escaped
    before rendering.



    [1]: https://pypi.python.org/pypi/django
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: django
  vulnerable_versions:
  - "< 1.1.4"
  - ">= 1.2 < 1.2.5"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2011-0697
  cwe:
  - CWE-79
  disclosed_date: 2011-02-08
  created_date: 2011-02-08
  last_modified_date: 2011-02-08
  credit:
  - e.generalov
  references:
  - http://openwall.com/lists/oss-security/2011/02/09/6
  - http://www.djangoproject.com/weblog/2011/feb/08/security/
  - https://bugzilla.redhat.com/show_bug.cgi?id=676359
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2011-0697
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40059
- id: snykio:pypi:django:40060
  title: Directory Traversal
  description: |
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Directory Traversal
    on Windows. If a `/` (slash) is present in a session cookie, an attacker
    may be able to read or execute files



    [1]: https://pypi.python.org/pypi/django
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
  affected_package: django
  vulnerable_versions:
  - "< 1.1.4"
  - ">= 1.2 < 1.2.5"
  severity: high
  package_manager: pypi
  cve:
  - CVE-2011-0698
  cwe:
  - CWE-22
  disclosed_date: 2011-02-08
  created_date: 2011-02-08
  last_modified_date: 2011-02-08
  credit:
  - Paul McMillan
  references:
  - http://openwall.com/lists/oss-security/2011/02/09/6
  - http://www.djangoproject.com/weblog/2011/feb/08/security/
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2011-0698
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40060
- id: snykio:pypi:django:40079
  title: Session Manipulation
  description: |
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Session
    Manipulation. It stored session data in the cache using the root
    namespace for both session identifiers and application-data keys. This
    allows remote attackers to modify a session by triggering use of a key
    that is equal to that session\'s identifier.



    [1]: https://pypi.python.org/pypi/django
  affected_package: django
  vulnerable_versions:
  - "< 1.2.7"
  - ">= 1.3 < 1.3.1"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2011-4136
  cwe:
  - CWE-20
  disclosed_date: 2011-09-11
  created_date: 2011-09-11
  last_modified_date: 2011-09-11
  credit:
  - Paul McMillan
  references:
  - http://openwall.com/lists/oss-security/2011/09/11/1
  - https://bugzilla.redhat.com/show_bug.cgi?id=737366
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2011-4136
  - https://www.djangoproject.com/weblog/2011/sep/09/security-releases-issued/
  - https://www.djangoproject.com/weblog/2011/sep/10/127/
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40079
- id: snykio:pypi:django:40081
  title: Denial of Service (DoS)
  description: |+
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Denial of Service
    attacks. The `verify_exists` functionality in the `URLField`
    implementation relies on Python libraries that attempt access to an
    arbitrary URL with no timeout. This allows remote attackers to cause a
    high resource consumption with a URL that can cause a timeout (a TCP
    connection with no application data sent, or a large amount of
    application data).



    [1]: https://pypi.python.org/pypi/django
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: django
  vulnerable_versions:
  - "< 1.2.7"
  - ">= 1.3 < 1.3.1"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2011-4137
  cwe:
  - CWE-399
  disclosed_date: 2011-09-11
  created_date: 2011-09-11
  last_modified_date: 2011-09-11
  credit:
  - Paul McMillan
  references:
  - http://openwall.com/lists/oss-security/2011/09/11/1
  - https://bugzilla.redhat.com/show_bug.cgi?id=737366
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2011-4137
  - https://www.djangoproject.com/weblog/2011/sep/09/security-releases-issued/
  - https://www.djangoproject.com/weblog/2011/sep/10/127/
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40081
- id: snykio:pypi:django:40082
  title: Arbitrary Request Generation
  description: |
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable due to lack of request
    validation. The `verify_exists` functionality in the `URLField`
    originally tests a URL\'s validity through a HEAD request, but then uses
    a GET request for the new target URL in the case of a redirect. This may
    allow remote attackers to trigger arbitrary GET requests with an
    unintended source IP address via a crafted Location header.



    [1]: https://pypi.python.org/pypi/django
  affected_package: django
  vulnerable_versions:
  - "< 1.2.7"
  - ">= 1.3 < 1.3.1"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2011-4138
  cwe:
  - CWE-20
  disclosed_date: 2011-09-11
  created_date: 2011-09-11
  last_modified_date: 2011-09-11
  credit:
  - Paul McMillan
  references:
  - http://openwall.com/lists/oss-security/2011/09/11/1
  - https://bugzilla.redhat.com/show_bug.cgi?id=737366
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2011-4138
  - https://www.djangoproject.com/weblog/2011/sep/09/security-releases-issued/
  - https://www.djangoproject.com/weblog/2011/sep/10/127/
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40082
- id: snykio:pypi:django:40083
  title: Cache Poisoning
  description: |
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Cache Poisoning. It
    used a request\'s HTTP Host header to construct a full URL. An attacker
    can submit a request with a Host header of his or her choice, receive a
    response which constructs URLs using that Host header, and If that
    response is cached, further requests will be served out of cache using
    URLs containing the attacker\'s host of choice.



    [1]: https://pypi.python.org/pypi/django
  affected_package: django
  vulnerable_versions:
  - "< 1.2.7"
  - ">= 1.3 < 1.3.1"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2011-4139
  cwe:
  - CWE-20
  disclosed_date: 2011-09-11
  created_date: 2011-09-11
  last_modified_date: 2011-09-11
  credit:
  - Django Core Development Team
  references:
  - http://openwall.com/lists/oss-security/2011/09/11/1
  - https://bugzilla.redhat.com/show_bug.cgi?id=737366
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2011-4139
  - https://www.djangoproject.com/weblog/2011/sep/09/security-releases-issued/
  - https://www.djangoproject.com/weblog/2011/sep/10/127/
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40083
- id: snykio:pypi:django:40084
  title: Cross-site Request Forgery (CSRF)
  description: |
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Cross-site Request
    Forgery (CSRF). The CSRF protection mechanism does not properly handle
    web-server configurations supporting arbitrary HTTP Host headers, which
    allows remote attackers to trigger unauthenticated forged requests via
    vectors involving a DNS CNAME record and a web page containing
    JavaScript code.



    [1]: https://pypi.python.org/pypi/django
  affected_package: django
  vulnerable_versions:
  - "< 1.2.7"
  - ">= 1.3 < 1.3.1"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2011-4140
  cwe:
  - CWE-352
  disclosed_date: 2011-09-11
  created_date: 2011-09-11
  last_modified_date: 2011-09-11
  credit:
  - Mozilla
  references:
  - http://openwall.com/lists/oss-security/2011/09/11/1
  - https://bugzilla.redhat.com/show_bug.cgi?id=737366
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2011-4140
  - https://www.djangoproject.com/weblog/2011/sep/09/security-releases-issued/
  - https://www.djangoproject.com/weblog/2011/sep/10/127/
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40084
- id: snykio:pypi:django:40085
  title: Information Exposure
  description: |
    [`Django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Information
    Exposure. When the `DEBUG` is set to `True`, Exceptions generate a
    formatted error page, including the full traceback and a display of the
    HTTP request and relevant settings. Sensitive settings are obscured in
    this display, but the data submitted with the HTTP request is not. An
    error in a login view could result in a DEBUG page displaying the
    plain-text password (from the POST data).



    [1]: https://pypi.python.org/pypi/Django
  affected_package: django
  vulnerable_versions:
  - "< 1.2.7"
  - ">= 1.3 < 1.3.1"
  severity: low
  package_manager: pypi
  cwe:
  - CWE-352
  disclosed_date: 2011-09-11
  created_date: 2011-09-11
  last_modified_date: 2011-09-11
  credit:
  - Julien Phalip
  references:
  - http://openwall.com/lists/oss-security/2011/09/11/1
  - https://bugzilla.redhat.com/show_bug.cgi?id=737366
  - https://www.djangoproject.com/weblog/2011/sep/09/security-releases-issued/
  - https://www.djangoproject.com/weblog/2011/sep/10/127/
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40085
- id: snykio:pypi:django:40098
  title: Cross-site Scripting (XSS)
  description: |+
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). The `HttpResponseRedirect` and `HttpResponsePermanentRedirect`
    classes do not validate the scheme of a redirect target, allowing
    attackers to use Data: URLs to conduct an attack.



    [1]: https://pypi.python.org/pypi/django
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: django
  vulnerable_versions:
  - "< 1.3.2"
  - ">= 1.4 < 1.4.1"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2012-3442
  cwe:
  - CWE-79
  disclosed_date: 2012-06-30
  created_date: 2012-06-30
  last_modified_date: 2012-06-30
  credit:
  - Unknown
  references:
  - http://www.openwall.com/lists/oss-security/2012/07/31/2
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2012-3442
  - https://www.djangoproject.com/weblog/2012/jul/30/security-releases-issued/
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40098
- id: snykio:pypi:django:40099
  title: Denial of Service (DoS)
  description: |+
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS) attacks. The `ImageField` class in the form system completely
    decompresses image data during image validation, which allows remote
    attackers to cause a denial of service (memory consumption) by uploading
    a malicious image file.



    [1]: https://pypi.python.org/pypi/django
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: django
  vulnerable_versions:
  - "< 1.3.2"
  - ">= 1.4 < 1.4.1"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2012-3443
  cwe:
  - CWE-20
  disclosed_date: 2012-06-30
  created_date: 2012-06-30
  last_modified_date: 2012-06-30
  credit:
  - Unknown
  references:
  - http://www.openwall.com/lists/oss-security/2012/07/31/2
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2012-3443
  - https://www.djangoproject.com/weblog/2012/jul/30/security-releases-issued/
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40099
- id: snykio:pypi:django:40100
  title: Denial of Service (DoS)
  description: |+
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS) attacks. The `get_image_dimensions` function in the image-handling
    functionality uses a constant chunk size in all attempts to determine
    dimensions, which allows remote attackers to cause a high process or
    thread consumption via a large TIFF image.



    [1]: https://pypi.python.org/pypi/django
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: django
  vulnerable_versions:
  - "< 1.3.2"
  - ">= 1.4 < 1.4.1"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2012-3444
  cwe:
  - CWE-119
  disclosed_date: 2012-06-30
  created_date: 2012-06-30
  last_modified_date: 2012-06-30
  credit:
  - Jeroen Dekkers
  references:
  - http://www.openwall.com/lists/oss-security/2012/07/31/2
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2012-3444
  - https://www.djangoproject.com/weblog/2012/jul/30/security-releases-issued/
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40100
- id: snykio:pypi:django:40104
  title: Host Header Poisoning
  description: |
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Host Header
    Poisoning. The `django.http.HttpRequest.get_host` function incorrectly
    handled username/password information in the header. This allows remote
    attackers to generate and display arbitrary URLs via crafted username
    and password Host header values.



    [1]: https://pypi.python.org/pypi/django
  affected_package: django
  vulnerable_versions:
  - "< 1.3.4"
  - ">= 1.4 < 1.4.2"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2012-4520
  cwe:
  - CWE-20
  disclosed_date: 2012-10-17
  created_date: 2012-10-17
  last_modified_date: 2012-10-17
  credit:
  - James Kettle
  references:
  - http://www.openwall.com/lists/oss-security/2012/10/30/4
  - https://bugzilla.redhat.com/show_bug.cgi?id=865164
  - https://github.com/django/django/commit/92d3430f12171f16f566c9050c40feefb830a4a3
  - https://github.com/django/django/commit/9305c0e12d43c4df999c3301a1f0c742264a657e
  - https://github.com/django/django/commit/b45c377f8f488955e0c7069cad3f3dd21910b071
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2012-4520
  - https://www.djangoproject.com/weblog/2012/oct/17/security/
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40104
- id: snykio:pypi:django:40172
  title: Information Exposure
  description: |
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Information
    Exposure. The administrative interface did not check permissions for the
    history view, which allows remote authenticated administrators to obtain
    sensitive object history information.



    [1]: https://pypi.python.org/pypi/django
  affected_package: django
  vulnerable_versions:
  - "< 1.3.6"
  - ">= 1.4 < 1.4.4"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2013-0305
  cwe:
  - CWE-200
  disclosed_date: 2013-03-21
  created_date: 2013-03-21
  last_modified_date: 2013-03-21
  credit:
  - Orange Tsai
  references:
  - http://rhn.redhat.com/errata/RHSA-2013-0670.html
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2013-0305
  - https://www.djangoproject.com/weblog/2013/feb/19/security/
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40172
- id: snykio:pypi:django:40173
  title: Denial of Service (DoS)
  description: |+
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS) attacks. The form library allows remote attackers to bypass
    intended resource limits for formsets by modifying the `max_num`
    parameter and cause high memory consumption, or trigger server errors.



    [1]: https://pypi.python.org/pypi/django
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: django
  vulnerable_versions:
  - "< 1.3.6"
  - ">= 1.4 < 1.4.4"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2013-0306
  cwe:
  - CWE-189
  disclosed_date: 2013-03-21
  created_date: 2013-03-21
  last_modified_date: 2013-03-21
  credit:
  - Mozilla
  references:
  - http://rhn.redhat.com/errata/RHSA-2013-0670.html
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2013-0306
  - https://www.djangoproject.com/weblog/2013/feb/19/security/
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40173
- id: snykio:pypi:django:40174
  title: Denial of Service (DoS)
  description: |+
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS) attacks. An attacker may conduct an attack upon deserialization of
    an XML object. This vulnerability is related to CVE-2013-1664.



    [1]: https://pypi.python.org/pypi/django
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: django
  vulnerable_versions:
  - "< 1.3.6"
  - ">= 1.4 < 1.4.4"
  severity: medium
  package_manager: pypi
  cwe:
  - CWE-119
  disclosed_date: 2016-09-30
  created_date: 2016-09-30
  last_modified_date: 2016-09-30
  credit:
  - Michael Koziarski
  references:
  - http://rhn.redhat.com/errata/RHSA-2013-0670.html
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2013-1664
  - https://www.djangoproject.com/weblog/2013/feb/19/security/
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40174
- id: snykio:pypi:django:40175
  title: XML External Entity (XXE) Injection
  description: |+
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to XML External Entity
    (XXE) attacks. An attacker may be able to read arbitrary files via an
    XML external entity declaration in conjunction with an entity reference.
    This vulnerability is related to CVE-2013-1665.



    [1]: https://pypi.python.org/pypi/django
    \nXXE Injection is a type of attack against an application that parses XML
    input. XML is a markup language that defines a set of rules for encoding
    documents in a format that is both human-readable and machine-readable.
    By default, many XML processors allow specification of an external
    entity, a URI that is dereferenced and evaluated during XML processing.
    When an XML document is being parsed, the parser can make a request and
    include the content at the specified URI inside of the XML document.

    Attacks can include disclosing local files, which may contain sensitive
    data such as passwords or private user data, using file: schemes or
    relative paths in the system identifier.

    For example, below is a sample XML document, containing an XML element-
    username.

        <?xml version="1.0" encoding="ISO-8859-1"?>
           <username>John</username>
        </xml>
    {: .language-xml}

    An external XML entity - `xxe`, is defined using a system identifier and
    present within a DOCTYPE header. These entities can access local or
    remote content. For example the below code contains an external XML
    entity that would fetch the content of `/etc/passwd` and display it to
    the user rendered by `username`.

        <?xml version="1.0" encoding="ISO-8859-1"?>
        <!DOCTYPE foo [
           <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
           <username>&xxe;</username>
        </xml>
    {: .language-xml}

    Other XXE Injection attacks can access local resources that may not stop
    returning data, possibly impacting application availability and leading
    to Denial of Service.

  affected_package: django
  vulnerable_versions:
  - "< 1.3.6"
  - ">= 1.4 < 1.4.4"
  severity: medium
  package_manager: pypi
  cwe:
  - CWE-611
  disclosed_date: 2013-03-21
  created_date: 2013-03-21
  last_modified_date: 2013-03-21
  credit:
  - Michael Koziarski
  references:
  - http://rhn.redhat.com/errata/RHSA-2013-0670.html
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2013-1665
  - https://www.djangoproject.com/weblog/2013/feb/19/security/
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40175
- id: snykio:pypi:django:40176
  title: Cross-site Scripting (XSS)
  description: |+
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks. The `AdminURLFieldWidget` widget in allows remote
    attackers to inject arbitrary web script or HTML via a URLField.



    [1]: https://pypi.python.org/pypi/django
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: django
  vulnerable_versions:
  - "< 1.4.6"
  - ">= 1.5 < 1.5.2"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2013-4249
  cwe:
  - CWE-79
  disclosed_date: 2013-08-13
  created_date: 2013-08-13
  last_modified_date: 2013-08-13
  credit:
  - Łukasz Langa
  references:
  - http://seclists.org/oss-sec/2013/q3/369
  - https://github.com/django/django/commit/90363e388c61874add3f3557ee654a996ec75d78
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2013-4249
  - https://www.djangoproject.com/weblog/2013/aug/13/security-releases-issued
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40176
- id: snykio:pypi:django:40177
  title: Cross-site Scripting (XSS)
  description: |+
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks. The `is_safe_url` function treats a URL\'s scheme\'s like
    `javascript: scheme` as safe even if it is not HTTP or HTTPS



    [1]: https://pypi.python.org/pypi/django
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: django
  vulnerable_versions:
  - "< 1.4.6"
  - ">= 1.5 < 1.5.2"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2013-6044
  cwe:
  - CWE-79
  disclosed_date: 2013-08-13
  created_date: 2013-08-13
  last_modified_date: 2013-08-13
  credit:
  - Nick Bruun
  references:
  - http://seclists.org/oss-sec/2013/q3/369
  - https://github.com/django/django/commit/1a274ccd6bc1afbdac80344c9b6e5810c1162b5f
  - https://github.com/django/django/commit/ec67af0bd609c412b76eaa4cc89968a2a8e5ad6a
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2013-6044
  - https://www.djangoproject.com/weblog/2013/aug/13/security-releases-issued
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40177
- id: snykio:pypi:django:40220
  title: Denial of Service (DoS)
  description: |+
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS) attacks. The authentication framework (`django.contrib.auth`)
    hashes passwords with a function that does repeated rounds of
    computation before finishing. If long password is entered, it may cause
    high CPU consumption. An attacker may send many of these passwords to be
    hashed and cause a denial of service.



    [1]: https://pypi.python.org/pypi/django
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: django
  vulnerable_versions:
  - "< 1.4.8"
  - ">= 1.5 < 1.5.4"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2013-1443
  cwe:
  - CWE-287
  disclosed_date: 2013-09-15
  created_date: 2013-09-15
  last_modified_date: 2013-09-15
  credit:
  - Josh Wright
  references:
  - http://python.6.x6.nabble.com/Set-a-reasonable-upper-bound-on-password-length-td5032218.html
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2013-1443
  - https://www.djangoproject.com/weblog/2013/sep/15/security/
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40220
- id: snykio:pypi:django:40225
  title: Directory Traversal
  description: |
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Directory Traversal
    attacks. In the ssi template tag, the `ALLOWED_INCLUDE_ROOTS` setting is
    a path that, with the use of `..` (dot dot), allows an attacker to
    access files for reading.



    [1]: https://pypi.python.org/pypi/django
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
  affected_package: django
  vulnerable_versions:
  - "< 1.4.7"
  - ">= 1.5 < 1.5.3"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2013-4315
  cwe:
  - CWE-22
  disclosed_date: 2013-09-16
  created_date: 2013-11-14
  last_modified_date: 2013-11-14
  credit:
  - Rainer Koirikivi
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2013-4315
  - https://www.djangoproject.com/weblog/2013/sep/10/security-releases-issued/
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40225
- id: snykio:pypi:django:40256
  title: Cache Poisoning
  description: |
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Cache Poisoning. It
    does not properly include the `Vary: Cookie` or `Cache-Control` header
    in responses, which allows remote attackers to obtain sensitive
    information or poison the cache via a request from certain browsers.



    [1]: https://pypi.python.org/pypi/django
  affected_package: django
  vulnerable_versions:
  - "< 1.4.13"
  - ">= 1.5 < 1.5.8"
  - ">= 1.6 < 1.6.5"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2014-1418
  cwe:
  - CWE-444
  disclosed_date: 2014-05-14
  created_date: 2014-05-14
  last_modified_date: 2014-05-14
  credit:
  - James Westby
  - Michael Nelson
  - Natalia Bidart
  - Seth Arnold
  references:
  - http://www.openwall.com/lists/oss-security/2014/05/14/10
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-1418
  - https://www.djangoproject.com/weblog/2014/may/14/security-releases-issued/
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40256
- id: snykio:pypi:django:40257
  title: Open Redirect
  description: |
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Open Redirecting.
    The `http.is_safe_url()` function does not properly validate URLs, like
    `http:\\\djangoproject.com.`, which This allows a user to be redirected
    to an unsafe URL unexpectedly.



    [1]: https://pypi.python.org/pypi/django
  affected_package: django
  vulnerable_versions:
  - "< 1.4.13"
  - ">= 1.5 < 1.5.8"
  - ">= 1.6 < 1.6.5"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2014-3730
  cwe:
  - CWE-20
  disclosed_date: 2014-05-14
  created_date: 2014-05-14
  last_modified_date: 2014-05-14
  credit:
  - Gavin Wahl
  - Peter Kuma
  references:
  - http://www.openwall.com/lists/oss-security/2014/05/14/10
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-3730
  - https://www.djangoproject.com/weblog/2014/may/14/security-releases-issued/
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40257
- id: snykio:pypi:django:40258
  title: Malicious Link Generation
  description: |
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Phishing attacks.
    The `reverse()` function does not properly validate URLs. When user
    input beginning with two forward-slash characters (`//`), `reverse()`
    could generate scheme-relative URLs to other hosts, allowing an attacker
    to generate links to sites of their choice, enabling phishing and other
    attacks.



    [1]: https://pypi.python.org/pypi/django
  affected_package: django
  vulnerable_versions:
  - "< 1.4.14"
  - ">= 1.5 < 1.5.9"
  - ">= 1.6 < 1.6.6"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2014-0480
  cwe:
  - CWE-20
  disclosed_date: 2014-08-20
  created_date: 2014-08-20
  last_modified_date: 2014-08-20
  credit:
  - Florian Apolloner
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-0480
  - https://www.djangoproject.com/weblog/2014/aug/20/security/
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40258
- id: snykio:pypi:django:40259
  title: Denial of Service (DoS)
  description: |+
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS) attacks.The default configuration for the file upload handling
    uses a sequential file name generation process when a file with a
    conflicting name is uploaded. An attackers can cause high CPU
    consumption by uploading multiple files with the same name.



    [1]: https://pypi.python.org/pypi/django
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: django
  vulnerable_versions:
  - "< 1.4.14"
  - ">= 1.5 < 1.5.9"
  - ">= 1.6 < 1.6.6"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2014-0481
  cwe:
  - CWE-399
  disclosed_date: 2014-08-20
  created_date: 2014-08-20
  last_modified_date: 2014-08-20
  credit:
  - David Wilson
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-0481
  - https://www.djangoproject.com/weblog/2014/aug/20/security/
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40259
- id: snykio:pypi:django:40261
  title: Session Hijacking
  description: |
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Session Hijacking.
    The `RemoteUserMiddleware` when using the
    `contrib.auth.backends.RemoteUserBackend` backend, allows remote
    authenticated users to hijack web sessions via the `REMOTE_USER` header
    as logout/login actions are not checked.



    [1]: https://pypi.python.org/pypi/django
  affected_package: django
  vulnerable_versions:
  - "< 1.4.14"
  - ">= 1.5 < 1.5.9"
  - ">= 1.6 < 1.6.6"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2014-0482
  cwe:
  - CWE-287
  disclosed_date: 2014-05-14
  created_date: 2014-05-14
  last_modified_date: 2014-05-14
  credit:
  - David Greisen
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-0482
  - https://www.djangoproject.com/weblog/2014/aug/20/security/
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40261
- id: snykio:pypi:django:40262
  title: Information Exposure
  description: |
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Information
    Exposure. The administrative interface (`contrib.admin`) does not check
    if a field represents a relationship between models. This allows remote
    authenticated users to obtain sensitive information via the `to_field`
    parameter in a popup action to an admin change form page.



    [1]: https://pypi.python.org/pypi/django
  affected_package: django
  vulnerable_versions:
  - "< 1.4.14"
  - ">= 1.5 < 1.5.9"
  - ">= 1.6 < 1.6.6"
  severity: low
  package_manager: pypi
  cve:
  - CVE-2014-0483
  cwe:
  - CWE-264
  disclosed_date: 2014-08-20
  created_date: 2014-08-20
  last_modified_date: 2014-08-20
  credit:
  - Collin Anderson
  references:
  - https://github.com/django/django/commit/2b31342cdf14fc20e07c43d258f1e7334ad664a6
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-0483
  - https://www.djangoproject.com/weblog/2014/aug/20/security/
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40262
- id: snykio:pypi:django:40302
  title: WSGI Header Spoofing
  description: |
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to WSGI header
    spoofing. A malicious user could exploit this vulnerability by using an
    `_` character instead of a `-` in an HTTP header. In the WSGI environ,
    the `X-Auth-User` and the `X-Auth_User` headers are both converted to
    `HTTP_X_Auth_User`, allowing the attacker to bypass the protection.



    [1]: https://pypi.python.org/pypi/django
  affected_package: django
  vulnerable_versions:
  - "< 1.4.18"
  - ">= 1.5 < 1.6.10"
  - ">= 1.7 < 1.7.3"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2015-0219
  cwe:
  - CWE-17
  disclosed_date: 2015-01-13
  created_date: 2015-01-13
  last_modified_date: 2015-01-13
  credit:
  - Jedediah Smith
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2015-0219
  - https://www.djangoproject.com/weblog/2015/jan/13/security/
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40302
- id: snykio:pypi:django:40303
  title: Cross-site Scripting (XSS)
  description: |+
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks. The `is_safe_url()` function did not properly handle
    leading whitespaces, which allows remote attackers to craft URLs like
    `\njavascript:`.



    [1]: https://pypi.python.org/pypi/django
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: django
  vulnerable_versions:
  - "< 1.4.18"
  - ">= 1.5 < 1.6.10"
  - ">= 1.7 < 1.7.3"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2015-0220
  cwe:
  - CWE-79
  disclosed_date: 2015-01-13
  created_date: 2015-01-13
  last_modified_date: 2015-01-13
  credit:
  - Mikko Ohtamaa
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2015-0220
  - https://www.djangoproject.com/weblog/2015/jan/13/security/
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40303
- id: snykio:pypi:django:40304
  title: Denial of Service (DoS)
  description: |+
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS) attacks. The `serve()` view reads files an entire line at a time,
    which allows remote attackers to cause high memory consumption via a
    long line in a file.



    [1]: https://pypi.python.org/pypi/django
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: django
  vulnerable_versions:
  - "< 1.4.18"
  - ">= 1.5 < 1.6.10"
  - ">= 1.7 < 1.7.3"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2015-0221
  cwe:
  - CWE-399
  disclosed_date: 2015-01-13
  created_date: 2015-01-13
  last_modified_date: 2015-01-13
  credit:
  - Alex Gaynor
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2015-0221
  - https://www.djangoproject.com/weblog/2015/jan/13/security/
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40304
- id: snykio:pypi:django:40305
  title: Denial of Service (DoS)
  description: |+
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS) attacks. When a form uses `show_hidden_initial=True` and
    `ModelMultipleChoiceField`, An attacker may cause a large number of SQL
    queries by submitting duplicate values for the field\'s data.



    [1]: https://pypi.python.org/pypi/django
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: django
  vulnerable_versions:
  - "< 1.4.18"
  - ">= 1.5 < 1.6.10"
  - ">= 1.7 < 1.7.3"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2015-0222
  cwe:
  - CWE-17
  disclosed_date: 2015-01-13
  created_date: 2015-01-13
  last_modified_date: 2015-01-13
  credit:
  - Keryn Knight
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2015-0222
  - https://www.djangoproject.com/weblog/2015/jan/13/security/
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40305
- id: snykio:pypi:django:40315
  title: Cross-site Scripting (XSS)
  description: |+
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks. The contents function in `admin/helpers.py` does not
    escape model attributes in `ModelAdmin.readonly_fields`, allowing
    injection if arbitrary web script or HTML.



    [1]: https://pypi.python.org/pypi/django
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: django
  vulnerable_versions:
  - ">= 1.7 < 1.7.6"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2015-2241
  cwe:
  - CWE-79
  disclosed_date: 2015-03-09
  created_date: 2015-03-09
  last_modified_date: 2015-03-09
  credit:
  - Unknown
  references:
  - https://code.djangoproject.com/ticket/24461
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2015-2241
  - https://www.djangoproject.com/weblog/2015/mar/09/security-releases/
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40315
- id: snykio:pypi:django:40317
  title: Denial of Service (DoS)
  description: |+
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to a Denial of Service
    (DoS) attacks. When an inputing a long string into the
    `utils.html.strip_tags` function, an infinite loop occurs.

    **Note:** This occurs only when using Python &lt;2.7.7 or =3.3.5.



    [1]: https://pypi.python.org/pypi/django
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: django
  vulnerable_versions:
  - "< 1.4.20"
  - ">= 1.5 < 1.6.11"
  - ">= 1.7 < 1.7.7"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2015-2316
  cwe:
  - CWE-399
  disclosed_date: 2015-03-18
  created_date: 2015-03-18
  last_modified_date: 2015-03-18
  credit:
  - Andrey Babak
  references:
  - http://www.oracle.com/technetwork/topics/security/bulletinapr2015-2511959.html
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2015-2316
  - https://www.djangoproject.com/weblog/2015/mar/18/security-releases/
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40317
- id: snykio:pypi:django:40318
  title: Cross-site Scripting (XSS)
  description: |+
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks. The `utils.http.is_safe_url` function did not properly
    validate URLs, allowing the execustion of URLs of the sort:
    `\x08javascript: URL`.



    [1]: https://pypi.python.org/pypi/django
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: django
  vulnerable_versions:
  - "< 1.4.20"
  - ">= 1.5 < 1.6.11"
  - ">= 1.7 < 1.7.7"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2015-2317
  cwe:
  - CWE-79
  disclosed_date: 2015-03-18
  created_date: 2015-03-18
  last_modified_date: 2015-03-18
  credit:
  - Daniel Chatfield
  references:
  - http://www.oracle.com/technetwork/topics/security/bulletinapr2015-2511959.html
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2015-2317
  - https://www.djangoproject.com/weblog/2015/mar/18/security-releases/
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40318
- id: snykio:pypi:django:40325
  title: Session Hijacking
  description: |
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Session Hijacking.
    The `session.flush` function in the `cached_db` backend did not properly
    flush the session, which allows remote attackers to hijack user sessions
    via an empty string in the session key.



    [1]: https://pypi.python.org/pypi/django
  affected_package: django
  vulnerable_versions:
  - ">= 1.8 < 1.8.2"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2015-3982
  cwe:
  - CWE-384
  disclosed_date: 2015-05-20
  created_date: 2015-05-20
  last_modified_date: 2015-05-20
  credit:
  - Unknown
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2015-3982
  - https://www.djangoproject.com/weblog/2015/may/20/security-release/
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40325
- id: snykio:pypi:django:40332
  title: Denial of Service (DoS)
  description: |+
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS) attacks. When sending multiple requests with unique session keys,
    the session backends create new empty records in the session storage,
    which can fill the session store.



    [1]: https://pypi.python.org/pypi/django
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: django
  vulnerable_versions:
  - "< 1.4.21"
  - ">= 1.5 < 1.7.9"
  - ">= 1.8 < 1.8.3"
  severity: high
  package_manager: pypi
  cve:
  - CVE-2015-5143
  cwe:
  - CWE-399
  disclosed_date: 2015-07-08
  created_date: 2015-07-08
  last_modified_date: 2015-07-08
  credit:
  - Eric Peterson
  - Lin Hua Cheng
  references:
  - http://rhn.redhat.com/errata/RHSA-2015-1686.html
  - http://www.oracle.com/technetwork/topics/security/bulletinoct2015-2511968.html
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2015-5143
  - https://www.djangoproject.com/weblog/2015/jul/08/security-releases/
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40332
- id: snykio:pypi:django:40333
  title: HTTP Response Splitting
  description: |
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to HTTP Response
    Splitting attacks due to the use of an incorrect regular expression. It
    allows newline characters in email messages (to the `EmailValidator`),
    in URLs (to the `URLValidator`), or other instances. An attacker can
    leverage this to inject arbitrary headers and conduct HTTP response
    splitting attacks.



    [1]: https://pypi.python.org/pypi/django
  affected_package: django
  vulnerable_versions:
  - "< 1.4.21"
  - ">= 1.5 < 1.7.9"
  - ">= 1.8 < 1.8.3"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2015-5144
  cwe:
  - CWE-113
  disclosed_date: 2015-07-08
  created_date: 2015-07-08
  last_modified_date: 2015-07-08
  credit:
  - Unknown
  references:
  - http://www.oracle.com/technetwork/topics/security/bulletinoct2015-2511968.html
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2015-5144
  - https://www.djangoproject.com/weblog/2015/jul/08/security-releases/
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40333
- id: snykio:pypi:django:40334
  title: Denial of Service (DoS)
  description: |+
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS) attacks. The `URLValidator` function included a regular expression
    that was extremely slow to evaluate against certain inputs, causing high
    memory consumption.



    [1]: https://pypi.python.org/pypi/django
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: django
  vulnerable_versions:
  - ">= 1.8 < 1.8.3"
  severity: high
  package_manager: pypi
  cve:
  - CVE-2015-5145
  cwe:
  - CWE-399
  disclosed_date: 2015-07-08
  created_date: 2015-07-08
  last_modified_date: 2015-07-08
  credit:
  - João Silva
  - Ross Brunton
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2015-5145
  - https://www.djangoproject.com/weblog/2015/jul/08/security-releases/
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40334
- id: snykio:pypi:django:40339
  title: Denial of Service (DoS)
  description: |+
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS) attacks. If a large number of requests were made to
    `contrib.auth.views.logout`, it would trigger the creation of an empty
    session records, causing high session store consumption.



    [1]: https://pypi.python.org/pypi/django
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: django
  vulnerable_versions:
  - "< 1.4.22"
  - ">= 1.5 < 1.7.10"
  - ">= 1.8 < 1.8.4"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2015-5963
  cwe:
  - CWE-399
  disclosed_date: 2015-08-18
  created_date: 2015-08-18
  last_modified_date: 2015-08-18
  credit:
  - Lin Hua Cheng
  references:
  - http://rhn.redhat.com/errata/RHSA-2015-1766.html
  - http://www.oracle.com/technetwork/topics/security/bulletinoct2015-2511968.html
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2015-5963
  - https://www.djangoproject.com/weblog/2015/aug/18/security-releases/
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40339
- id: snykio:pypi:django:40340
  title: Denial of Service (DoS)
  description: |+
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS) attacks. The `contrib.sessions.backends.base.SessionBase.flush`
    and `cache_db.SessionStore.flush` functions create empty sessions
    causing session store consumption.



    [1]: https://pypi.python.org/pypi/django
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: django
  vulnerable_versions:
  - "< 1.4.22"
  - ">= 1.5 < 1.7.10"
  - ">= 1.8 < 1.8.4"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2015-5964
  cwe:
  - CWE-399
  disclosed_date: 2015-08-18
  created_date: 2015-08-18
  last_modified_date: 2015-08-18
  credit:
  - Lin Hua Cheng
  references:
  - http://rhn.redhat.com/errata/RHSA-2015-1766.html
  - http://www.oracle.com/technetwork/topics/security/bulletinoct2015-2511968.html
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2015-5964
  - https://www.djangoproject.com/weblog/2015/aug/18/security-releases/
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40340
- id: snykio:pypi:django:40359
  title: Information Exposure
  description: |
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Information
    Exposure. It is possible for a user to specify the date format and pass
    it to the date filter, e.g. `{{ last_updated|date:user_date_format }}`.
    An attacker could send a settings key instead of a date format (like
    `SECRET_KEY`), and obtain any secret in the application\'s settings.



    [1]: https://pypi.python.org/pypi/django
  affected_package: django
  vulnerable_versions:
  - "< 1.7.11"
  - ">= 1.8 < 1.8.7"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2015-8213
  cwe:
  - CWE-200
  disclosed_date: 2015-11-24
  created_date: 2015-11-24
  last_modified_date: 2015-11-24
  credit:
  - Ryan Butterfield
  references:
  - http://rhn.redhat.com/errata/RHSA-2016-0129.html
  - https://github.com/django/django/commit/316bc3fc9437c5960c24baceb93c73f1939711e4
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2015-8213
  - https://www.djangoproject.com/weblog/2015/nov/24/security-releases-issued/
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40359
- id: snykio:pypi:django:40380
  title: Access Restriction Bypass
  description: |
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Access Restriction
    Bypass. When `ModelAdmin.save_as=True`, any authenticated user may to
    bypass intended access restrictions and create `ModelAdmin` objects via
    the \"Save as New\" option when editing objects and leveraging the
    \"change\" permission.



    [1]: https://pypi.python.org/pypi/django
  affected_package: django
  vulnerable_versions:
  - ">= 1.9 < 1.9.2"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2016-2048
  cwe:
  - CWE-284
  disclosed_date: 2016-02-01
  created_date: 2016-02-01
  last_modified_date: 2016-02-01
  credit:
  - Myk Willis
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-2048
  - https://www.djangoproject.com/weblog/2016/feb/01/releases-192-and-189/
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40380
- id: snykio:pypi:django:40382
  title: Cross-site Scripting (XSS)
  description: |+
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). The `utils.http.is_safe_url` function allows remote attackers to
    redirect users to arbitrary web sites and conduct phishing attacks or
    possibly conduct Cross-site Scripting (XSS) attacks via a URL containing
    basic authentication. For example, a URL like
    `http://mysite.example.com\@attacker.com` would be considered safe if
    the request\'s host is `http://mysite.example.com`, but redirecting to
    this URL sends the user to attacker.com.



    [1]: https://pypi.python.org/pypi/django
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: django
  vulnerable_versions:
  - "< 1.8.10"
  - ">= 1.9 < 1.9.3"
  severity: high
  package_manager: pypi
  cve:
  - CVE-2016-2512
  cwe:
  - CWE-79
  disclosed_date: 2016-03-01
  created_date: 2016-03-01
  last_modified_date: 2016-03-01
  credit:
  - Mark Striemer
  references:
  - http://rhn.redhat.com/errata/RHSA-2016-0502.html
  - http://www.oracle.com/technetwork/topics/security/bulletinapr2016-2952098.html
  - https://github.com/django/django/commit/c5544d289233f501917e25970c03ed444abbd4f0
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-2512
  - https://www.djangoproject.com/weblog/2016/mar/01/security-releases
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40382
- id: snykio:pypi:django:40383
  title: Timing Attack
  description: |
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Timing attacks.
    There is a timing difference between a login request for a user with a
    password encoded in an older number of iterations and login request for
    a nonexistent user (which runs the default hasher\'s default number of
    iterations). This only affects users who haven\'t logged in since the
    iterations were increased in Django 1.6.



    [1]: https://pypi.python.org/pypi/django
  affected_package: django
  vulnerable_versions:
  - "< 1.8.10"
  - ">= 1.9 < 1.9.3"
  severity: low
  package_manager: pypi
  cve:
  - CVE-2016-2513
  cwe:
  - CWE-200
  disclosed_date: 2016-03-01
  created_date: 2016-03-01
  last_modified_date: 2016-03-01
  credit:
  - Sjoerd Job Postmus
  references:
  - http://rhn.redhat.com/errata/RHSA-2016-0502.html
  - http://www.oracle.com/technetwork/topics/security/bulletinapr2016-2952098.html
  - https://github.com/django/django/commit/67b46ba7016da2d259c1ecc7d666d11f5e1cfaab
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-2513
  - https://www.djangoproject.com/weblog/2016/mar/01/security-releases/
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40383
- id: snykio:pypi:django:40403
  title: Cross-site Scripting (XSS)
  description: |+
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks. The `dismissChangeRelatedObjectPopup` function uses
    Javascript\'s `Element.innerHTML` in an unsafe manner. This allows
    remote attackers to forge content in the admin\'s add/change popup.



    [1]: https://pypi.python.org/pypi/django
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: django
  vulnerable_versions:
  - "< 1.8.14"
  - ">= 1.9.0 < 1.9.8"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2016-6186
  cwe:
  - CWE-79
  disclosed_date: 2016-07-18
  created_date: 2016-07-18
  last_modified_date: 2016-07-18
  credit:
  - Paulo Alvarado
  - Vulnerability Laboratory
  references:
  - http://packetstormsecurity.com/files/137965/Django-3.3.0-Script-Insertion.html
  - http://rhn.redhat.com/errata/RHSA-2016-1596.html
  - http://seclists.org/fulldisclosure/2016/Jul/53
  - http://www.vulnerability-lab.com/get_content.php?id=1869
  - https://github.com/django/django/commit/d03bf6fe4e9bf5b07de62c1a271c4b41a7d3d158
  - https://github.com/django/django/commit/f68e5a99164867ab0e071a936470958ed867479d
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-6186
  - https://www.djangoproject.com/weblog/2016/jul/18/security-releases/
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40403
- id: snykio:pypi:django:40434
  title: Cross-site Request Forgery (CSRF)
  description: |
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Cross-site Request
    Forgery (CSRF) attacks. The cookie parsing code, when used on a site
    with Google Analytics, may allow remote attackers to set arbitrary
    cookies leading to a bypass of CSRF protection.



    [1]: https://pypi.python.org/pypi/django
  affected_package: django
  vulnerable_versions:
  - "< 1.8.15"
  - ">= 1.9 < 1.9.10"
  severity: high
  package_manager: pypi
  cve:
  - CVE-2016-7401
  cwe:
  - CWE-254
  disclosed_date: 2016-09-26
  created_date: 2016-09-26
  last_modified_date: 2016-09-26
  credit:
  - Sergey Bobrov
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-7401
  - https://www.djangoproject.com/weblog/2016/sep/26/security-releases/
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40434
- id: snykio:pypi:django:40439
  title: Use of hardcoded DB password
  description: |
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package used a hardcoded password for a
    temporary database user created when running tests with an Oracle
    database. This user is usually dropped after the test suite completes,
    but not when using the `manage.py test --keepdb` option or if the user
    has an active session. This makes it easier for remote attackers to
    obtain access to the database.



    [1]: https://pypi.python.org/pypi/django
  affected_package: django
  vulnerable_versions:
  - "< 1.8.16"
  - ">= 1.10 < 1.10.3"
  - ">= 1.9 < 1.9.11"
  severity: high
  package_manager: pypi
  cve:
  - CVE-2016-9013
  cwe:
  - CWE-259
  disclosed_date: 2016-11-01
  created_date: 2016-11-01
  last_modified_date: 2016-11-01
  credit:
  - Marti Raudsepp
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-9013
  - https://www.djangoproject.com/weblog/2016/nov/01/security-releases/
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40439
- id: snykio:pypi:django:40440
  title: DNS Rebinding
  description: |
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to DNS Rebinding
    attacks. When `settings.DEBUG` is set to `True`, it fails to validate
    the HTTP Host header against `settings.ALLOWED_HOSTS` making it possible
    to manipulate the host header. This is at least cross-site scripting
    vector, which could be quite serious if developers load a copy of the
    production database in development or connect to some production
    services for which there\'s no development instance. Also, if a project
    uses a package like the `django-debug-toolbar`, the attacker could also
    execute arbitrary SQL.



    [1]: https://pypi.python.org/pypi/django
  affected_package: django
  vulnerable_versions:
  - "< 1.8.16"
  - ">= 1.10 < 1.10.3"
  - ">= 1.9 < 1.9.11"
  severity: high
  package_manager: pypi
  cve:
  - CVE-2016-9014
  cwe:
  - CWE-350
  disclosed_date: 2016-11-02
  created_date: 2016-11-02
  last_modified_date: 2016-11-02
  credit:
  - Aymeric Augustin
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-9014
  - https://www.djangoproject.com/weblog/2016/nov/01/security-releases/
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40440
- id: snykio:pypi:django:40460
  title: Open Redirect
  description: |
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Open Redirect. It
    relies on user input in some cases to redirect the user to an \"on
    success\" URL. The security check for these redirects (namely
    `django.utils.http.is_safe_url()`) considered some numeric URLs \"safe\"
    when they shouldn\'t be, aka an open redirect vulnerability. Also, if a
    developer relies on `is_safe_url()` to provide safe redirect targets and
    puts such a URL into a link, they could suffer from an XSS attack.



    [1]: https://pypi.python.org/pypi/django
  affected_package: django
  vulnerable_versions:
  - "< 1.8.18"
  - ">= 1.10 < 1.10.7"
  - ">= 1.9 < 1.9.13"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2017-7233
  cwe:
  - CWE-601
  disclosed_date: 2017-04-04
  created_date: 2017-04-05
  last_modified_date: 2017-04-05
  credit:
  - Unknown
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2017-7233
  - https://www.djangoproject.com/weblog/2017/apr/04/security-releases/
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40460
- id: snykio:pypi:django:40461
  title: Open Redirect
  description: |
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Open Redirect. A
    maliciously crafted URL to a Django site using the
    `django.views.static.serve()` view could redirect to any other domain.



    [1]: https://pypi.python.org/pypi/django
  affected_package: django
  vulnerable_versions:
  - "< 1.8.18"
  - ">= 1.10 < 1.10.7"
  - ">= 1.9 < 1.9.13"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2017-7234
  cwe:
  - CWE-601
  disclosed_date: 2017-04-04
  created_date: 2017-04-05
  last_modified_date: 2017-04-05
  credit:
  - Unknown
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2017-7234
  - https://www.djangoproject.com/weblog/2017/apr/04/security-releases/
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40461
- id: snykio:pypi:django:40626
  title: Cross-site Scripting (XSS)
  description: |+
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks. Autoescaping of HTML was disabled by default in the
    technical 500 debug page template. This vulnerability shouldn\'t affect
    most production sites since you shouldn\'t run with `DEBUG = True` in
    production settings.



    [1]: https://pypi.python.org/pypi/django
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: django
  vulnerable_versions:
  - ">= 1.11a1 < 1.11.5"
  - ">= 1.9 < 1.10.8"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2017-12794
  cwe:
  - CWE-79
  disclosed_date: 2017-09-05
  created_date: 2017-09-06
  last_modified_date: 2017-09-06
  credit:
  - Charles Bideau
  references:
  - https://nvd.nist.gov/vuln/detail/CVE-2017-12794
  - https://www.djangoproject.com/weblog/2017/sep/05/security-releases/
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40626
- id: snykio:pypi:django:40778
  title: Information Exposure
  description: "[django][1] is a Python Web framework.\n\nAffected versions of this
    package are vulnerable to Regular Expression\nDenial of Service (ReDoS) attacks.
    The `django.utils.html.urlize()`\nfunction was extremely slow to evaluate certain
    inputs due to\ncatastrophic backtracking in two regular expressions. The `urlize()`\nfunction
    is used to implement the `urlize` and `urlizetrunc` template\nfilters, which were
    thus vulnerable.\n\n\n\n[1]: https://github.com/django/django\n\\nDenial of Service
    (DoS) describes a family of attacks, all aimed at\nmaking a system inaccessible
    to its original and legitimate users. There\nare many types of DoS attacks, ranging
    from trying to clog the network\npipes to the system by generating a large volume
    of traffic from many\nmachines (a Distributed Denial of Service - DDoS - attack)
    to sending\ncrafted requests that cause a system to crash or take a disproportional\namount
    of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type
    of Denial of\nService attack. Regular expressions are incredibly powerful, but
    they\naren\\'t very intuitive and can ultimately end up making it easy for\nattackers
    to take your site down.\n\nLet’s take the following regular expression as an example:\n\n
    \   regex = /A(B|C+)+D/\n{: .language-js}\n\nThis regular expression accomplishes
    the following:\n\n* `A` The string must start with the letter \\'A\\'\n* `(B|C+)+`
    The string must then follow the letter A with either the\n  letter \\'B\\' or
    some number of occurrences of the letter \\'C\\' (the\n  `+` matches one or more
    times). The `+` at the end of this section\n  states that we can look for one
    or more matches of this section.\n* `D` Finally, we ensure this section of the
    string ends with a \\'D\\'\n\nThe expression would match inputs such as `ABBD`,
    `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases, it doesn\\'t take very
    long for a regex engine to find a\nmatch:\n\n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n
    \   0.04s user 0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n{: .language-bash}\n\nThe entire
    process of testing it against a 30 characters long string\ntakes around ~52ms.
    But when given an invalid string, it takes nearly\ntwo seconds to complete the
    test, over ten times as long as it took to\ntest a valid string. The dramatic
    difference is due to the way regular\nexpressions get evaluated.\n\nMost Regex
    engines will work very similarly (with minor differences).\nThe engine will match
    the first possible way to accept the current\ncharacter and proceed to the next
    one. If it then fails to match the\nnext one, it will backtrack and see if there
    was another way to digest\nthe previous character. If it goes too far down the
    rabbit hole only to\nfind out the string doesn’t match in the end, and if many
    characters\nhave multiple valid regex paths, the number of backtracking steps
    can\nbecome very large, resulting in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s
    look at how our expression runs into this problem, using a\nshorter string: \\\"ACCCX\\\".
    While it seems fairly straightforward, there\nare still four different ways that
    the engine could match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.
    \ C+C+C.\n\nThe engine has to try each of those combinations to see if any of
    them\npotentially match against the expression. When you combine that with the\nother
    steps the engine must take, we can use [RegEx 101 debugger][1] to\nsee the engine
    has to take a total of 38 steps before it can determine\nthe string doesn\\'t
    match.\n\nFrom there, the number of steps the engine must use to validate a string\njust
    continues to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n|
    ACCCX | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX
    | 14 | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to
    take over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n"
  affected_package: django
  vulnerable_versions:
  - ">= 1.7 < 1.8.19"
  - ">= 1.9 < 1.11.11"
  - ">= 2 < 2.0.3"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2018-7536
  cwe:
  - CWE-185
  - CWE-400
  disclosed_date: 2018-03-06
  created_date: 2018-03-07
  last_modified_date: 2018-03-07
  credit:
  - Jamie Davis
  references:
  - https://www.djangoproject.com/weblog/2018/mar/06/security-releases/
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40778
- id: snykio:pypi:django:40779
  title: Regular Expression Denial of Service (ReDoS)
  description: "[django][1] is a Python Web framework.\n\nAffected versions of this
    package are vulnerable to Regular Expression\nDenial of Service (ReDoS) attacks.
    If `django.utils.text.Truncator's\nchars()` and `words()` methods were passed
    the `html=True` argument,\nthey were extremely slow to evaluate certain inputs
    due to a\ncatastrophic backtracking vulnerability in a regular expression. The\n`chars()`
    and `words()` methods are used to implement the\n`truncatechars_html` and `truncatewords_html`
    template filters, which\nwere thus vulnerable.\n\n\n\n[1]: https://github.com/django/django\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n{: .language-js}\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n{: .language-bash}\n\nThe entire
    process of testing it against a 30 characters long string\ntakes around ~52ms.
    But when given an invalid string, it takes nearly\ntwo seconds to complete the
    test, over ten times as long as it took to\ntest a valid string. The dramatic
    difference is due to the way regular\nexpressions get evaluated.\n\nMost Regex
    engines will work very similarly (with minor differences).\nThe engine will match
    the first possible way to accept the current\ncharacter and proceed to the next
    one. If it then fails to match the\nnext one, it will backtrack and see if there
    was another way to digest\nthe previous character. If it goes too far down the
    rabbit hole only to\nfind out the string doesn’t match in the end, and if many
    characters\nhave multiple valid regex paths, the number of backtracking steps
    can\nbecome very large, resulting in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s
    look at how our expression runs into this problem, using a\nshorter string: \\\"ACCCX\\\".
    While it seems fairly straightforward, there\nare still four different ways that
    the engine could match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.
    \ C+C+C.\n\nThe engine has to try each of those combinations to see if any of
    them\npotentially match against the expression. When you combine that with the\nother
    steps the engine must take, we can use [RegEx 101 debugger][1] to\nsee the engine
    has to take a total of 38 steps before it can determine\nthe string doesn\\'t
    match.\n\nFrom there, the number of steps the engine must use to validate a string\njust
    continues to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n|
    ACCCX | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX
    | 14 | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to
    take over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n"
  affected_package: django
  vulnerable_versions:
  - ">= 1.7 < 1.8.19"
  - ">= 1.9 < 1.11.11"
  - ">= 2 < 2.0.3"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2018-7537
  cwe:
  - CWE-185
  - CWE-400
  disclosed_date: 2018-03-06
  created_date: 2018-03-07
  last_modified_date: 2018-03-07
  credit:
  - Jamie Davis
  references:
  - https://www.djangoproject.com/weblog/2018/mar/06/security-releases/
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40779
- id: snykio:pypi:django:42054
  title: Information Exposure
  description: |
    [django][1] is a Python Web framework.

    Affected versions of this package are vulnerable to Information
    Exposure. Remote attackers may obtain potentially sensitive information
    by leveraging data exposure from the `confirm_login_allowed()` method,
    as demonstrated by discovering whether a user account is inactive.



    [1]: https://github.com/django/django
  affected_package: django
  vulnerable_versions:
  - ">= 1.11.8 < 1.11.10"
  - ">= 2 < 2.0.2"
  severity: high
  package_manager: pypi
  cve:
  - CVE-2018-6188
  cwe:
  - CWE-200
  disclosed_date: 2018-02-01
  created_date: 2018-02-12
  last_modified_date: 2018-02-12
  credit:
  - Unknown
  references:
  - https://nvd.nist.gov/vuln/detail/CVE-2018-6188
  - https://www.djangoproject.com/weblog/2018/feb/01/security-releases/
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-42054
- id: snykio:pypi:django:42158
  title: Denial of Service (DoS)
  description: |+
    [django][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design. Thanks for checking it out.

    Affected versions of this package are vulnerable to Denial of Service.
    An attacker may send a large amount of HTTP requests with large
    Accept-Language headers, causing a high memory consumption in the
    server.



    [1]: https://pypi.org/project/Django/
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: django
  vulnerable_versions:
  - "< 0.91.1"
  - ">= 0.95 < 0.95.1"
  - ">= 0.96 < 0.96.1"
  severity: low
  package_manager: pypi
  cve:
  - CVE-2007-5712
  cwe:
  - CWE-399
  disclosed_date: 2007-10-26
  created_date: 2018-06-20
  last_modified_date: 2018-06-20
  credit:
  - Unknown
  references:
  - https://nvd.nist.gov/vuln/detail/CVE-2007-5712
  - https://www.djangoproject.com/weblog/2007/oct/26/security-fix/
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-42158
- id: snykio:pypi:django:42162
  title: Regular Expression Denial of Service (ReDoS)
  description: "[django][1] is a high-level Python Web framework that encourages rapid\ndevelopment
    and clean, pragmatic design.\n\nAffected versions of this package are vulnerable
    to Regular Expression\nDenial of Service (ReDoS) via a crafted email address or
    URL that\ntriggers a large amount of backtracking in a regular expression.\n\n\n\n[1]:
    https://pypi.python.org/pypi/django\n\\nDenial of Service (DoS) describes a family
    of attacks, all aimed at\nmaking a system inaccessible to its original and legitimate
    users. There\nare many types of DoS attacks, ranging from trying to clog the network\npipes
    to the system by generating a large volume of traffic from many\nmachines (a Distributed
    Denial of Service - DDoS - attack) to sending\ncrafted requests that cause a system
    to crash or take a disproportional\namount of time to process.\n\nThe Regular
    expression Denial of Service (ReDoS) is a type of Denial of\nService attack. Regular
    expressions are incredibly powerful, but they\naren\\'t very intuitive and can
    ultimately end up making it easy for\nattackers to take your site down.\n\nLet’s
    take the following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n{:
    .language-js}\n\nThis regular expression accomplishes the following:\n\n* `A`
    The string must start with the letter \\'A\\'\n* `(B|C+)+` The string must then
    follow the letter A with either the\n  letter \\'B\\' or some number of occurrences
    of the letter \\'C\\' (the\n  `+` matches one or more times). The `+` at the end
    of this section\n  states that we can look for one or more matches of this section.\n*
    `D` Finally, we ensure this section of the string ends with a \\'D\\'\n\nThe expression
    would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt
    most cases, it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n
    \   $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s
    user 0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n{: .language-bash}\n\nThe entire
    process of testing it against a 30 characters long string\ntakes around ~52ms.
    But when given an invalid string, it takes nearly\ntwo seconds to complete the
    test, over ten times as long as it took to\ntest a valid string. The dramatic
    difference is due to the way regular\nexpressions get evaluated.\n\nMost Regex
    engines will work very similarly (with minor differences).\nThe engine will match
    the first possible way to accept the current\ncharacter and proceed to the next
    one. If it then fails to match the\nnext one, it will backtrack and see if there
    was another way to digest\nthe previous character. If it goes too far down the
    rabbit hole only to\nfind out the string doesn’t match in the end, and if many
    characters\nhave multiple valid regex paths, the number of backtracking steps
    can\nbecome very large, resulting in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s
    look at how our expression runs into this problem, using a\nshorter string: \\\"ACCCX\\\".
    While it seems fairly straightforward, there\nare still four different ways that
    the engine could match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.
    \ C+C+C.\n\nThe engine has to try each of those combinations to see if any of
    them\npotentially match against the expression. When you combine that with the\nother
    steps the engine must take, we can use [RegEx 101 debugger][1] to\nsee the engine
    has to take a total of 38 steps before it can determine\nthe string doesn\\'t
    match.\n\nFrom there, the number of steps the engine must use to validate a string\njust
    continues to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n|
    ACCCX | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX
    | 14 | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to
    take over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n"
  affected_package: django
  vulnerable_versions:
  - "< 1.0.4"
  - ">= 1.1 < 1.1.1"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2009-3695
  cwe:
  - CWE-399
  disclosed_date: 2009-10-13
  created_date: 2018-07-04
  last_modified_date: 2018-07-04
  credit:
  - Unknown
  references:
  - http://groups.google.com/group/django-users/browse_thread/thread/15df9e45118dfc51/
  - http://www.djangoproject.com/weblog/2009/oct/09/security/
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-42162
- id: snykio:pypi:django:42178
  title: Open Redirect
  description: |
    [django][1] is a Web framework that encourages rapid development and
    clean, pragmatic design.

    Affected versions of this package are vulnerable to Open Redirect. If
    the `django.middleware.common.CommonMiddleware` and the `APPEND_SLASH`
    setting are both enabled, and if the project has a URL pattern that
    accepts any path ending in a slash, a malicious user could send a
    request to a crafted URL of that site that would lead to a redirect to
    another site.



    [1]: https://pypi.org/project/Django/
  affected_package: django
  vulnerable_versions:
  - "< 1.11.15"
  - ">= 2.0.0 < 2.0.8"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2018-14574
  cwe:
  - CWE-601
  disclosed_date: 2018-08-01
  created_date: 2018-08-02
  last_modified_date: 2018-08-02
  credit:
  - Andreas Hug
  references:
  - https://bugzilla.redhat.com/show_bug.cgi?id=1609031
  - https://github.com/django/django/commit/6fffc3c6d420e44f4029d5643f38d00a39b08525
  - https://github.com/django/django/commit/a656a681272f8f3734b6eb38e9a88aa0d91806f1
  - https://github.com/django/django/commit/c4e5ff7fdb5fce447675e90291fd33fddd052b3c
  - https://www.djangoproject.com/weblog/2018/aug/01/security-releases/
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-42178
- id: snykio:pypi:django:451300
  title: Man-in-the-Middle (MitM)
  description: |
    [django][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Man-in-the-Middle
    (MitM). An HTTP request is not redirected to HTTPS when the
    `SECURE_PROXY_SSL_HEADER` and `SECURE_SSL_REDIRECT` settings are used,
    and the proxy connects to Django via HTTPS. As such,
    `django.http.HttpRequest.scheme` has incorrect behavior when a client
    uses HTTP. This entails incorrect results for `is_secure()`, and
    `build_absolute_uri()`, and that HTTP requests would not be redirected
    to HTTPS in accordance with `SECURE_SSL_REDIRECT`.



    [1]: https://pypi.org/project/Django/
  affected_package: django
  vulnerable_versions:
  - ">= 1.11.0 < 1.11.22"
  - ">= 2.1.0 < 2.1.10"
  - ">= 2.2.0 < 2.2.3"
  severity: high
  package_manager: pypi
  cve:
  - CVE-2019-12781
  cwe:
  - CWE-300
  disclosed_date: 2019-07-01
  created_date: 2019-07-01
  last_modified_date: 2019-07-01
  credit:
  - Gavin Wahl
  references:
  - https://docs.djangoproject.com/en/dev/releases/security/
  - https://github.com/django/django/commit/54d0f5e62f54c29a12dd96f44bacd810cbe03ac8
  - https://groups.google.com/forum/#!topic/django-announce/Is4kLY9ZcZQ
  - https://www.djangoproject.com/weblog/2019/jul/01/security-releases/
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-451300
- id: snykio:pypi:django:456540
  title: Denial of Service (Memory Exhaustion)
  description: |+
    [django][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Denial of Service
    (Memory Exhaustion). If passed certain inputs,
    `django.utils.encoding.uri_to_iri` could lead to significant memory
    usage due to a recursion when repercent-encoding invalid UTF-8 octet
    sequences.



    [1]: https://pypi.org/project/Django/
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: django
  vulnerable_versions:
  - ">= 1.11 < 1.11.23"
  - ">= 2.1 < 2.1.11"
  - ">= 2.2 < 2.2.4"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2019-14235
  cwe:
  - CWE-400
  disclosed_date: 2019-08-02
  created_date: 2019-08-04
  last_modified_date: 2019-08-04
  credit:
  - Guido Vranken
  - Sage M. Abdullah
  references:
  - https://www.djangoproject.com/weblog/2019/aug/01/security-releases/
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-456540
- id: snykio:pypi:django:456541
  title: Denial of Service (DoS)
  description: |+
    [django][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS). Due to the behaviour of the underlying HTMLParser,
    `django.utils.html.strip_tags` would be extremely slow to evaluate
    certain inputs containing large sequences of nested incomplete HTML
    entities.



    [1]: https://pypi.org/project/Django/
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: django
  vulnerable_versions:
  - ">= 1.11 < 1.11.23"
  - ">= 2.1 < 2.1.11"
  - ">= 2.2 < 2.2.4"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2019-14233
  cwe:
  - CWE-400
  disclosed_date: 2019-08-02
  created_date: 2019-08-04
  last_modified_date: 2019-08-04
  credit:
  - Guido Vranken
  - Sage M. Abdullah
  references:
  - https://www.djangoproject.com/weblog/2019/aug/01/security-releases/
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-456541
- id: snykio:pypi:django:456542
  title: Denial of Service (DoS)
  description: |+
    [django][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS). If `django.utils.text.Truncator`\'s `chars()` and `words()`
    methods were passed the `html=True` argument, they were extremely slow
    to evaluate certain inputs due to a catastrophic backtracking
    vulnerability in a regular expression. The `chars()` and `words()`
    methods are used to implement the `truncatechars_html` and
    `truncatewords_html` template filters, which were thus vulnerable.



    [1]: https://pypi.org/project/Django/
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: django
  vulnerable_versions:
  - ">= 1.11 < 1.11.23"
  - ">= 2.1 < 2.1.11"
  - ">= 2.2 < 2.2.4"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2019-14232
  cwe:
  - CWE-400
  disclosed_date: 2019-08-02
  created_date: 2019-08-04
  last_modified_date: 2019-08-04
  credit:
  - Guido Vranken
  - Sage M. Abdullah
  references:
  - https://www.djangoproject.com/weblog/2019/aug/01/security-releases/
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-456542
- id: snykio:pypi:django:456566
  title: SQL Injection
  description: |
    [django][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to SQL Injection. Key
    and index lookups for `django.contrib.postgres.fields.JSONField` and key
    lookups for `django.contrib.postgres.fields.HStoreField` were subject to
    SQL injection, using a suitably crafted dictionary, with dictionary
    expansion, as the `**kwargs` passed to `QuerySet.filter()`.



    [1]: https://pypi.org/project/Django/
  affected_package: django
  vulnerable_versions:
  - ">= 1.11 < 1.11.23"
  - ">= 2.1 < 2.1.11"
  - ">= 2.2 < 2.2.4"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2019-14234
  cwe:
  - CWE-20
  disclosed_date: 2019-08-02
  created_date: 2019-08-04
  last_modified_date: 2019-08-04
  credit:
  - Guido Vranken
  - Sage M. Abdullah
  references:
  - https://www.djangoproject.com/weblog/2019/aug/01/security-releases/
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-456566
- id: snykio:pypi:django:536439
  title: Privilege Escalation
  description: |
    [django][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Privilege
    Escalation. A Django model admin displaying inline related models, where
    the user has view-only permissions to a parent model but edit
    permissions to the inline model, would be presented with an editing UI,
    allowing POST requests, for updating the inline model. Directly editing
    the view-only parent model was not possible, but the parent model\'s
    `save()` method was called, triggering potential side effects, and
    causing pre and post-save signal handlers to be invoked.



    [1]: https://pypi.org/project/Django/
  affected_package: django
  vulnerable_versions:
  - ">= 2.1 < 2.1.15"
  - ">= 2.2 < 2.2.8"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2019-19118
  cwe:
  - CWE-269
  disclosed_date: 2019-12-02
  created_date: 2019-12-02
  last_modified_date: 2019-12-02
  credit:
  - Unknown
  references:
  - https://github.com/django/django/commit/11c5e0609bcc0db93809de2a08e0dc3d70b393e4
  - https://www.djangoproject.com/weblog/2019/dec/02/security-releases/
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-536439
- id: snykio:pypi:django:538244
  title: Account Hijacking
  description: |
    [django][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Account Hijacking.
    By submitting a suitably crafted email address making use of Unicode
    characters, that compared equal to an existing user email when
    lower-cased for comparison, an attacker could be sent a password reset
    token for the matched account.



    [1]: https://pypi.org/project/Django/
  affected_package: django
  vulnerable_versions:
  - ">= 1.11.0 < 1.11.27"
  - ">= 2.2.0 < 2.2.9"
  - ">= 3.0.0 < 3.0.1"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2019-19844
  cwe:
  - CWE-345
  disclosed_date: 2019-12-18
  created_date: 2019-12-18
  last_modified_date: 2019-12-18
  credit:
  - Unknown
  references:
  - https://github.com/django/django/commit/5b1fbcef7a8bec991ebe7b2a18b5d5a95d72cb70
  - https://www.djangoproject.com/weblog/2019/dec/18/security-releases/
  - https://www.exploit-db.com/exploits/47879
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-538244
- id: snykio:pypi:django:538368
  title: Weak Password Recovery Mechanism
  description: |
    [django][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Weak Password
    Recovery Mechanism. A suitably crafted email address (that is equal to
    an existing user\'s email address after case transformation of Unicode
    characters) would allow an attacker to be sent a password reset token
    for the matched user account.



    [1]: https://pypi.org/project/Django/
  affected_package: django
  vulnerable_versions:
  - "< 1.11.27"
  - ">= 2.0 < 2.2.9"
  - ">= 3.0 < 3.0.1"
  severity: high
  package_manager: pypi
  cve:
  - CVE-2019-19844
  cwe:
  - CWE-640
  disclosed_date: 2019-12-18
  created_date: 2019-12-19
  last_modified_date: 2019-12-19
  credit:
  - Unknown
  references:
  - https://www.djangoproject.com/weblog/2019/dec/18/security-releases/
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-538368
- id: snykio:pypi:django:543998
  title: SQL Injection
  description: |
    [django][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to SQL Injection. If
    untrusted data is used as a `StringAgg` delimiter (e.g., in Django
    applications that offer downloads of data as a series of rows with a
    user-specified column delimiter) by passing a suitably crafted delimiter
    to a `contrib.postgres.aggregates.StringAgg` instance, it is possible to
    break escaping and inject malicious SQL.



    [1]: https://pypi.org/project/Django/
  affected_package: django
  vulnerable_versions:
  - ">= 1.11 < 1.11.28"
  - ">= 2.2 < 2.2.10"
  - ">= 3.0 < 3.0.3"
  severity: high
  package_manager: pypi
  cve:
  - CVE-2020-7471
  cwe:
  - CWE-89
  disclosed_date: 2020-02-03
  created_date: 2020-02-03
  last_modified_date: 2020-02-03
  credit:
  - Simon Charette
  references:
  - https://groups.google.com/forum/#!topic/django-announce/X45S86X5bZI
  - https://www.djangoproject.com/weblog/2020/feb/03/security-releases/
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-543998
- id: snykio:pypi:django:559326
  title: SQL Injection
  description: |
    [django][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to SQL Injection via
    \"tolerance\" parameter in GIS functions and aggregates on Oracle.



    [1]: https://pypi.org/project/Django/
  affected_package: django
  vulnerable_versions:
  - "< 1.11.29"
  - ">= 2.2.0 < 2.2.11"
  - ">= 3.0.0 < 3.0.4"
  severity: high
  package_manager: pypi
  cve:
  - CVE-2020-9402
  cwe:
  - CWE-89
  disclosed_date: 2020-03-03
  created_date: 2020-03-05
  last_modified_date: 2020-03-05
  credit:
  - Norbert Szetei of Doyensec
  references:
  - https://bugzilla.redhat.com/show_bug.cgi?id=1810088
  - https://github.com/django/django/commit/02d97f3c9a88adc890047996e5606180bd1c6166
  - https://github.com/django/django/commit/26a5cf834526e291db00385dd33d319b8271fc4c
  - https://github.com/django/django/commit/fe886a3b58a93cfbe8864b485f93cb6d426cd1f2
  - https://www.djangoproject.com/weblog/2020/mar/04/security-releases/
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-559326
- id: snykio:pypi:django:72562
  title: Information Exposure
  description: |
    [django][1] is a Python Web framework that encourages rapid development
    and clean, pragmatic design.

    Affected versions of this package are vulnerable to Information
    Exposure. If an admin user had the change permission to the user model,
    only part of the password hash would be displayed in the change form.
    Admin users with the view permission to the user model were displayed
    the entire hash.



    [1]: https://pypi.org/project/Django/
  affected_package: django
  vulnerable_versions:
  - ">= 2.1.0 < 2.1.2"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2018-16984
  cwe:
  - CWE-200
  disclosed_date: 2018-09-26
  created_date: 2018-11-05
  last_modified_date: 2018-11-05
  credit:
  - Unknown
  references:
  - https://github.com/django/django/commit/f5335bc745d4f86d355b69549712885fd1634574
  - https://github.com/django/django/pull/10449
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-72562
- id: snykio:pypi:django:72888
  title: Content Spoofing
  description: |
    [django][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Content Spoofing.
    The default 404 page did not properly handle user-supplied data, an
    attacker could supply content to the web application, typically via a
    parameter value, that is reflected back to the user. This presented the
    user with a modified page under the context of the trusted domain.



    [1]: https://pypi.org/project/Django/
  affected_package: django
  vulnerable_versions:
  - "< 1.11.18"
  - ">= 2.0.0 < 2.0.10"
  - ">= 2.1.0 < 2.1.5"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2019-3498
  cwe:
  - CWE-148
  disclosed_date: 2019-01-04
  created_date: 2019-01-08
  last_modified_date: 2019-01-08
  credit:
  - Jerbi Nessim
  references:
  - https://bugzilla.redhat.com/show_bug.cgi?id=1663722
  - https://github.com/django/django/commit/1ecc0a395
  - https://www.djangoproject.com/weblog/2019/jan/04/security-releases/
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-72888
