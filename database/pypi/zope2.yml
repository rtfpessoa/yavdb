---
- id: snykio:pypi:zope2:40038
  title: Denial of Service (DoS)
  description: |+
    Affected versions of [`zope2`][1] are vulnerable to Denial of Service
    (DoS, crash of worker threads) via vectors that trigger uncaught
    exceptions.



    [1]: https://pypi.python.org/pypi/Zope2
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: zope2
  vulnerable_versions:
  - ">= 2.10 < 2.10.12"
  - ">= 2.11 < 2.11.7"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2010-3198
  cwe:
  - CWE-399
  disclosed_date: 2010-09-08
  created_date: 2017-08-22
  last_modified_date: 2017-08-22
  credit:
  - Unknown
  references:
  - https://mail.zope.org/pipermail/zope-announce/2010-September/002247.html
  - https://nvd.nist.gov/vuln/detail/CVE-2010-3198
  source_url: https://snyk.io/vuln/SNYK-PYTHON-ZOPE2-40038
- id: snykio:pypi:zope2:40045
  title: Cross-site Scripting (XSS)
  description: |+
    [`zope2`][1] is a Zope2 application server / web framework Cross-site
    Scripting (XSS) vulnerability in Zope 2.8.x before 2.8.12, 2.9.x before
    2.9.12, 2.10.x before 2.10.11, 2.11.x before 2.11.6, and 2.12.x before
    2.12.3 allows remote attackers to inject arbitrary web script or HTML
    via vectors related to error messages.



    [1]: https://pypi.python.org/pypi/zope2
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: zope2
  vulnerable_versions:
  - "< 2.8.12"
  - ">= 2.10 < 2.10.22"
  - ">= 2.11 < 2.11.6"
  - ">= 2.12 < 2.12.3"
  - ">= 2.9 < 2.9.12"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2010-1104
  cwe:
  - CWE-79
  disclosed_date: 2010-01-12
  created_date: 2010-01-12
  last_modified_date: 2010-01-12
  credit:
  - Unknown
  references:
  - https://mail.zope.org/pipermail/zope-announce/2010-January/002229.html
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2010-1104
  source_url: https://snyk.io/vuln/SNYK-PYTHON-ZOPE2-40045
- id: snykio:pypi:zope2:40062
  title: Privilege Escalation
  description: |
    [`zope2`][1] is a Zope2 application server / web framework Unspecified
    vulnerability in Plone 2.5 through 4.0, as used in Conga, luci, and
    possibly other products, allows remote attackers to obtain
    administrative access, read or create arbitrary content, and change the
    site skin via unknown vectors.



    [1]: https://pypi.python.org/pypi/zope2
  affected_package: zope2
  vulnerable_versions:
  - ">= 2.13 <= 2.13.2"
  severity: high
  package_manager: pypi
  cve:
  - CVE-2011-0720
  cwe:
  - CWE-265
  disclosed_date: 2011-01-31
  created_date: 2011-01-31
  last_modified_date: 2011-01-31
  credit:
  - Unknown
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2011-0720
  source_url: https://snyk.io/vuln/SNYK-PYTHON-ZOPE2-40062
- id: snykio:pypi:zope2:40076
  title: Privilege Escalation
  description: |
    [`zope2`][1] is a Zope2 application server / web framework Unspecified
    vulnerability in (1) Zope 2.12.x before 2.12.19 and 2.13.x before
    2.13.8, as used in Plone 4.x and other products, and (2)
    PloneHotfix20110720 for Plone 3.x allows attackers to gain privileges
    via unspecified vectors, related to a \"highly serious vulnerability.\"
    NOTE: this vulnerability exists because of an incorrect fix for
    CVE-2011-0720.



    [1]: https://pypi.python.org/pypi/zope2
  affected_package: zope2
  vulnerable_versions:
  - ">= 2.12 < 2.12.19"
  - ">= 2.13 < 2.13.8"
  severity: high
  package_manager: pypi
  cve:
  - CVE-2011-2528
  cwe:
  - CWE-265
  disclosed_date: 2011-07-04
  created_date: 2011-07-04
  last_modified_date: 2011-07-04
  credit:
  - Unknown
  references:
  - http://www.openwall.com/lists/oss-security/2011/07/04/6
  - http://www.openwall.com/lists/oss-security/2011/07/12/9
  - https://bugzilla.redhat.com/show_bug.cgi?id=718824
  - https://mail.zope.org/pipermail/zope-announce/2011-June/002260.html
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2011-2528
  source_url: https://snyk.io/vuln/SNYK-PYTHON-ZOPE2-40076
- id: snykio:pypi:zope2:40077
  title: Arbitrary Code Execution
  description: |
    [`zope2`][1] is a Zope2 application server / web framework.

    Unspecified vulnerability in Zope 2.12.x and 2.13.x, as used in Plone
    4.0.x through 4.0.9, 4.1, and 4.2 through 4.2a2, allows remote attackers
    to execute arbitrary commands via vectors related to the p\_ class in
    OFS/misc\_.py and the use of Python modules.



    [1]: https://pypi.python.org/pypi/zope2
  affected_package: zope2
  vulnerable_versions:
  - ">= 2.12 < 2.12.20"
  - ">= 2.13 < 2.13.10"
  severity: high
  package_manager: pypi
  cve:
  - CVE-2011-3587
  cwe:
  - CWE-94
  disclosed_date: 2011-09-29
  created_date: 2011-09-29
  last_modified_date: 2011-09-29
  credit:
  - Unknown
  references:
  - http://pypi.python.org/pypi/Products.PloneHotfix20110928/1.0
  - http://www.openwall.com/lists/oss-security/2011/09/30/7
  - https://bugzilla.redhat.com/show_bug.cgi?id=742297
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2011-3587
  source_url: https://snyk.io/vuln/SNYK-PYTHON-ZOPE2-40077
- id: snykio:pypi:zope2:40106
  title: HTTP Header Injection
  description: |
    [`zope2`][1] is a Zope2 application server / web framework
    `ZPublisher.HTTPRequest._scrubHeader` in Zope 2 before 2.13.19, as used
    in Plone before 4.3 beta 1, allows remote attackers to inject arbitrary
    HTTP headers via a linefeed (LF) character.



    [1]: https://pypi.python.org/pypi/zope2
  affected_package: zope2
  vulnerable_versions:
  - ">= 2.12 < 2.13.19"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2012-5486
  cwe:
  - CWE-74
  disclosed_date: 2012-11-21
  created_date: 2012-11-21
  last_modified_date: 2012-11-21
  credit:
  - Unknown
  references:
  - http://www.openwall.com/lists/oss-security/2012/11/10/1
  - https://bugzilla.redhat.com/show_bug.cgi?id=878939
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2012-5486
  source_url: https://snyk.io/vuln/SNYK-PYTHON-ZOPE2-40106
- id: snykio:pypi:zope2:40109
  title: Arbitrary Code Execution
  description: |
    [`zope2`][1] is a Zope2 application server / web framework
    python\_scripts.py in Plone before 4.2.3 and 4.3 before beta 1 allows
    remote attackers to execute Python code via a crafted URL, related to
    createObject.



    [1]: https://pypi.python.org/pypi/zope2
  affected_package: zope2
  vulnerable_versions:
  - ">= 2.13 < 2.13.20"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2012-5488
  cwe:
  - CWE-94
  disclosed_date: 2012-11-21
  created_date: 2012-11-21
  last_modified_date: 2012-11-21
  credit:
  - Unknown
  references:
  - http://www.openwall.com/lists/oss-security/2012/11/10/1
  - https://bugzilla.redhat.com/show_bug.cgi?id=878945
  - https://github.com/plone/Products.CMFPlone/blob/4.2.3/docs/CHANGES.txt
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2012-5488
  source_url: https://snyk.io/vuln/SNYK-PYTHON-ZOPE2-40109
- id: snykio:pypi:zope2:40117
  title: Privilege Escalation
  description: |
    [`zope2`][1] is a Zope2 application server / web framework The
    App.Undo.UndoSupport.get\_request\_var\_or\_attr function in Zope before
    2.12.21 and 3.13.x before 2.13.11, as used in Plone before 4.2.3 and 4.3
    before beta 1, allows remote authenticated users to gain access to
    restricted attributes via unspecified vectors.



    [1]: https://pypi.python.org/pypi/zope2
  affected_package: zope2
  vulnerable_versions:
  - "< 2.12.21"
  - ">= 2.13 < 2.13.11"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2012-5489
  cwe:
  - CWE-264
  disclosed_date: 2012-11-06
  created_date: 2012-11-06
  last_modified_date: 2012-11-06
  credit:
  - Unknown
  references:
  - http://www.openwall.com/lists/oss-security/2012/11/10/1
  - https://github.com/plone/Products.CMFPlone/blob/4.2.3/docs/CHANGES.txt
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2012-5489
  source_url: https://snyk.io/vuln/SNYK-PYTHON-ZOPE2-40117
- id: snykio:pypi:zope2:40125
  title: Cross-site Scripting (XSS)
  description: |+
    [`zope2`][1] is a Zope2 application server / web framework Cross-site
    Scripting (XSS) vulnerability in python\_scripts.py in Plone before
    4.2.3 and 4.3 before beta 1 allows remote attackers to inject arbitrary
    web script or HTML via unspecified vectors, related to
    \"\{u,}translate.\"



    [1]: https://pypi.python.org/pypi/zope2
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: zope2
  vulnerable_versions:
  - ">= 2.12 < 2.12.27"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2012-5494
  cwe:
  - CWE-79
  disclosed_date: 2012-11-06
  created_date: 2012-11-06
  last_modified_date: 2012-11-06
  credit:
  - Unknown
  references:
  - http://www.openwall.com/lists/oss-security/2012/11/10/1
  - https://github.com/plone/Products.CMFPlone/blob/4.2.3/docs/CHANGES.txt
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2012-5494
  source_url: https://snyk.io/vuln/SNYK-PYTHON-ZOPE2-40125
- id: snykio:pypi:zope2:40127
  title: Arbitrary Code Execution
  description: |
    [`zope2`][1] is a Zope2 application server / web framework
    python\_scripts.py in Plone before 4.2.3 and 4.3 before beta 1 allows
    remote attackers to execute Python code via a crafted URL, related to
    \"go\_back.\"



    [1]: https://pypi.python.org/pypi/zope2
  affected_package: zope2
  vulnerable_versions:
  - ">= 2.12.0a2 <= 2.12.26"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2012-5495
  cwe:
  - CWE-94
  disclosed_date: 2012-11-06
  created_date: 2012-11-06
  last_modified_date: 2012-11-06
  credit:
  - Unknown
  references:
  - http://www.openwall.com/lists/oss-security/2012/11/10/1
  - https://github.com/plone/Products.CMFPlone/blob/4.2.3/docs/CHANGES.txt
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2012-5495
  source_url: https://snyk.io/vuln/SNYK-PYTHON-ZOPE2-40127
- id: snykio:pypi:zope2:40144
  title: Information Exposure
  description: |
    [`zope2`][1] is a Zope2 application server / web framework ftp.py in
    Plone before 4.2.3 and 4.3 before beta 1 allows remote attackers to read
    hidden folder contents via unspecified vectors.



    [1]: https://pypi.python.org/pypi/zope2
  affected_package: zope2
  vulnerable_versions:
  - ">= 2.12 < 2.12.27"
  - ">= 2.13 < 2.13.20"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2012-5503
  cwe:
  - CWE-200
  disclosed_date: 2012-11-06
  created_date: 2012-11-06
  last_modified_date: 2012-11-06
  credit:
  - Unknown
  references:
  - http://www.openwall.com/lists/oss-security/2012/11/10/1
  - https://github.com/plone/Products.CMFPlone/blob/4.2.3/docs/CHANGES.txt
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2012-5503
  source_url: https://snyk.io/vuln/SNYK-PYTHON-ZOPE2-40144
- id: snykio:pypi:zope2:40148
  title: Cross-site Scripting (XSS)
  description: |+
    [`zope2`][1] is a Zope2 application server / web framework Cross-site
    Scripting (XSS) vulnerability in widget\_traversal.py in Plone before
    4.2.3 and 4.3 before beta 1 allows remote attackers to inject arbitrary
    web script or HTML via unspecified vectors.



    [1]: https://pypi.python.org/pypi/zope2
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: zope2
  vulnerable_versions:
  - ">= 2.12 < 2.12.27"
  - ">= 2.13 < 2.13.20"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2012-5504
  cwe:
  - CWE-79
  disclosed_date: 2012-11-06
  created_date: 2012-11-06
  last_modified_date: 2012-11-06
  credit:
  - Unknown
  references:
  - http://www.openwall.com/lists/oss-security/2012/11/10/1
  - https://github.com/plone/Products.CMFPlone/blob/4.2.3/docs/CHANGES.txt
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2012-5504
  source_url: https://snyk.io/vuln/SNYK-PYTHON-ZOPE2-40148
- id: snykio:pypi:zope2:40152
  title: Denial of Service (DoS)
  description: |+
    [`zope2`][1] is a Zope2 application server / web framework
    python\_scripts.py in Plone before 4.2.3 and 4.3 before beta 1 allows
    remote attackers to cause a denial of service (infinite loop) via an RSS
    feed request for a folder the user does not have permission to access.



    [1]: https://pypi.python.org/pypi/zope2
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: zope2
  vulnerable_versions:
  - ">= 2.12 < 2.12.27"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2012-5506
  cwe:
  - CWE-399
  disclosed_date: 2012-11-06
  created_date: 2012-11-06
  last_modified_date: 2012-11-06
  credit:
  - Unknown
  references:
  - http://www.openwall.com/lists/oss-security/2012/11/10/1
  - https://github.com/plone/Products.CMFPlone/blob/4.2.3/docs/CHANGES.txt
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2012-5506
  source_url: https://snyk.io/vuln/SNYK-PYTHON-ZOPE2-40152
- id: snykio:pypi:zope2:40154
  title: Timing Attack
  description: |
    [`zope2`][1] is a Zope2 application server / web framework
    AccessControl/AuthEncoding.py in Zope before 2.13.19, as used in Plone
    before 4.2.3 and 4.3 before beta 1, allows remote attackers to obtain
    passwords via vectors involving timing discrepancies in password
    validation.



    [1]: https://pypi.python.org/pypi/zope2
  affected_package: zope2
  vulnerable_versions:
  - "< 2.13.19"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2012-5507
  cwe:
  - CWE-362
  disclosed_date: 2012-11-06
  created_date: 2012-11-06
  last_modified_date: 2012-11-06
  credit:
  - Unknown
  references:
  - http://www.openwall.com/lists/oss-security/2012/11/10/1
  - https://github.com/plone/Products.CMFPlone/blob/4.2.3/docs/CHANGES.txt
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2012-5507
  source_url: https://snyk.io/vuln/SNYK-PYTHON-ZOPE2-40154
- id: snykio:pypi:zope2:40169
  title: Insecure Randomness
  description: |
    [`zope2`][1] is a Zope2 application server / web framework Zope before
    2.13.19, as used in Plone before 4.2.3 and 4.3 before beta 1, does not
    reseed the pseudo-random number generator (PRNG), which makes it easier
    for remote attackers to guess the value via unspecified vectors. NOTE:
    this issue was SPLIT from CVE-2012-5508 due to different vulnerability
    types (ADT2).



    [1]: https://pypi.python.org/pypi/zope2
  affected_package: zope2
  vulnerable_versions:
  - "< 2.13.19"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2012-6661
  cwe:
  - CWE-338
  disclosed_date: 2012-11-06
  created_date: 2012-11-06
  last_modified_date: 2012-11-06
  credit:
  - Unknown
  references:
  - http://www.openwall.com/lists/oss-security/2012/11/10/1
  - https://github.com/plone/Products.CMFPlone/blob/4.2.3/docs/CHANGES.txt
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2012-6661
  source_url: https://snyk.io/vuln/SNYK-PYTHON-ZOPE2-40169
- id: snykio:pypi:zope2:40191
  title: Privilege Escalation
  description: |
    [`zope2`][1] is a Zope2 application server / web framework Multiple
    unspecified vulnerabilities in (1) dataitems.py, (2) get.py, and (3)
    traverseName.py in Plone 2.1 through 4.1, 4.2.x through 4.2.5, and 4.3.x
    through 4.3.1 allow remote authenticated users with administrator access
    to a subtree to access nodes above the subtree via unknown vectors.



    [1]: https://pypi.python.org/pypi/zope2
  affected_package: zope2
  vulnerable_versions:
  - ">= 2.13 < 2.13.13"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2013-4189
  cwe:
  - CWE-265
  disclosed_date: 2013-06-26
  created_date: 2013-06-26
  last_modified_date: 2013-06-26
  credit:
  - Unknown
  references:
  - http://seclists.org/oss-sec/2013/q3/261
  - https://bugzilla.redhat.com/show_bug.cgi?id=978450
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2013-4189
  source_url: https://snyk.io/vuln/SNYK-PYTHON-ZOPE2-40191
- id: snykio:pypi:zope2:40196
  title: Cross-site Scripting (XSS)
  description: |+
    [`zope2`][1] is a Zope2 application server / web framework Multiple
    cross-site scripting (XSS) vulnerabilities in (1) spamProtect.py, (2)
    pts.py, and (3) request.py in Plone 2.1 through 4.1, 4.2.x through
    4.2.5, and 4.3.x through 4.3.1 allow remote attackers to inject
    arbitrary web script or HTML via unspecified vectors.



    [1]: https://pypi.python.org/pypi/zope2
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: zope2
  vulnerable_versions:
  - ">= 2.12 < 2.12.28"
  - ">= 2.13 < 2.13.21"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2013-4190
  cwe:
  - CWE-79
  disclosed_date: 2013-06-26
  created_date: 2013-06-26
  last_modified_date: 2013-06-26
  credit:
  - Unknown
  references:
  - http://seclists.org/oss-sec/2013/q3/261
  - https://bugzilla.redhat.com/show_bug.cgi?id=978451
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2013-4190
  source_url: https://snyk.io/vuln/SNYK-PYTHON-ZOPE2-40196
- id: snykio:pypi:zope2:40204
  title: Open Redirect
  description: |
    [`zope2`][1] is a Zope2 application server / web framework Multiple open
    redirect vulnerabilities in (1) marmoset\_patch.py, (2) publish.py, and
    (3) principiaredirect.py in Plone 2.1 through 4.1, 4.2.x through 4.2.5,
    and 4.3.x through 4.3.1 allow remote attackers to redirect users to
    arbitrary web sites and conduct phishing attacks via unspecified
    vectors.



    [1]: https://pypi.python.org/pypi/zope2
  affected_package: zope2
  vulnerable_versions:
  - ">= 2.13 < 2.13.21"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2013-4195
  cwe:
  - CWE-20
  disclosed_date: 2013-06-26
  created_date: 2013-06-26
  last_modified_date: 2013-06-26
  credit:
  - Unknown
  references:
  - http://seclists.org/oss-sec/2013/q3/261
  - https://bugzilla.redhat.com/show_bug.cgi?id=978471
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2013-4195
  source_url: https://snyk.io/vuln/SNYK-PYTHON-ZOPE2-40204
- id: snykio:pypi:zope2:40208
  title: Information Exposure
  description: |
    [`zope2`][1] is a Zope2 application server / web framework The object
    manager implementation (objectmanager.py) in Plone 2.1 through 4.1,
    4.2.x through 4.2.5, and 4.3.x through 4.3.1 does not properly restrict
    access to internal methods, which allows remote attackers to obtain
    sensitive information via a crafted request.



    [1]: https://pypi.python.org/pypi/zope2
  affected_package: zope2
  vulnerable_versions:
  - ">= 2.13 < 2.13.21"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2013-4196
  cwe:
  - CWE-264
  disclosed_date: 2013-06-26
  created_date: 2013-06-26
  last_modified_date: 2013-06-26
  credit:
  - Unknown
  references:
  - http://seclists.org/oss-sec/2013/q3/261
  - https://bugzilla.redhat.com/show_bug.cgi?id=978475
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2013-4196
  source_url: https://snyk.io/vuln/SNYK-PYTHON-ZOPE2-40208
- id: snykio:pypi:zope2:40217
  title: Denial of Service (DoS)
  description: |+
    [`zope2`][1] is a Zope2 application server / web framework (1)
    cb\_decode.py and (2) linkintegrity.py in Plone 2.1 through 4.1, 4.2.x
    through 4.2.5, and 4.3.x through 4.3.1 allow remote authenticated users
    to cause a denial of service (resource consumption) via a large zip
    archive, which is expanded (decompressed).



    [1]: https://pypi.python.org/pypi/zope2
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: zope2
  vulnerable_versions:
  - ">= 2.13 < 2.13.21"
  severity: low
  package_manager: pypi
  cve:
  - CVE-2013-4199
  cwe:
  - CWE-20
  disclosed_date: 2013-06-26
  created_date: 2013-06-26
  last_modified_date: 2013-06-26
  credit:
  - Unknown
  references:
  - http://seclists.org/oss-sec/2013/q3/261
  - https://bugzilla.redhat.com/show_bug.cgi?id=978482
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2013-4199
  source_url: https://snyk.io/vuln/SNYK-PYTHON-ZOPE2-40217
- id: snykio:pypi:zope2:40354
  title: HTTP Header Injection
  description: |
    [`zope2`][1] is a Zope2 application server / web framework Affected
    versions of this package are vulnerable to HTTP header Injection attacks
    due to incorrectly escaping of Carriage Return and Line Feed (CR/LF)
    characters in HTTP requests.



    [1]: https://pypi.python.org/pypi/zope2
  affected_package: zope2
  vulnerable_versions:
  - ">= 2.13 < 2.13.25"
  severity: high
  package_manager: pypi
  cve:
  - CVE-2015-7318
  cwe:
  - CWE-74
  disclosed_date: 2015-09-09
  created_date: 2015-09-09
  last_modified_date: 2015-09-09
  credit:
  - Jan Pokorny
  references:
  - https://plone.org/security/hotfix/20150910/header-injection
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2015-7318
  source_url: https://snyk.io/vuln/SNYK-PYTHON-ZOPE2-40354
- id: snykio:pypi:zope2:40429
  title: Cross-site Scripting (XSS)
  description: |+
    [`zope2`][1] is a Zope2 application server / web framework Affected
    versions of this package are vulnerable to Cross-site Scripting attacks
    due not properly handling user input in the ZMI pages of Zope2.



    [1]: https://pypi.python.org/pypi/zope2
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: zope2
  vulnerable_versions:
  - ">= 4.0a1"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2016-7140
  cwe:
  - CWE-79
  disclosed_date: 2016-07-18
  created_date: 2016-07-18
  last_modified_date: 2016-07-18
  credit:
  - Unknown
  references:
  - http://openwall.com/lists/oss-security/2016/09/05/4
  - https://plone.org/security/hotfix/20160830/non-persistent-xss-in-zope2
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-7140
  source_url: https://snyk.io/vuln/SNYK-PYTHON-ZOPE2-40429
- id: snykio:pypi:zope2:569087
  title: Cross-site Scripting (XSS)
  description: |+
    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). This vulnerability allows remote attackers to inject arbitrary
    web script or HTML via vectors related to the way error messages perform
    sanitization. NOTE: this issue exists because of an incomplete fix for
    CVE-2010-1104.

    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: zope2
  vulnerable_versions:
  - ">= 2.10.0 < 2.10.11"
  - ">= 2.11.0 < 2.11.6"
  - ">= 2.12.0 < 2.12.3"
  - ">= 2.8.0 < 2.8.12"
  - ">= 2.9.0 < 2.9.12"
  - ">= 3.1.1 < 3.4.1"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2011-4924
  cwe:
  - CWE-79
  disclosed_date: 2020-05-14
  created_date: 2020-05-14
  last_modified_date: 2020-05-14
  credit:
  - Unknown
  references:
  - https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2011-4924
  source_url: https://snyk.io/vuln/SNYK-PYTHON-ZOPE2-569087
