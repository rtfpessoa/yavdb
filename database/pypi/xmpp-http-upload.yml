---
- id: snykio:pypi:xmpp-http-upload:1016270
  title: Directory Traversal
  description: |
    [xmpp-http-upload][1] is a Flask-based HTTP service to handle XMPP HTTP
    upload requests from Prosody mod\_http\_upload\_external

    Affected versions of this package are vulnerable to Directory Traversal.
    When the GET method is attacked, attackers can read files which have a
    `.data` suffix and which are accompanied by a JSON file with the `.meta`
    suffix. This can lead to Information Disclosure and in some
    shared-hosting scenarios also to circumvention of authentication or
    other limitations on the outbound (GET) traffic.

    For example, in a scenario where a single server has multiple instances
    of the application running (with separate DATA\_ROOT settings), an
    attacker who has knowledge about the directory structure is able to read
    files from any other instance to which the process has read access.

    If instances have individual authentication (for example, HTTP
    authentication via a reverse proxy, source IP based filtering) or other
    restrictions (such as quotas), attackers may circumvent those limits in
    such a scenario by using the Directory Traversal to retrieve data from
    the other instances.

    If the associated XMPP server (or anyone knowing the SECRET\_KEY) is
    malicious, they can write files outside the DATA\_ROOT. The files which
    are written are constrained to have the `.meta` and the `.data`
    suffixes; the `.meta` file will contain the JSON with the Content-Type
    of the original request and the `.data` file will contain the payload.



    [1]: https://www.pypi.org/project/xmpp-http-upload
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
  affected_package: xmpp-http-upload
  vulnerable_versions:
  - "< 0.4.0"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2020-15239
  cwe:
  - CWE-22
  disclosed_date: 2020-10-06
  created_date: 2020-10-07
  last_modified_date: 2020-10-07
  credit:
  - Christian Tacke
  references:
  - https://github.com/horazont/xmpp-http-upload/pull/12
  - https://github.com/horazont/xmpp-http-upload/security/advisories/GHSA-hwv5-w8gm-fq9f
  source_url: https://snyk.io/vuln/SNYK-PYTHON-XMPPHTTPUPLOAD-1016270
