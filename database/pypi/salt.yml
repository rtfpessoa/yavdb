---
- id: snykio:pypi:salt:174927
  title: Arbitrary Code Execution
  description: |
    [salt][1] is a new approach to infrastructure management built on a
    dynamic communication bus. Salt can be used for data-driven
    orchestration, remote execution for any infrastructure, configuration
    management for any app stack, and much more.

    Affected versions of this package are vulnerable to Arbitrary Code
    Execution. Insecure usage of a predictable directory in `/tmp` and on
    minion allows any minion with an accepted key to send commands to the
    master as any other minion.



    [1]: https://www.saltstack.com/
  affected_package: salt
  vulnerable_versions:
  - "< 0.17.1"
  severity: high
  package_manager: pypi
  cve:
  - CVE-2013-4436
  cwe:
  - CWE-693
  disclosed_date: 2013-05-11
  created_date: 2019-06-06
  last_modified_date: 2019-06-06
  credit:
  - Kurt Seifried
  references:
  - https://docs.saltstack.com/en/latest/topics/releases/0.17.1.html
  - https://github.com/saltstack/salt/pull/7356
  - https://www.openwall.com/lists/oss-security/2013/10/18/3
  source_url: https://snyk.io/vuln/SNYK-PYTHON-SALT-174927
- id: snykio:pypi:salt:40311
  title: Insecure Temporary File
  description: |
    [`salt`][1] is a Portable, distributed, remote execution and
    configuration management system.

    Affected versions of this package are vulnerable to Insecure Temporary
    File.

    modules/serverdensity\_device.py in SaltStack before 2014.7.4 does not
    properly handle files in /tmp.



    [1]: https://pypi.python.org/pypi/salt
  affected_package: salt
  vulnerable_versions:
  - "< 2014.7.4"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2015-1838
  cwe:
  - CWE-377
  disclosed_date: 2015-03-25
  created_date: 2017-08-01
  last_modified_date: 2017-08-01
  credit:
  - Unknown
  references:
  - https://github.com/saltstack/salt/commit/e11298d7155e9982749483ca5538e46090caef9c
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2015-1838
  source_url: https://snyk.io/vuln/SNYK-PYTHON-SALT-40311
- id: snykio:pypi:salt:40326
  title: Authentication Bypass
  description: |
    [`salt`][1] is a Portable, distributed, remote execution and
    configuration management system.

    Affected versions of this package are vulnerable to Information
    Exposure. win\_useradd, salt-cloud and the Linode driver in salt
    2015.5.x before 2015.5.6, and 2015.8.x before 2015.8.1 leak password
    information in debug logs.



    [1]: https://pypi.python.org/pypi/salt
  affected_package: salt
  vulnerable_versions:
  - ">= 2015.5 < 2015.5.6"
  - ">= 2015.8 < 2015.8.1"
  severity: high
  package_manager: pypi
  cve:
  - CVE-2015-4017
  cwe:
  - CWE-287
  disclosed_date: 2017-02-14
  created_date: 2017-11-07
  last_modified_date: 2017-11-07
  credit:
  - Unknown
  references:
  - https://access.redhat.com/security/cve/cve-2015-6941
  source_url: https://snyk.io/vuln/SNYK-PYTHON-SALT-40326
- id: snykio:pypi:salt:40358
  title: Information Exposure
  description: |
    [`salt`][1] is a Portable, distributed, remote execution and
    configuration management system.

    Affected versions of this package are vulnerable to Information
    Exposure. The state.sls function in Salt before 2015.8.3 uses weak
    permissions on the cache data, which allows local users to obtain
    sensitive information by reading the file.



    [1]: https://pypi.python.org/pypi/salt
  affected_package: salt
  vulnerable_versions:
  - "< 2015.8.3"
  severity: low
  package_manager: pypi
  cve:
  - CVE-2015-8034
  cwe:
  - CWE-200
  disclosed_date: 2015-08-03
  created_date: 2017-08-01
  last_modified_date: 2017-08-01
  credit:
  - Unknown
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2015-8034
  source_url: https://snyk.io/vuln/SNYK-PYTHON-SALT-40358
- id: snykio:pypi:salt:40379
  title: Arbitrary Code Execution
  description: |
    [`salt`][1] is a Portable, distributed, remote execution and
    configuration management system.

    Salt 2015.8.x before 2015.8.4 does not properly handle clear messages on
    the minion, which allows man-in-the-middle attackers to execute
    arbitrary code by inserting packets into the minion-master data stream.



    [1]: https://pypi.python.org/pypi/salt
  affected_package: salt
  vulnerable_versions:
  - ">= 2015.8 < 2015.8.4"
  severity: high
  package_manager: pypi
  cve:
  - CVE-2016-1866
  cwe:
  - CWE-94
  disclosed_date: 2015-08-04
  created_date: 2017-08-01
  last_modified_date: 2017-08-01
  credit:
  - Unknown
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-1866
  source_url: https://snyk.io/vuln/SNYK-PYTHON-SALT-40379
- id: snykio:pypi:salt:40447
  title: Information Exposure
  description: |
    [`salt`][1] is a Portable, distributed, remote execution and
    configuration management system.

    Affected versions of this package are vulnerable to information
    Exposure. It allows deleted minions to read or write to minions with the
    same id, related to caching.



    [1]: https://pypi.python.org/pypi/salt
  affected_package: salt
  vulnerable_versions:
  - "< 2015.8.11"
  severity: high
  package_manager: pypi
  cve:
  - CVE-2016-9639
  cwe:
  - CWE-200
  disclosed_date: 2016-11-28
  created_date: 2017-08-01
  last_modified_date: 2017-08-01
  credit:
  - Unknown
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-9639
  source_url: https://snyk.io/vuln/SNYK-PYTHON-SALT-40447
- id: snykio:pypi:salt:40452
  title: Arbitrary Code Execution
  description: |
    [`salt`][1] is a Portable, distributed, remote execution and
    configuration management system.

    Affected versions of this package are vulnerable to Arbitrary Code
    Execution. When using the local\_batch client from salt-api in SaltStack
    Salt before 2015.8.13, 2016.3.x before 2016.3.5, and 2016.11.x before
    2016.11.2, external authentication is not respected, enabling all
    authentication to be bypassed.



    [1]: https://pypi.python.org/pypi/salt
  affected_package: salt
  vulnerable_versions:
  - "< 2015.8.12"
  - ">= 2016.11 < 2016.11.2"
  - ">= 2016.3 < 2016.3.5"
  severity: high
  package_manager: pypi
  cve:
  - CVE-2017-5192
  cwe:
  - CWE-94
  disclosed_date: 2017-03-20
  created_date: 2017-11-07
  last_modified_date: 2017-11-07
  credit:
  - Unknown
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2017-5192
  source_url: https://snyk.io/vuln/SNYK-PYTHON-SALT-40452
- id: snykio:pypi:salt:40453
  title: Arbitrary Code Execution
  description: |
    [`salt`][1] is a Portable, distributed, remote execution and
    configuration management system.

    Affected versions of this package are vulnerable to Arbitrary Code
    Execution. When using the local\_batch client from salt-api in SaltStack
    Salt before 2015.8.13, 2016.3.x before 2016.3.5, and 2016.11.x before
    2016.11.2, external authentication is not respected, enabling all
    authentication to be bypassed.



    [1]: https://pypi.python.org/pypi/salt
  affected_package: salt
  vulnerable_versions:
  - "< 2015.8.13"
  - ">= 2016.11 < 2016.11.2"
  - ">= 2016.3 < 2016.3.5"
  severity: high
  package_manager: pypi
  cve:
  - CVE-2017-5200
  cwe:
  - CWE-94
  disclosed_date: 2017-03-20
  created_date: 2017-11-07
  last_modified_date: 2017-11-07
  credit:
  - Unknown
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2017-5192
  source_url: https://snyk.io/vuln/SNYK-PYTHON-SALT-40453
- id: snykio:pypi:salt:40687
  title: Denial of Service (DoS)
  description: |+
    [`salt`][1] is a portable, distributed, remote execution and
    configuration management system.

    Affected versions of the package are vulnerable to Denial of Service
    (DoS). SaltStack Salt before 2016.3.8, 2016.11.x before 2016.11.8, and
    2017.7.x before 2017.7.2 allows remote attackers to cause a denial of
    service via a crafted authentication request.



    [1]: http://pypi.python.org/pypi/salt
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: salt
  vulnerable_versions:
  - ">= 2016.11.0 < 2016.11.8"
  - ">= 2016.3.0 < 2016.3.8"
  - ">= 2017.7.0 < 2017.7.2"
  severity: high
  package_manager: pypi
  cve:
  - CVE-2017-14696
  cwe:
  - CWE-400
  disclosed_date: 2017-08-24
  created_date: 2017-11-05
  last_modified_date: 2017-11-05
  credit:
  - Julian Brost
  references:
  - https://docs.saltstack.com/en/latest/topics/releases/2016.11.8.html
  - https://docs.saltstack.com/en/latest/topics/releases/2016.3.8.html
  - https://docs.saltstack.com/en/latest/topics/releases/2017.7.2.html
  - https://github.com/saltstack/salt/commit/0425defe84d98545c9ab3ead0300bbfd029f8a97
  - https://github.com/saltstack/salt/commit/5f8b5e1a0f23fe0f2be5b3c3e04199b57a53db5b
  - https://github.com/saltstack/salt/commit/862f6b8eb8a8172d5b1d43c97136ded52b97b957
  source_url: https://snyk.io/vuln/SNYK-PYTHON-SALT-40687
- id: snykio:pypi:salt:40688
  title: Directory Traversal
  description: |
    [`salt`][1] is a portable, distributed, remote execution and
    configuration management system.

    Affected versions of the package are vulnerable to Directory Traversal.
    Directory traversal vulnerability in minion id validation in SaltStack
    Salt before 2016.3.8, 2016.11.x before 2016.11.8, and 2017.7.x before
    2017.7.2 allows remote minions with incorrect credentials to
    authenticate to a master via a crafted minion ID. NOTE: this
    vulnerability exists because of an incomplete fix for CVE-2017-12791.



    [1]: http://pypi.python.org/pypi/salt
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
  affected_package: salt
  vulnerable_versions:
  - ">= 2016.11.0 < 2016.11.8"
  - ">= 2016.3.0 < 2016.3.8"
  - ">= 2017.7.0 < 2017.7.2"
  severity: high
  package_manager: pypi
  cve:
  - CVE-2017-14695
  cwe:
  - CWE-22
  disclosed_date: 2017-08-23
  created_date: 2017-11-05
  last_modified_date: 2017-11-05
  credit:
  - Julian Brost
  references:
  - https://docs.saltstack.com/en/latest/topics/releases/2016.11.8.html
  - https://docs.saltstack.com/en/latest/topics/releases/2016.3.8.html
  - https://docs.saltstack.com/en/latest/topics/releases/2017.7.2.html
  - https://github.com/saltstack/salt/commit/31b38f50ebf321a1d14af0868c516a5de865f5a8
  - https://github.com/saltstack/salt/commit/80d90307b07b3703428ecbb7c8bb468e28a9ae6d
  - https://github.com/saltstack/salt/commit/9ba1f6112fa72627b42eed4c4eea439dce2df31c
  source_url: https://snyk.io/vuln/SNYK-PYTHON-SALT-40688
- id: snykio:pypi:salt:40711
  title: Information Exposure
  description: |
    [`salt`][1] is a Portable, distributed, remote execution and
    configuration management system.

    Affected versions of the package are vulnerable to Information
    Disclosure. salt before 2015.5.5 leaks git usernames and passwords to
    the log.



    [1]: https://pypi.python.org/pypi/salt
  affected_package: salt
  vulnerable_versions:
  - "< 2015.5.5"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2015-6918
  cwe:
  - CWE-200
  disclosed_date: 2015-08-18
  created_date: 2017-11-29
  last_modified_date: 2017-11-29
  credit:
  - Unknown
  references:
  - https://github.com/saltstack/salt/commit/28aa9b105804ff433d8f663b2f9b804f2b75495a
  - https://github.com/saltstack/salt/pull/26486
  - https://nvd.nist.gov/vuln/detail/CVE-2015-6918
  source_url: https://snyk.io/vuln/SNYK-PYTHON-SALT-40711
- id: snykio:pypi:salt:42071
  title: Insecure use of /tmp folder
  description: |
    [salt][1] is a new approach to infrastructure management built on a
    dynamic communication bus.

    Affected versions of this package are vulnerable to Insecure use of /tmp
    folder.



    [1]: https://pypi.org/project/salt/
  affected_package: salt
  vulnerable_versions:
  - "< 2014.7.4"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2015-1839
  cwe:
  - CWE-19
  disclosed_date: 2015-03-26
  created_date: 2018-02-26
  last_modified_date: 2018-02-26
  credit:
  - Unknown
  references:
  - https://bugzilla.redhat.com/show_bug.cgi?id=1212788
  - https://github.com/saltstack/salt/commit/22d2f7a1ec93300c34e8c42d14ec39d51e610b5c
  - https://nvd.nist.gov/vuln/detail/CVE-2015-1839
  source_url: https://snyk.io/vuln/SNYK-PYTHON-SALT-42071
- id: snykio:pypi:salt:42073
  title: Arbitrary File Creation
  description: |
    [salt][1] is a new approach to infrastructure management built on a
    dynamic communication bus.

    Affected versions of this package are vulnerable to Arbitrary File
    Creation. It allows local users to have an unspecified impact via
    vectors related to temporary file creation in (1) seed.py, (2) salt-ssh,
    or (3) salt-cloud.



    [1]: https://github.com/saltstack/salt
  affected_package: salt
  vulnerable_versions:
  - "< 2014.1.10"
  severity: high
  package_manager: pypi
  cve:
  - CVE-2014-3563
  cwe:
  - CWE-59
  disclosed_date: 2014-08-01
  created_date: 2018-03-01
  last_modified_date: 2018-03-01
  credit:
  - Unknown
  references:
  - https://docs.saltstack.com/en/latest/topics/releases/2014.1.10.html
  - https://nvd.nist.gov/vuln/detail/CVE-2014-3563
  source_url: https://snyk.io/vuln/SNYK-PYTHON-SALT-42073
- id: snykio:pypi:salt:42099
  title: Client Impersonation
  description: |
    [salt][1] is a Software to automate the management and configuration of
    any infrastructure or application at scale.

    Affected versions of this package are vulnerable to Client
    Impersonation. Compromised salt-minions can impersonate the salt-master.



    [1]: https://github.com/saltstack/salt
  affected_package: salt
  vulnerable_versions:
  - "< 2016.3.6"
  severity: high
  package_manager: pypi
  cve:
  - CVE-2017-7893
  cwe:
  - CWE-502
  disclosed_date: 2017-03-22
  created_date: 2018-04-26
  last_modified_date: 2018-04-26
  credit:
  - Unknown
  references:
  - https://docs.saltstack.com/en/2017.7/topics/releases/2016.3.6.html
  - https://github.com/saltstack/salt/pull/39855
  - https://nvd.nist.gov/vuln/detail/CVE-2017-7893
  source_url: https://snyk.io/vuln/SNYK-PYTHON-SALT-42099
- id: snykio:pypi:salt:42123
  title: Authentication Bypass
  description: |
    [salt][1] is a Portable, distributed, remote execution and configuration
    management system.

    Affected versions of this package are vulnerable to Authentication
    Bypass. When `PAM` external authentication is enabled, An attacker could
    bypass the configured authentication service by passing an alternate
    service with a command sent to `LocalClient`.



    [1]: https://pypi.org/project/salt/
  affected_package: salt
  vulnerable_versions:
  - "< 2015.5.10"
  - ">= 2015.8.0 < 2015.8.8"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2016-3176
  cwe:
  - CWE-287
  disclosed_date: 2017-01-31
  created_date: 2018-06-03
  last_modified_date: 2018-06-03
  credit:
  - Unknown
  references:
  - https://docs.saltstack.com/en/latest/topics/releases/2015.5.10.html
  - https://docs.saltstack.com/en/latest/topics/releases/2015.8.8.html
  - https://nvd.nist.gov/vuln/detail/CVE-2016-3176
  source_url: https://snyk.io/vuln/SNYK-PYTHON-SALT-42123
- id: snykio:pypi:salt:42124
  title: Arbitrary Routine Execution
  description: |
    [salt][1] is a Portable, distributed, remote execution and configuration
    management system

    Affected versions of this package are vulnerable to Arbitrary Routine
    Execution. Remote authenticated users who are using external
    authentication or client ACL could execute restricted routines by
    embedding the routine in another routine.



    [1]: https://pypi.org/project/salt/
  affected_package: salt
  vulnerable_versions:
  - "< 0.17.1"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2013-4435
  cwe:
  - CWE-287
  disclosed_date: 2013-11-05
  created_date: 2018-06-03
  last_modified_date: 2018-06-03
  credit:
  - Unknown
  references:
  - http://docs.saltstack.com/topics/releases/0.17.1.html
  source_url: https://snyk.io/vuln/SNYK-PYTHON-SALT-42124
- id: snykio:pypi:salt:42125
  title: Client Impersonation
  description: |
    [salt][1] is a Portable, distributed, remote execution and configuration
    management system.

    Affected versions of this package are vulnerable to Client
    Impersonation. Remote authenticated minions could impersonate arbitrary
    minions via a crafted minion with a valid key.



    [1]: https://pypi.org/project/salt/
  affected_package: salt
  vulnerable_versions:
  - ">= 0.15 < 0.17.1"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2013-4439
  cwe:
  - CWE-264
  disclosed_date: 2013-11-05
  created_date: 2018-06-03
  last_modified_date: 2018-06-03
  credit:
  - Unknown
  references:
  - http://docs.saltstack.com/topics/releases/0.17.1.html
  - https://github.com/saltstack/salt/pull/7356
  source_url: https://snyk.io/vuln/SNYK-PYTHON-SALT-42125
- id: snykio:pypi:salt:42126
  title: Privilege Escalation
  description: |
    [salt][1] is a Portable, distributed, remote execution and configuration
    management system.

    Affected versions of this package are vulnerable to Privilege
    Escalation. It does not properly drop group privileges, which makes it
    easier for remote attackers to gain privileges.



    [1]: https://pypi.org/project/salt/
  affected_package: salt
  vulnerable_versions:
  - "< 0.17.1"
  severity: high
  package_manager: pypi
  cve:
  - CVE-2013-6617
  cwe:
  - CWE-264
  disclosed_date: 2013-11-05
  created_date: 2018-06-03
  last_modified_date: 2018-06-03
  credit:
  - Unknown
  references:
  - http://docs.saltstack.com/topics/releases/0.17.1.html
  source_url: https://snyk.io/vuln/SNYK-PYTHON-SALT-42126
- id: snykio:pypi:salt:42127
  title: Credential Exposure
  description: |
    [salt][1] is a Portable, distributed, remote execution and configuration
    management system.

    Affected versions of this package are vulnerable to Credential Exposure.
    It copied permissions over configuration from the Salt Master without
    adjusting, which might leak credentials to local attackers on configured
    clients.



    [1]: https://pypi.org/project/salt/
  affected_package: salt
  vulnerable_versions:
  - "< 2016.11.4"
  severity: high
  package_manager: pypi
  cve:
  - CVE-2017-8109
  cwe:
  - CWE-200
  disclosed_date: 2017-04-11
  created_date: 2018-06-03
  last_modified_date: 2018-06-03
  credit:
  - Unknown
  references:
  - https://github.com/saltstack/salt/issues/40075
  - https://github.com/saltstack/salt/pull/40609
  - https://github.com/saltstack/salt/pull/40609/commits/6e34c2b5e5e849302af7ccd00509929c3809c658
  - https://nvd.nist.gov/vuln/detail/CVE-2017-8109
  source_url: https://snyk.io/vuln/SNYK-PYTHON-SALT-42127
- id: snykio:pypi:salt:42128
  title: Directory Traversal
  description: |
    [salt][1] is a Portable, distributed, remote execution and configuration
    management system.

    Affected versions of this package are vulnerable to Directory Traversal
    attacks. A remote attacker with incorrect credentials could authenticate
    to a master via a crafted minion ID.



    [1]: https://pypi.org/project/salt/
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
  affected_package: salt
  vulnerable_versions:
  - "< 2016.11.7"
  - ">= 2017.7.0 < 2017.7.1"
  severity: high
  package_manager: pypi
  cve:
  - CVE-2017-12791
  cwe:
  - CWE-22
  disclosed_date: 2017-08-15
  created_date: 2018-06-03
  last_modified_date: 2018-06-03
  credit:
  - Unknown
  references:
  - https://github.com/saltstack/salt/pull/42944
  - https://nvd.nist.gov/vuln/detail/CVE-2017-12791
  source_url: https://snyk.io/vuln/SNYK-PYTHON-SALT-42128
- id: snykio:pypi:salt:42129
  title: Information Exposure
  description: |
    [salt][1] is a Portable, distributed, remote execution and configuration
    management system.

    Affected versions of this package are vulnerable to Information
    Exposure. A malicious user could get password information via the debug
    logs.



    [1]: https://pypi.org/project/salt/
  affected_package: salt
  vulnerable_versions:
  - ">= 2015.5.0 < 2015.5.6"
  - ">= 2015.8.0 < 2015.8.1"
  severity: high
  package_manager: pypi
  cve:
  - CVE-2015-6941
  cwe:
  - CWE-534
  disclosed_date: 2017-08-09
  created_date: 2018-06-03
  last_modified_date: 2018-06-03
  credit:
  - Unknown
  references:
  - https://docs.saltstack.com/en/latest/topics/releases/2015.5.6.html
  - https://docs.saltstack.com/en/latest/topics/releases/2015.8.1.html
  - https://nvd.nist.gov/vuln/detail/CVE-2015-6941
  source_url: https://snyk.io/vuln/SNYK-PYTHON-SALT-42129
- id: snykio:pypi:salt:42130
  title: Insufficient Validation
  description: |
    [salt][1] is a Portable, distributed, remote execution and configuration
    management system

    Affected versions of this package are vulnerable to Insufficient
    Validation. It does not validate the SSH host key of requests, which
    allows remote attackers to have unspecified impact via a
    man-in-the-middle (MITM) attack.



    [1]: https://pypi.org/project/salt/
  affected_package: salt
  vulnerable_versions:
  - "< 0.17.1"
  severity: high
  package_manager: pypi
  cve:
  - CVE-2013-4436
  cwe:
  - CWE-20
  disclosed_date: 2013-11-05
  created_date: 2018-06-03
  last_modified_date: 2018-06-03
  credit:
  - Unknown
  references:
  - http://docs.saltstack.com/topics/releases/0.17.1.html
  - https://nvd.nist.gov/vuln/detail/CVE-2013-4436
  source_url: https://snyk.io/vuln/SNYK-PYTHON-SALT-42130
- id: snykio:pypi:salt:42131
  title: Arbitrary YAML Code Execution
  description: |
    [salt][1] is a Portable, distributed, remote execution and configuration
    management system.

    Affected versions of this package are vulnerable to Arbitrary YAML Code
    Execution.



    [1]: https://pypi.org/project/salt/
  affected_package: salt
  vulnerable_versions:
  - "< 0.17.1"
  severity: high
  package_manager: pypi
  cve:
  - CVE-2013-4438
  cwe:
  - CWE-94
  disclosed_date: 2013-11-05
  created_date: 2018-06-03
  last_modified_date: 2018-06-03
  credit:
  - Unknown
  references:
  - https://nvd.nist.gov/vuln/detail/CVE-2013-4438
  - https://pypi.org/project/salt/
  source_url: https://snyk.io/vuln/SNYK-PYTHON-SALT-42131
- id: snykio:pypi:salt:542668
  title: Command Injection
  description: |
    [salt][1] is a new approach to infrastructure management built on a
    dynamic communication bus. Salt can be used for data-driven
    orchestration, remote execution for any infrastructure, configuration
    management for any app stack, and much more.

    Affected versions of this package are vulnerable to Command Injection
    via a NEST API with the ssh client enabled. This allows an
    unauthenticated attacker with network access to the API endpoint to
    execute arbitrary code on the salt-api host.



    [1]: https://www.saltstack.com/
  affected_package: salt
  vulnerable_versions:
  - ">= 2019.2.0 < 2019.2.3"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2019-17361
  cwe:
  - CWE-78
  disclosed_date: 2020-01-13
  created_date: 2020-01-19
  last_modified_date: 2020-01-19
  credit:
  - Unknown
  references:
  - https://docs.saltstack.com/en/latest/topics/releases/2019.2.3.html#security-fix
  source_url: https://snyk.io/vuln/SNYK-PYTHON-SALT-542668
- id: snykio:pypi:salt:568025
  title: Directory Traversal
  description: |
    [salt][1] is a new approach to infrastructure management built on a
    dynamic communication bus. Salt can be used for data-driven
    orchestration, remote execution for any infrastructure, configuration
    management for any app stack, and much more.

    Affected versions of this package are vulnerable to Directory Traversal.
    The wheel module contains commands used to read and write files under
    specific directory paths. The inputs to these functions are concatenated
    with the target directory and the resulting path is not canonicalized,
    leading to an escape of the intended path restriction.

    The get\_token() method of the salt.tokens.localfs class (which is
    exposed to unauthenticated requests by the ClearFuncs class) fails to
    sanitize the token input parameter which is then used as a filename,
    allowing insertion of \"..\" path elements and thus reading of files
    outside of the intended directory. The only restriction is that the file
    has to be deserializable by salt.payload.Serial.loads().



    [1]: https://www.saltstack.com/
  affected_package: salt
  vulnerable_versions:
  - "< 2019.2.4"
  - ">= 3000 < 3000.2"
  severity: high
  package_manager: pypi
  cve:
  - CVE-2020-11652
  cwe:
  - CWE-761
  disclosed_date: 2020-04-30
  created_date: 2020-04-30
  last_modified_date: 2020-04-30
  credit:
  - FSecure Labs
  references:
  - https://docs.saltstack.com/en/latest/topics/releases/2019.2.4.html
  - https://github.com/saltstack/salt/blob/v3000.2_docs/doc/topics/releases/3000.2.rst
  - https://labs.f-secure.com/advisories/saltstack-authorization-bypass/
  - https://www.exploit-db.com/exploits/48421
  source_url: https://snyk.io/vuln/SNYK-PYTHON-SALT-568025
- id: snykio:pypi:salt:568031
  title: Arbitrary Code Execution
  description: |
    [salt][1] is a new approach to infrastructure management built on a
    dynamic communication bus. Salt can be used for data-driven
    orchestration, remote execution for any infrastructure, configuration
    management for any app stack, and much more.

    Affected versions of this package are vulnerable to Arbitrary Code
    Execution. The salt-master process`ClearFuncs` class does not properly
    validate method calls. This allows a remote user to access some methods
    without authentication. These methods can be used to retrieve user
    tokens from the salt master and/or run arbitrary commands on salt
    minions.



    [1]: https://www.saltstack.com/
  affected_package: salt
  vulnerable_versions:
  - "< 2019.2.4"
  - ">= 3000 < 3000.2"
  severity: high
  package_manager: pypi
  cve:
  - CVE-2020-11651
  cwe:
  - CWE-94
  disclosed_date: 2020-04-30
  created_date: 2020-04-30
  last_modified_date: 2020-04-30
  credit:
  - Unknown
  references:
  - https://docs.saltstack.com/en/latest/topics/releases/2019.2.4.html
  - https://github.com/saltstack/salt/blob/v3000.2_docs/doc/topics/releases/3000.2.rst
  - https://labs.f-secure.com/advisories/saltstack-authorization-bypass/
  - https://www.exploit-db.com/exploits/48421
  source_url: https://snyk.io/vuln/SNYK-PYTHON-SALT-568031
- id: snykio:pypi:salt:72538
  title: Arbitrary Command Execution
  description: |
    [salt][1] is a software to automate the management and configuration of
    any infrastructure or application at scale.

    Affected versions of this package are vulnerable to Arbitrary Command
    Execution and Authentication Bypass via the `salt-api`.



    [1]: https://pypi.org/project/salt/
  affected_package: salt
  vulnerable_versions:
  - "< 2017.7.8"
  - ">= 2018.0.0 < 2018.3.3"
  severity: high
  package_manager: pypi
  cve:
  - CVE-2018-15751
  cwe:
  - CWE-94
  disclosed_date: 2018-10-24
  created_date: 2018-10-28
  last_modified_date: 2018-10-28
  credit:
  - Unknown
  references:
  - https://docs.saltstack.com/en/2017.7/topics/releases/2017.7.8.html
  - https://groups.google.com/forum/%23%21msg/salt-users/dimVF7rpphY/jn3Xv3MbBQAJ
  source_url: https://snyk.io/vuln/SNYK-PYTHON-SALT-72538
- id: snykio:pypi:salt:72539
  title: Directory Traversal
  description: |
    [salt][1] is a Software to automate the management and configuration of
    any infrastructure or application at scale.

    Affected versions of this package are vulnerable to Directory Traversal
    via the `salt-api`, An attacker could determine what files exist on a
    server when querying `/run` or `/events`.



    [1]: https://pypi.org/project/salt/
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
  affected_package: salt
  vulnerable_versions:
  - "< 2017.7.8"
  - ">= 2018.0 < 2018.3.3"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2018-15750
  cwe:
  - CWE-22
  disclosed_date: 2018-10-24
  created_date: 2018-10-28
  last_modified_date: 2018-10-28
  credit:
  - Unknown
  references:
  - https://docs.saltstack.com/en/2017.7/topics/releases/2017.7.8.html
  - https://groups.google.com/forum/%23%21msg/salt-users/dimVF7rpphY/jn3Xv3MbBQAJ
  source_url: https://snyk.io/vuln/SNYK-PYTHON-SALT-72539
