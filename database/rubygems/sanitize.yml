---
- id: rubyadvisory:rubygems:sanitize:CVE-2018-3740
  title: HTML injection/XSS in Sanitize
  description: |
    When Sanitize gem is used in combination with libxml2 >= 2.9.2,
    a specially crafted HTML fragment can cause libxml2 to generate
    improperly escaped output, allowing non-whitelisted attributes to be
    used on whitelisted elements.

    This can allow HTML and JavaScript injection, which could result in XSS
    if Sanitize's output is served to browsers.
  affected_package: sanitize
  unaffected_versions:
  - "< 1.1.0"
  patched_versions:
  - ">= 4.6.3"
  - "~> 2.1.1"
  package_manager: rubygems
  cve:
  - CVE-2018-3740
  disclosed_date: 2018-03-19
  created_date: 2018-03-19
  last_modified_date: 2018-03-19
  credit:
  - Rubysec
  references:
  - https://github.com/rgrove/sanitize/commit/01629a162e448a83d901456d0ba8b65f3b03d46e
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://github.com/rgrove/sanitize/issues/176
- id: rubyadvisory:rubygems:sanitize:CVE-2020-4054
  title: Cross-site scripting vulnerability via `<math>` or `<svg>` element in Sanitize
  description: |-
    When HTML is sanitized using Sanitize's "relaxed" config or a custom config that allows certain
    elements, some content in a `<math>` or `<svg>` element may not be sanitized correctly even if
    `math` and `svg` are not in the allowlist.

    You are likely to be vulnerable to this issue if you use Sanitize's relaxed config or a custom
    config that allows one or more of the following HTML elements:

    - `iframe`
    - `math`
    - `noembed`
    - `noframes`
    - `noscript`
    - `plaintext`
    - `script`
    - `style`
    - `svg`
    - `xmp`

    ### Impact

    Using carefully crafted input, an attacker may be able to sneak arbitrary HTML through Sanitize,
    potentially resulting in XSS (cross-site scripting) or other undesired behavior when that HTML is
    rendered in a browser.

    ### Releases

    This problem has been fixed in Sanitize 5.2.1.

    ### Workarounds

    If upgrading is not possible, a workaround is to override the default value of Sanitize's
    `:remove_contents` config option with the following value, which ensures that the contents of
    `math` and `svg` elements (among others) are removed entirely when those elements are not in the
    allowlist:

    ```ruby
    %w[iframe math noembed noframes noscript plaintext script style svg xmp]
    ```

    For example, if you currently use Sanitize's relaxed config, you can create a custom config
    object that overrides the default value of `:remove_contents` like this:

    ```ruby
    custom_config = Sanitize::Config.merge(
      Sanitize::Config::RELAXED,
      :remove_contents => %w[iframe math noembed noframes noscript plaintext script style svg xmp]
    )
    ```

    You would then pass this custom config to Sanitize when sanitizing HTML.
  affected_package: sanitize
  unaffected_versions:
  - "< 3.0.0"
  patched_versions:
  - ">= 5.2.1"
  severity: high
  package_manager: rubygems
  cve:
  - CVE-2020-4054
  cvss_v3_score: 7.3
  disclosed_date: 2020-06-16
  created_date: 2020-06-16
  last_modified_date: 2020-06-16
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://github.com/rgrove/sanitize/security/advisories/GHSA-p4x4-rw2p-8j8m
- id: snykio:rubygems:sanitize:22024
  title: HTML Injection
  description: |
    [sanitize][1] is a whitelist-based HTML and CSS sanitizer.

    When used in combination with libxml2 versions &gt;= 2.9.2, a specially
    crafted HTML fragment can cause libxml2 to generate improperly escaped
    output, allowing non-whitelisted attributes to be used on whitelisted
    elements. This can allow HTML and JavaScript injection, which could
    result in XSS if Sanitize\'s output is served to browsers.



    [1]: https://rubygems.org/gems/sanitize
  affected_package: sanitize
  vulnerable_versions:
  - "<4.6.3"
  severity: high
  package_manager: rubygems
  cve:
  - CVE-2018-3740
  cwe:
  - CWE-74
  disclosed_date: 2018-03-19
  created_date: 2018-03-21
  last_modified_date: 2018-03-21
  credit:
  - Shopify Application Security Team
  references:
  - https://github.com/rgrove/sanitize/issues/176
  source_url: https://snyk.io/vuln/SNYK-RUBY-SANITIZE-22024
