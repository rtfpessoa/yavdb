---
- id: rubyadvisory:rubygems:rack:CVE-2011-5036
  title: 'Rack Hash Collision Form Parameter Parsing Remote DoS

'
  description: |
    Rack contains a flaw that may allow a remote denial of service. The issue is
    triggered when an attacker sends multiple crafted parameters which trigger
    hash collisions, and will result in loss of availability for the program via
    CPU consumption.
  affected_package: rack
  patched_versions:
  - ">= 1.4.0"
  - "~> 1.1.3"
  - "~> 1.2.5"
  - "~> 1.3.6"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2011-5036
  osvdb: 78121
  cvss_v2_score: 5.0
  disclosed_date: 2011-12-28
  created_date: 2011-12-28
  last_modified_date: 2011-12-28
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://nvd.nist.gov/vuln/detail/CVE-2011-5036
- id: rubyadvisory:rubygems:rack:CVE-2012-6109
  title: 'Rack Regular Expressions Engine Content-Disposition Header Parsing Infinite
    Loop Remote DoS

'
  description: |
    Rack contains a flaw in the Regular Expressions Engine that may allow a remote
    denial of service. The issue is triggered when parsing context-disposition
    headers. With a specially crafted header, a remote attacker can cause an
    infinite loop, which will result in a loss of availability for the webserver.
  affected_package: rack
  patched_versions:
  - ">= 1.4.2"
  - "~> 1.1.4"
  - "~> 1.2.6"
  - "~> 1.3.7"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2012-6109
  osvdb: 89317
  cvss_v2_score: 4.3
  disclosed_date: 2012-05-04
  created_date: 2012-05-04
  last_modified_date: 2012-05-04
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://nvd.nist.gov/vuln/detail/CVE-2012-6109
- id: rubyadvisory:rubygems:rack:CVE-2013-0183
  title: 'Rack Long String Parsing Memory Consumption Remote DoS

'
  description: |
    Rack contains a flaw that may allow a remote denial of service. The issue is
    triggered when parsing an overly long string. With a specially crafted string,
    a remote attacker can cause a consumption of memory. This will result in a
    loss of availability for the webserver.
  affected_package: rack
  patched_versions:
  - ">= 1.4.3"
  - "~> 1.3.8"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2013-0183
  osvdb: 89320
  cvss_v2_score: 5.0
  disclosed_date: 2013-01-07
  created_date: 2013-01-07
  last_modified_date: 2013-01-07
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://nvd.nist.gov/vuln/detail/CVE-2013-0183
- id: rubyadvisory:rubygems:rack:CVE-2013-0184
  title: 'Rack Rack::Auth::AbstractRequest Class Unspecified Remote DoS

'
  description: |
    Rack contains a flaw in the Rack::Auth::AbstractRequest class that may allow
    a remote denial of service. The issue is triggered when an unspecified error
    occurs, which will result in a loss of availability for the webserver.
  affected_package: rack
  patched_versions:
  - ">= 1.4.4"
  - "~> 1.1.5"
  - "~> 1.2.7"
  - "~> 1.3.9"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2013-0184
  osvdb: 89327
  cvss_v2_score: 4.3
  disclosed_date: 2013-01-13
  created_date: 2013-01-13
  last_modified_date: 2013-01-13
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://nvd.nist.gov/vuln/detail/CVE-2013-0184
- id: rubyadvisory:rubygems:rack:CVE-2013-0262
  title: 'Rack Rack::File Function Symlink Traversal Arbitrary File Disclosure

'
  description: |
    Rack contains a flaw as the Rack::File function creates temporary files
    insecurely. It is possible for a local attacker to use a symlink attack to
    traverse to an arbitrary file and disclose its contents
  affected_package: rack
  patched_versions:
  - ">= 1.5.2"
  - "~> 1.4.5"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2013-0262
  osvdb: 89938
  cvss_v2_score: 4.3
  disclosed_date: 2013-02-07
  created_date: 2013-02-07
  last_modified_date: 2013-02-07
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://nvd.nist.gov/vuln/detail/CVE-2013-0262
- id: rubyadvisory:rubygems:rack:CVE-2013-0263
  title: 'Rack Rack::Session::Cookie Function Timing Attack Remote Code Execution

'
  description: |
    Rack contains a flaw that is due to an error in the Rack::Session::Cookie
    function. Users of the Marshal session cookie encoding (the default), are
    subject to a timing attack that may lead an attacker to execute arbitrary
    code. This attack is more practical against 'cloud' users as intra-cloud
    latencies are sufficiently low to make the attack viable.
  affected_package: rack
  patched_versions:
  - ">= 1.5.2"
  - "~> 1.1.6"
  - "~> 1.2.8"
  - "~> 1.3.10"
  - "~> 1.4.5"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2013-0263
  osvdb: 89939
  cvss_v2_score: 5.1
  disclosed_date: 2013-02-07
  created_date: 2013-02-07
  last_modified_date: 2013-02-07
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://nvd.nist.gov/vuln/detail/CVE-2013-0263
- id: rubyadvisory:rubygems:rack:CVE-2015-3225
  title: 'Potential Denial of Service Vulnerability in Rack

'
  description: "Carefully crafted requests can cause a `SystemStackError` and potentially
    \ncause a denial of service attack. \n\nAll users running an affected release
    should upgrade. \n"
  affected_package: rack
  patched_versions:
  - ">= 1.6.2"
  - "~> 1.4.6"
  - "~> 1.5.4"
  package_manager: rubygems
  cve:
  - CVE-2015-3225
  disclosed_date: 2015-06-16
  created_date: 2015-06-16
  last_modified_date: 2015-06-16
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://groups.google.com/forum/#!topic/ruby-security-ann/gcUbICUmKMc
- id: rubyadvisory:rubygems:rack:CVE-2018-16470
  title: Possible DoS vulnerability in Rack
  description: |
    There is a possible DoS vulnerability in the multipart parser in Rack. This
    vulnerability has been assigned the CVE identifier CVE-2018-16470.

    Versions Affected:  2.0.4, 2.0.5
    Not affected:       <= 2.0.3
    Fixed Versions:     2.0.6

    Impact
    ------
    There is a possible DoS vulnerability in the multipart parser in Rack.
    Carefully crafted requests can cause the multipart parser to enter a
    pathological state, causing the parser to use CPU resources disproportionate to
    the request size.

    Impacted code can look something like this:

    ```
    Rack::Request.new(env).params
    ```

    But any code that uses the multi-part parser may be vulnerable.

    Rack users that have manually adjusted the buffer size in the multipart parser
    may be vulnerable as well.

    All users running an affected release should either upgrade or use one of the
    workarounds immediately.

    Releases
    --------
    The 2.0.6 release is available at the normal locations.

    Workarounds
    -----------
    To work around this issue, the following code can be used:

    ```
    require "rack/multipart/parser"

    Rack::Multipart::Parser.send :remove_const, :BUFSIZE
    Rack::Multipart::Parser.const_set :BUFSIZE, 16384
    ```
  affected_package: rack
  unaffected_versions:
  - "<= 2.0.3"
  patched_versions:
  - ">= 2.0.6"
  package_manager: rubygems
  cve:
  - CVE-2018-16470
  disclosed_date: 2018-11-05
  created_date: 2018-11-05
  last_modified_date: 2018-11-05
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://groups.google.com/forum/#!topic/ruby-security-ann/Dz4sRl-ktKk
- id: rubyadvisory:rubygems:rack:CVE-2018-16471
  title: Possible XSS vulnerability in Rack
  description: |
    There is a possible vulnerability in Rack. This vulnerability has been
    assigned the CVE identifier CVE-2018-16471.

    Versions Affected:  All.
    Not affected:       None.
    Fixed Versions:     2.0.6, 1.6.11

    Impact
    ------
    There is a possible XSS vulnerability in Rack.  Carefully crafted requests can
    impact the data returned by the `scheme` method on `Rack::Request`.
    Applications that expect the scheme to be limited to "http" or "https" and do
    not escape the return value could be vulnerable to an XSS attack.

    Vulnerable code looks something like this:

    ```
    <%= request.scheme.html_safe %>
    ```

    Note that applications using the normal escaping mechanisms provided by Rails
    may not impacted, but applications that bypass the escaping mechanisms, or do
    not use them may be vulnerable.

    All users running an affected release should either upgrade or use one of the
    workarounds immediately.

    Releases
    --------
    The 2.0.6 and 1.6.11 releases are available at the normal locations.

    Workarounds
    -----------
    The following monkey patch can be applied to work around this issue:

    ```
    require "rack"
    require "rack/request"

    class Rack::Request
    SCHEME_WHITELIST = %w(https http).freeze

    def scheme
      if get_header(Rack::HTTPS) == 'on'
        'https'
      elsif get_header(HTTP_X_FORWARDED_SSL) == 'on'
        'https'
      elsif forwarded_scheme
        forwarded_scheme
      else
        get_header(Rack::RACK_URL_SCHEME)
      end
    end

    def forwarded_scheme
      scheme_headers = [
        get_header(HTTP_X_FORWARDED_SCHEME),
        get_header(HTTP_X_FORWARDED_PROTO).to_s.split(',')[0]
      ]

      scheme_headers.each do |header|
        return header if SCHEME_WHITELIST.include?(header)
      end

      nil
    end
    end
    ```
  affected_package: rack
  patched_versions:
  - ">= 2.0.6"
  - "~> 1.6.11"
  package_manager: rubygems
  cve:
  - CVE-2018-16471
  disclosed_date: 2018-11-05
  created_date: 2018-11-05
  last_modified_date: 2018-11-05
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://groups.google.com/forum/#!topic/ruby-security-ann/NAalCee8n6o
- id: rubyadvisory:rubygems:rack:CVE-2019-16782
  title: Possible information leak / session hijack vulnerability
  description: |-
    There's a possible information leak / session hijack vulnerability in Rack.

    Attackers may be able to find and hijack sessions by using timing attacks
    targeting the session id. Session ids are usually stored and indexed in a
    database that uses some kind of scheme for speeding up lookups of that
    session id. By carefully measuring the amount of time it takes to look up
    a session, an attacker may be able to find a valid session id and hijack
    the session.

    The session id itself may be generated randomly, but the way the session is
    indexed by the backing store does not use a secure comparison.

    Impact:

    The session id stored in a cookie is the same id that is used when querying
    the backing session storage engine.  Most storage mechanisms (for example a
    database) use some sort of indexing in order to speed up the lookup of that
    id.  By carefully timing requests and session lookup failures, an attacker
    may be able to perform a timing attack to determine an existing session id
    and hijack that session.
  affected_package: rack
  patched_versions:
  - ">= 2.0.8"
  - "~> 1.6.12"
  package_manager: rubygems
  cve:
  - CVE-2019-16782
  disclosed_date: 2019-12-18
  created_date: 2019-12-18
  last_modified_date: 2019-12-18
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://github.com/rack/rack/security/advisories/GHSA-hrqr-hxpp-chr3
- id: rubyadvisory:rubygems:rack:CVE-2020-8161
  title: Directory traversal in Rack::Directory app bundled with Rack
  description: |
    There was a possible directory traversal vulnerability in the Rack::Directory app
    that is bundled with Rack.

    Versions Affected:  rack < 2.2.0
    Not affected:       Applications that do not use Rack::Directory.
    Fixed Versions:     2.1.3, >= 2.2.0

    Impact
    ------

    If certain directories exist in a director that is managed by
    `Rack::Directory`, an attacker could, using this vulnerability, read the
    contents of files on the server that were outside of the root specified in the
    Rack::Directory initializer.

    Workarounds
    -----------

    Until such time as the patch is applied or their Rack version is upgraded,
    we recommend that developers do not use Rack::Directory in their
    applications.
  affected_package: rack
  patched_versions:
  - ">= 2.2.0"
  - "~> 2.1.3"
  package_manager: rubygems
  cve:
  - CVE-2020-8161
  disclosed_date: 2020-05-12
  created_date: 2020-05-12
  last_modified_date: 2020-05-12
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://groups.google.com/forum/#!topic/ruby-security-ann/T4ZIsfRf2eA
- id: rubyadvisory:rubygems:rack:CVE-2020-8184
  title: Percent-encoded cookies can be used to overwrite existing prefixed cookie
    names
  description: |
    It is possible to forge a secure or host-only cookie prefix in Rack using
    an arbitrary cookie write by using URL encoding (percent-encoding) on the
    name of the cookie. This could result in an application that is dependent on
    this prefix to determine if a cookie is safe to process being manipulated
    into processing an insecure or cross-origin request.
    This vulnerability has been assigned the CVE identifier CVE-2020-8184.

    Versions Affected:  rack < 2.2.3, rack < 2.1.4
    Not affected:       Applications which do not rely on __Host- and __Secure- prefixes to determine if a cookie is safe to process
    Fixed Versions:     rack >= 2.2.3, rack >= 2.1.4

    Impact
    ------

    An attacker may be able to trick a vulnerable application into processing an
    insecure (non-SSL) or cross-origin request if they can gain the ability to write
    arbitrary cookies that are sent to the application.

    Workarounds
    -----------

    If your application is impacted but you cannot upgrade to the released versions or apply
    the provided patch, this issue can be temporarily addressed by adding the following workaround:

    ```
    module Rack
      module Utils
        module_function def parse_cookies_header(header)
          return {} unless header
          header.split(/[;] */n).each_with_object({}) do |cookie, cookies|
            next if cookie.empty?
            key, value = cookie.split('=', 2)
            cookies[key] = (unescape(value) rescue value) unless cookies.key?(key)
          end
        end
      end
    end
    ```
  affected_package: rack
  patched_versions:
  - ">= 2.2.3"
  - "~> 2.1.4"
  package_manager: rubygems
  cve:
  - CVE-2020-8184
  disclosed_date: 2020-06-15
  created_date: 2020-06-15
  last_modified_date: 2020-06-15
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://groups.google.com/g/rubyonrails-security/c/OWtmozPH9Ak
- id: rubyadvisory:rubygems:rack:OSVDB-78121
  title: 'Rack Hash Collision Form Parameter Parsing Remote DoS

'
  description: |
    Rack contains a flaw that may allow a remote denial of service. The issue is
    triggered when an attacker sends multiple crafted parameters which trigger
    hash collisions, and will result in loss of availability for the program via
    CPU consumption.
  affected_package: rack
  patched_versions:
  - ">= 1.4.0"
  - "~> 1.1.3"
  - "~> 1.2.5"
  - "~> 1.3.6"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2011-5036
  osvdb: 78121
  cvss_v2_score: 5.0
  disclosed_date: 2011-12-28
  created_date: 2011-12-28
  last_modified_date: 2011-12-28
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: http://osvdb.org/show/osvdb/78121
- id: rubyadvisory:rubygems:rack:OSVDB-89317
  title: 'Rack Regular Expressions Engine Content-Disposition Header Parsing Infinite
    Loop Remote DoS

'
  description: |
    Rack contains a flaw in the Regular Expressions Engine that may allow a remote
    denial of service. The issue is triggered when parsing context-disposition
    headers. With a specially crafted header, a remote attacker can cause an
    infinite loop, which will result in a loss of availability for the webserver.
  affected_package: rack
  patched_versions:
  - ">= 1.4.2"
  - "~> 1.1.4"
  - "~> 1.2.6"
  - "~> 1.3.7"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2012-6109
  osvdb: 89317
  cvss_v2_score: 4.3
  disclosed_date: 2012-05-04
  created_date: 2012-05-04
  last_modified_date: 2012-05-04
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: http://osvdb.org/show/osvdb/89317
- id: rubyadvisory:rubygems:rack:OSVDB-89320
  title: 'Rack Long String Parsing Memory Consumption Remote DoS

'
  description: |
    Rack contains a flaw that may allow a remote denial of service. The issue is
    triggered when parsing an overly long string. With a specially crafted string,
    a remote attacker can cause a consumption of memory. This will result in a
    loss of availability for the webserver.
  affected_package: rack
  patched_versions:
  - ">= 1.4.3"
  - "~> 1.3.8"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2013-0183
  osvdb: 89320
  cvss_v2_score: 5.0
  disclosed_date: 2013-01-07
  created_date: 2013-01-07
  last_modified_date: 2013-01-07
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: http://osvdb.org/show/osvdb/89320
- id: rubyadvisory:rubygems:rack:OSVDB-89327
  title: 'Rack Rack::Auth::AbstractRequest Class Unspecified Remote DoS

'
  description: |
    Rack contains a flaw in the Rack::Auth::AbstractRequest class that may allow
    a remote denial of service. The issue is triggered when an unspecified error
    occurs, which will result in a loss of availability for the webserver.
  affected_package: rack
  patched_versions:
  - ">= 1.4.4"
  - "~> 1.1.5"
  - "~> 1.2.7"
  - "~> 1.3.9"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2013-0184
  osvdb: 89327
  cvss_v2_score: 4.3
  disclosed_date: 2013-01-13
  created_date: 2013-01-13
  last_modified_date: 2013-01-13
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: http://osvdb.org/show/osvdb/89327
- id: rubyadvisory:rubygems:rack:OSVDB-89938
  title: 'Rack Rack::File Function Symlink Traversal Arbitrary File Disclosure

'
  description: |
    Rack contains a flaw as the Rack::File function creates temporary files
    insecurely. It is possible for a local attacker to use a symlink attack to
    traverse to an arbitrary file and disclose its contents
  affected_package: rack
  patched_versions:
  - ">= 1.5.2"
  - "~> 1.4.5"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2013-0262
  osvdb: 89938
  cvss_v2_score: 4.3
  disclosed_date: 2013-02-07
  created_date: 2013-02-07
  last_modified_date: 2013-02-07
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: http://osvdb.org/show/osvdb/89938
- id: rubyadvisory:rubygems:rack:OSVDB-89939
  title: 'Rack Rack::Session::Cookie Function Timing Attack Remote Code Execution

'
  description: |
    Rack contains a flaw that is due to an error in the Rack::Session::Cookie
    function. Users of the Marshal session cookie encoding (the default), are
    subject to a timing attack that may lead an attacker to execute arbitrary
    code. This attack is more practical against 'cloud' users as intra-cloud
    latencies are sufficiently low to make the attack viable.
  affected_package: rack
  patched_versions:
  - ">= 1.5.2"
  - "~> 1.1.6"
  - "~> 1.2.8"
  - "~> 1.3.10"
  - "~> 1.4.5"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2013-0263
  osvdb: 89939
  cvss_v2_score: 5.1
  disclosed_date: 2013-02-07
  created_date: 2013-02-07
  last_modified_date: 2013-02-07
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: http://osvdb.org/show/osvdb/89939
- id: snykio:rubygems:rack:20021
  title: Denial of Service (DoS)
  description: |+
    [`rack`][1] is a minimal, modular and adaptable interface for developing
    web applications in Ruby.

    Affected versions of this Gem are vulnerable to Denial of Service (DoS)
    attacks. The issue is triggered when an attacker sends multiple crafted
    parameters which trigger hash collisions, and will result in loss of
    availability for the program via CPU consumption.



    [1]: https://rubygems.org/gems/rack
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: rack
  vulnerable_versions:
  - "< 1.1.3"
  - "< 1.2.5  >= 1.2"
  - "< 1.3.6  >= 1.3"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2011-5036
  cwe:
  - CWE-400
  disclosed_date: 2011-12-27
  created_date: 2016-10-18
  last_modified_date: 2016-10-18
  credit:
  - Unknown
  references:
  - http://rubysec.com/advisories/rack-OSVDB-78121
  - https://nvd.nist.gov/vuln/detail/CVE-2011-5036
  source_url: https://snyk.io/vuln/SNYK-RUBY-RACK-20021
- id: snykio:rubygems:rack:20028
  title: Regular Expression Denial of Service (ReDoS)
  description: "[`rack`][1] is a minimal, modular and adaptable interface for developing\nweb
    applications in Ruby. Affected versions of this Gem are vulnerable\nto Denial
    of Service (DoS) attacks.\n\nRack contains a flaw in the Regular Expressions Engine
    that may allow a\nremote denial of service. The issue is triggered when parsing\n`context-disposition`
    headers. With a specially crafted header, a remote\nattacker can cause an infinite
    loop, which will result in a loss of\navailability for the webserver.\n\n\n\n[1]:
    https://rubygems.org/gems/rack\n\\nDenial of Service (DoS) describes a family
    of attacks, all aimed at\nmaking a system inaccessible to its original and legitimate
    users. There\nare many types of DoS attacks, ranging from trying to clog the network\npipes
    to the system by generating a large volume of traffic from many\nmachines (a Distributed
    Denial of Service - DDoS - attack) to sending\ncrafted requests that cause a system
    to crash or take a disproportional\namount of time to process.\n\nThe Regular
    expression Denial of Service (ReDoS) is a type of Denial of\nService attack. Regular
    expressions are incredibly powerful, but they\naren\\'t very intuitive and can
    ultimately end up making it easy for\nattackers to take your site down.\n\nLet’s
    take the following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n{:
    .language-js}\n\nThis regular expression accomplishes the following:\n\n* `A`
    The string must start with the letter \\'A\\'\n* `(B|C+)+` The string must then
    follow the letter A with either the\n  letter \\'B\\' or some number of occurrences
    of the letter \\'C\\' (the\n  `+` matches one or more times). The `+` at the end
    of this section\n  states that we can look for one or more matches of this section.\n*
    `D` Finally, we ensure this section of the string ends with a \\'D\\'\n\nThe expression
    would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt
    most cases, it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n
    \   $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s
    user 0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n{: .language-bash}\n\nThe entire
    process of testing it against a 30 characters long string\ntakes around ~52ms.
    But when given an invalid string, it takes nearly\ntwo seconds to complete the
    test, over ten times as long as it took to\ntest a valid string. The dramatic
    difference is due to the way regular\nexpressions get evaluated.\n\nMost Regex
    engines will work very similarly (with minor differences).\nThe engine will match
    the first possible way to accept the current\ncharacter and proceed to the next
    one. If it then fails to match the\nnext one, it will backtrack and see if there
    was another way to digest\nthe previous character. If it goes too far down the
    rabbit hole only to\nfind out the string doesn’t match in the end, and if many
    characters\nhave multiple valid regex paths, the number of backtracking steps
    can\nbecome very large, resulting in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s
    look at how our expression runs into this problem, using a\nshorter string: \\\"ACCCX\\\".
    While it seems fairly straightforward, there\nare still four different ways that
    the engine could match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.
    \ C+C+C.\n\nThe engine has to try each of those combinations to see if any of
    them\npotentially match against the expression. When you combine that with the\nother
    steps the engine must take, we can use [RegEx 101 debugger][1] to\nsee the engine
    has to take a total of 38 steps before it can determine\nthe string doesn\\'t
    match.\n\nFrom there, the number of steps the engine must use to validate a string\njust
    continues to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n|
    ACCCX | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX
    | 14 | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to
    take over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n"
  affected_package: rack
  vulnerable_versions:
  - "< 1.1.4"
  - "< 1.2.6  >= 1.2"
  - "< 1.3.7  >= 1.3"
  - "< 1.4.2  >= 1.4"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2012-6109
  cwe:
  - CWE-400
  disclosed_date: 2012-05-03
  created_date: 2012-05-03
  last_modified_date: 2012-05-03
  credit:
  - Unknown
  references:
  - http://rubysec.com/advisories/CVE-2012-6109
  source_url: https://snyk.io/vuln/SNYK-RUBY-RACK-20028
- id: snykio:rubygems:rack:20045
  title: Denial of Service (DoS)
  description: |+
    [`rack`][1] is a minimal, modular and adaptable interface for developing
    web applications in Ruby. Affected versions of this Gem are vulnerable
    to Denial of Service (DoS) attacks. The vulnerability is triggered when
    parsing an overly long string. With a specially crafted string, a remote
    attacker can cause a consumption of memory, this will result in a loss
    of availability for the webserver.



    [1]: https://rubygems.org/gems/rack
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: rack
  vulnerable_versions:
  - "< 1.3.8"
  - "< 1.4.3  >= 1.4"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2013-0183
  cwe:
  - CWE-400
  disclosed_date: 2013-01-06
  created_date: 2013-01-06
  last_modified_date: 2013-01-06
  credit:
  - Unknown
  references:
  - http://rubysec.com/advisories/rack-OSVDB-89320
  - https://nvd.nist.gov/vuln/detail/CVE-2013-0183
  source_url: https://snyk.io/vuln/SNYK-RUBY-RACK-20045
- id: snykio:rubygems:rack:20052
  title: Denial of Service (DoS)
  description: |+
    [`rack`][1] is a minimal, modular and adaptable interface for developing
    web applications in Ruby.

    Affected versions of this Gem are vulnerable to Denial of Service (DoS)
    attacks. It contains a flaw in the `Rack::Auth::AbstractRequest` class
    that may allow a remote denial of service. The issue is triggered when
    an unspecified error occurs, which will result in a loss of availability
    for the webserver.



    [1]: https://rubygems.org/gems/rack
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: rack
  vulnerable_versions:
  - "< 1.1.5"
  - "< 1.2.7  >= 1.2"
  - "< 1.3.9  >= 1.3"
  - "< 1.4.4  >= 1.4"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2013-0184
  cwe:
  - CWE-400
  disclosed_date: 2013-01-12
  created_date: 2013-01-12
  last_modified_date: 2013-01-12
  credit:
  - Unknown
  references:
  - http://rubysec.com/advisories/rack-OSVDB-89327
  - https://nvd.nist.gov/vuln/detail/CVE-2013-0184
  source_url: https://snyk.io/vuln/SNYK-RUBY-RACK-20052
- id: snykio:rubygems:rack:20058
  title: Arbitrary File Disclosure
  description: |
    [`rack`][1] is a minimal, modular and adaptable interface for developing
    web applications in Ruby.

    Affected versions of this Gem are vulnerable to Arbitrary File
    Disclosure. Rack contains a flaw as the `Rack::File` function creates
    temporary files insecurely. It is possible for a local attacker to use a
    symlink attack to traverse to an arbitrary file and disclose its
    contents



    [1]: https://rubygems.org/gems/rack
  affected_package: rack
  vulnerable_versions:
  - "< 1.4.5"
  - "< 1.5.2  >= 1.5"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2013-0262
  cwe:
  - CWE-200
  disclosed_date: 2013-02-06
  created_date: 2013-02-06
  last_modified_date: 2013-02-06
  credit:
  - Unknown
  references:
  - https://bugzilla.redhat.com/show_bug.cgi?id=909071
  - https://gist.github.com/rentzsch/4736940
  - https://github.com/rack/rack/commit/6f237e4c9fab649d3750482514f0fde76c56ab30
  - https://rubysec.com/advisories/rack-OSVDB-89938
  source_url: https://snyk.io/vuln/SNYK-RUBY-RACK-20058
- id: snykio:rubygems:rack:20059
  title: Timing Attack
  description: |
    [`rack`][1] is a minimal, modular and adaptable interface for developing
    web applications in Ruby. Affected versions of this Gem are vulnerable
    to Remote Code Execution due to an error in the `Rack::Session::Cookie`
    function. It allows a remote attackers to guess the session cookie, gain
    privileges, and execute arbitrary code via a timing attack involving an
    HMAC comparison function that does not run in constant time.



    [1]: https://rubygems.org/gems/rack
  affected_package: rack
  vulnerable_versions:
  - "< 1.1.6"
  - "< 1.2.8  >= 1.2"
  - "< 1.3.10  >= 1.3"
  - "< 1.4.5  >= 1.4"
  - "< 1.5.2  >= 1.5"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2013-0263
  cwe:
  - CWE-208
  disclosed_date: 2013-02-06
  created_date: 2013-02-06
  last_modified_date: 2013-02-06
  credit:
  - Unknown
  references:
  - https://bugzilla.redhat.com/show_bug.cgi?id=909071
  - https://github.com/rack/rack/commit/9a81b961457805f6d1a5c275d053068440421e11
  source_url: https://snyk.io/vuln/SNYK-RUBY-RACK-20059
- id: snykio:rubygems:rack:20230
  title: Denial of Service (DoS)
  description: |+
    [`rack`][1] is a minimal, modular and adaptable interface for developing
    web applications in Ruby.

    Affected versions of this package are vulnerable to Denial of Service
    attacks by a carefully crafted request leading to a `SystemStackError`
    error.



    [1]: https://rubygems.org/gems/rack
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: rack
  vulnerable_versions:
  - "<1.4.6"
  - ">=1.5.0  <1.5.4"
  - ">=1.6.0  <1.6.2"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2015-3225
  cwe:
  - CWE-400
  disclosed_date: 2015-06-15
  created_date: 2016-10-18
  last_modified_date: 2016-10-18
  credit:
  - Tomek Rabczak
  references:
  - https://nvd.nist.gov/vuln/detail/CVE-2015-3225
  - https://rubysec.com/advisories/rack-CVE-2015-3225
  source_url: https://snyk.io/vuln/SNYK-RUBY-RACK-20230
- id: snykio:rubygems:rack:20397
  title: Denial of Service (DoS)
  description: |+
    [`rack`][1] provides a minimal, modular and adaptable interface for
    developing web applications in Ruby.

    Affected versions of the package are vulnerable to Denial of Service
    (DoS). If an attacker sent a malformed or malicious HTTP request,
    containing `\n` instead of `\r\n` , it could cause an infinite loop.



    [1]: https://rubygems.org/gems/rack
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: rack
  vulnerable_versions:
  - "<1.3.0.beta"
  severity: medium
  package_manager: rubygems
  cwe:
  - CWE-835
  disclosed_date: 2011-04-29
  created_date: 2017-08-02
  last_modified_date: 2017-08-02
  credit:
  - mcommons
  references:
  - https://github.com/rack/rack/commit/6a0e0ee8fcd982bccf30077ec94cb55018bbed91
  - https://github.com/rack/rack/pull/147
  source_url: https://snyk.io/vuln/SNYK-RUBY-RACK-20397
- id: snykio:rubygems:rack:20398
  title: Regular Expression Denial of Service (ReDoS)
  description: "[`rack`][1] provides a minimal, modular and adaptable interface for\ndeveloping
    web applications in Ruby.\n\nAffected versions of the package are vulnerable to
    Regular Expression\nDenial of Service (ReDoS).\n\n\n\n[1]: https://rubygems.org/gems/rack\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n{: .language-js}\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n{: .language-bash}\n\nThe entire
    process of testing it against a 30 characters long string\ntakes around ~52ms.
    But when given an invalid string, it takes nearly\ntwo seconds to complete the
    test, over ten times as long as it took to\ntest a valid string. The dramatic
    difference is due to the way regular\nexpressions get evaluated.\n\nMost Regex
    engines will work very similarly (with minor differences).\nThe engine will match
    the first possible way to accept the current\ncharacter and proceed to the next
    one. If it then fails to match the\nnext one, it will backtrack and see if there
    was another way to digest\nthe previous character. If it goes too far down the
    rabbit hole only to\nfind out the string doesn’t match in the end, and if many
    characters\nhave multiple valid regex paths, the number of backtracking steps
    can\nbecome very large, resulting in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s
    look at how our expression runs into this problem, using a\nshorter string: \\\"ACCCX\\\".
    While it seems fairly straightforward, there\nare still four different ways that
    the engine could match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.
    \ C+C+C.\n\nThe engine has to try each of those combinations to see if any of
    them\npotentially match against the expression. When you combine that with the\nother
    steps the engine must take, we can use [RegEx 101 debugger][1] to\nsee the engine
    has to take a total of 38 steps before it can determine\nthe string doesn\\'t
    match.\n\nFrom there, the number of steps the engine must use to validate a string\njust
    continues to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n|
    ACCCX | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX
    | 14 | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to
    take over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n"
  affected_package: rack
  vulnerable_versions:
  - ">=1.3.0.beta <1.3.4"
  severity: medium
  package_manager: rubygems
  cwe:
  - CWE-400
  disclosed_date: 2011-09-28
  created_date: 2017-08-02
  last_modified_date: 2017-08-02
  credit:
  - Tim Lucas
  references:
  - https://github.com/rack/rack/commit/89c961bf71e93021c42524727409d97e2a4bfccd
  - https://github.com/rack/rack/pull/242
  source_url: https://snyk.io/vuln/SNYK-RUBY-RACK-20398
- id: snykio:rubygems:rack:20399
  title: IP Spoofing
  description: |
    [`rack`][1] provides a minimal, modular and adaptable interface for
    developing web applications in Ruby.

    Affected versions of the package are vulnerable to IP Spoofing by
    specifying the same IP address in `X-Forwarded-For` and the `Client-IP`,
    thus easily spoofing the value of requesting IP.



    [1]: https://rubygems.org/gems/rack
  affected_package: rack
  vulnerable_versions:
  - "<1.6.0.beta  >=1.4.0"
  severity: medium
  package_manager: rubygems
  cwe:
  - CWE-290
  disclosed_date: 2014-06-23
  created_date: 2017-08-02
  last_modified_date: 2017-08-02
  credit:
  - Steve Hodgkiss
  references:
  - https://github.com/rack/rack/commit/7a8efc2a270f363b85ce610ad897184d80b7a1d6
  - https://github.com/rack/rack/pull/705
  source_url: https://snyk.io/vuln/SNYK-RUBY-RACK-20399
- id: snykio:rubygems:rack:20400
  title: Denial of Service (DoS)
  description: |+
    [`rack`][1] provides a minimal, modular and adaptable interface for
    developing web applications in Ruby.

    Affected versions of the package are vulnerable to Denial of Service
    (DoS) attacks. It copied the `okjson.rb` file from the `sentry-ruby`
    gem, which contains the `numtok` function. When supplying a large
    exponent value in a scientific number to that function, it causes a
    Denial of Service (DoS). With a specially crafted request, an attacker
    can cause the software to excessively consume resources, and deny
    service to any other client.

    This is related to [SNYK-RUBY-SENTRYRAVEN-20202][2]



    [1]: https://rubygems.org/gems/rack
    [2]: https://snyk.io/vuln/SNYK-RUBY-SENTRYRAVEN-20202
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: rack
  vulnerable_versions:
  - "<1.5.3  >=1.5.0"
  - "<1.6.1  >=1.6.0.beta"
  severity: medium
  package_manager: rubygems
  cwe:
  - CWE-400
  disclosed_date: 2015-05-05
  created_date: 2017-08-02
  last_modified_date: 2017-08-02
  credit:
  - Unknown
  references:
  - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-9490
  - https://github.com/rack/rack/blob/master/HISTORY.md#may-6th-2015-thirty-seventh-public-release-161
  - https://github.com/rack/rack/commit/677de9dc132d5f6aaf991b462652a1fa944ffa20
  source_url: https://snyk.io/vuln/SNYK-RUBY-RACK-20400
- id: snykio:rubygems:rack:538324
  title: Information Exposure
  description: |
    [rack][1] is a minimal, modular and adaptable interface for developing
    web applications in Ruby. By wrapping HTTP requests and responses in the
    simplest way possible, it unifies and distills the API for web servers,
    web frameworks, and software in between (the so-called middleware) into
    a single method call.

    Affected versions of this package are vulnerable to Information
    Exposure. Attackers may be able to find and hijack sessions by using
    timing attacks targeting the session id. Session ids are usually stored
    and indexed in a database that uses some kind of scheme for speeding up
    lookups of that session id. By carefully measuring the amount of time it
    takes to look up a session, an attacker may be able to find a valid
    session id and hijack the session.



    [1]: https://rack.github.io/
  affected_package: rack
  vulnerable_versions:
  - "<1.6.12"
  - ">=2.0.0.alpha  <2.0.8"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2019-16782
  cwe:
  - CWE-200
  disclosed_date: 2019-12-18
  created_date: 2019-12-19
  last_modified_date: 2019-12-19
  credit:
  - Will Leinweber
  references:
  - https://github.com/rack/rack/commit/7fecaee81f59926b6e1913511c90650e76673b38
  - https://github.com/rack/rack/security/advisories/GHSA-hrqr-hxpp-chr3
  source_url: https://snyk.io/vuln/SNYK-RUBY-RACK-538324
- id: snykio:rubygems:rack:569066
  title: Directory Traversal
  description: |
    [rack][1] is a minimal, modular and adaptable interface for developing
    web applications in Ruby. By wrapping HTTP requests and responses in the
    simplest way possible, it unifies and distills the API for web servers,
    web frameworks, and software in between (the so-called middleware) into
    a single method call.

    Affected versions of this package are vulnerable to Directory Traversal.
    If certain directories exist in a directory that is managed by
    `Rack::Directory`, an attacker could, using this vulnerability, read the
    contents of files on the server that were outside of the root specified
    in the `Rack::Directory` initializer.



    [1]: https://rack.github.io/
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
  affected_package: rack
  vulnerable_versions:
  - "<2.1.3"
  severity: high
  package_manager: rubygems
  cve:
  - CVE-2020-8161
  cwe:
  - CWE-22
  disclosed_date: 2020-05-13
  created_date: 2020-05-13
  last_modified_date: 2020-05-13
  credit:
  - Unknown
  references:
  - https://groups.google.com/forum/#!topic/ruby-security-ann/T4ZIsfRf2eA
  source_url: https://snyk.io/vuln/SNYK-RUBY-RACK-569066
- id: snykio:rubygems:rack:72566
  title: Denial of Service (DoS)
  description: |
    [rack][1] provides a minimal, modular and adaptable interface for
    developing web applications in Ruby.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS) attacks. Carefully crafted requests can cause the multipart parser
    to enter a pathological state, causing the parser to use CPU resources
    disproportionate to the request size.



    [1]: https://rubygems.org/gems/rack
  affected_package: rack
  vulnerable_versions:
  - ">=2.0.4  <2.0.6"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2018-16471
  cwe:
  - CWE-400
  disclosed_date: 2018-08-22
  created_date: 2018-11-06
  last_modified_date: 2018-11-06
  credit:
  - Aaron Patterson
  references:
  - https://bugzilla.redhat.com/show_bug.cgi?id=1646814
  - https://github.com/rack/rack/commit/37c1160b2360074d20858792f23a7eb3afeabebd
  - https://groups.google.com/forum/%23%21msg/rubyonrails-security/U_x-YkfuVTg/xhvYAmp6AAAJ
  source_url: https://snyk.io/vuln/SNYK-RUBY-RACK-72566
- id: snykio:rubygems:rack:72567
  title: Cross-site Scripting (XSS)
  description: |+
    [rack][1] is a minimal, modular and adaptable interface for developing
    web applications in Ruby. By wrapping HTTP requests and responses in the
    simplest way possible, it unifies and distills the API for web servers,
    web frameworks, and software in between (the so-called middleware) into
    a single method call.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) via the `scheme` method on `Rack::Request`.



    [1]: https://rack.github.io/
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: rack
  vulnerable_versions:
  - "<1.6.11"
  - ">=2.0.0  <2.0.6"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2018-16470
  cwe:
  - CWE-79
  disclosed_date: 2018-08-22
  created_date: 2018-11-06
  last_modified_date: 2018-11-06
  credit:
  - Aaron Patterson
  references:
  - https://bugzilla.redhat.com/show_bug.cgi?id=1646818
  - https://github.com/rack/rack/commit/313dd6a05a5924ed6c82072299c53fed09e39ae7
  - https://groups.google.com/forum/#!msg/rubyonrails-security/GKsAFT924Ag/DYtk-Xl6AAAJ
  source_url: https://snyk.io/vuln/SNYK-RUBY-RACK-72567
