---
- id: rubyadvisory:rubygems:fat_free_crm:CVE-2013-7222
  title: Fat Free CRM Gem for Ruby lack of support for cycling the Rails session secret
  description: |
    Fat Free CRM contains a flaw that is due to the application defining a static
    security session token in config/initialiers/secret_token.rb. If a remote
    attacker has explicit knowledge of this token, they can potentially execute
    arbitrary code.
  affected_package: fat_free_crm
  patched_versions:
  - ">= 0.13.0"
  - "~> 0.12.1"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2013-7222
  osvdb: 101445
  cvss_v2_score: 5.0
  disclosed_date: 2013-12-24
  created_date: 2013-12-24
  last_modified_date: 2013-12-24
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://nvd.nist.gov/vuln/detail/CVE-2013-7222
- id: rubyadvisory:rubygems:fat_free_crm:CVE-2013-7223
  title: Fat Free CRM Gem for Ruby contains multiple cross-site request forgery (CSRF)
    vulnerabilities
  description: |
    Fat Free CRM contains a flaw as the application is missing the protect_from_forgery
    statement, therefore HTTP requests to app/controllers/application_controller.rb
    do not require multiple steps, explicit confirmation, or a unique token when
    performing certain sensitive actions. By tricking a user into following a specially
    crafted link, a context-dependent attacker can perform a Cross-Site Request Forgery
    (CSRF / XSRF) attack causing the victim to perform unspecified actions.
  affected_package: fat_free_crm
  patched_versions:
  - ">= 0.13.0"
  - "~> 0.12.1"
  severity: high
  package_manager: rubygems
  cve:
  - CVE-2013-7223
  osvdb: 101446
  cvss_v2_score: 6.8
  disclosed_date: 2013-12-24
  created_date: 2013-12-24
  last_modified_date: 2013-12-24
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://nvd.nist.gov/vuln/detail/CVE-2013-7223
- id: rubyadvisory:rubygems:fat_free_crm:CVE-2013-7224
  title: Fat Free CRM Gem for Ruby allows remote attackers to obtain sensitive informations
  description: |
    Fat Free CRM contains a flaw in user controllers that is triggered as JSON
    requests are rendered with a full JSON object. This may allow a remote
    attacker to gain access to potentially sensitive information e.g. other
    users password hashes.
  affected_package: fat_free_crm
  patched_versions:
  - ">= 0.13.0"
  - "~> 0.12.1"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2013-7224
  osvdb: 101447
  cvss_v2_score: 5.0
  disclosed_date: 2013-12-24
  created_date: 2013-12-24
  last_modified_date: 2013-12-24
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://nvd.nist.gov/vuln/detail/CVE-2013-7224
- id: rubyadvisory:rubygems:fat_free_crm:CVE-2013-7225
  title: Fat Free CRM Gem for Ruby allows remote attackers to inject or manipulate
    SQL queries
  description: |
    Fat Free CRM contains a flaw that may allow carrying out an SQL injection
    attack. The issue is due to the app/controllers/home_controller.rb script
    not properly sanitizing user-supplied input to the 'state' parameter or
    input passed via comments and emails. This may allow a remote attacker to
    inject or manipulate SQL queries in the back-end database, allowing for
    the manipulation or disclosure of arbitrary data.
  affected_package: fat_free_crm
  patched_versions:
  - ">= 0.13.0"
  - "~> 0.12.1"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2013-7225
  osvdb: 101448
  cvss_v2_score: 6.5
  disclosed_date: 2013-12-24
  created_date: 2013-12-24
  last_modified_date: 2013-12-24
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://nvd.nist.gov/vuln/detail/CVE-2013-7225
- id: rubyadvisory:rubygems:fat_free_crm:CVE-2013-7249
  title: Fat Free CRM Gem for Ruby allows remote attackers to obtain sensitive informations
  description: |
    Fat Free CRM contains a flaw that is triggered when the attacker sends a
    direct request for XML data. This may allow a remote attacker to gain
    access to potentially sensitive information.
  affected_package: fat_free_crm
  patched_versions:
  - ">= 0.13.0"
  - "~> 0.12.1"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2013-7249
  osvdb: 101700
  cvss_v2_score: 5.0
  disclosed_date: 2013-12-24
  created_date: 2013-12-24
  last_modified_date: 2013-12-24
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://nvd.nist.gov/vuln/detail/CVE-2013-7249
- id: rubyadvisory:rubygems:fat_free_crm:CVE-2014-5441
  title: Fat Free CRM Gem contains a javascript cross-site scripting (XSS) vulnerability
  description: |
    Fat Free CRM Gem contains a javascript cross-site scripting (XSS)
    vulnerability. When a user is created/updated using a specifically
    crafted username, first name or last name, it is possible for
    arbitrary javascript to be executed on all Fat Free CRM pages.
    This code would be executed for all logged in users.
  affected_package: fat_free_crm
  unaffected_versions:
  - "<= 0.11.0"
  patched_versions:
  - ">= 0.13.3"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2014-5441
  osvdb: 110420
  cvss_v2_score: 4.3
  disclosed_date: 2014-08-22
  created_date: 2014-08-22
  last_modified_date: 2014-08-22
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://nvd.nist.gov/vuln/detail/CVE-2014-5441
- id: rubyadvisory:rubygems:fat_free_crm:CVE-2015-1585
  title: Fat Free CRM Gem being vulnerable to CSRF-type attacks
  description: |
    Fat Free CRM contains a flaw as HTTP requests to /admin/users do not require
    multiple steps, explicit confirmation, or a unique token when performing
    certain sensitive actions. By tricking a user into following a specially
    crafted link, a context-dependent attacker can perform a Cross-Site Request
    Forgery (CSRF / XSRF) attack causing the victim to creating administrative
    users.
  affected_package: fat_free_crm
  patched_versions:
  - ">= 0.13.6"
  severity: high
  package_manager: rubygems
  cve:
  - CVE-2015-1585
  osvdb: 118465
  cvss_v2_score: 6.8
  disclosed_date: 2015-02-16
  created_date: 2015-02-16
  last_modified_date: 2015-02-16
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://nvd.nist.gov/vuln/detail/CVE-2015-1585
- id: rubyadvisory:rubygems:fat_free_crm:CVE-2018-1000842
  title: fat_free_crm gem XSS vulnerability via query parameter
  description: |
    FatFreeCRM version <=0.14.1, >=0.15.0 <=0.15.1, >=0.16.0 <=0.16.3, >=0.17.0
    <=0.17.2, ==0.18.0 contains a Cross Site Scripting (XSS) vulnerability in commit
    6d60bc8ed010c4eda05d6645c64849f415f68d65 that can result in Javascript execution.
    This attack appear to be exploitable via Content with Javascript payload will be
    executed on end user browsers when they visit the page. This vulnerability appears
    to have been fixed in 0.18.1, 0.17.3, 0.16.4, 0.15.2, 0.14.2.
  affected_package: fat_free_crm
  patched_versions:
  - ">= 0.18.1"
  - "~> 0.14.2"
  - "~> 0.15.2"
  - "~> 0.16.4"
  - "~> 0.17.3"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2018-1000842
  cvss_v2_score: 4.3
  cvss_v3_score: 6.1
  disclosed_date: 2018-10-27
  created_date: 2018-10-27
  last_modified_date: 2018-10-27
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://github.com/fatfreecrm/fat_free_crm/wiki/XSS-Vulnerability-%282018-10-27%29
- id: rubyadvisory:rubygems:fat_free_crm:CVE-2018-20975
  title: fat_free_crm XSS via query parameter of tags_helper method
  description: 'Fat Free CRM before 0.18.1 has XSS in the tags_helper in app/helpers/tags_helper.rb.

'
  affected_package: fat_free_crm
  patched_versions:
  - ">= 0.18.1"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2018-20975
  cvss_v3_score: 6.1
  disclosed_date: 2019-08-21
  created_date: 2019-08-21
  last_modified_date: 2019-08-21
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://github.com/fatfreecrm/fat_free_crm/commit/6d60bc8ed010c4eda05d6645c64849f415f68d65
- id: rubyadvisory:rubygems:fat_free_crm:OSVDB-101445
  title: Fat Free CRM Gem for Ruby lack of support for cycling the Rails session secret
  description: |
    Fat Free CRM contains a flaw that is due to the application defining a static
    security session token in config/initialiers/secret_token.rb. If a remote
    attacker has explicit knowledge of this token, they can potentially execute
    arbitrary code.
  affected_package: fat_free_crm
  patched_versions:
  - ">= 0.13.0"
  - "~> 0.12.1"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2013-7222
  osvdb: 101445
  cvss_v2_score: 5.0
  disclosed_date: 2013-12-24
  created_date: 2013-12-24
  last_modified_date: 2013-12-24
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: http://osvdb.org/show/osvdb/101445
- id: rubyadvisory:rubygems:fat_free_crm:OSVDB-101446
  title: Fat Free CRM Gem for Ruby contains multiple cross-site request forgery (CSRF)
    vulnerabilities
  description: |
    Fat Free CRM contains a flaw as the application is missing the protect_from_forgery
    statement, therefore HTTP requests to app/controllers/application_controller.rb
    do not require multiple steps, explicit confirmation, or a unique token when
    performing certain sensitive actions. By tricking a user into following a specially
    crafted link, a context-dependent attacker can perform a Cross-Site Request Forgery
    (CSRF / XSRF) attack causing the victim to perform unspecified actions.
  affected_package: fat_free_crm
  patched_versions:
  - ">= 0.13.0"
  - "~> 0.12.1"
  severity: high
  package_manager: rubygems
  cve:
  - CVE-2013-7223
  osvdb: 101446
  cvss_v2_score: 6.8
  disclosed_date: 2013-12-24
  created_date: 2013-12-24
  last_modified_date: 2013-12-24
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: http://osvdb.org/show/osvdb/101446
- id: rubyadvisory:rubygems:fat_free_crm:OSVDB-101447
  title: Fat Free CRM Gem for Ruby allows remote attackers to obtain sensitive informations
  description: |
    Fat Free CRM contains a flaw in user controllers that is triggered as JSON
    requests are rendered with a full JSON object. This may allow a remote
    attacker to gain access to potentially sensitive information e.g. other
    users password hashes.
  affected_package: fat_free_crm
  patched_versions:
  - ">= 0.13.0"
  - "~> 0.12.1"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2013-7224
  osvdb: 101447
  cvss_v2_score: 5.0
  disclosed_date: 2013-12-24
  created_date: 2013-12-24
  last_modified_date: 2013-12-24
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: http://osvdb.org/show/osvdb/101447
- id: rubyadvisory:rubygems:fat_free_crm:OSVDB-101448
  title: Fat Free CRM Gem for Ruby allows remote attackers to inject or manipulate
    SQL queries
  description: |
    Fat Free CRM contains a flaw that may allow carrying out an SQL injection
    attack. The issue is due to the app/controllers/home_controller.rb script
    not properly sanitizing user-supplied input to the 'state' parameter or
    input passed via comments and emails. This may allow a remote attacker to
    inject or manipulate SQL queries in the back-end database, allowing for
    the manipulation or disclosure of arbitrary data.
  affected_package: fat_free_crm
  patched_versions:
  - ">= 0.13.0"
  - "~> 0.12.1"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2013-7225
  osvdb: 101448
  cvss_v2_score: 6.5
  disclosed_date: 2013-12-24
  created_date: 2013-12-24
  last_modified_date: 2013-12-24
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: http://osvdb.org/show/osvdb/101448
- id: rubyadvisory:rubygems:fat_free_crm:OSVDB-101700
  title: Fat Free CRM Gem for Ruby allows remote attackers to obtain sensitive informations
  description: |
    Fat Free CRM contains a flaw that is triggered when the attacker sends a
    direct request for XML data. This may allow a remote attacker to gain
    access to potentially sensitive information.
  affected_package: fat_free_crm
  patched_versions:
  - ">= 0.13.0"
  - "~> 0.12.1"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2013-7249
  osvdb: 101700
  cvss_v2_score: 5.0
  disclosed_date: 2013-12-24
  created_date: 2013-12-24
  last_modified_date: 2013-12-24
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: http://osvdb.org/show/osvdb/101700
- id: rubyadvisory:rubygems:fat_free_crm:OSVDB-110420
  title: Fat Free CRM Gem contains a javascript cross-site scripting (XSS) vulnerability
  description: |
    Fat Free CRM Gem contains a javascript cross-site scripting (XSS)
    vulnerability. When a user is created/updated using a specifically
    crafted username, first name or last name, it is possible for
    arbitrary javascript to be executed on all Fat Free CRM pages.
    This code would be executed for all logged in users.
  affected_package: fat_free_crm
  unaffected_versions:
  - "<= 0.11.0"
  patched_versions:
  - ">= 0.13.3"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2014-5441
  osvdb: 110420
  cvss_v2_score: 4.3
  disclosed_date: 2014-08-22
  created_date: 2014-08-22
  last_modified_date: 2014-08-22
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: http://osvdb.org/show/osvdb/110420
- id: rubyadvisory:rubygems:fat_free_crm:OSVDB-118465
  title: Fat Free CRM Gem being vulnerable to CSRF-type attacks
  description: |
    Fat Free CRM contains a flaw as HTTP requests to /admin/users do not require
    multiple steps, explicit confirmation, or a unique token when performing
    certain sensitive actions. By tricking a user into following a specially
    crafted link, a context-dependent attacker can perform a Cross-Site Request
    Forgery (CSRF / XSRF) attack causing the victim to creating administrative
    users.
  affected_package: fat_free_crm
  patched_versions:
  - ">= 0.13.6"
  severity: high
  package_manager: rubygems
  cve:
  - CVE-2015-1585
  osvdb: 118465
  cvss_v2_score: 6.8
  disclosed_date: 2015-02-16
  created_date: 2015-02-16
  last_modified_date: 2015-02-16
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: http://osvdb.org/show/osvdb/118465
- id: snykio:rubygems:fat_free_crm:20130
  title: Information Exposure
  description: |+
    [`fat_free_crm`][1] is an open source, Ruby on Rails customer
    relationship management platform. Affected versions of this gem are
    vulnerable to Information Exposure.



    [1]: https://rubygems.org/gems/fat_free_crm
    \n`fat_free_crm` contains a flaw that is triggered when the attacker sends
    a direct request for XML data. This may allow a remote attacker to gain
    access to sensitive information.

  affected_package: fat_free_crm
  vulnerable_versions:
  - "< 0.12.1"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2013-7249
  cwe:
  - CWE-200
  disclosed_date: 2013-12-23
  created_date: 2013-12-23
  last_modified_date: 2013-12-23
  credit:
  - Unknown
  references:
  - http://osvdb.org/show/osvdb/101700
  - http://rubysec.com/advisories/OSVDB-101700
  source_url: https://snyk.io/vuln/SNYK-RUBY-FATFREECRM-20130
- id: snykio:rubygems:fat_free_crm:20131
  title: SQL Injection
  description: |+
    [`fat_free_crm`][1] is an open source, Ruby on Rails customer
    relationship management platform. Affected versions of this gem are
    vulnerable to SQL injection attacks.



    [1]: https://rubygems.org/gems/fat_free_crm
    \n`fat_free_crm` does not properly sanitize user-supplied input to the
    `state` parameter or input passed via comments and emails, in the
    `app/controllers/home_controller.rb` script. This may allow a remote
    attacker to inject or manipulate SQL queries in the back-end database,
    allowing for the manipulation or disclosure of arbitrary data.

  affected_package: fat_free_crm
  vulnerable_versions:
  - "< 0.12.1"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2013-7225
  cwe:
  - CWE-89
  disclosed_date: 2013-12-23
  created_date: 2013-12-23
  last_modified_date: 2013-12-23
  credit:
  - Unknown
  references:
  - http://osvdb.org/show/osvdb/101448
  - http://rubysec.com/advisories/OSVDB-101448
  source_url: https://snyk.io/vuln/SNYK-RUBY-FATFREECRM-20131
- id: snykio:rubygems:fat_free_crm:20132
  title: Arbitrary Code Execution
  description: |+
    [`fat_free_crm`][1] is an open source, Ruby on Rails customer
    relationship management platform. Affected versions of this gem are
    vulnerable to Arbitrary Code Execution.



    [1]: https://rubygems.org/gems/fat_free_crm
    \n`fat_free_crm` contains a flaw that is due to the application defining a
    static security session token in `config/initialiers/secret_token.rb`.
    If a remote attacker has explicit knowledge of this token, they can
    potentially execute arbitrary code.

  affected_package: fat_free_crm
  vulnerable_versions:
  - "< 0.12.1"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2013-7222
  cwe:
  - CWE-94
  disclosed_date: 2013-12-23
  created_date: 2013-12-23
  last_modified_date: 2013-12-23
  credit:
  - Unknown
  references:
  - http://rubysec.com/advisories/CVE-2013-7222
  source_url: https://snyk.io/vuln/SNYK-RUBY-FATFREECRM-20132
- id: snykio:rubygems:fat_free_crm:20133
  title: Cross-site Request Forgery (CSRF)
  description: |+
    [`fat_free_crm`][1] is an open source, Ruby on Rails customer
    relationship management platform. Affected versions of this gem are
    vulnerable to Cross-site Request Forgery (CSRF/XSRF).



    [1]: https://rubygems.org/gems/fat_free_crm
    \n`fat_free_crm` is missing the `protect_from_forgery` statement. It does
    not require multiple steps, explicit confirmation, or a unique token
    when performing HTTP requests to
    `app/controllers/application_controller.rb`. By tricking a user into
    following a specially crafted link, a context-dependent attacker can
    perform a Cross-site Request Forgery (CSRF/XSRF) attack causing the
    victim to perform unspecified actions.

  affected_package: fat_free_crm
  vulnerable_versions:
  - "< 0.12.1"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2013-7223
  cwe:
  - CWE-352
  disclosed_date: 2013-12-23
  created_date: 2013-12-23
  last_modified_date: 2013-12-23
  credit:
  - Unknown
  references:
  - http://osvdb.org/show/osvdb/101446
  - http://rubysec.com/advisories/OSVDB-101446
  source_url: https://snyk.io/vuln/SNYK-RUBY-FATFREECRM-20133
- id: snykio:rubygems:fat_free_crm:20134
  title: Information Exposure
  description: |+
    [`fat_free_crm`][1] is an open source, Ruby on Rails customer
    relationship management platform. Affected versions of this gem are
    vulnerable to Information Exposure.



    [1]: https://rubygems.org/gems/fat_free_crm
    \n`fat_free_crm` contains a flaw in user controllers that is triggered as
    JSON requests are rendered with a full JSON object. This may allow a
    remote attacker to gain access to sensitive information e.g. other users
    password hashes.

  affected_package: fat_free_crm
  vulnerable_versions:
  - "< 0.12.1"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2013-7224
  cwe:
  - CWE-200
  disclosed_date: 2013-12-23
  created_date: 2013-12-23
  last_modified_date: 2013-12-23
  credit:
  - Unknown
  references:
  - http://osvdb.org/show/osvdb/101447
  - http://rubysec.com/advisories/OSVDB-101447
  source_url: https://snyk.io/vuln/SNYK-RUBY-FATFREECRM-20134
- id: snykio:rubygems:fat_free_crm:20191
  title: Cross-site Scripting (XSS)
  description: |+
    [`fat_free_crm`][1] is an open source, Ruby on Rails customer
    relationship management platform.

    Affected versions of this gem are vulnerable to Cross-site Scripting
    (XSS) attacks. It does not contains a Cross-site Scripting (XSS)
    vulnerability. When a user is created/updated using a specifically
    crafted username, first name or last name, it is possible for arbitrary
    javascript to be executed on all `fat_free_crm` pages. This code would
    be executed for all logged in users.



    [1]: https://rubygems.org/gems/fat_free_crm
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: fat_free_crm
  vulnerable_versions:
  - ">0.11.0  <0.13.3"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2014-5441
  cwe:
  - CWE-79
  disclosed_date: 2014-08-21
  created_date: 2014-08-21
  last_modified_date: 2014-08-21
  credit:
  - Unknown
  references:
  - http://rubysec.com/advisories/CVE-2014-5441
  source_url: https://snyk.io/vuln/SNYK-RUBY-FATFREECRM-20191
- id: snykio:rubygems:fat_free_crm:20207
  title: Cross-site Request Forgery (CSRF)
  description: |+
    [`fat_free_crm`][1] is an open source, Ruby on Rails customer
    relationship management platform. Affected versions of this gem are
    vulnerable to Cross-site Request Forgery (CSRF/XSRF).



    [1]: https://rubygems.org/gems/fat_free_crm
    \n`fat_free_crm` does not require multiple steps, explicit confirmation,
    or a unique token when performing HTTP requests to `/admin/users`. By
    tricking a user into following a specially crafted link, a
    context-dependent attacker can perform a Cross-site Request Forgery
    (CSRF/XSRF) attack causing the victim to creating administrative users.

  affected_package: fat_free_crm
  vulnerable_versions:
  - "< 0.13.6"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2015-1585
  cwe:
  - CWE-352
  disclosed_date: 2015-02-15
  created_date: 2015-02-15
  last_modified_date: 2015-02-15
  credit:
  - Unknown
  references:
  - http://rubysec.com/advisories/CVE-2015-1585
  source_url: https://snyk.io/vuln/SNYK-RUBY-FATFREECRM-20207
- id: snykio:rubygems:fat_free_crm:451554
  title: Cross-site Scripting (XSS)
  description: |+
    [fat\_free\_crm][1] is a customer relationship management platform.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS).



    [1]: https://rubygems.org/gems/fat_free_crm
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: fat_free_crm
  vulnerable_versions:
  - "<0.14.2"
  - ">=0.15.0  <0.15.2"
  - ">=0.16.0  <0.16.4"
  - ">=0.17.0  <0.17.3"
  - ">=0.18.0  <0.18.1"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2018-1000842
  cwe:
  - CWE-79
  disclosed_date: 2018-12-20
  created_date: 2019-07-06
  last_modified_date: 2019-07-06
  credit:
  - Unknown
  references:
  - https://github.com/fatfreecrm/fat_free_crm/wiki/XSS-Vulnerability-%282018-10-27%29
  source_url: https://snyk.io/vuln/SNYK-RUBY-FATFREECRM-451554
- id: snykio:rubygems:fat_free_crm:459936
  title: Cross-site Scripting (XSS)
  description: |+
    [fat\_free\_crm][1] is a customer relationship management platform.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) in the `tags_helper` in `app/helpers/tags_helper.rb`.



    [1]: https://rubygems.org/gems/fat_free_crm
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: fat_free_crm
  vulnerable_versions:
  - "<0.18.1"
  severity: high
  package_manager: rubygems
  cve:
  - CVE-2018-20975
  cwe:
  - CWE-79
  disclosed_date: 2019-08-20
  created_date: 2019-08-20
  last_modified_date: 2019-08-20
  credit:
  - Unknown
  references:
  - https://github.com/fatfreecrm/fat_free_crm/commit/6d60bc8ed010c4eda05d6645c64849f415f68d65
  - https://github.com/fatfreecrm/fat_free_crm/releases/tag/v0.18.1
  source_url: https://snyk.io/vuln/SNYK-RUBY-FATFREECRM-459936
