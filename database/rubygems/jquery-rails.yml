---
- id: rubyadvisory:rubygems:jquery-rails:CVE-2015-1840
  title: CSRF Vulnerability in jquery-rails
  description: |
    In the scenario where an attacker might be able to control the href attribute
    of an anchor tag or the action attribute of a form tag that will trigger a
    POST action, the attacker can set the href or action to
    " https://attacker.com" (note the leading space) that will be passed to
    JQuery, who will see this as a same origin request, and send the user's CSRF
    token to the attacker domain.

    To work around this problem, change code that allows users to control the
    href attribute of an anchor tag or the action attribute of a form tag to
    filter the user parameters.

    For example, code like this:

      link_to params

    to code like this:

      link_to filtered_params

      def filtered_params
        \# Filter just the parameters that you trust
      end

    See also:
    - http://blog.honeybadger.io/understanding-the-rails-jquery-csrf-vulnerability-cve-2015-1840/
  affected_package: jquery-rails
  patched_versions:
  - ">= 4.0.4"
  - "~> 3.1.3"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2015-1840
  cvss_v2_score: 5.0
  disclosed_date: 2015-06-16
  created_date: 2015-06-16
  last_modified_date: 2015-06-16
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://groups.google.com/forum/#!topic/ruby-security-ann/XIZPbobuwaY
- id: rubyadvisory:rubygems:jquery-rails:CVE-2019-11358
  title: Prototype pollution attack through jQuery $.extend
  description: |
    jQuery before 3.4.0 mishandles jQuery.extend(true, {}, ...) because of
    bject.prototype pollution. If an unsanitized source object contained an
    enumerable __proto__ property, it could extend the native Object.prototype.
  affected_package: jquery-rails
  patched_versions:
  - ">= 4.3.4"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2019-11358
  cvss_v2_score: 4.3
  cvss_v3_score: 6.1
  disclosed_date: 2019-04-19
  created_date: 2019-04-19
  last_modified_date: 2019-04-19
  credit:
  - Rubysec
  references:
  - https://github.com/jquery/jquery/commit/753d591aea698e57d6db58c9f722cd0808619b1b
  - https://github.com/jquery/jquery/pull/4333
  - https://github.com/rails/jquery-rails/blob/master/CHANGELOG.md#434
  - https://github.com/rubysec/ruby-advisory-db
  - https://hackerone.com/reports/454365
  source_url: https://blog.jquery.com/2019/04/10/jquery-3-4-0-released/
- id: snykio:rubygems:jquery-rails:20225
  title: Cross-site Request Forgery (CSRF)
  description: |
    [`jquery-rails`][1] provides jQuery and the jQuery-ujs driver for your
    Rails 4+ application.

    Affected versions allow a CSRF attack with a maliciously crafted anchor
    element. In the scenario where an attacker might be able to control the
    href attribute of an anchor tag or the action attribute of a form tag
    that will trigger a POST action, the attacker can set the href or action
    to \" [https://attacker.com\"][2] (note the leading space). This will be
    passed to JQuery, and be treated as a same origin request, potentially
    send the user\'s CSRF token to the attacker domain.



    [1]: https://rubygems.org/gems/jquery-rails
    [2]: https://attacker.com&quot;
  affected_package: jquery-rails
  vulnerable_versions:
  - ">=0.1.1  <3.1.3"
  - ">=3.2.0  <4.0.4"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2015-1840
  cwe:
  - CWE-352
  disclosed_date: 2015-06-15
  created_date: 2015-06-15
  last_modified_date: 2015-06-15
  credit:
  - Ben Toews
  references:
  - http://blog.honeybadger.io/understanding-the-rails-jquery-csrf-vulnerability-cve-2015-1840/
  - http://rubysec.com/advisories/jquery-rails-CVE-2015-1840
  - https://groups.google.com/forum/#!topic/ruby-security-ann/XIZPbobuwaY
  source_url: https://snyk.io/vuln/SNYK-RUBY-JQUERYRAILS-20225
- id: snykio:rubygems:jquery-rails:449585
  title: Cross-site Scripting (XSS)
  description: |+
    [jquery-rails][1] is a gem provides jQuery and the jQuery-ujs driver for
    your Rails 4+ application.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). The `location.hash()` function was used to select elements, but
    also allows remote attackers to inject script into the page.

    This vulnerability is related to a vulnerability in [jQuery-migrate][2]
    and in [fullpage.js](npm:fullpage.js:20151207).



    [1]: https://rubygems.org/gems/jquery-rails
    [2]: https://snyk.io/vuln/npm:jquery-migrate:20130419
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: jquery-rails
  vulnerable_versions:
  - "<1.0.16"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2011-4969
  cwe:
  - CWE-79
  disclosed_date: 2011-06-05
  created_date: 2016-10-20
  last_modified_date: 2016-10-20
  credit:
  - Dave Methvin
  references:
  - http://blog.jquery.com/2011/09/01/jquery-1-6-3-released/
  - http://www.openwall.com/lists/oss-security/2013/01/31/3
  - https://bugs.jquery.com/ticket/9521
  - https://github.com/rails/jquery-rails/blob/master/VERSIONS.md
  source_url: https://snyk.io/vuln/SNYK-RUBY-JQUERYRAILS-449585
- id: snykio:rubygems:jquery-rails:449590
  title: Cross-site Scripting (XSS)
  description: |+
    [jquery-rails][1] is a gem provides jQuery and the jQuery-ujs driver for
    your Rails 4+ application.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). The `jQuery(strInput)` function does not differentiate selectors
    from HTML in a reliable fashion. In the vulnerable version, jQuery
    determined whether the input was HTML or not by looking for the \'&lt;\'
    character anywhere in the string, giving attackers more flexibility when
    attempting to construct malicious payload.

    In the fixed versions, jQuery only deems the input to be HTML if it
    explicitly starts with \'&lt;\', limiting exploitability only to
    attackers who can control the beginning of a string, which is far less
    common.



    [1]: https://rubygems.org/gems/jquery-rails
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: jquery-rails
  vulnerable_versions:
  - ">=2.0.1  <2.2.0"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2012-6708
  - CVE-2017-16011
  cwe:
  - CWE-79
  disclosed_date: 2012-06-19
  created_date: 2016-10-20
  last_modified_date: 2016-10-20
  credit:
  - Richard Gibson
  references:
  - http://jsfiddle.net/C8dgG/
  - https://bugs.jquery.com/ticket/11290
  - https://github.com/jquery/jquery/commit/05531fc4080ae24070930d15ae0cea7ae056457d
  source_url: https://snyk.io/vuln/SNYK-RUBY-JQUERYRAILS-449590
- id: snykio:rubygems:jquery-rails:450225
  title: Prototype Pollution
  description: "[jquery-rails][1] is a gem provides jQuery and the jQuery-ujs driver
    for\nyour Rails 4+ application.\n\nAffected versions of this package are vulnerable
    to Prototype Pollution.\nThe `extend` function can be tricked into modifying the
    prototype of\n`Object` when the attacker controls part of the structure passed
    to this\nfunction. This can let an attacker add or modify an existing property\nthat
    will then exist on all objects.\n\n\n\n[1]: https://rubygems.org/gems/jquery-rails\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n{: .language-js}\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n{: .language-bash}\n\nThe entire
    process of testing it against a 30 characters long string\ntakes around ~52ms.
    But when given an invalid string, it takes nearly\ntwo seconds to complete the
    test, over ten times as long as it took to\ntest a valid string. The dramatic
    difference is due to the way regular\nexpressions get evaluated.\n\nMost Regex
    engines will work very similarly (with minor differences).\nThe engine will match
    the first possible way to accept the current\ncharacter and proceed to the next
    one. If it then fails to match the\nnext one, it will backtrack and see if there
    was another way to digest\nthe previous character. If it goes too far down the
    rabbit hole only to\nfind out the string doesn’t match in the end, and if many
    characters\nhave multiple valid regex paths, the number of backtracking steps
    can\nbecome very large, resulting in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s
    look at how our expression runs into this problem, using a\nshorter string: \\\"ACCCX\\\".
    While it seems fairly straightforward, there\nare still four different ways that
    the engine could match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.
    \ C+C+C.\n\nThe engine has to try each of those combinations to see if any of
    them\npotentially match against the expression. When you combine that with the\nother
    steps the engine must take, we can use [RegEx 101 debugger][1] to\nsee the engine
    has to take a total of 38 steps before it can determine\nthe string doesn\\'t
    match.\n\nFrom there, the number of steps the engine must use to validate a string\njust
    continues to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n|
    ACCCX | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX
    | 14 | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to
    take over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n"
  affected_package: jquery-rails
  vulnerable_versions:
  - "<4.3.4"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2019-11358
  - CVE-2019-5428
  cwe:
  - CWE-400
  disclosed_date: 2019-03-26
  created_date: 2019-03-27
  last_modified_date: 2019-03-27
  credit:
  - Semmle Security Research Team
  references:
  - https://github.com/DanielRuf/snyk-js-jquery-174006
  - https://github.com/jquery/jquery/commit/753d591aea698e57d6db58c9f722cd0808619b1b
  - https://github.com/jquery/jquery/pull/4333
  - https://hackerone.com/reports/454365
  - https://snyk.io/blog/after-three-years-of-silence-a-new-jquery-prototype-pollution-vulnerability-emerges-once-again/
  source_url: https://snyk.io/vuln/SNYK-RUBY-JQUERYRAILS-450225
- id: snykio:rubygems:jquery-rails:450229
  title: Cross-site Scripting (XSS)
  description: |+
    [jquery-rails][1] is a gem provides jQuery and the jQuery-ujs driver for
    your Rails 4+ application.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). due to using the `text()` function inside the `after()` function.



    [1]: https://rubygems.org/gems/jquery-rails
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: jquery-rails
  vulnerable_versions:
  - ">=0.2.5  <1.0.15"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2014-6071
  cwe:
  - CWE-79
  disclosed_date: 2014-09-01
  created_date: 2016-10-20
  last_modified_date: 2016-10-20
  credit:
  - Mauro Risonho de Paula Assumpção
  references:
  - http://seclists.org/fulldisclosure/2014/Sep/10
  - https://bugzilla.redhat.com/show_bug.cgi?id=1136683
  source_url: https://snyk.io/vuln/SNYK-RUBY-JQUERYRAILS-450229
- id: snykio:rubygems:jquery-rails:565439
  title: Cross-site Scripting (XSS)
  description: |+
    [jquery-rails][1] is a gem provides jQuery and the jQuery-ujs driver for
    your Rails 4+ application.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) Passing HTML containing `<option>` elements from untrusted sources
    - even after sanitizing it - to one of jQuery\'s DOM manipulation
    methods (i.e. `.html()`, `.append()`, and others) may execute untrusted
    code.



    [1]: https://rubygems.org/gems/jquery-rails
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: jquery-rails
  vulnerable_versions:
  - "<4.4.0"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2020-11023
  cwe:
  - CWE-79
  disclosed_date: 2020-04-10
  created_date: 2020-04-13
  last_modified_date: 2020-04-13
  credit:
  - Masato Kinugawa
  references:
  - https://blog.jquery.com/2020/04/10/jquery-3-5-0-released/
  - https://github.com/jquery/jquery/commit/1d61fd9407e6fbe82fe55cb0b938307aa0791f77
  source_url: https://snyk.io/vuln/SNYK-RUBY-JQUERYRAILS-565439
