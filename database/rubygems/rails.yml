---
- id: ossindex:rubygems:rails:326885
  title: '[CVE-2007-6077]  Concurrent Execution using Shared Resource with Improper
    Synchronization ("Race Condition")'
  description: 'The session fixation protection mechanism in cgi_process.rb in Rails
    1.2.4, as used in Ruby on Rails, removes the :cookie_only attribute from the DEFAULT_SESSION_OPTIONS
    constant, which effectively causes cookie_only to be applied only to the first
    instantiation of CgiRequest, which allows remote attackers to conduct session
    fixation attacks.  NOTE: this is due to an incomplete fix for CVE-2007-5380.'
  affected_package: rails
  vulnerable_versions:
  - 1.2.4
  package_manager: rubygems
  cve:
  - CVE-2007-6077
  disclosed_date: 2007-11-21
  created_date: 2007-11-21
  last_modified_date: 2012-07-06
  credit:
  - OSSIndex
  references:
  - http://dev.rubyonrails.org/changeset/8177
  - http://dev.rubyonrails.org/ticket/10048
  - http://docs.info.apple.com/article.html?artnum=307179
  - http://lists.apple.com/archives/security-announce/2007/Dec/msg00002.html
  - http://secunia.com/advisories/27781
  - http://secunia.com/advisories/28136
  - http://weblog.rubyonrails.org/2007/11/24/ruby-on-rails-1-2-6-security-and-maintenance-release
  - http://www.securityfocus.com/bid/26598
  - http://www.us-cert.gov/cas/techalerts/TA07-352A.html
  - http://www.vupen.com/english/advisories/2007/4009
  - http://www.vupen.com/english/advisories/2007/4238
  source_url: https://ossindex.net/resource/package/8404913525/vulnerabilities
- id: ossindex:rubygems:rails:354104
  title: "[CVE-2013-0156]  Improper Input Validation"
  description: active_support/core_ext/hash/conversions.rb in Ruby on Rails before
    2.3.15, 3.0.x before 3.0.19, 3.1.x before 3.1.10, and 3.2.x before 3.2.11 does
    not properly restrict casts of string values, which allows remote attackers to
    conduct object-injection attacks and execute arbitrary code, or cause a denial
    of service (memory and CPU consumption) involving nested XML entity references,
    by leveraging Action Pack support for (1) YAML type conversion or (2) Symbol type
    conversion.
  affected_package: rails
  vulnerable_versions:
  - 1.2.4
  package_manager: rubygems
  cve:
  - CVE-2013-0156
  disclosed_date: 2013-01-13
  created_date: 2013-01-13
  last_modified_date: 2016-12-08
  credit:
  - OSSIndex
  references:
  - http://ics-cert.us-cert.gov/advisories/ICSA-13-036-01A
  - http://lists.apple.com/archives/security-announce/2013/Mar/msg00002.html
  - http://rhn.redhat.com/errata/RHSA-2013-0153.html
  - http://rhn.redhat.com/errata/RHSA-2013-0154.html
  - http://rhn.redhat.com/errata/RHSA-2013-0155.html
  - http://weblog.rubyonrails.org/2013/1/28/Rails-3-0-20-and-2-3-16-have-been-released/
  - http://www.debian.org/security/2013/dsa-2604
  - http://www.fujitsu.com/global/support/software/security/products-f/sw-sv-rcve-ror201301e.html
  - http://www.insinuator.net/2013/01/rails-yaml/
  - http://www.kb.cert.org/vuls/id/380039
  - http://www.kb.cert.org/vuls/id/628463
  - https://community.rapid7.com/community/metasploit/blog/2013/01/09/serialization-mischief-in-ruby-land-cve-2013-0156
  - https://groups.google.com/group/rubyonrails-security/msg/c1432d0f8c70e89d?dmode=source&output=gplain
  - https://puppet.com/security/cve/cve-2013-0156
  source_url: https://ossindex.net/resource/package/8404913525/vulnerabilities
- id: snykio:rubygems:rails:455850
  title: Remote Code Execution (RCE)
  description: |
    [rails][1] is a opensource MVC web framework.

    Affected versions of this package are vulnerable to Remote Code
    Execution (RCE). It allows remote attackers to execute Ruby code via a
    `File Upload` request with an HTTP header that modifies the `LOAD_PATH`
    variable.



    [1]: https://rubyonrails.org/
  affected_package: rails
  vulnerable_versions:
  - ">=1.1.0  <1.1.6"
  severity: high
  package_manager: rubygems
  cve:
  - CVE-2006-4111
  cwe:
  - CWE-94
  disclosed_date: 2006-08-14
  created_date: 2019-07-31
  last_modified_date: 2019-07-31
  credit:
  - Unknown
  references:
  - http://www.securityfocus.com/bid/19454
  - https://weblog.rubyonrails.org/2006/8/9/rails-1-1-5-mandatory-security-patch-and-other-tidbits/
  source_url: https://snyk.io/vuln/SNYK-RUBY-RAILS-455850
- id: snykio:rubygems:rails:455851
  title: Denial of Service (DoS)
  description: |
    [rails][1] is a opensource MVC web framework.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS). It allows remote attackers to execute arbitrary Ruby code via a
    URL that is not properly handled in the routing code.

    \#Details Denial of Service (DoS) describes a family of attacks, all
    aimed at making a system inaccessible to its intended and legitimate
    users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)



    [1]: https://rubyonrails.org/
  affected_package: rails
  vulnerable_versions:
  - ">=1.1.0  <1.1.6"
  severity: high
  package_manager: rubygems
  cve:
  - CVE-2006-4112
  cwe:
  - CWE-94
  disclosed_date: 2006-08-14
  created_date: 2019-07-31
  last_modified_date: 2019-07-31
  credit:
  - Unknown
  references:
  - http://weblog.rubyonrails.org/2006/8/10/rails-1-1-6-backports-and-full-disclosure
  - https://www.securityfocus.com/bid/19454
  source_url: https://snyk.io/vuln/SNYK-RUBY-RAILS-455851
- id: snykio:rubygems:rails:455852
  title: Cross-site Scripting (XSS)
  description: |+
    [rails][1] is a opensource MVC web framework.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). The t`ActiveRecord::Base#to_json` function allows remote
    attackers to inject arbitrary web script via the input values.



    [1]: https://rubyonrails.org/
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: rails
  vulnerable_versions:
  - "<1.2.5"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2007-3227
  cwe:
  - CWE-79
  disclosed_date: 2007-06-14
  created_date: 2019-07-31
  last_modified_date: 2019-07-31
  credit:
  - Unknown
  references:
  - http://dev.rubyonrails.org/ticket/8371
  - http://weblog.rubyonrails.org/2007/10/12/rails-1-2-5-maintenance-release
  - http://weblog.rubyonrails.org/2007/10/5/rails-1-2-4-maintenance-release
  - http://www.securityfocus.com/bid/24161
  source_url: https://snyk.io/vuln/SNYK-RUBY-RAILS-455852
- id: snykio:rubygems:rails:455853
  title: Information Exposure
  description: |
    [rails][1] is a opensource MVC web framework.

    Affected versions of this package are vulnerable to Information
    Exposure. It allows remote attackers and `ActiveResource` servers to
    determine the existence of arbitrary files and read arbitrary XML files
    via the `Hash#from_xml` method, which uses `XML::Simple` unsafely.



    [1]: https://rubyonrails.org/
  affected_package: rails
  vulnerable_versions:
  - "<1.2.4"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2007-5379
  cwe:
  - CWE-200
  disclosed_date: 2007-10-19
  created_date: 2019-07-31
  last_modified_date: 2019-07-31
  credit:
  - Unknown
  references:
  - http://dev.rubyonrails.org/ticket/8453
  - http://weblog.rubyonrails.org/2007/10/5/rails-1-2-4-maintenance-release
  source_url: https://snyk.io/vuln/SNYK-RUBY-RAILS-455853
- id: snykio:rubygems:rails:455951
  title: Session Fixation
  description: |
    [rails][1] is a opensource MVC web framework.

    Affected versions of this package are vulnerable to Session Fixation. It
    allows remote attackers to hijack web sessions by changing session based
    parameters in URIs.



    [1]: https://rubyonrails.org/
  affected_package: rails
  vulnerable_versions:
  - "<1.2.4"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2007-5380
  cwe:
  - CWE-384
  disclosed_date: 2007-10-19
  created_date: 2019-07-31
  last_modified_date: 2019-07-31
  credit:
  - Unknown
  references:
  - http://lists.apple.com/archives/security-announce/2007/Dec/msg00002.html
  - http://weblog.rubyonrails.org/2007/10/5/rails-1-2-4-maintenance-release
  - http://www.securityfocus.com/bid/26096
  source_url: https://snyk.io/vuln/SNYK-RUBY-RAILS-455951
- id: snykio:rubygems:rails:455952
  title: Session Fixation
  description: |
    [rails][1] is a opensource MVC web framework.

    Affected versions of this package are vulnerable to Session Fixation.
    The session fixation protection mechanism in `cgi_process.rb` in Rails
    removes the `:cookie_only` attribute from the `DEFAULT_SESSION_OPTIONS`
    constant, which effectively causes `cookie_only` to be applied only to
    the first instantiation of `CgiRequest`, which allows remote attackers
    to conduct session fixation attacks.



    [1]: https://rubyonrails.org/
  affected_package: rails
  vulnerable_versions:
  - "<1.2.6"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2007-6077
  cwe:
  - CWE-362
  disclosed_date: 2007-11-21
  created_date: 2019-07-31
  last_modified_date: 2019-07-31
  credit:
  - Unknown
  references:
  - http://dev.rubyonrails.org/changeset/8177
  - http://dev.rubyonrails.org/ticket/10048
  - http://lists.apple.com/archives/security-announce/2007/Dec/msg00002.html
  - http://weblog.rubyonrails.org/2007/11/24/ruby-on-rails-1-2-6-security-and-maintenance-release
  - http://www.securityfocus.com/bid/26598
  source_url: https://snyk.io/vuln/SNYK-RUBY-RAILS-455952
- id: snykio:rubygems:rails:455953
  title: Cross-Site Request Forgery (CSRF)
  description: |
    [rails][1] is a opensource MVC web framework.

    Affected versions of this package are vulnerable to Cross-Site Request
    Forgery (CSRF). It allows remote attackers to inject arbitrary HTTP
    headers and conduct HTTP response splitting attacks via a crafted URL to
    the `redirect_to` function.



    [1]: https://rubyonrails.org/
  affected_package: rails
  vulnerable_versions:
  - "<2.0.5"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2008-5189
  cwe:
  - CWE-352
  disclosed_date: 2008-11-21
  created_date: 2019-07-31
  last_modified_date: 2019-07-31
  credit:
  - Unknown
  references:
  - http://github.com/rails/rails/commit/7282ed863ca7e6f928bae9162c9a63a98775a19d
  - http://weblog.rubyonrails.org/2008/10/19/rails-2-0-5-redirect_to-and-offset-limit-sanitizing
  - http://weblog.rubyonrails.org/2008/10/19/response-splitting-risk
  - http://www.securityfocus.com/bid/32359
  source_url: https://snyk.io/vuln/SNYK-RUBY-RAILS-455953
- id: snykio:rubygems:rails:455954
  title: Improper Input Validation
  description: |
    [rails][1] is a opensource MVC web framework.

    Affected versions of this package are vulnerable to Improper Input
    Validation. The package does not verify tokens for requests with certain
    content types, which allows remote attackers to bypass Cross-site
    Request Forgery (CSRF) protection for requests to applications that rely
    on this protection.



    [1]: https://rubyonrails.org/
  affected_package: rails
  vulnerable_versions:
  - ">=2.1.0  <2.1.3"
  - ">=2.2.0  <2.2.2"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2008-7248
  cwe:
  - CWE-20
  disclosed_date: 2009-12-16
  created_date: 2019-07-31
  last_modified_date: 2019-07-31
  credit:
  - Unknown
  references:
  - http://weblog.rubyonrails.org/2008/11/18/potential-circumvention-of-csrf-protection-in-rails-2-1
  - https://groups.google.com/forum/?hl=en#!topic/rubyonrails-security/10HuKG424wE
  source_url: https://snyk.io/vuln/SNYK-RUBY-RAILS-455954
- id: snykio:rubygems:rails:456064
  title: Improper Authentication
  description: |
    [rails][1] is a opensource MVC web framework.

    Affected versions of this package are vulnerable to Improper
    Authentication. The example code for the digest authentication
    functionality `http_authentication.rb` in Ruby on Rails before 2.3.3
    defines an `authenticate_or_request_with_http_digest` block that returns
    `nil` instead of `false` when the user does not exist, which allows
    context-dependent attackers to bypass authentication for applications
    that are derived from this example by sending an invalid username
    without a password.



    [1]: https://rubyonrails.org/
  affected_package: rails
  vulnerable_versions:
  - "<2.3.3"
  severity: high
  package_manager: rubygems
  cve:
  - CVE-2009-2422
  cwe:
  - CWE-287
  disclosed_date: 2009-07-10
  created_date: 2019-07-31
  last_modified_date: 2019-07-31
  credit:
  - Unknown
  references:
  - http://lists.apple.com/archives/security-announce/2010//Mar/msg00001.html
  - http://support.apple.com/kb/HT4077
  - http://weblog.rubyonrails.org/2009/6/3/security-problem-with-authenticate_with_http_digest
  - http://www.securityfocus.com/bid/35579
  - https://exchange.xforce.ibmcloud.com/vulnerabilities/51528
  source_url: https://snyk.io/vuln/SNYK-RUBY-RAILS-456064
- id: snykio:rubygems:rails:456065
  title: Cross-site Scripting (XSS)
  description: |
    [rails][1] is a opensource MVC web framework.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). It allows remote attackers to inject arbitrary web script or HTML
    by placing malformed Unicode strings into a form helper.

    \##Details A cross-site scripting attack occurs when the attacker tricks
    a legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.
      ## Remediation   {#remediation}

    Upgrade `rails` to version 2.2.3, 2.3.4 or higher.



    [1]: https://rubyonrails.org/
  affected_package: rails
  vulnerable_versions:
  - ">=2.0.0  <2.2.3"
  - ">=2.3.0  <2.3.4"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2009-3009
  cwe:
  - CWE-79
  disclosed_date: 2009-09-08
  created_date: 2019-07-31
  last_modified_date: 2019-07-31
  credit:
  - Unknown
  references:
  - http://groups.google.com/group/rubyonrails-security/msg/7f57cd7794e1d1b4?dmode=source
  - http://support.apple.com/kb/HT4077
  - http://weblog.rubyonrails.org/2009/9/4/xss-vulnerability-in-ruby-on-rails
  - http://www.securityfocus.com/bid/36278
  - https://exchange.xforce.ibmcloud.com/vulnerabilities/53036
  source_url: https://snyk.io/vuln/SNYK-RUBY-RAILS-456065
- id: snykio:rubygems:rails:456066
  title: Information Exposure
  description: |
    [rails][1] is a opensource MVC web framework.

    Affected versions of this package are vulnerable to Information
    Exposure. It allows leaks of information about the complexity of
    message-digest signature verification in the cookie store, which might
    allow remote attackers to forge a digest via multiple attempts.



    [1]: https://rubyonrails.org/
  affected_package: rails
  vulnerable_versions:
  - ">=2.1.0  <2.2.3"
  - ">=2.3.0  <2.3.4"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2009-3086
  cwe:
  - CWE-200
  disclosed_date: 2009-09-08
  created_date: 2019-07-31
  last_modified_date: 2019-07-31
  credit:
  - Unknown
  references:
  - http://weblog.rubyonrails.org/2009/9/4/timing-weakness-in-ruby-on-rails
  - http://www.securityfocus.com/bid/37427
  source_url: https://snyk.io/vuln/SNYK-RUBY-RAILS-456066
- id: snykio:rubygems:rails:456069
  title: Cross-site Scripting (XSS)
  description: |
    [rails][1] is a opensource MVC web framework.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). The `strip_tags` function allows remote attackers to inject
    arbitrary web script or HTML via vectors involving non-printing ASCII
    characters, related to `HTML::Tokenizer` and
    `actionpack/lib/action_controller/vendor/html-scanner/html/node.rb`.



    [1]: https://rubyonrails.org/
  affected_package: rails
  vulnerable_versions:
  - "<2.2.2"
  - ">=2.3.0  <2.3.5"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2009-4214
  cwe:
  - CWE-79
  disclosed_date: 2009-12-07
  created_date: 2019-07-31
  last_modified_date: 2019-07-31
  credit:
  - Unknown
  references:
  - http://groups.google.com/group/rubyonrails-security/browse_thread/thread/4d4f71f2aef4c0ab?pli=1
  - http://lists.apple.com/archives/security-announce/2010//Mar/msg00001.html
  - http://support.apple.com/kb/HT4077
  - http://weblog.rubyonrails.org/2009/11/30/ruby-on-rails-2-3-5-released
  - http://www.openwall.com/lists/oss-security/2009/11/27/2
  - http://www.securityfocus.com/bid/37142
  source_url: https://snyk.io/vuln/SNYK-RUBY-RAILS-456069
- id: snykio:rubygems:rails:472693
  title: SQL Injection
  description: |
    [rails][1] is a opensource MVC web framework.

    Affected versions of this package are vulnerable to SQL Injection. It
    allows remote attackers to execute arbitrary SQL commands via the (1)
    :limit and (2) :offset parameters, related to ActiveRecord,
    ActiveSupport, ActiveResource, ActionPack, and ActionMailer.



    [1]: https://rubyonrails.org/
  affected_package: rails
  vulnerable_versions:
  - "<2.1.1"
  severity: high
  package_manager: rubygems
  cve:
  - CVE-2008-4094
  cwe:
  - CWE-89
  disclosed_date: 2008-09-30
  created_date: 2019-11-11
  last_modified_date: 2019-11-11
  credit:
  - Unknown
  references:
  - http://www.rorsecurity.info/2008/09/08/sql-injection-issue-in-limit-and-offset-parameter/
  - http://www.securityfocus.com/bid/31176
  - http://www.securitytracker.com/id?1020871
  - https://exchange.xforce.ibmcloud.com/vulnerabilities/45109
  - https://github.com/rails/rails/commit/ef0ea782b1f5cf7b08e74ea3002a16c708f66645
  - https://nvd.nist.gov/vuln/detail/CVE-2008-4094
  source_url: https://snyk.io/vuln/SNYK-RUBY-RAILS-472693
- id: snykio:rubygems:rails:472695
  title: Access Restriction Bypass
  description: |
    [rails][1] is a opensource MVC web framework.

    Affected versions of this package are vulnerable to Access Restriction
    Bypass. `actionpack/lib/action_dispatch/http/request.rb` does not
    properly consider differences in parameter handling between the Active
    Record component and the Rack interface, which allows remote attackers
    to bypass intended database-query restrictions and perform NULL checks
    via a crafted request, as demonstrated by certain \[xyz, nil\] values, a
    related issue to CVE-2012-2660.



    [1]: https://rubyonrails.org/
  affected_package: rails
  vulnerable_versions:
  - "<3.0.14"
  - ">=3.1.0  <3.1.6"
  - ">=3.2.0  <3.2.6"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2012-2694
  cwe:
  - CWE-264
  disclosed_date: 2012-06-22
  created_date: 2019-11-11
  last_modified_date: 2019-11-11
  credit:
  - unknown
  references:
  - http://lists.opensuse.org/opensuse-security-announce/2012-08/msg00002.html
  - http://lists.opensuse.org/opensuse-security-announce/2012-08/msg00014.html
  - http://lists.opensuse.org/opensuse-security-announce/2012-08/msg00016.html
  - http://lists.opensuse.org/opensuse-security-announce/2012-08/msg00017.html
  - http://lists.opensuse.org/opensuse-updates/2012-08/msg00046.html
  - http://rhn.redhat.com/errata/RHSA-2013-0154.html
  - https://groups.google.com/group/rubyonrails-security/msg/e2d3a87f2c211def?dmode=source&output=gplain
  - https://nvd.nist.gov/vuln/detail/2012-2694
  - https://nvd.nist.gov/vuln/detail/CVE-2012-2694
  source_url: https://snyk.io/vuln/SNYK-RUBY-RAILS-472695
- id: snykio:rubygems:rails:472697
  title: SQL Injection
  description: |
    [rails][1] is a opensource MVC web framework.

    Affected versions of this package are vulnerable to SQL Injection. The
    Active Record component does not properly implement the passing of
    request data to a where method in an ActiveRecord class, which allows
    remote attackers to conduct certain SQL injection attacks via nested
    query parameters that leverage improper handling of nested hashes, a
    related issue to CVE-2012-2661.



    [1]: https://rubyonrails.org/
  affected_package: rails
  vulnerable_versions:
  - "<3.0.14"
  - ">=3.1.0  <3.1.6"
  - ">=3.2.0  <3.2.6"
  severity: high
  package_manager: rubygems
  cve:
  - CVE-2012-2695
  cwe:
  - CWE-89
  disclosed_date: 2012-06-22
  created_date: 2019-10-10
  last_modified_date: 2019-10-10
  credit:
  - unknown
  references:
  - http://lists.opensuse.org/opensuse-security-announce/2012-08/msg00002.html
  - http://lists.opensuse.org/opensuse-security-announce/2012-08/msg00014.html
  - http://lists.opensuse.org/opensuse-security-announce/2012-08/msg00016.html
  - http://lists.opensuse.org/opensuse-updates/2012-08/msg00046.html
  - http://rhn.redhat.com/errata/RHSA-2013-0154.html
  - https://groups.google.com/group/rubyonrails-security/msg/aee3413fb038bf56?dmode=source&output=gplain
  - https://nvd.nist.gov/vuln/detail/2012-2695
  - https://nvd.nist.gov/vuln/detail/CVE-2012-2695
  source_url: https://snyk.io/vuln/SNYK-RUBY-RAILS-472697
- id: snykio:rubygems:rails:536097
  title: Improper Input Validation
  description: |
    [rails][1] is a opensource MVC web framework.

    Affected versions of this package are vulnerable to Improper Input
    Validation. It allows remote attackers to modify arbitrary records by
    changing the names of parameters for form inputs.



    [1]: https://rubyonrails.org/
  affected_package: rails
  vulnerable_versions:
  - ">=2.3.9  <2.3.10"
  - ">=3.0.0  <3.0.1"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2010-3933
  cwe:
  - CWE-20
  disclosed_date: 2010-10-28
  created_date: 2019-11-28
  last_modified_date: 2019-11-28
  credit:
  - Unknown
  references:
  - http://weblog.rubyonrails.org/2010/10/15/security-vulnerability-in-nested-attributes-code-in-ruby-on-rails-2-3-9-and-3-0-0
  source_url: https://snyk.io/vuln/SNYK-RUBY-RAILS-536097
- id: snykio:rubygems:rails:536099
  title: Cross-site Scripting (XSS)
  description: |+
    [rails][1] is a opensource MVC web framework.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). It does not properly handle mutation of safe buffers, which makes
    it easier for remote attackers to conduct XSS attacks via crafted
    strings to an application that uses a problematic string method, as
    demonstrated by the sub method.



    [1]: https://rubyonrails.org/
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: rails
  vulnerable_versions:
  - ">=2.0.0  <2.3.12"
  - ">=3.0.0  <3.0.8"
  - ">=3.1.0.rc1  <3.1.0.rc2"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2011-2197
  cwe:
  - CWE-79
  disclosed_date: 2011-06-30
  created_date: 2019-11-28
  last_modified_date: 2019-11-28
  credit:
  - Matti Paksula and Juha Suuraho
  references:
  - http://weblog.rubyonrails.org/2011/6/8/potential-xss-vulnerability-in-ruby-on-rails-applications
  source_url: https://snyk.io/vuln/SNYK-RUBY-RAILS-536099
