---
- id: rubyadvisory:rubygems:iodine:GHSA-85rf-xh54-whp3
  title: iodine path traversal via malicious URL drafting attack
  description: |
    Malicious URL drafting attack against iodines static file server
    may allow path traversal

    Impact:
    A path traversal vulnerability was detected in iodine's static file service.

    This vulnerability effects any application running iodine's static file server
    on an effected iodine version.

    Malicious URL drafting may cause the static file server to attempt a response
    containing data from files that shouldn't be normally accessible from the
    public folder.
  affected_package: iodine
  patched_versions:
  - ">= 0.7.34"
  package_manager: rubygems
  disclosed_date: 2019-10-07
  created_date: 2019-10-07
  last_modified_date: 2019-10-07
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://github.com/boazsegev/iodine/security/advisories/GHSA-85rf-xh54-whp3
- id: snykio:rubygems:iodine:534574
  title: Directory Traversal
  description: |
    [iodine][1] is a fast HTTP / Websocket Server with built-in Pub/Sub
    support (with or without Redis), static file support and many other
    features, optimized for Ruby MRI on Linux / BSD / macOS.

    Affected versions of this package are vulnerable to Directory Traversal.
    Malicious URL drafting may cause the static file server to attempt a
    response containing data from files that shouldn\'t be normally
    accessible from the public folder.



    [1]: https://rubygems.org/gems/iodine
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
  affected_package: iodine
  vulnerable_versions:
  - "<0.7.34"
  severity: medium
  package_manager: rubygems
  cwe:
  - CWE-22
  disclosed_date: 2019-11-17
  created_date: 2019-10-05
  last_modified_date: 2019-10-05
  credit:
  - Unknown
  references:
  - https://github.com/boazsegev/iodine/security/advisories/GHSA-85rf-xh54-whp3
  source_url: https://snyk.io/vuln/SNYK-RUBY-IODINE-534574
- id: snykio:rubygems:iodine:569134
  title: HTTP Request Smuggling
  description: |
    [iodine][1] is a fast HTTP / Websocket Server with built-in Pub/Sub
    support (with or without Redis), static file support and many other
    features, optimized for Ruby MRI on Linux / BSD / macOS.

    Affected versions of this package are vulnerable to HTTP Request
    Smuggling. HTTP pipelining issues and request smuggling attacks might be
    possible due to incorrect Content-Length and Transfer encoding header
    parsing.

    It could be possible to conduct HTTP request smuggling attacks where
    `iodine` is used as part of a chain of backend servers due to
    insufficient `Content-Length` and `Transfer Encoding` parsing.



    [1]: https://rubygems.org/gems/iodine
  affected_package: iodine
  vulnerable_versions:
  - "<0.7.39"
  severity: medium
  package_manager: rubygems
  cwe:
  - CWE-200
  disclosed_date: 2020-05-18
  created_date: 2020-06-08
  last_modified_date: 2020-06-08
  credit:
  - Snyk Security Team
  references:
  - https://github.com/boazsegev/iodine/blob/master/CHANGELOG.md
  - https://github.com/boazsegev/iodine/commit/e5612e9e43a3b0145e49ff0038c95bdecbdec811
  source_url: https://snyk.io/vuln/SNYK-RUBY-IODINE-569134
