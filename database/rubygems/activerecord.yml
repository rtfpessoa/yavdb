---
- id: rubyadvisory:rubygems:activerecord:CVE-2012-2660
  title: Ruby on Rails ActiveRecord Class Rack Query Parameter Parsing SQL Query Arbitrary
    IS NULL Clause Injection
  description: |
    Ruby on Rails contains a flaw related to the way ActiveRecord handles
    parameters in conjunction with the way Rack parses query parameters.
    This issue may allow an attacker to inject arbitrary 'IS NULL' clauses in
    to application SQL queries. This may also allow an attacker to have the
    SQL query check for NULL in arbitrary places.
  affected_package: activerecord
  patched_versions:
  - ">= 3.2.4"
  - "~> 3.0.13"
  - "~> 3.1.5"
  severity: high
  package_manager: rubygems
  cve:
  - CVE-2012-2660
  osvdb: 82610
  cvss_v2_score: 7.5
  disclosed_date: 2012-05-31
  created_date: 2012-05-31
  last_modified_date: 2012-05-31
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://nvd.nist.gov/vuln/detail/CVE-2012-2660
- id: rubyadvisory:rubygems:activerecord:CVE-2012-2661
  title: Ruby on Rails where Method ActiveRecord Class SQL Injection
  description: |
    Ruby on Rails (RoR) contains a flaw that may allow an attacker to carry out
    an SQL injection attack. The issue is due to the ActiveRecord class not
    properly sanitizing user-supplied input to the 'where' method. This may
    allow an attacker to inject or manipulate SQL queries in an application
    built on RoR, allowing for the manipulation or disclosure of arbitrary data.
  affected_package: activerecord
  unaffected_versions:
  - "~> 2.3.14"
  patched_versions:
  - ">= 3.2.4"
  - "~> 3.0.13"
  - "~> 3.1.5"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2012-2661
  osvdb: 82403
  cvss_v2_score: 5.0
  disclosed_date: 2012-05-31
  created_date: 2012-05-31
  last_modified_date: 2012-05-31
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://nvd.nist.gov/vuln/detail/CVE-2012-2661
- id: rubyadvisory:rubygems:activerecord:CVE-2013-0155
  title: Ruby on Rails Active Record JSON Parameter Parsing Query Bypass
  description: |
    Ruby on Rails contains a flaw in the Active Record. The issue is due to an
    error with the way the Active Record handles parameters combined with an
    error during the parsing of the JSON parameters. This may allow a remote
    attacker to bypass restrictions abd issue unexpected database queries with
    "IS NULL" or empty where clauses, and forcing the query to unexpectedly check
    for NULL or eliminate a WHERE clause.
  affected_package: activerecord
  patched_versions:
  - ">= 3.2.11"
  - "~> 2.3.16"
  - "~> 3.0.19"
  - "~> 3.1.10"
  severity: high
  package_manager: rubygems
  cve:
  - CVE-2013-0155
  osvdb: 89025
  cvss_v2_score: 10.0
  disclosed_date: 2013-01-08
  created_date: 2013-01-08
  last_modified_date: 2013-01-08
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://nvd.nist.gov/vuln/detail/CVE-2013-0155
- id: rubyadvisory:rubygems:activerecord:CVE-2013-0276
  title: Ruby on Rails Active Record attr_protected Method Bypass
  description: |
    Ruby on Rails contains a flaw in the attr_protected method of the
    Active Record. The issue is triggered during the handling of a specially
    crafted request, which may allow a remote attacker to bypass protection
    mechanisms and alter values that would otherwise be protected.
  affected_package: activerecord
  patched_versions:
  - ">= 3.2.12"
  - "~> 2.3.17"
  - "~> 3.1.11"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2013-0276
  osvdb: 90072
  cvss_v2_score: 5.0
  disclosed_date: 2013-02-11
  created_date: 2013-02-11
  last_modified_date: 2013-02-11
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://nvd.nist.gov/vuln/detail/CVE-2013-0276
- id: rubyadvisory:rubygems:activerecord:CVE-2013-0277
  title: "Ruby on Rails Active Record +serialize+ Helper YAML Attribute Handling Remote\nCode
    Execution \n"
  description: |
    Ruby on Rails contains a flaw in the +serialize+ helper in the Active Record.
    The issue is triggered when the system is configured to allow users to
    directly provide values to be serialized and deserialized using YAML.
    With a specially crafted YAML attribute, a remote attacker can deserialize
    arbitrary YAML and execute code associated with it.
  affected_package: activerecord
  patched_versions:
  - ">= 3.1.0"
  - "~> 2.3.17"
  severity: high
  package_manager: rubygems
  cve:
  - CVE-2013-0277
  osvdb: 90073
  cvss_v2_score: 10.0
  disclosed_date: 2013-02-11
  created_date: 2013-02-11
  last_modified_date: 2013-02-11
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://nvd.nist.gov/vuln/detail/CVE-2013-0277
- id: rubyadvisory:rubygems:activerecord:CVE-2013-1854
  title: Symbol DoS vulnerability in Active Record
  description: |
    When a hash is provided as the find value for a query, the keys of
    the hash may be converted to symbols. Carefully crafted requests can
    coerce `params[:name]` to return a hash, and the keys to that hash
    may be converted to symbols. Ruby symbols are not garbage collected,
    so an attacker can initiate a denial of service attack by creating a
    large number of symbols.
  affected_package: activerecord
  unaffected_versions:
  - "~> 3.0.0"
  patched_versions:
  - ">= 3.2.13"
  - "~> 2.3.18"
  - "~> 3.1.12"
  severity: high
  package_manager: rubygems
  cve:
  - CVE-2013-1854
  osvdb: 91453
  cvss_v2_score: 7.8
  disclosed_date: 2013-03-19
  created_date: 2013-03-19
  last_modified_date: 2013-03-19
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://nvd.nist.gov/vuln/detail/CVE-2013-1854
- id: rubyadvisory:rubygems:activerecord:CVE-2014-0080
  title: Data Injection Vulnerability in Active Record
  description: |
    Ruby on Rails contains a flaw in connection_adapters/postgresql/cast.rb
    in Active Record. This issue may allow a remote attacker to inject data
    into PostgreSQL array columns via a specially crafted string.
  affected_package: activerecord
  unaffected_versions:
  - "< 3.2.0"
  - "~> 3.2.0"
  patched_versions:
  - ">= 4.1.0.beta2"
  - "~> 4.0.3"
  package_manager: rubygems
  cve:
  - CVE-2014-0080
  osvdb: 103438
  disclosed_date: 2014-02-18
  created_date: 2014-02-18
  last_modified_date: 2014-02-18
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://nvd.nist.gov/vuln/detail/CVE-2014-0080
- id: rubyadvisory:rubygems:activerecord:CVE-2014-3482
  title: SQL Injection Vulnerability in Active Record
  description: |
    Ruby on Rails contains a flaw that may allow carrying out an SQL injection attack.
    The issue is due to the PostgreSQL adapter for Active Record not properly
    sanitizing user-supplied input when quoting bitstring. This may allow a remote
    attacker to inject or manipulate SQL queries in the back-end database,
    allowing for the manipulation or disclosure of arbitrary data.
  affected_package: activerecord
  unaffected_versions:
  - ">= 4.0.0"
  patched_versions:
  - "~> 3.2.19"
  package_manager: rubygems
  cve:
  - CVE-2014-3482
  osvdb: 108664
  disclosed_date: 2014-07-02
  created_date: 2014-07-02
  last_modified_date: 2014-07-02
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://nvd.nist.gov/vuln/detail/CVE-2014-3482
- id: rubyadvisory:rubygems:activerecord:CVE-2014-3483
  title: SQL Injection Vulnerability in Active Record
  description: |
    Ruby on Rails contains a flaw that may allow carrying out an SQL injection attack.
    The issue is due to the PostgreSQL adapter for Active Record not properly
    sanitizing user-supplied input when quoting ranges. This may allow a remote
    attacker to inject or manipulate SQL queries in the back-end database,
    allowing for the manipulation or disclosure of arbitrary data.
  affected_package: activerecord
  unaffected_versions:
  - "< 4.0.0"
  patched_versions:
  - ">= 4.1.3"
  - "~> 4.0.7"
  package_manager: rubygems
  cve:
  - CVE-2014-3483
  osvdb: 108665
  disclosed_date: 2014-07-02
  created_date: 2014-07-02
  last_modified_date: 2014-07-02
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://nvd.nist.gov/vuln/detail/CVE-2014-3483
- id: rubyadvisory:rubygems:activerecord:CVE-2014-3514
  title: Data Injection Vulnerability in Active Record
  description: The create_with functionality in Active Record was implemented incorrectly
    and completely bypasses the strong parameters protection. Applications which pass
    user-controlled values to create_with could allow attackers to set arbitrary attributes
    on models.
  affected_package: activerecord
  unaffected_versions:
  - "< 4.0.0"
  patched_versions:
  - ">= 4.1.5"
  - "~> 4.0.9"
  severity: high
  package_manager: rubygems
  cve:
  - CVE-2014-3514
  cvss_v2_score: 8.7
  disclosed_date: 2014-08-18
  created_date: 2014-08-18
  last_modified_date: 2014-08-18
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://groups.google.com/forum/#!msg/rubyonrails-security/M4chq5Sb540/CC1Fh0Y_NWwJ
- id: rubyadvisory:rubygems:activerecord:CVE-2015-7577
  title: Nested attributes rejection proc bypass in Active Record
  description: |
    There is a vulnerability in how the nested attributes feature in Active Record
    handles updates in combination with destroy flags when destroying records is
    disabled. This vulnerability has been assigned the CVE identifier CVE-2015-7577.

    Versions Affected:  3.1.0 and newer
    Not affected:       3.0.x and older
    Fixed Versions:     5.0.0.beta1.1, 4.2.5.1, 4.1.14.1, 3.2.22.1

    Impact
    ------
    When using the nested attributes feature in Active Record you can prevent the
    destruction of associated records by passing the `allow_destroy: false` option
    to the `accepts_nested_attributes_for` method. However due to a change in the
    commit [a9b4b5d][1] the `_destroy` flag prevents the `:reject_if` proc from
    being called because it assumes that the record will be destroyed anyway.

    However this isn't true if `:allow_destroy` is false so this leads to changes
    that would have been rejected being applied to the record. Attackers could use
    this do things like set attributes to invalid values and to clear all of the
    attributes amongst other things. The severity will be dependent on how the
    application has used this feature.

    All users running an affected release should either upgrade or use one of
    the workarounds immediately.

    Releases
    --------
    The FIXED releases are available at the normal locations.

    Workarounds
    -----------
    If you can't upgrade, please use the following monkey patch in an initializer
    that is loaded before your application:

    ```
    $ cat config/initializers/nested_attributes_bypass_fix.rb
    module ActiveRecord
      module NestedAttributes
        private

        def reject_new_record?(association_name, attributes)
          will_be_destroyed?(association_name, attributes) || call_reject_if(association_name, attributes)
        end

        def call_reject_if(association_name, attributes)
          return false if will_be_destroyed?(association_name, attributes)

          case callback = self.nested_attributes_options[association_name][:reject_if]
          when Symbol
            method(callback).arity == 0 ? send(callback) : send(callback, attributes)
          when Proc
            callback.call(attributes)
          end
        end

        def will_be_destroyed?(association_name, attributes)
          allow_destroy?(association_name) && has_destroy_flag?(attributes)
        end

        def allow_destroy?(association_name)
          self.nested_attributes_options[association_name][:allow_destroy]
        end
      end
    end
    ```

    Patches
    -------
    To aid users who aren't able to upgrade immediately we have provided patches for
    the two supported release series. They are in git-am format and consist of a
    single changeset.

    * 3-2-nested-attributes-reject-if-bypass.patch - Patch for 3.2 series
    * 4-1-nested-attributes-reject-if-bypass.patch - Patch for 4.1 series
    * 4-2-nested-attributes-reject-if-bypass.patch - Patch for 4.2 series
    * 5-0-nested-attributes-reject-if-bypass.patch - Patch for 5.0 series

    Please note that only the 4.1.x and 4.2.x series are supported at present. Users
    of earlier unsupported releases are advised to upgrade as soon as possible as we
    cannot guarantee the continued availability of security fixes for unsupported
    releases.

    Credits
    -------
    Thank you to Justin Coyne for reporting the problem and working with us to fix it.

    [1]: https://github.com/rails/rails/commit/a9b4b5da7c216e4464eeb9dbd0a39ea258d64325
  affected_package: activerecord
  unaffected_versions:
  - "< 3.0.0"
  - "~> 3.0.0"
  patched_versions:
  - ">= 5.0.0.beta1.1"
  - "~> 3.2.22.1"
  - "~> 4.1.14  >= 4.1.14.1"
  - "~> 4.2.5  >= 4.2.5.1"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2015-7577
  cvss_v2_score: 5.0
  cvss_v3_score: 5.3
  disclosed_date: 2016-01-25
  created_date: 2016-01-25
  last_modified_date: 2016-01-25
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://groups.google.com/forum/#!topic/rubyonrails-security/cawsWcQ6c8g
- id: rubyadvisory:rubygems:activerecord:CVE-2016-6317
  title: Unsafe Query Generation Risk in Active Record
  description: |
    There is a vulnerability when Active Record is used in conjunction with JSON
    parameter parsing. This vulnerability is similar to CVE-2012-2660,
    CVE-2012-2694 and CVE-2013-0155.

    Impact
    ------

    Due to the way Active Record interprets parameters in combination with the way
    that JSON parameters are parsed, it is possible for an attacker to issue
    unexpected database queries with "IS NULL" or empty where clauses.  This issue
    does *not* let an attacker insert arbitrary values into an SQL query, however
    they can cause the query to check for NULL or eliminate a WHERE clause when
    most users wouldn't expect it.

    For example, a system has password reset with token functionality:

    ```ruby
        unless params[:token].nil?
          user = User.find_by_token(params[:token])
          user.reset_password!
        end
    ```

    An attacker can craft a request such that `params[:token]` will return
    `[nil]`.  The `[nil]` value will bypass the test for nil, but will still add
    an "IN ('xyz', NULL)" clause to the SQL query.

    Similarly, an attacker can craft a request such that `params[:token]` will
    return an empty hash.  An empty hash will eliminate the WHERE clause of the
    query, but can bypass the `nil?` check.

    Note that this impacts not only dynamic finders (`find_by_*`) but also
    relations (`User.where(:name => params[:name])`).

    All users running an affected release should either upgrade or use one of the
    work arounds immediately. All users running an affected release should upgrade
    immediately. Please note, this vulnerability is a variant of CVE-2012-2660,
    CVE-2012-2694, and CVE-2013-0155.  Even if you upgraded to address those
    issues, you must take action again.

    If this chance in behavior impacts your application, you can manually decode
    the original values from the request like so:

        `ActiveSupport::JSON.decode(request.body)`

    Workarounds
    -----------
    This problem can be mitigated by casting the parameter to a string before
    passing it to Active Record.  For example:

      ```ruby
        unless params[:token].nil? || params[:token].to_s.empty?
          user = User.find_by_token(params[:token].to_s)
          user.reset_password!
        end
      ```
  affected_package: activerecord
  unaffected_versions:
  - "< 4.2.0"
  - ">= 5.0.0"
  patched_versions:
  - ">= 4.2.7.1"
  package_manager: rubygems
  cve:
  - CVE-2016-6317
  disclosed_date: 2016-08-11
  created_date: 2016-08-11
  last_modified_date: 2016-08-11
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://groups.google.com/forum/#!topic/rubyonrails-security/rgO20zYW33s
- id: rubyadvisory:rubygems:activerecord:OSVDB-103438
  title: Data Injection Vulnerability in Active Record
  description: |
    Ruby on Rails contains a flaw in connection_adapters/postgresql/cast.rb
    in Active Record. This issue may allow a remote attacker to inject data
    into PostgreSQL array columns via a specially crafted string.
  affected_package: activerecord
  unaffected_versions:
  - "< 3.2.0"
  - "~> 3.2.0"
  patched_versions:
  - ">= 4.1.0.beta2"
  - "~> 4.0.3"
  package_manager: rubygems
  cve:
  - CVE-2014-0080
  osvdb: 103438
  disclosed_date: 2014-02-18
  created_date: 2014-02-18
  last_modified_date: 2014-02-18
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: http://osvdb.org/show/osvdb/103438
- id: rubyadvisory:rubygems:activerecord:OSVDB-108664
  title: SQL Injection Vulnerability in Active Record
  description: |
    Ruby on Rails contains a flaw that may allow carrying out an SQL injection attack.
    The issue is due to the PostgreSQL adapter for Active Record not properly
    sanitizing user-supplied input when quoting bitstring. This may allow a remote
    attacker to inject or manipulate SQL queries in the back-end database,
    allowing for the manipulation or disclosure of arbitrary data.
  affected_package: activerecord
  unaffected_versions:
  - ">= 4.0.0"
  patched_versions:
  - "~> 3.2.19"
  package_manager: rubygems
  cve:
  - CVE-2014-3482
  osvdb: 108664
  disclosed_date: 2014-07-02
  created_date: 2014-07-02
  last_modified_date: 2014-07-02
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: http://osvdb.org/show/osvdb/108664
- id: rubyadvisory:rubygems:activerecord:OSVDB-108665
  title: SQL Injection Vulnerability in Active Record
  description: |
    Ruby on Rails contains a flaw that may allow carrying out an SQL injection attack.
    The issue is due to the PostgreSQL adapter for Active Record not properly
    sanitizing user-supplied input when quoting ranges. This may allow a remote
    attacker to inject or manipulate SQL queries in the back-end database,
    allowing for the manipulation or disclosure of arbitrary data.
  affected_package: activerecord
  unaffected_versions:
  - "< 4.0.0"
  patched_versions:
  - ">= 4.1.3"
  - "~> 4.0.7"
  package_manager: rubygems
  cve:
  - CVE-2014-3483
  osvdb: 108665
  disclosed_date: 2014-07-02
  created_date: 2014-07-02
  last_modified_date: 2014-07-02
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: http://osvdb.org/show/osvdb/108665
- id: rubyadvisory:rubygems:activerecord:OSVDB-82403
  title: Ruby on Rails where Method ActiveRecord Class SQL Injection
  description: |
    Ruby on Rails (RoR) contains a flaw that may allow an attacker to carry out
    an SQL injection attack. The issue is due to the ActiveRecord class not
    properly sanitizing user-supplied input to the 'where' method. This may
    allow an attacker to inject or manipulate SQL queries in an application
    built on RoR, allowing for the manipulation or disclosure of arbitrary data.
  affected_package: activerecord
  unaffected_versions:
  - "~> 2.3.14"
  patched_versions:
  - ">= 3.2.4"
  - "~> 3.0.13"
  - "~> 3.1.5"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2012-2661
  osvdb: 82403
  cvss_v2_score: 5.0
  disclosed_date: 2012-05-31
  created_date: 2012-05-31
  last_modified_date: 2012-05-31
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: http://www.osvdb.org/show/osvdb/82403
- id: rubyadvisory:rubygems:activerecord:OSVDB-82610
  title: Ruby on Rails ActiveRecord Class Rack Query Parameter Parsing SQL Query Arbitrary
    IS NULL Clause Injection
  description: |
    Ruby on Rails contains a flaw related to the way ActiveRecord handles
    parameters in conjunction with the way Rack parses query parameters.
    This issue may allow an attacker to inject arbitrary 'IS NULL' clauses in
    to application SQL queries. This may also allow an attacker to have the
    SQL query check for NULL in arbitrary places.
  affected_package: activerecord
  patched_versions:
  - ">= 3.2.4"
  - "~> 3.0.13"
  - "~> 3.1.5"
  severity: high
  package_manager: rubygems
  cve:
  - CVE-2012-2660
  osvdb: 82610
  cvss_v2_score: 7.5
  disclosed_date: 2012-05-31
  created_date: 2012-05-31
  last_modified_date: 2012-05-31
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: http://www.osvdb.org/show/osvdb/82610
- id: rubyadvisory:rubygems:activerecord:OSVDB-88661
  title: Ruby on Rails find_by_* Methods Authlogic SQL Injection Bypass
  description: |
    Due to the way dynamic finders in Active Record extract options from method
    parameters, a method parameter can mistakenly be used as a scope.  Carefully
    crafted requests can use the scope to inject arbitrary SQL.
  affected_package: activerecord
  patched_versions:
  - ">= 3.2.10"
  - "~> 3.0.18"
  - "~> 3.1.9"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2012-6496
  osvdb: 88661
  cvss_v2_score: 6.4
  disclosed_date: 2012-12-22
  created_date: 2012-12-22
  last_modified_date: 2012-12-22
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://groups.google.com/forum/?fromgroups=#!topic/rubyonrails-security/DCNTNp_qjFM
- id: rubyadvisory:rubygems:activerecord:OSVDB-89025
  title: Ruby on Rails Active Record JSON Parameter Parsing Query Bypass
  description: |
    Ruby on Rails contains a flaw in the Active Record. The issue is due to an
    error with the way the Active Record handles parameters combined with an
    error during the parsing of the JSON parameters. This may allow a remote
    attacker to bypass restrictions abd issue unexpected database queries with
    "IS NULL" or empty where clauses, and forcing the query to unexpectedly check
    for NULL or eliminate a WHERE clause.
  affected_package: activerecord
  patched_versions:
  - ">= 3.2.11"
  - "~> 2.3.16"
  - "~> 3.0.19"
  - "~> 3.1.10"
  severity: high
  package_manager: rubygems
  cve:
  - CVE-2013-0155
  osvdb: 89025
  cvss_v2_score: 10.0
  disclosed_date: 2013-01-08
  created_date: 2013-01-08
  last_modified_date: 2013-01-08
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: http://osvdb.org/show/osvdb/89025
- id: rubyadvisory:rubygems:activerecord:OSVDB-90072
  title: Ruby on Rails Active Record attr_protected Method Bypass
  description: |
    Ruby on Rails contains a flaw in the attr_protected method of the
    Active Record. The issue is triggered during the handling of a specially
    crafted request, which may allow a remote attacker to bypass protection
    mechanisms and alter values that would otherwise be protected.
  affected_package: activerecord
  patched_versions:
  - ">= 3.2.12"
  - "~> 2.3.17"
  - "~> 3.1.11"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2013-0276
  osvdb: 90072
  cvss_v2_score: 5.0
  disclosed_date: 2013-02-11
  created_date: 2013-02-11
  last_modified_date: 2013-02-11
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: http://osvdb.org/show/osvdb/90072
- id: rubyadvisory:rubygems:activerecord:OSVDB-90073
  title: "Ruby on Rails Active Record +serialize+ Helper YAML Attribute Handling Remote\nCode
    Execution \n"
  description: |
    Ruby on Rails contains a flaw in the +serialize+ helper in the Active Record.
    The issue is triggered when the system is configured to allow users to
    directly provide values to be serialized and deserialized using YAML.
    With a specially crafted YAML attribute, a remote attacker can deserialize
    arbitrary YAML and execute code associated with it.
  affected_package: activerecord
  patched_versions:
  - ">= 3.1.0"
  - "~> 2.3.17"
  severity: high
  package_manager: rubygems
  cve:
  - CVE-2013-0277
  osvdb: 90073
  cvss_v2_score: 10.0
  disclosed_date: 2013-02-11
  created_date: 2013-02-11
  last_modified_date: 2013-02-11
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: http://osvdb.org/show/osvdb/90073
- id: rubyadvisory:rubygems:activerecord:OSVDB-91453
  title: Symbol DoS vulnerability in Active Record
  description: |
    When a hash is provided as the find value for a query, the keys of
    the hash may be converted to symbols. Carefully crafted requests can
    coerce `params[:name]` to return a hash, and the keys to that hash
    may be converted to symbols. Ruby symbols are not garbage collected,
    so an attacker can initiate a denial of service attack by creating a
    large number of symbols.
  affected_package: activerecord
  unaffected_versions:
  - "~> 3.0.0"
  patched_versions:
  - ">= 3.2.13"
  - "~> 2.3.18"
  - "~> 3.1.12"
  severity: high
  package_manager: rubygems
  cve:
  - CVE-2013-1854
  osvdb: 91453
  cvss_v2_score: 7.8
  disclosed_date: 2013-03-19
  created_date: 2013-03-19
  last_modified_date: 2013-03-19
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: http://osvdb.org/show/osvdb/91453
- id: snykio:rubygems:activerecord:20029
  title: SQL Injection
  description: |
    [ActiveRecord][1] is the Object-Relational Mapping (ORM) that comes
    out-of-the-box with Rails. It plays the role of *Model* in the MVC
    architecture employed by Rails.

    The vulnerability may allow an attacker to carry out an SQL injection
    attack. The issue is due to the ActiveRecord class not properly
    sanitizing user-supplied input to the `where` method. This may allow an
    attacker to inject or manipulate SQL queries in an application built on
    Ruby on Rails, allowing for the manipulation or disclosure of arbitrary
    data.



    [1]: https://rubygems.org/gems/activerecord/
  affected_package: activerecord
  vulnerable_versions:
  - "< 2.3.14"
  - "< 3.0.13  >= 2.4"
  - "< 3.1.5  >= 3.1"
  - "< 3.2.4  >= 3.2"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2012-2661
  cwe:
  - CWE-89
  disclosed_date: 2012-05-30
  created_date: 2012-05-30
  last_modified_date: 2012-05-30
  credit:
  - Unknown
  references:
  - http://rubysec.com/advisories/activerecord-OSVDB-82403
  source_url: https://snyk.io/vuln/SNYK-RUBY-ACTIVERECORD-20029
- id: snykio:rubygems:activerecord:20030
  title: Unsafe Query Generation
  description: |
    [ActiveRecord][1] is the Object-Relational Mapping (ORM) that comes
    out-of-the-box with Rails. It plays the role of *Model* in the MVC
    architecture employed by Rails.

    The vulnerability lies within the way ActiveRecord handles parameters in
    conjunction with the way Rack parses query parameters. This issue may
    allow an attacker to inject arbitrary `IS NULL` clauses in to
    application SQL queries. This may also allow an attacker to have the SQL
    query check for `NULL` in arbitrary places.



    [1]: https://rubygems.org/gems/activerecord/
  affected_package: activerecord
  vulnerable_versions:
  - "< 3.0.13"
  - "< 3.1.5  >= 3.1"
  - "< 3.2.4  >= 3.2"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2012-2660
  cwe:
  - CWE-943
  disclosed_date: 2012-05-30
  created_date: 2012-05-30
  last_modified_date: 2012-05-30
  credit:
  - Ben Murphy
  references:
  - http://rubysec.com/advisories/activerecord-OSVDB-82610
  - https://groups.google.com/forum/#!msg/rubyonrails-security/8SA-M3as7A8/Mr9fi9X4kNgJ
  source_url: https://snyk.io/vuln/SNYK-RUBY-ACTIVERECORD-20030
- id: snykio:rubygems:activerecord:20044
  title: SQL Injection
  description: |
    [ActiveRecord][1] is the Object-Relational Mapping (ORM) that comes
    out-of-the-box with Rails. It plays the role of *Model* in the MVC
    architecture employed by Rails.

    Affected versions of this package are vulnerable to SQL Injection. Due
    to the way dynamic finders in ActiveRecord extract options from method
    parameters, a method parameter can mistakenly be used as a scope.
    Carefully crafted requests can use the scope to inject arbitrary SQL.



    [1]: https://rubygems.org/gems/activerecord/
  affected_package: activerecord
  vulnerable_versions:
  - "< 3.0.18"
  - "< 3.1.9  >= 3.1"
  - "< 3.2.10  >= 3.2"
  severity: high
  package_manager: rubygems
  cve:
  - CVE-2012-6496
  cwe:
  - CWE-89
  disclosed_date: 2012-12-21
  created_date: 2012-12-21
  last_modified_date: 2012-12-21
  credit:
  - Unknown
  references:
  - http://rubysec.com/advisories/activerecord-OSVDB-88661
  - https://groups.google.com/forum/?fromgroups=#!topic/rubyonrails-security/DCNTNp_qjFM
  source_url: https://snyk.io/vuln/SNYK-RUBY-ACTIVERECORD-20044
- id: snykio:rubygems:activerecord:20046
  title: JSON Parameter Parsing Query Bypass
  description: |
    [ActiveRecord][1] is the Object-Relational Mapping (ORM) that comes
    out-of-the-box with Rails. It plays the role of *Model* in the MVC
    architecture employed by Rails.

    Affected versions of this package are vulenrable to JSON Parameter
    Parsing Query Bypass due to an error with the way it handles parameters
    combined with an error during the parsing of the JSON parameters. This
    may allow a remote attacker to bypass restrictions and issue unexpected
    database queries with `IS NULL` or empty `WHERE` clauses, and forcing
    the query to unexpectedly check for `NULL` or eliminate a `WHERE`
    clause.



    [1]: https://rubygems.org/gems/activerecord/
  affected_package: activerecord
  vulnerable_versions:
  - "< 2.3.16"
  - "< 3.0.19  >= 2.4"
  - "< 3.1.10  >= 3.1"
  - "< 3.2.11  >= 3.2"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2013-0155
  cwe:
  - CWE-284
  disclosed_date: 2013-01-07
  created_date: 2013-01-07
  last_modified_date: 2013-01-07
  credit:
  - Unknown
  references:
  - http://rubysec.com/advisories/activerecord-OSVDB-89025
  source_url: https://snyk.io/vuln/SNYK-RUBY-ACTIVERECORD-20046
- id: snykio:rubygems:activerecord:20061
  title: Remote Code Execution
  description: |
    [ActiveRecord][1] is the Object-Relational Mapping (ORM) that comes
    out-of-the-box with Rails. It plays the role of *Model* in the MVC
    architecture employed by Rails.

    There\'s a flaw in the `serialize` helper in the ActiveRecord. The issue
    is triggered when the system is configured to allow users to directly
    provide values to be serialized and deserialized using YAML. With a
    specially crafted YAML attribute, a remote attacker can deserialize
    arbitrary YAML and execute code associated with it.



    [1]: https://rubygems.org/gems/activerecord/
  affected_package: activerecord
  vulnerable_versions:
  - "< 2.3.17"
  - "< 3.1.0  >= 2.4"
  severity: high
  package_manager: rubygems
  cve:
  - CVE-2013-0277
  cwe:
  - CWE-94
  disclosed_date: 2013-02-10
  created_date: 2013-02-10
  last_modified_date: 2013-02-10
  credit:
  - Unknown
  references:
  - http://rubysec.com/advisories/CVE-2013-0277
  source_url: https://snyk.io/vuln/SNYK-RUBY-ACTIVERECORD-20061
- id: snykio:rubygems:activerecord:20062
  title: Access Restriction Bypass
  description: |
    [ActiveRecord][1] is the Object-Relational Mapping (ORM) that comes
    out-of-the-box with Rails. It plays the role of *Model* in the MVC
    architecture employed by Rails.

    Affected versions of this package are vulnerable to Access Restriction
    Bypass via the `attr_protected` method of the Active Record. The issue
    is triggered during the handling of a specially crafted request, which
    may allow a remote attacker to bypass protection mechanisms and alter
    values that would otherwise be protected.



    [1]: https://rubygems.org/gems/activerecord/
  affected_package: activerecord
  vulnerable_versions:
  - "< 2.3.17"
  - "< 3.1.11  >= 2.4"
  - "< 3.2.12  >= 3.2"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2013-0276
  cwe:
  - CWE-284
  disclosed_date: 2013-02-10
  created_date: 2013-02-10
  last_modified_date: 2013-02-10
  credit:
  - Unknown
  references:
  - http://rubysec.com/advisories/activerecord-OSVDB-90072
  source_url: https://snyk.io/vuln/SNYK-RUBY-ACTIVERECORD-20062
- id: snykio:rubygems:activerecord:20088
  title: Denial of Service (DoS)
  description: |+
    [ActiveRecord][1] is the Object-Relational Mapping (ORM) that comes
    out-of-the-box with Rails.

    Affected versions of this package are vulnerable to Denial of Service
    attack. When a hash is provided as the find value for a query, the keys
    of the hash may be converted to symbols. Carefully crafted requests can
    coerce `params[:name]` to return a hash, and the keys to that hash may
    be converted to symbols. Ruby symbols are not garbage collected, so an
    attacker can initiate a denial of service attack by creating a large
    number of symbols.



    [1]: https://rubygems.org/gems/activerecord/
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: activerecord
  vulnerable_versions:
  - "< 2.3.18"
  - "< 3.0.0  >= 2.4"
  - "< 3.1.12  >= 3.1"
  - "< 3.2.13  >= 3.2"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2013-1854
  cwe:
  - CWE-400
  disclosed_date: 2013-03-18
  created_date: 2013-03-18
  last_modified_date: 2013-03-18
  credit:
  - Unknown
  references:
  - http://rubysec.com/advisories/activerecord-OSVDB-91453
  source_url: https://snyk.io/vuln/SNYK-RUBY-ACTIVERECORD-20088
- id: snykio:rubygems:activerecord:20149
  title: Data Injection
  description: |
    [ActiveRecord][1] is the Object-Relational Mapping (ORM) that comes
    out-of-the-box with Rails. It plays the role of *Model* in the MVC
    architecture employed by Rails.

    Affected versions of this package are vulnerable to Data Injection via
    the `connection_adapters/postgresql/cast.rb` method. Specially crafted
    strings can be used to save data in PostgreSQL array columns that may
    not be intended. This vulnerability cannot be used to delete data or
    execute arbitrary SQL statements, but *can* be used to add data that
    could have an impact on the application (such as setting an admin flag).
    Only array type columns in PostgreSQL are impacted.



    [1]: https://rubygems.org/gems/activerecord/
  affected_package: activerecord
  vulnerable_versions:
  - ">=3.2.0  <4.0.3"
  - ">=4.1.0.beta1  <4.1.0.beta2"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2014-0080
  cwe:
  - CWE-74
  disclosed_date: 2014-02-17
  created_date: 2014-02-17
  last_modified_date: 2014-02-17
  credit:
  - Godfrey Chan
  references:
  - http://rubysec.com/advisories/activerecord-OSVDB-103438
  - https://groups.google.com/forum/#!topic/rubyonrails-security/Wu96YkTUR6s
  source_url: https://snyk.io/vuln/SNYK-RUBY-ACTIVERECORD-20149
- id: snykio:rubygems:activerecord:20184
  title: SQL Injection
  description: |
    [ActiveRecord][1] is the Object-Relational Mapping (ORM) that comes
    out-of-the-box with Rails. It plays the role of *Model* in the MVC
    architecture employed by Rails.

    Ruby on Rails contains a flaw that may allow carrying out an SQL
    injection attack. The issue is due to the PostgreSQL adapter for
    ActiveRecord not properly sanitizing user-supplied input when quoting
    `ranges`. This may allow a remote attacker to inject or manipulate SQL
    queries in the back-end database, allowing for the manipulation or
    disclosure of arbitrary data.

    ### Details   {#details}

    PostgreSQL supports a number of unique data types which are not present
    in other supported databases. A bug in the SQL quoting code in
    ActiveRecord can allow an attacker to inject arbitrary SQL using
    carefully crafted values.

    Only applications which query against either `bitstring` or `range`
    types are vulnerable. The particular data types affected depend on the
    version of Rails you\'re using, but the vulnerable code will look the
    same. Vulnerable code will take either take the form of:

          Model.where(bitstring: params[:some_value])
          Model.where(range: params[:from]..params[:to])
    {: .language-ruby}



    [1]: https://rubygems.org/gems/activerecord/
  affected_package: activerecord
  vulnerable_versions:
  - "< 4.0.7  >= 4.0.0"
  - "< 4.1.3  >= 4.1"
  severity: high
  package_manager: rubygems
  cve:
  - CVE-2014-3483
  cwe:
  - CWE-89
  disclosed_date: 2014-07-01
  created_date: 2014-07-01
  last_modified_date: 2014-07-01
  credit:
  - Sean Griffin
  references:
  - http://rubysec.com/advisories/activerecord-OSVDB-108665
  - https://groups.google.com/d/msg/rubyonrails-security/wDxePLJGZdI/WP7EasCJTA4J
  source_url: https://snyk.io/vuln/SNYK-RUBY-ACTIVERECORD-20184
- id: snykio:rubygems:activerecord:20185
  title: SQL Injection
  description: |
    [ActiveRecord][1] is the Object-Relational Mapping (ORM) that comes
    out-of-the-box with Rails. It plays the role of *Model* in the MVC
    architecture employed by Rails.

    Affected versions of this package are vulnerable to SQL Injection. The
    issue is due to the PostgreSQL adapter for ActiveRecord not properly
    sanitizing user-supplied input when quoting `bitstring`. This may allow
    a remote attacker to inject or manipulate SQL queries in the back-end
    database, allowing for the manipulation or disclosure of arbitrary data.
    PostgreSQL supports a number of unique data types which are not present
    in other supported databases. A bug in the SQL quoting code in
    ActiveRecord can allow an attacker to inject arbitrary SQL using
    carefully crafted values. Only applications which query against either
    `bitstring` or `range` types are vulnerable. The particular data types
    affected depend on the version of Rails you\'re using, but the
    vulnerable code will look the same. Vulnerable code will take either
    take the form of:

          Model.where(bitstring: params[:some_value])
          Model.where(range: params[:from]..params[:to])
    {: .language-ruby}



    [1]: https://rubygems.org/gems/activerecord/
  affected_package: activerecord
  vulnerable_versions:
  - "< 3.2.19"
  - "< 4.0.0  >= 3.3"
  severity: high
  package_manager: rubygems
  cve:
  - CVE-2014-3482
  cwe:
  - CWE-89
  disclosed_date: 2014-07-01
  created_date: 2014-07-01
  last_modified_date: 2014-07-01
  credit:
  - Sean Griffin
  references:
  - http://rubysec.com/advisories/activerecord-OSVDB-108664
  - https://groups.google.com/d/msg/rubyonrails-security/wDxePLJGZdI/WP7EasCJTA4J
  source_url: https://snyk.io/vuln/SNYK-RUBY-ACTIVERECORD-20185
- id: snykio:rubygems:activerecord:20190
  title: Arbitrary Data Injection
  description: |
    [ActiveRecord][1] is the Object-Relational Mapping (ORM) that comes
    out-of-the-box with Rails. It plays the role of *Model* in the MVC
    architecture employed by Rails.

    Affected versions of this package are vulnerable to Arbitrary Data
    Injection. The `create_with` functionality in *ActiveRecord* was
    implemented incorrectly and completely bypasses the strong parameters
    protection. Applications which pass user-controlled values to
    `create_with` could allow attackers to set arbitrary attributes on
    models.



    [1]: https://rubygems.org/gems/activerecord/
  affected_package: activerecord
  vulnerable_versions:
  - "< 4.0.9  >= 4.0.0"
  - "< 4.1.5  >= 4.1"
  severity: high
  package_manager: rubygems
  cve:
  - CVE-2014-3514
  cwe:
  - CWE-74
  disclosed_date: 2014-08-17
  created_date: 2014-08-17
  last_modified_date: 2014-08-17
  credit:
  - Stephen Touset
  source_url: https://snyk.io/vuln/SNYK-RUBY-ACTIVERECORD-20190
- id: snykio:rubygems:activerecord:20259
  title: Nested Attributes Rejection Bypass
  description: |
    [ActiveRecord][1] is the Object-Relational Mapping (ORM) that comes
    out-of-the-box with Rails. It plays the role of *Model* in the MVC
    architecture employed by Rails.

    Affected versions of this package are vulnerable to Nested Attributes
    Rejection Bypass. ActiveRecord handles updates in combination with
    destroy flags when destroying records is disabled. Attackers could use
    this do things like set attributes to invalid values and to clear all of
    the attributes amongst other things.



    [1]: https://rubygems.org/gems/activerecord/
    \nWhen using the nested attributes feature in ActiveRecord you can prevent
    the destruction of associated records by passing the `allow_destroy:
    false` option to the `accepts_nested_attributes_for` method. However due
    to a change in the commit [a9b4b5d][1] the `_destroy` flag prevents the
    `:reject_if` proc from being called because it assumes that the record
    will be destroyed anyway. However this isn\'t true if `:allow_destroy`
    is false so this leads to changes that would have been rejected being
    applied to the record.



    [1]: https://github.com/rails/rails/commit/a9b4b5da7c216e4464eeb9dbd0a39ea258d64325
  affected_package: activerecord
  vulnerable_versions:
  - "< 3.2.22.1  >= 3.1"
  - "< 4.1.14.1  >= 3.2.23"
  - "< 4.2.5.1  >= 4.2"
  - "< 5.0.0.beta1.1  >= 4.3"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2015-7577
  cwe:
  - CWE-284
  disclosed_date: 2016-01-24
  created_date: 2016-01-24
  last_modified_date: 2016-01-24
  credit:
  - Justin Coyne
  references:
  - http://rubysec.com/advisories/activerecord-CVE-2015-7577
  - https://github.com/rails/rails/commit/a9b4b5da7c216e4464eeb9dbd0a39ea258d64325
  - https://groups.google.com/forum/#!topic/rubyonrails-security/cawsWcQ6c8g
  source_url: https://snyk.io/vuln/SNYK-RUBY-ACTIVERECORD-20259
- id: snykio:rubygems:activerecord:20270
  title: Unsafe Query Generation
  description: |
    [ActiveRecord][1] is the Object-Relational Mapping (ORM) that comes
    out-of-the-box with Rails. It plays the role of *Model* in the MVC
    architecture employed by Rails.

    There is a vulnerability when ActiveRecord is used in conjunction with
    JSON parameter parsing.

    This vulnerability is similar to [CVE-2012-2660][2], CVE-2012-2694 and
    [CVE-2013-0155][3].

    ### Details   {#details}

    Due to the way ActiveRecord interprets parameters in combination with
    the way that JSON parameters are parsed, it is possible for an attacker
    to issue unexpected database queries with `IS NULL` or empty `WHERE`
    clauses. This issue does *not* let an attacker insert arbitrary values
    into an SQL query, however they can cause the query to check for `NULL`
    or eliminate a `WHERE` clause when most users wouldn\'t expect it.

    For example, a system has password reset with token functionality:

            unless params[:token].nil?
              user = User.find_by_token(params[:token])
              user.reset_password!
            end
    {: .language-ruby}

    An attacker can craft a request such that `params[:token]` will return
    `[nil]`. The `[nil]` value will bypass the test for nil, but will still
    add an `IN ('xyz', NULL)` clause to the SQL query.

    Similarly, an attacker can craft a request such that `params[:token]`
    will return an empty hash. An empty hash will eliminate the WHERE clause
    of the query, but can bypass the `nil?` check.

    Note that this impacts not only dynamic finders (`find_by_*`) but also
    relations (`User.where(:name => params[:name])`).



    [1]: https://rubygems.org/gems/activerecord/
    [2]: https://snyk.io/vuln/SNYK-RUBY-ACTIVERECORD-20030
    [3]: https://snyk.io/vuln/SNYK-RUBY-ACTIVERECORD-20046
  affected_package: activerecord
  vulnerable_versions:
  - "< 4.2.7.1  >= 4.2.0"
  severity: high
  package_manager: rubygems
  cve:
  - CVE-2016-6317
  cwe:
  - CWE-943
  disclosed_date: 2016-08-10
  created_date: 2016-08-10
  last_modified_date: 2016-08-10
  credit:
  - joernchen
  references:
  - https://groups.google.com/forum/#!topic/rubyonrails-security/rgO20zYW33s
  source_url: https://snyk.io/vuln/SNYK-RUBY-ACTIVERECORD-20270
- id: snykio:rubygems:activerecord:20282
  title: SQL Injection
  description: |
    [`activerecord`][1] is the Object-Relational Mapping (ORM) that comes
    out-of-the-box with Rails. It plays the role of *Model* in the MVC
    architecture employed by Rails. This allows an attacker to run a
    specially crafted arguments to execute SQL commands on the host servers
    database.



    [1]: https://rubygems.org/gems/activerecord/
  affected_package: activerecord
  vulnerable_versions:
  - ">= 3.0.0  <=3.0.3"
  severity: high
  package_manager: rubygems
  cve:
  - CVE-2011-0448
  cwe:
  - CWE-89
  disclosed_date: 2011-02-08
  created_date: 2016-12-20
  last_modified_date: 2016-12-20
  credit:
  - Eaden McKee
  references:
  - http://securitytracker.com/id?1025063
  - http://weblog.rubyonrails.org/2011/2/8/new-releases-2-3-11-and-3-0-4/
  - https://groups.google.com/forum/#!topic/rubyonrails-security/tliQLPa_Tu0
  source_url: https://snyk.io/vuln/SNYK-RUBY-ACTIVERECORD-20282
- id: snykio:rubygems:activerecord:536100
  title: SQL Injection
  description: |
    [activerecord][1] is a library for databases on Rails.

    Affected versions of this package are vulnerable to SQL Injection. The
    `quote_table_name method` in the ActiveRecord adapters in
    activerecord/lib/active\_record/connection\_adapters/ allows remote
    attackers to execute arbitrary SQL commands via a crafted column name.



    [1]: https://rubygems.org/gems/activerecord
  affected_package: activerecord
  vulnerable_versions:
  - ">=2.0.0  <2.3.13"
  - ">=3.0.0  <3.0.10"
  - ">=3.1.0.beta1  <3.1.0.rc6"
  severity: high
  package_manager: rubygems
  cve:
  - CVE-2011-2930
  cwe:
  - CWE-89
  disclosed_date: 2011-08-29
  created_date: 2019-11-26
  last_modified_date: 2019-11-26
  credit:
  - Unknown
  references:
  - http://weblog.rubyonrails.org/2011/8/16/ann-rails-3-1-0-rc6
  - https://github.com/rails/rails/commit/8a39f411dc3c806422785b1f4d5c7c9d58e4bf85
  source_url: https://snyk.io/vuln/SNYK-RUBY-ACTIVERECORD-536100
