---
- id: ossindex:rubygems:doorkeeper:365996
  title: "[CVE-2014-8144]  Cross-Site Request Forgery (CSRF)"
  description: Cross-site request forgery (CSRF) vulnerability in doorkeeper before
    1.4.1 allows remote attackers to hijack the authentication of unspecified victims
    for requests that read a user OAuth authorization code via unknown vectors.
  affected_package: doorkeeper
  vulnerable_versions:
  - 1.4.0
  package_manager: rubygems
  cve:
  - CVE-2014-8144
  disclosed_date: 2014-12-31
  created_date: 2014-12-31
  last_modified_date: 2015-02-24
  credit:
  - OSSIndex
  references:
  - http://seclists.org/oss-sec/2014/q4/1076
  - http://xforce.iss.net/xforce/xfdb/99342
  - https://exchange.xforce.ibmcloud.com/vulnerabilities/99342
  - https://github.com/doorkeeper-gem/doorkeeper/blob/master/CHANGELOG.md
  source_url: https://ossindex.net/resource/package/8404788488/vulnerabilities
- id: ossindex:rubygems:doorkeeper:8402800555
  title: "[CVE-2016-6582] The Doorkeeper gem before 4.2.0 for Ruby might allow remote
    attackers to conduct..."
  description: The Doorkeeper gem before 4.2.0 for Ruby might allow remote attackers
    to conduct replay attacks or revoke arbitrary tokens by leveraging failure to
    implement the OAuth 2.0 Token Revocation specification.
  affected_package: doorkeeper
  vulnerable_versions:
  - 4.1.0
  package_manager: rubygems
  cve:
  - CVE-2016-6582
  disclosed_date: 2017-01-23
  created_date: 2017-01-23
  last_modified_date: 2017-01-25
  credit:
  - OSSIndex
  references:
  - http://packetstormsecurity.com/files/138430/Doorkeeper-4.1.0-Token-Revocation.html
  - http://seclists.org/fulldisclosure/2016/Aug/105
  - http://www.securityfocus.com/archive/1/archive/1/539268/100/0/threaded
  - http://www.securityfocus.com/bid/92551
  - https://github.com/doorkeeper-gem/doorkeeper/issues/875
  - https://github.com/doorkeeper-gem/doorkeeper/releases/tag/v4.2.0
  source_url: https://ossindex.net/resource/package/8404788488/vulnerabilities
- id: rubyadvisory:rubygems:doorkeeper:CVE-2014-8144
  title: |
    Cross-site request forgery (CSRF) vulnerability in doorkeeper 1.4.0
    and earlier.
  description: |
    Cross-site request forgery (CSRF) vulnerability in doorkeeper 1.4.0
    and earlier allows remote attackers to hijack the user's OAuth
    autorization code. This vulnerability has been assigned the CVE
    identifier CVE-2014-8144.

    Doorkeeper's endpoints didn't have CSRF protection. Any HTML document
    on the Internet can then read a user's authorization code with
    arbitrary scope from any Doorkeeper-compatible Rails app you are
    logged in.
  affected_package: doorkeeper
  patched_versions:
  - ">= 2.0.0"
  - "~> 1.4.1"
  severity: high
  package_manager: rubygems
  cve:
  - CVE-2014-8144
  osvdb: 116010
  cvss_v2_score: 6.8
  disclosed_date: 2014-12-18
  created_date: 2014-12-18
  last_modified_date: 2014-12-18
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://groups.google.com/forum/#!topic/ruby-security-ann/5_VqJtNc8jw
- id: rubyadvisory:rubygems:doorkeeper:CVE-2016-6582
  title: Doorkeeper gem does not revoke tokens & uses wrong auth/auth method
  description: |
    Doorkeeper failed to implement OAuth 2.0 Token Revocation (RFC 7009) in the
    following ways:

    1. Public clients making valid, unauthenticated calls to revoke a token
       would not have their token revoked
    2. Requests were not properly authenticating the *client credentials* but
       were, instead, looking at the access token in a second location
    3. Because of 2, the requests were also not authorizing confidential
       clients' ability to revoke a given token. It should only revoke tokens
       that belong to it.

    The security implication is: OAuth 2.0 clients who "log out" a user expect
    to have the corresponding access & refresh tokens revoked, preventing an
    attacker who may have already hijacked the session from continuing to
    impersonate the victim. Because of the bug described above, this is not the
    case. As far as OWASP is concerned, this counts as broken authentication
    design.

    MITRE has assigned CVE-2016-6582 due to the security issues raised. An
    attacker, thanks to 1, can replay a hijacked session after a victim logs
    out/revokes their token. Additionally, thanks to 2 & 3, an attacker via a
    compromised confidential client could "grief" other clients by revoking
    their tokens (albeit this is an exceptionally narrow attack with little
    value).
  affected_package: doorkeeper
  unaffected_versions:
  - "< 1.2.0"
  patched_versions:
  - ">= 4.2.0"
  package_manager: rubygems
  cve:
  - CVE-2016-6582
  disclosed_date: 2016-08-18
  created_date: 2016-08-18
  last_modified_date: 2016-08-18
  credit:
  - Rubysec
  references:
  - https://github.com/doorkeeper-gem/doorkeeper/commit/fb938051777a3c9cb071e96fc66458f8f615bd53
  - https://github.com/rubysec/ruby-advisory-db
  source_url: http://www.openwall.com/lists/oss-security/2016/08/19/2
- id: rubyadvisory:rubygems:doorkeeper:CVE-2018-1000088
  title: Doorkeeper gem has stored XSS on authorization consent view
  description: |
    Stored XSS on the OAuth Client's name will cause users being prompted for
    consent via the "implicit" grant type to execute the XSS payload.

    The XSS attack could gain access to the user's active session, resulting in
    account compromise.

    Any user is susceptible if they click the authorization link for the
    malicious OAuth client. Because of how the links work, a user cannot tell if
    a link is malicious or not without first visiting the page with the XSS
    payload.

    If 3rd parties are allowed to create OAuth clients in the app using
    Doorkeeper, upgrade to the patched versions immediately.

    Additionally there is stored XSS in the native_redirect_uri form element.

    DWF has assigned CVE-2018-1000088.
  affected_package: doorkeeper
  unaffected_versions:
  - "< 2.1.0"
  patched_versions:
  - ">= 4.2.6"
  severity: high
  package_manager: rubygems
  cve:
  - CVE-2018-1000088
  cvss_v3_score: 7.6
  disclosed_date: 2018-02-21
  created_date: 2018-02-21
  last_modified_date: 2018-02-21
  credit:
  - Rubysec
  references:
  - https://github.com/doorkeeper-gem/doorkeeper/issues/969
  - https://github.com/doorkeeper-gem/doorkeeper/issues/970
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://blog.justinbull.ca/cve-2018-1000088-stored-xss-in-doorkeeper/
- id: rubyadvisory:rubygems:doorkeeper:CVE-2018-1000211
  title: Doorkeeper gem does not revoke token for public clients
  description: |
    Any OAuth application that uses public/non-confidential authentication when
    interacting with Doorkeeper is unable to revoke its tokens when calling the
    revocation endpoint.

    A bug in the token revocation API would cause it to attempt to authenticate
    the public OAuth client as if it was a confidential app. Because of this, the
    token is never revoked.

    The impact of this is the access or refresh token is not revoked, leaking
    access to protected resources for the remainder of that token's lifetime.

    If Doorkeeper is used to facilitate public OAuth apps and leverage token
    revocation functionality, upgrade to the patched versions immediately.

    Credit to Roberto Ostinelli for discovery, Justin Bull for the fixes.

    DWF has assigned CVE-2018-1000211.
  affected_package: doorkeeper
  unaffected_versions:
  - "< 4.2.0"
  patched_versions:
  - ">= 4.4.0"
  - ">= 5.0.0.rc2"
  package_manager: rubygems
  cve:
  - CVE-2018-1000211
  disclosed_date: 2018-07-11
  created_date: 2018-07-11
  last_modified_date: 2018-07-11
  credit:
  - Rubysec
  references:
  - https://github.com/doorkeeper-gem/doorkeeper/issues/891
  - https://github.com/doorkeeper-gem/doorkeeper/pull/1119
  - https://github.com/doorkeeper-gem/doorkeeper/pull/1120
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://blog.justinbull.ca/cve-2018-1000211-public-apps-cant-revoke-tokens-in-doorkeeper/
- id: rubyadvisory:rubygems:doorkeeper:CVE-2020-10187
  title: Doorkeeper application secret information disclosure vulnerability
  description: |
    Information disclosure vulnerability. Allows an attacker to see all
    Doorkeeper::Application model attribute values (including secrets) after
    authorizing an application to their user.

    An application is vulnerable if the authorized applications controller is
    enabled (GET /oauth/authorized_applications.json).

    Recommended additional hardening for >= 5.1 is to enable application secrets
    hashing. This would render the exposed secret useless.
  affected_package: doorkeeper
  unaffected_versions:
  - "< 5.0.0"
  patched_versions:
  - ">= 5.3.2"
  - "~> 5.0.3"
  - "~> 5.1.1"
  - "~> 5.2.5"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2020-10187
  cvss_v2_score: 5.5
  cvss_v3_score: 5.4
  disclosed_date: 2020-05-02
  created_date: 2020-05-02
  last_modified_date: 2020-05-02
  credit:
  - Rubysec
  references:
  - https://github.com/doorkeeper-gem/doorkeeper/commit/25d038022c2fcad45af5b73f9d003cf38ff491f6
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://github.com/doorkeeper-gem/doorkeeper/security/advisories/GHSA-j7vx-8mqj-cqp9
- id: rubyadvisory:rubygems:doorkeeper:OSVDB-118830
  title: |
    Doorkeeper Gem for Ruby stores sensitive information
    in production logs
  description: |
    Doorkeeper Gem for Ruby contains a flaw in lib/doorkeeper/engine.rb.
    The issue is due to the program storing sensitive information in
    production logs. This may allow a local attacker to gain access to
    sensitive information.
  affected_package: doorkeeper
  patched_versions:
  - ">= 2.1.2"
  - "~> 1.4.2"
  package_manager: rubygems
  osvdb: 118830
  disclosed_date: 2015-02-10
  created_date: 2015-02-10
  last_modified_date: 2015-02-10
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: http://www.osvdb.org/show/osvdb/118830
- id: snykio:rubygems:doorkeeper:20203
  title: Cross-site request forgery (CSRF)
  description: |
    [`doorkeeper`][1] is an Oauth 2.0 provider for Rails and Grape.

    Affected versions contain a Cross-site request forgery (CSRF)
    vulnerability that allows remote attackers to hijack the user\'s OAuth
    autorization code. Without CSRF protection on its endpoints, Doorkeeper
    exposes a user\'s authorization code with arbitrary scope.



    [1]: https://rubygems.org/gems/doorkeeper
  affected_package: doorkeeper
  vulnerable_versions:
  - "< 1.4.1"
  - "< 2.0.0  >= 1.5"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2014-8144
  cwe:
  - CWE-352
  disclosed_date: 2014-12-17
  created_date: 2014-12-17
  last_modified_date: 2014-12-17
  credit:
  - Phill Baker
  - Sergey Belov
  references:
  - http://rubysec.com/advisories/CVE-2014-8144
  - https://groups.google.com/forum/#!topic/ruby-security-ann/5_VqJtNc8jw
  source_url: https://snyk.io/vuln/SNYK-RUBY-DOORKEEPER-20203
- id: snykio:rubygems:doorkeeper:20206
  title: Sensitive Information Exposure
  description: |
    [`doorkeeper`][1] is an Oauth 2.0 provider for Rails and Grape.

    Affected version store sensitive information in production logs.



    [1]: https://rubygems.org/gems/doorkeeper
  affected_package: doorkeeper
  vulnerable_versions:
  - "<1.4.2"
  - ">=1.5.0  <2.1.2"
  severity: low
  package_manager: rubygems
  cwe:
  - CWE-200
  disclosed_date: 2015-02-09
  created_date: 2015-02-09
  last_modified_date: 2015-02-09
  credit:
  - Unknown
  references:
  - http://rubysec.com/advisories/OSVDB-118830
  - http://www.osvdb.org/show/osvdb/118830
  source_url: https://snyk.io/vuln/SNYK-RUBY-DOORKEEPER-20206
- id: snykio:rubygems:doorkeeper:20272
  title: Incorrect Authentication Implementation
  description: |
    [`doorkeeper`][1] is an Oauth 2.0 provider for Rails and Grape.

    Affected versions incorrectly implement Oauth 2.0 Token Revocation (RFC
    7009). Specifically, public clients making an unauthenticated calls to
    revoke a token would not have their tokens revoked. In addition, a
    compromised confidential client can be used to revoke tokens of other
    users.



    [1]: https://rubygems.org/gems/doorkeeper
  affected_package: doorkeeper
  vulnerable_versions:
  - "< 4.2.0  >= 1.2.0"
  severity: high
  package_manager: rubygems
  cve:
  - CVE-2016-6582
  cwe:
  - CWE-284
  disclosed_date: 2016-08-17
  created_date: 2016-08-17
  last_modified_date: 2016-08-17
  credit:
  - Justin Bull
  references:
  - http://rubysec.com/advisories/CVE-2016-6582
  - http://www.openwall.com/lists/oss-security/2016/08/19/2
  source_url: https://snyk.io/vuln/SNYK-RUBY-DOORKEEPER-20272
- id: snykio:rubygems:doorkeeper:20484
  title: Cross-site Scripting (XSS)
  description: |
    [`doorkeeper`][1] is an OAuth 2 provider for Rails and Grape.

    Affected versions of the package are vulnerable to Cross-site Scripting
    (XSS) via the `OAuth Client's` name. The attacker could gain access to
    the user\'s active session, resulting in account compromise.



    [1]: https://rubygems.org/gems/doorkeeper
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

    You can read more about `Cross-site Scripting (XSS)` on our [blog][1].



    [1]: https://snyk.io/blog/xss-attacks-the-next-wave/
  affected_package: doorkeeper
  vulnerable_versions:
  - "<4.2.6"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2018-1000088
  cwe:
  - CWE-79
  disclosed_date: 2017-05-25
  created_date: 2018-02-21
  last_modified_date: 2018-02-21
  credit:
  - Unknown
  references:
  - https://github.com/doorkeeper-gem/doorkeeper/commit/39916a613b7dcc738aa38f7a17e1de9757bd0754
  - https://github.com/doorkeeper-gem/doorkeeper/pull/970
  - https://github.com/rubysec/ruby-advisory-db/pull/328/commits/b4621c705ba387a09db2f8591249f60f162b3b62
  source_url: https://snyk.io/vuln/SNYK-RUBY-DOORKEEPER-20484
- id: snykio:rubygems:doorkeeper:22044
  title: Insufficient Token Expiration
  description: |
    [doorkeeper][1] is an OAuth 2 provider for Rails and Grape.

    Affected versions of this package are vulnerable to Insufficient Token
    Expiration. All OAuth applications using `public` or `non-confidential`
    authentication when interacting with Doorkeeper would attempt to
    authenticate the public OAuth client as if it were a `confidential` app.
    This would cause the token to not be revoked from the endpoint, and the
    token could be used for the remainder of that token\'s lifetime.



    [1]: https://rubygems.org/gems/doorkeeper
  affected_package: doorkeeper
  vulnerable_versions:
  - "=5.0.0.rc1"
  - ">=4.2.0  <4.4.0"
  severity: high
  package_manager: rubygems
  cve:
  - CVE-2018-1000211
  cwe:
  - CWE-613
  disclosed_date: 2018-07-13
  created_date: 2018-07-19
  last_modified_date: 2018-07-19
  credit:
  - Roberto Ostinelli
  references:
  - https://blog.justinbull.ca/cve-2018-1000211-public-apps-cant-revoke-tokens-in-doorkeeper/
  source_url: https://snyk.io/vuln/SNYK-RUBY-DOORKEEPER-22044
