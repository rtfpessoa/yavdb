---
- id: rubyadvisory:rubygems:actionpack_page-caching:CVE-2020-8159
  title: Arbitrary file write/potential remote code execution in actionpack_page-caching
  description: |
    There is a vulnerability in the actionpack_page-caching gem that allows an attacker
    to write arbitrary files to a web server, potentially resulting in remote code execution
    if the attacker can write unescaped ERB to a view.

    Versions Affected:  All versions of actionpack_page-caching (part of Rails prior to Rails 4.0)
    Not affected:       Applications not using actionpack_page-caching
    Fixed Versions:     actionpack_page-caching >= 1.2.1

    Impact
    ------

    The Action Pack Page Caching gem writes cache files to the file system in
    order for the front end webserver (nginx, Apache, etc) to serve the cached
    file without making a request to the application server.  Paths contain what
    is effectively user input can be used to manipulate the location of the cache
    file.

    For example "/users/123" could be changed to "/users/../../../foo" and this
    will escape the cache directory.  Attackers can use this technique to
    springboard to an RCE if they can write arbitrary ERb to a view folder.

    Impacted code looks like this:

    ```
    class BooksController < ApplicationController
      caches_page :show
    end
    ```

    Where the `show` action of the `BooksController` may be vulnerable.
  affected_package: actionpack_page-caching
  patched_versions:
  - ">= 1.2.1"
  package_manager: rubygems
  cve:
  - CVE-2020-8159
  disclosed_date: 2020-05-06
  created_date: 2020-05-06
  last_modified_date: 2020-05-06
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://groups.google.com/forum/#!topic/rubyonrails-security/CFRVkEytdP8
- id: snykio:rubygems:actionpack_page-caching:568460
  title: Arbitrary File Write
  description: |
    [actionpack\_page-caching][1] is a static page caching for Action Pack
    (removed from core in Rails 4.0)

    Affected versions of this package are vulnerable to Arbitrary File
    Write. It is possible for an attacker to write unescaped ERB to a view,
    and therefore write arbitrary files to a web server, potentially
    resulting in code execution.



    [1]: https://github.com/rails/actionpack-page_caching
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
  affected_package: actionpack_page-caching
  vulnerable_versions:
  - "<1.2.1"
  severity: high
  package_manager: rubygems
  cve:
  - CVE-2020-8159
  cwe:
  - CWE-22
  disclosed_date: 2020-05-07
  created_date: 2020-05-06
  last_modified_date: 2020-05-06
  credit:
  - Unknown
  references:
  - https://github.com/rails/actionpack-page_caching/commit/127da70a559bed4fc573fdb4a6d498a7d5815ce2
  - https://groups.google.com/forum/#!topic/rubyonrails-security/CFRVkEytdP8
  source_url: https://snyk.io/vuln/SNYK-RUBY-ACTIONPACKPAGECACHING-568460
