---
- id: rubyadvisory:rubygems:actionview:CVE-2016-0752
  title: Possible Information Leak Vulnerability in Action View
  description: |
    There is a possible directory traversal and information leak vulnerability in
    Action View. This vulnerability has been assigned the CVE identifier
    CVE-2016-0752.

    Versions Affected:  All.
    Not affected:       None.
    Fixed Versions:     5.0.0.beta1.1, 4.2.5.1, 4.1.14.1, 3.2.22.1

    Impact
    ------
    Applications that pass unverified user input to the `render` method in a
    controller may be vulnerable to an information leak vulnerability.

    Impacted code will look something like this:

    ```ruby
    def index
      render params[:id]
    end
    ```

    Carefully crafted requests can cause the above code to render files from
    unexpected places like outside the application's view directory, and can
    possibly escalate this to a remote code execution attack.

    All users running an affected release should either upgrade or use one of the
    workarounds immediately.

    Releases
    --------
    The FIXED releases are available at the normal locations.

    Workarounds
    -----------
    A workaround to this issue is to not pass arbitrary user input to the `render`
    method.  Instead, verify that data before passing it to the `render` method.

    For example, change this:

    ```ruby
    def index
      render params[:id]
    end
    ```

    To this:

    ```ruby
    def index
      render verify_template(params[:id])
    end

    private
    def verify_template(name)
      # add verification logic particular to your application here
    end
    ```

    Patches
    -------
    To aid users who aren't able to upgrade immediately we have provided patches for
    the two supported release series. They are in git-am format and consist of a
    single changeset.

    * 3-2-render_data_leak.patch - Patch for 3.2 series
    * 4-1-render_data_leak.patch - Patch for 4.1 series
    * 4-2-render_data_leak.patch - Patch for 4.2 series
    * 5-0-render_data_leak.patch - Patch for 5.0 series

    Please note that only the 4.1.x and 4.2.x series are supported at present. Users
    of earlier unsupported releases are advised to upgrade as soon as possible as we
    cannot guarantee the continued availability of security fixes for unsupported
    releases.

    Credits
    -------
    Thanks John Poulin for reporting this!
  affected_package: actionview
  patched_versions:
  - ">= 5.0.0.beta1.1"
  - "~> 4.1.14  >= 4.1.14.1"
  - "~> 4.2.5  >= 4.2.5.1"
  severity: high
  package_manager: rubygems
  cve:
  - CVE-2016-0752
  cvss_v2_score: 5.0
  cvss_v3_score: 7.5
  disclosed_date: 2016-01-25
  created_date: 2016-01-25
  last_modified_date: 2016-01-25
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://groups.google.com/forum/#!topic/rubyonrails-security/335P1DcLG00
- id: rubyadvisory:rubygems:actionview:CVE-2016-2097
  title: Possible Information Leak Vulnerability in Action View
  description: "\nThere is a possible directory traversal and information leak vulnerability
    \nin Action View. This was meant to be fixed on CVE-2016-0752. However the 3.2
    \npatch was not covering all the scenarios. This vulnerability has been \nassigned
    the CVE identifier CVE-2016-2097.\n\nVersions Affected:  3.2.x, 4.0.x, 4.1.x\nNot
    affected:       4.2+\nFixed Versions:     3.2.22.2, 4.1.14.2\n\nImpact \n------
    \nApplications that pass unverified user input to the `render` method in a\ncontroller
    may be vulnerable to an information leak vulnerability.\n\nImpacted code will
    look something like this:\n\n```ruby\ndef index\n  render params[:id]\nend\n```\n\nCarefully
    crafted requests can cause the above code to render files from\nunexpected places
    like outside the application's view directory, and can\npossibly escalate this
    to a remote code execution attack.\n\nAll users running an affected release should
    either upgrade or use one of the\nworkarounds immediately.\n\nReleases \n--------
    \nThe FIXED releases are available at the normal locations. \n\nWorkarounds \n-----------
    \nA workaround to this issue is to not pass arbitrary user input to the `render`\nmethod.
    Instead, verify that data before passing it to the `render` method.\n\nFor example,
    change this:\n\n```ruby\ndef index\n  render params[:id]\nend\n```\n\nTo this:\n\n```ruby\ndef
    index\n  render verify_template(params[:id])\nend\n\nprivate\ndef verify_template(name)\n
    \ # add verification logic particular to your application here\nend\n```\n\nPatches
    \n------- \nTo aid users who aren't able to upgrade immediately we have provided
    patches \nfor it. It is in git-am format and consist of a single changeset.\n\n*
    3-2-render_data_leak_2.patch - Patch for 3.2 series\n* 4-1-render_data_leak_2.patch
    - Patch for 4.1 series\n\nCredits \n------- \nThanks to both Jyoti Singh and Tobias
    Kraze from makandra for reporting this \nand working with us in the patch!\n"
  affected_package: actionview
  unaffected_versions:
  - ">= 4.2.0"
  patched_versions:
  - "~> 4.1.14  >= 4.1.14.2"
  package_manager: rubygems
  cve:
  - CVE-2016-2097
  disclosed_date: 2016-02-29
  created_date: 2016-02-29
  last_modified_date: 2016-02-29
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://groups.google.com/forum/#!topic/rubyonrails-security/ddY6HgqB2z4
- id: rubyadvisory:rubygems:actionview:CVE-2016-6316
  title: Possible XSS Vulnerability in Action View
  description: |
    There is a possible XSS vulnerability in Action View.  Text declared as "HTML
    safe" will not have quotes escaped when used as attribute values in tag
    helpers.

    Impact
    ------

    Text declared as "HTML safe" when passed as an attribute value to a tag helper
    will not have quotes escaped which can lead to an XSS attack.  Impacted code
    looks something like this:

    ```ruby
    content_tag(:div, "hi", title: user_input.html_safe)
    ```

    Some helpers like the `sanitize` helper will automatically mark strings as
    "HTML safe", so impacted code could also look something like this:

    ```ruby
    content_tag(:div, "hi", title: sanitize(user_input))
    ```

    All users running an affected release should either upgrade or use one of the
    workarounds immediately.

    Workarounds
    -----------
    You can work around this issue by either *not* marking arbitrary user input as
    safe, or by manually escaping quotes like this:

    ```ruby
    def escape_quotes(value)
      value.gsub(/"/, '&quot;'.freeze)
    end

    content_tag(:div, "hi", title: escape_quotes(sanitize(user_input)))
    ```
  affected_package: actionview
  unaffected_versions:
  - "< 3.0.0"
  patched_versions:
  - ">= 5.0.0.1"
  - "~> 4.2.7.1"
  - "~> 4.2.8"
  package_manager: rubygems
  cve:
  - CVE-2016-6316
  disclosed_date: 2016-08-11
  created_date: 2016-08-11
  last_modified_date: 2016-08-11
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://groups.google.com/forum/#!topic/rubyonrails-security/I-VWr034ouk
- id: rubyadvisory:rubygems:actionview:CVE-2019-5418
  title: File Content Disclosure in Action View
  description: |
    There is a possible file content disclosure vulnerability in Action View. This
    vulnerability has been assigned the CVE identifier CVE-2019-5418.

    Versions Affected:  All.
    Not affected:       None.
    Fixed Versions:     6.0.0.beta3, 5.2.2.1, 5.1.6.2, 5.0.7.2, 4.2.11.1

    Impact
    ------
    There is a possible file content disclosure vulnerability in Action View.
    Specially crafted accept headers in combination with calls to `render file:`
    can cause arbitrary files on the target server to be rendered, disclosing the
    file contents.

    The impact is limited to calls to `render` which render file contents without
    a specified accept format.  Impacted code in a controller looks something like
    this:

    ```
    class UserController < ApplicationController
      def index
        render file: "#{Rails.root}/some/file"
      end
    end
    ```

    Rendering templates as opposed to files is not impacted by this vulnerability.

    All users running an affected release should either upgrade or use one of the
    workarounds immediately.

    Releases
    --------
    The 6.0.0.beta3, 5.2.2.1, 5.1.6.2, 5.0.7.2, and 4.2.11.1 releases are
    available at the normal locations.

    Workarounds
    -----------
    This vulnerability can be mitigated by specifying a format for file rendering,
    like this:

    ```
    class UserController < ApplicationController
      def index
        render file: "#{Rails.root}/some/file", formats: [:html]
      end
    end
    ```

    In summary, impacted calls to `render` look like this:

    ```
    render file: "#{Rails.root}/some/file"
    ```

    The vulnerability can be mitigated by changing to this:

    ```
    render file: "#{Rails.root}/some/file", formats: [:html]
    ```

    Other calls to `render` are not impacted.

    Alternatively, the following monkey patch can be applied in an initializer:

    ```
    $ cat config/initializers/formats_filter.rb
    # frozen_string_literal: true

    ActionDispatch::Request.prepend(Module.new do
      def formats
        super().select do |format|
          format.symbol || format.ref == "*/*"
        end
      end
    end)
    ```

    Credits
    -------
    Thanks to John Hawthorn <john@hawthorn.email> of GitHub
  affected_package: actionview
  patched_versions:
  - ">= 6.0.0.beta3"
  - "~> 4.2.11  >= 4.2.11.1"
  - "~> 5.0.7  >= 5.0.7.2"
  - "~> 5.1.6  >= 5.1.6.2"
  - "~> 5.2.2  >= 5.2.2.1"
  package_manager: rubygems
  cve:
  - CVE-2019-5418
  disclosed_date: 2019-03-13
  created_date: 2019-03-13
  last_modified_date: 2019-03-13
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://groups.google.com/forum/#!topic/rubyonrails-security/pFRKI96Sm8Q
- id: rubyadvisory:rubygems:actionview:CVE-2019-5419
  title: Denial of Service Vulnerability in Action View
  description: "There is a potential denial of service vulnerability in actionview.\nThis
    vulnerability has been assigned the CVE identifier CVE-2019-5419.\n\nImpact\n------\nSpecially
    crafted accept headers can cause the Action View template location\ncode to consume
    100% CPU, causing the server unable to process requests.  This\nimpacts all Rails
    applications that render views.\n\nAll users running an affected release should
    either upgrade or use one of the\nworkarounds immediately.\n\nWorkarounds\n-----------\nThis
    vulnerability can be mitigated by wrapping `render` calls with\n`respond_to` blocks.
    \ For example, the following example is vulnerable:\n\n```\nclass UserController
    < ApplicationController\n  def index\n    render \"index\"\n  end\nend\n```\n\nBut
    the following code is not vulnerable:\n\n```\nclass UserController < ApplicationController\n
    \ def index\n    respond_to |format|\n      format.html { render \"index\" }\n
    \   end\n  end\nend\n```\n\nImplicit rendering is impacted, so this code is vulnerable:\n\n```\nclass
    UserController < ApplicationController\n  def index\n  end\nend\n```\n\nBut can
    be changed this this:\n\n```\nclass UserController < ApplicationController\n  def
    index\n    respond_to |format|\n      format.html { render \"index\" }\n    end\n
    \ end\nend\n```\n\nAlternatively to specifying the format, the following monkey
    patch can be\napplied in an initializer:\n\n```\n$ cat config/initializers/formats_filter.rb\n#
    frozen_string_literal: true\n\nActionDispatch::Request.prepend(Module.new do\n
    \ def formats\n    super().select do |format|\n      format.symbol || format.ref
    == \"*/*\"\n    end\n  end\nend)\n```\n\nCredits \n------- \nThanks to John Hawthorn
    <john@hawthorn.email> of GitHub \n"
  affected_package: actionview
  patched_versions:
  - ">= 6.0.0.beta3"
  - "~> 4.2.11  >= 4.2.11.1"
  - "~> 5.0.7  >= 5.0.7.2"
  - "~> 5.1.6  >= 5.1.6.2"
  - "~> 5.2.2  >= 5.2.2.1"
  package_manager: rubygems
  cve:
  - CVE-2019-5419
  disclosed_date: 2019-03-13
  created_date: 2019-03-13
  last_modified_date: 2019-03-13
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://groups.google.com/forum/#!topic/rubyonrails-security/GN7w9fFAQeI
- id: rubyadvisory:rubygems:actionview:CVE-2020-5267
  title: Possible XSS vulnerability in ActionView
  description: |
    There is a possible XSS vulnerability in ActionView's JavaScript literal
    escape helpers.  Views that use the `j` or `escape_javascript` methods
    may be susceptible to XSS attacks.

    Versions Affected:  All.
    Not affected:       None.
    Fixed Versions:     6.0.2.2, 5.2.4.2

    Impact
    ------
    There is a possible XSS vulnerability in the `j` and `escape_javascript`
    methods in ActionView.  These methods are used for escaping JavaScript string
    literals.  Impacted code will look something like this:

    ```erb
    <script>let a = `<%= j unknown_input %>`</script>
    ```

    or

    ```erb
    <script>let a = `<%= escape_javascript unknown_input %>`</script>
    ```

    Releases
    --------
    The 6.0.2.2 and 5.2.4.2 releases are available at the normal locations.

    Workarounds
    -----------
    For those that can't upgrade, the following monkey patch may be used:

    ```ruby
    ActionView::Helpers::JavaScriptHelper::JS_ESCAPE_MAP.merge!(
      {
        "`" => "\\`",
        "$" => "\\$"
      }
    )

    module ActionView::Helpers::JavaScriptHelper
      alias :old_ej :escape_javascript
      alias :old_j :j

      def escape_javascript(javascript)
        javascript = javascript.to_s
        if javascript.empty?
          result = ""
        else
          result = javascript.gsub(/(\\|<\/|\r\n|\342\200\250|\342\200\251|[\n\r"']|[`]|[$])/u, JS_ESCAPE_MAP)
        end
        javascript.html_safe? ? result.html_safe : result
      end

      alias :j :escape_javascript
    end
    ```
  affected_package: actionview
  patched_versions:
  - ">= 6.0.2.2"
  - "~> 5.2.4  >= 5.2.4.2"
  package_manager: rubygems
  cve:
  - CVE-2020-5267
  disclosed_date: 2020-03-19
  created_date: 2020-03-19
  last_modified_date: 2020-03-19
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://groups.google.com/forum/#!topic/rubyonrails-security/55reWMM_Pg8
- id: rubyadvisory:rubygems:actionview:CVE-2020-8163
  title: Potential remote code execution of user-provided local names in ActionView
  description: |
    There was a vulnerability in versions of Rails prior to 5.0.1 that would
    allow an attacker who controlled the `locals` argument of a `render` call.

    Versions Affected:  rails < 5.0.1
    Not affected:       Applications that do not allow users to control the names of locals.
    Fixed Versions:     4.2.11.2

    Impact
    ------

    In the scenario where an attacker might be able to control the name of a
    local passed into `render`, they can acheive remote code execution.

    Workarounds
    -----------

    Until such time as the patch can be applied, application developers should
    ensure that all user-provided local names are alphanumeric.
  affected_package: actionview
  patched_versions:
  - ">= 4.2.11.2"
  package_manager: rubygems
  cve:
  - CVE-2020-8163
  disclosed_date: 2020-05-15
  created_date: 2020-05-15
  last_modified_date: 2020-05-15
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://groups.google.com/forum/#!topic/rubyonrails-security/hWuKcHyoKh0
- id: rubyadvisory:rubygems:actionview:CVE-2020-8167
  title: CSRF Vulnerability in rails-ujs
  description: |
    There is an vulnerability in rails-ujs that allows attackers to send
    CSRF tokens to wrong domains.

    Versions Affected:  rails <= 6.0.3
    Not affected:       Applications which don't use rails-ujs.
    Fixed Versions:     rails >= 5.2.4.3, rails >= 6.0.3.1

    Impact
    ------

    This is a regression of CVE-2015-1840.

    In the scenario where an attacker might be able to control the href attribute of an anchor tag or
    the action attribute of a form tag that will trigger a POST action, the attacker can set the
    href or action to a cross-origin URL, and the CSRF token will be sent.

    Workarounds
    -----------

    To work around this problem, change code that allows users to control the href attribute of an anchor
    tag or the action attribute of a form tag to filter the user parameters.

    For example, code like this:

        link_to params

    to code like this:

        link_to filtered_params

        def filtered_params
          # Filter just the parameters that you trust
        end
  affected_package: actionview
  patched_versions:
  - ">= 6.0.3.1"
  - "~> 5.2.4.3"
  package_manager: rubygems
  cve:
  - CVE-2020-8167
  disclosed_date: 2020-05-18
  created_date: 2020-05-18
  last_modified_date: 2020-05-18
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://groups.google.com/forum/#!topic/rubyonrails-security/x9DixQDG9a0
- id: snykio:rubygems:actionview:173783
  title: Denial of Service (DoS)
  description: "[actionview][1] is a simple, battle-tested conventions and helpers
    for\nbuilding web pages.\n\nAffected versions of this package are vulnerable to
    Denial of Service\n(DoS). Specially crafted accept headers can cause the Action
    View\ntemplate location code to consume 100% CPU, causing the server to be\nunable
    to process requests. It impacts all `Rails` applications that\nrender views.\n\n\n\n[1]:
    https://rubygems.org/gems/actionview\n\\nDenial of Service (DoS) describes a family
    of attacks, all aimed at\nmaking a system inaccessible to its original and legitimate
    users. There\nare many types of DoS attacks, ranging from trying to clog the network\npipes
    to the system by generating a large volume of traffic from many\nmachines (a Distributed
    Denial of Service - DDoS - attack) to sending\ncrafted requests that cause a system
    to crash or take a disproportional\namount of time to process.\n\nThe Regular
    expression Denial of Service (ReDoS) is a type of Denial of\nService attack. Regular
    expressions are incredibly powerful, but they\naren\\'t very intuitive and can
    ultimately end up making it easy for\nattackers to take your site down.\n\nLet’s
    take the following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n{:
    .language-js}\n\nThis regular expression accomplishes the following:\n\n* `A`
    The string must start with the letter \\'A\\'\n* `(B|C+)+` The string must then
    follow the letter A with either the\n  letter \\'B\\' or some number of occurrences
    of the letter \\'C\\' (the\n  `+` matches one or more times). The `+` at the end
    of this section\n  states that we can look for one or more matches of this section.\n*
    `D` Finally, we ensure this section of the string ends with a \\'D\\'\n\nThe expression
    would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt
    most cases, it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n
    \   $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s
    user 0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n{: .language-bash}\n\nThe entire
    process of testing it against a 30 characters long string\ntakes around ~52ms.
    But when given an invalid string, it takes nearly\ntwo seconds to complete the
    test, over ten times as long as it took to\ntest a valid string. The dramatic
    difference is due to the way regular\nexpressions get evaluated.\n\nMost Regex
    engines will work very similarly (with minor differences).\nThe engine will match
    the first possible way to accept the current\ncharacter and proceed to the next
    one. If it then fails to match the\nnext one, it will backtrack and see if there
    was another way to digest\nthe previous character. If it goes too far down the
    rabbit hole only to\nfind out the string doesn’t match in the end, and if many
    characters\nhave multiple valid regex paths, the number of backtracking steps
    can\nbecome very large, resulting in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s
    look at how our expression runs into this problem, using a\nshorter string: \\\"ACCCX\\\".
    While it seems fairly straightforward, there\nare still four different ways that
    the engine could match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.
    \ C+C+C.\n\nThe engine has to try each of those combinations to see if any of
    them\npotentially match against the expression. When you combine that with the\nother
    steps the engine must take, we can use [RegEx 101 debugger][1] to\nsee the engine
    has to take a total of 38 steps before it can determine\nthe string doesn\\'t
    match.\n\nFrom there, the number of steps the engine must use to validate a string\njust
    continues to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n|
    ACCCX | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX
    | 14 | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to
    take over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n"
  affected_package: actionview
  vulnerable_versions:
  - ">=4.2.11  <4.2.11.1"
  - ">=5.0.7  <5.0.7.2"
  - ">=5.1.6  <5.1.6.2"
  - ">=5.2.2  <5.2.2.1"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2019-5419
  cwe:
  - CWE-400
  disclosed_date: 2019-03-13
  created_date: 2019-03-13
  last_modified_date: 2019-03-13
  credit:
  - John Hawthorn
  references:
  - https://groups.google.com/forum/#!topic/rubyonrails-security/GN7w9fFAQeI
  source_url: https://snyk.io/vuln/SNYK-RUBY-ACTIONVIEW-173783
- id: snykio:rubygems:actionview:173784
  title: Arbitrary File Read
  description: |
    [actionview][1] is a simple, battle-tested conventions and helpers for
    building web pages.

    Affected versions of this package are vulnerable to Arbitrary File Read.
    Specially crafted accept headers in combination with calls to `render
    file:` could cause arbitrary files on the target server to be rendered,
    disclosing the file contents.



    [1]: https://rubygems.org/gems/actionview
  affected_package: actionview
  vulnerable_versions:
  - ">=4.2.11  <4.2.11.1"
  - ">=5.0.7  <5.0.7.2"
  - ">=5.1.6  <5.1.6.2"
  - ">=5.2.2  <5.2.2.1"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2019-5418
  cwe:
  - CWE-538
  disclosed_date: 2019-03-13
  created_date: 2019-03-13
  last_modified_date: 2019-03-13
  credit:
  - John Hawthorn
  references:
  - https://groups.google.com/forum/#!topic/rubyonrails-security/pFRKI96Sm8Q
  - https://www.exploit-db.com/exploits/46585
  source_url: https://snyk.io/vuln/SNYK-RUBY-ACTIONVIEW-173784
- id: snykio:rubygems:actionview:20262
  title: Information Exposure
  description: "[`actionview`][1] is a conventions and helpers gem for building web\npages.
    Affected versions of this Gem are vulnerable to directory\ntraversal and information
    leaks.\n\n\n\n[1]: https://rubygems.org/gems/actionview\n\\nApplications that
    pass unverified user input to the `render` method in a\ncontroller may be vulnerable
    to an information leak vulnerability.\n\nImpacted code will look something like
    this:\n\n    def index\n      render params[:id]\n    end\n{: .language-ruby}\n\nCarefully
    crafted requests can cause the above code to render files from\nunexpected places
    like outside the application\\'s view directory, and\ncan possibly escalate this
    to a remote code execution attack.\n\nAll users running an affected release should
    either upgrade or use one\nof the workarounds immediately.\n\nA workaround to
    this issue is to not pass arbitrary user input to the\n`render` method. Instead,
    verify that data before passing it to the\n`render` method.\n\nFor example, change
    this:\n\n    def index\n      render params[:id]\n    end\n{: .language-ruby}\n\nTo
    this:\n\n    def index\n      render verify_template(params[:id])\n    end\n    \n
    \   private\n    def verify_template(name)\n      # add verification logic particular
    to your application here\n    end\n{: .language-ruby}\n\n"
  affected_package: actionview
  vulnerable_versions:
  - "<3.2.22.1"
  - ">=3.2.23  <4.1.14.1"
  - ">=4.2.0  <4.2.5.1"
  - ">=4.3.0  <5.0.0"
  severity: high
  package_manager: rubygems
  cve:
  - CVE-2016-0752
  cwe:
  - CWE-200
  disclosed_date: 2016-01-24
  created_date: 2016-01-24
  last_modified_date: 2016-01-24
  credit:
  - John Poulin
  references:
  - http://rubysec.com/advisories/CVE-2016-0752
  - https://groups.google.com/forum/#!topic/rubyonrails-security/335P1DcLG00
  source_url: https://snyk.io/vuln/SNYK-RUBY-ACTIONVIEW-20262
- id: snykio:rubygems:actionview:20263
  title: Information Exposure
  description: "[`actionview`][1] is a conventions and helpers gem for building web\npages.
    Affected versions of this Gem are vulnerable to directory\ntraversal and information
    leaks. This was meant to be fixed on\n[CVE-2016-0752][2] but the 3.2 patch was
    not covering all the scenarios.\n\n\n\n[1]: https://rubygems.org/gems/actionview\n[2]:
    https://snyk.io/vuln/SNYK-RUBY-ACTIONVIEW-20262\n\\nApplications that pass unverified
    user input to the `render` method in a\ncontroller may be vulnerable to an information
    leak vulnerability.\n\nImpacted code will look something like this:\n\n    def
    index\n      render params[:id]\n    end\n{: .language-ruby}\n\nCarefully crafted
    requests can cause the above code to render files from\nunexpected places like
    outside the application\\'s view directory, and\ncan possibly escalate this to
    a remote code execution attack.\n\nAll users running an affected release should
    either upgrade or use one\nof the workarounds immediately.\n\nA workaround to
    this issue is to not pass arbitrary user input to the\n`render` method. Instead,
    verify that data before passing it to the\n`render` method.\n\nFor example, change
    this:\n\n    def index\n      render params[:id]\n    end\n{: .language-ruby}\n\nTo
    this:\n\n    def index\n      render verify_template(params[:id])\n    end\n    \n
    \   private\n    def verify_template(name)\n      # add verification logic particular
    to your application here\n    end\n{: .language-ruby}\n\n"
  affected_package: actionview
  vulnerable_versions:
  - "<3.2.22.2"
  - ">=3.2.23  <4.1.14.2"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2016-2097
  cwe:
  - CWE-200
  disclosed_date: 2016-02-28
  created_date: 2016-02-28
  last_modified_date: 2016-02-28
  credit:
  - Jyoti Singh and Tobias Kraze
  references:
  - http://rubysec.com/advisories/CVE-2016-2097
  - https://groups.google.com/forum/#!topic/rubyonrails-security/ddY6HgqB2z4
  source_url: https://snyk.io/vuln/SNYK-RUBY-ACTIONVIEW-20263
- id: snykio:rubygems:actionview:20271
  title: Cross-site Scripting (XSS)
  description: "[`actionview`][1] is a conventions and helpers gem for building web\npages.\n\nAffected
    versions of this Gem are vulnerable to Cross-site Scripting\n(XSS) attacks via
    unescaped quotes when used as attribute values in tag\nhelpers.\n\nText declared
    as \\\"HTML safe\\\" when passed as an attribute value to a\ntag helper will not
    have quotes escaped which can lead to a Cross-site\nScripting (XSS) attack. Impacted
    code looks something like this:\n\n    content_tag(:div, \"hi\", title: user_input.html_safe)\n{:
    .language-ruby}\n\nSome helpers like the `sanitize` helper will automatically
    mark strings\nas \\\"HTML safe\\\", so impacted code could also look something
    like this:\n\n    content_tag(:div, \"hi\", title: sanitize(user_input))\n{: .language-ruby}\n\nAll
    users running an affected release should either upgrade or use one\nof the workarounds
    immediately.\n\nYou can work around this issue by either *not* marking arbitrary
    user\ninput as safe, or by manually escaping quotes like this:\n\n    def escape_quotes(value)\n
    \     value.gsub(/\"/, '&quot;'.freeze)\n    end\n    \n    content_tag(:div,
    \"hi\", title: escape_quotes(sanitize(user_input)))\n{: .language-ruby}\n\n\n\n[1]:
    https://rubygems.org/gems/actionview\n\\nA cross-site scripting attack occurs
    when the attacker tricks a\nlegitimate web-based application or site to accept
    a request as\noriginating from a trusted source.\n\nThis is done by escaping the
    context of the web application; the web\napplication then delivers that data to
    its users along with other\ntrusted dynamic content, without validating it. The
    browser unknowingly\nexecutes malicious script on the client side (through client-side\nlanguages;
    usually JavaScript or HTML) in order to perform actions that\nare otherwise typically
    blocked by the browser’s Same Origin Policy.\n\nֿInjecting malicious code is the
    most prevalent manner by which XSS is\nexploited; for this reason, escaping characters
    in order to prevent this\nmanipulation is the top method for securing code against
    this\nvulnerability.\n\nEscaping means that the application is coded to mark key
    characters, and\nparticularly key characters included in user input, to prevent
    those\ncharacters from being interpreted in a dangerous context. For example,\nin
    HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in\norder to be
    interpreted and displayed as themselves in text, while\nwithin the code itself,
    they are used for HTML tags. If malicious\ncontent is injected into an application
    that escapes special characters\nand that malicious content uses `<` and `>` as
    HTML tags, those\ncharacters are nonetheless not interpreted as HTML tags by the
    browser\nif they’ve been correctly escaped in the application code and in this\nway
    the attempted attack is diverted.\n\nThe most prominent use of XSS is to steal
    cookies (source: OWASP\nHttpOnly) and hijack user sessions, but XSS exploits have
    been used to\nexpose sensitive information, enable access to privileged services
    and\nfunctionality and deliver malware.\n\n### Types of attacks   {#types-of-attacks}\n\nThere
    are a few methods by which XSS can be manipulated:\n\n| Type | Origin | Description
    |\n|----------\n| **Stored** | Server | The malicious code is inserted in the
    application (usually as a link) by the attacker. The code is activated every time
    a user clicks the link. |\n| **Reflected** | Server | The attacker delivers a
    malicious link externally from the vulnerable web site application to a user.
    When clicked, malicious code is sent to the vulnerable web site, which reflects
    the attack back to the user’s browser. |\n| **DOM-based** | Client | The attacker
    forces the user’s browser to render a malicious page. The data in the page itself
    delivers the cross-site scripting data. |\n| **Mutated** |  | The attacker injects
    code that appears safe, but is then rewritten and modified by the browser, while
    parsing the markup. An example is rebalancing unclosed quotation marks or even
    adding quotation marks to unquoted parameters. |\n\n### Affected environments
    \  {#affected-environments}\n\nThe following environments are susceptible to an
    XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n###
    How to prevent   {#how-to-prevent}\n\nThis section describes the top best practices
    designed to specifically\nprotect your code:\n\n* Sanitize data input in an HTTP
    request before reflecting it back,\n  ensuring all data is validated, filtered
    or escaped before echoing\n  anything back to the user, such as the values of
    query parameters\n  during searches.\n* Convert special characters such as `?`,
    `&`, `/`, `<`, `>` and spaces\n  to their respective HTML or URL encoded equivalents.\n*
    Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n*
    Detect simultaneous logins, including those from two separate IP\n  addresses,
    and invalidate those sessions.\n* Use and enforce a Content Security Policy (source:
    Wikipedia) to\n  disable any features that might be manipulated for an XSS attack.\n*
    Read the documentation for any of the libraries referenced in your\n  code to
    understand which elements allow for embedded HTML.\n\n"
  affected_package: actionview
  vulnerable_versions:
  - ">=3.0.0  <3.2.22.3"
  - ">=3.2.23  <4.2.7.1"
  - ">=5.0.0.0  <5.0.0.1"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2016-6316
  cwe:
  - CWE-79
  disclosed_date: 2016-08-10
  created_date: 2016-08-10
  last_modified_date: 2016-08-10
  credit:
  - Andrew Carpenter
  references:
  - https://groups.google.com/forum/#!topic/rubyonrails-security/I-VWr034ouk
  - https://nvd.nist.gov/vuln/detail/CVE-2016-6316
  - https://www.debian.org/security/2016/dsa-3651
  source_url: https://snyk.io/vuln/SNYK-RUBY-ACTIONVIEW-20271
- id: snykio:rubygems:actionview:560837
  title: Cross-site Scripting (XSS)
  description: "[actionview][1] is a simple, battle-tested conventions and helpers
    for\nbuilding web pages.\n\nAffected versions of this package are vulnerable to
    Cross-site Scripting\n(XSS) in the `j` and `escape_javascript` methods. These
    methods are used\nfor escaping JavaScript string literals.\n\n### Proof Of Concept/Example
    \  {#proof-of-conceptexample}\n\n    <script>let a = `<%= j unknown_input %>`</script>\n
    \   \n    <script>let a = `<%= escape_javascript unknown_input %>`</script>\n{:
    .language-erb}\n\n\n\n[1]: https://rubygems.org/gems/actionview\n\\nA cross-site
    scripting attack occurs when the attacker tricks a\nlegitimate web-based application
    or site to accept a request as\noriginating from a trusted source.\n\nThis is
    done by escaping the context of the web application; the web\napplication then
    delivers that data to its users along with other\ntrusted dynamic content, without
    validating it. The browser unknowingly\nexecutes malicious script on the client
    side (through client-side\nlanguages; usually JavaScript or HTML) in order to
    perform actions that\nare otherwise typically blocked by the browser’s Same Origin
    Policy.\n\nֿInjecting malicious code is the most prevalent manner by which XSS
    is\nexploited; for this reason, escaping characters in order to prevent this\nmanipulation
    is the top method for securing code against this\nvulnerability.\n\nEscaping means
    that the application is coded to mark key characters, and\nparticularly key characters
    included in user input, to prevent those\ncharacters from being interpreted in
    a dangerous context. For example,\nin HTML, `<` can be coded as `&lt`; and `>`
    can be coded as `&gt`; in\norder to be interpreted and displayed as themselves
    in text, while\nwithin the code itself, they are used for HTML tags. If malicious\ncontent
    is injected into an application that escapes special characters\nand that malicious
    content uses `<` and `>` as HTML tags, those\ncharacters are nonetheless not interpreted
    as HTML tags by the browser\nif they’ve been correctly escaped in the application
    code and in this\nway the attempted attack is diverted.\n\nThe most prominent
    use of XSS is to steal cookies (source: OWASP\nHttpOnly) and hijack user sessions,
    but XSS exploits have been used to\nexpose sensitive information, enable access
    to privileged services and\nfunctionality and deliver malware.\n\n### Types of
    attacks   {#types-of-attacks}\n\nThere are a few methods by which XSS can be manipulated:\n\n|
    Type | Origin | Description |\n|----------\n| **Stored** | Server | The malicious
    code is inserted in the application (usually as a link) by the attacker. The code
    is activated every time a user clicks the link. |\n| **Reflected** | Server |
    The attacker delivers a malicious link externally from the vulnerable web site
    application to a user. When clicked, malicious code is sent to the vulnerable
    web site, which reflects the attack back to the user’s browser. |\n| **DOM-based**
    | Client | The attacker forces the user’s browser to render a malicious page.
    The data in the page itself delivers the cross-site scripting data. |\n| **Mutated**
    |  | The attacker injects code that appears safe, but is then rewritten and modified
    by the browser, while parsing the markup. An example is rebalancing unclosed quotation
    marks or even adding quotation marks to unquoted parameters. |\n\n### Affected
    environments   {#affected-environments}\n\nThe following environments are susceptible
    to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n###
    How to prevent   {#how-to-prevent}\n\nThis section describes the top best practices
    designed to specifically\nprotect your code:\n\n* Sanitize data input in an HTTP
    request before reflecting it back,\n  ensuring all data is validated, filtered
    or escaped before echoing\n  anything back to the user, such as the values of
    query parameters\n  during searches.\n* Convert special characters such as `?`,
    `&`, `/`, `<`, `>` and spaces\n  to their respective HTML or URL encoded equivalents.\n*
    Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n*
    Detect simultaneous logins, including those from two separate IP\n  addresses,
    and invalidate those sessions.\n* Use and enforce a Content Security Policy (source:
    Wikipedia) to\n  disable any features that might be manipulated for an XSS attack.\n*
    Read the documentation for any of the libraries referenced in your\n  code to
    understand which elements allow for embedded HTML.\n\n"
  affected_package: actionview
  vulnerable_versions:
  - "<5.2.4.2"
  - ">=6.0.0  <6.0.2.2"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2020-5267
  cwe:
  - CWE-79
  disclosed_date: 2020-03-20
  created_date: 2020-03-20
  last_modified_date: 2020-03-20
  credit:
  - Chef Secure
  references:
  - https://groups.google.com/forum/#!topic/rubyonrails-security/55reWMM_Pg8
  source_url: https://snyk.io/vuln/SNYK-RUBY-ACTIONVIEW-560837
- id: snykio:rubygems:actionview:569156
  title: Remote Code Execution (RCE)
  description: |
    [actionview][1] is a simple, battle-tested conventions and helpers for
    building web pages.

    Affected versions of this package are vulnerable to Remote Code
    Execution (RCE). An attacker might be able to control the `locals`
    argument of a `render` call.

    **Note:** It doesn\'t affect applications that don\'t allow users to
    control the names of locals.



    [1]: https://rubygems.org/gems/actionview
  affected_package: actionview
  vulnerable_versions:
  - "<4.2.11.3"
  - ">=5.0.0  <5.0.1"
  severity: high
  package_manager: rubygems
  cve:
  - CVE-2020-8163
  cwe:
  - CWE-94
  disclosed_date: 2020-05-17
  created_date: 2020-05-17
  last_modified_date: 2020-05-17
  credit:
  - Unknown
  references:
  - https://groups.google.com/forum/#!topic/rubyonrails-security/hWuKcHyoKh0
  source_url: https://snyk.io/vuln/SNYK-RUBY-ACTIONVIEW-569156
- id: snykio:rubygems:actionview:569601
  title: Cross-site Request Forgery (CSRF)
  description: |
    [actionview][1] is a simple, battle-tested conventions and helpers for
    building web pages.

    Affected versions of this package are vulnerable to Cross-site Request
    Forgery (CSRF). An attacker might be able to set the href attribute of
    an anchor tag or the action attribute of a form tag that will trigger a
    POST action to a cross-origin URL.

    This is a regression of CVE-2015-1840.



    [1]: https://rubygems.org/gems/actionview
  affected_package: actionview
  vulnerable_versions:
  - "<5.2.4.3"
  - ">=6.0.0  <6.0.3.1"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2020-8167
  cwe:
  - CWE-352
  disclosed_date: 2020-05-19
  created_date: 2020-05-19
  last_modified_date: 2020-05-19
  credit:
  - Unknown
  references:
  - https://github.com/rails/rails/commit/a20fbf9bc52e9596a675c1071ab3fe052ac4f0dc
  - https://groups.google.com/forum/#!topic/rubyonrails-security/x9DixQDG9a0
  source_url: https://snyk.io/vuln/SNYK-RUBY-ACTIONVIEW-569601
- id: snykio:rubygems:actionview:632514
  title: Cross-site Scripting (XSS)
  description: |+
    [actionview][1] is a simple, battle-tested conventions and helpers for
    building web pages.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). Views that allow the user to control the default (not found)
    value of the `t` and `translate` helpers could be susceptible to XSS
    attacks. When an HTML-unsafe string is passed as the default for a
    missing translation key [named `html` or ending in `_html`][2], the
    default string is incorrectly marked as HTML-safe and not escaped.
    Vulnerable code may look like the following examples:

        <%
        # The welcome_html translation is not defined for the current locale:
        %>
        <%= t("welcome_html", default: untrusted_user_controlled_string) %>
        <%# Neither the title.html translation nor the missing.html translation is defined for the current locale: %>
        <%= t("title.html", default: [:"missing.html", untrusted_user_controlled_string]) %>



    [1]: https://rubygems.org/gems/actionview
    [2]: https://guides.rubyonrails.org/i18n.html#using-safe-html-translations
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: actionview
  vulnerable_versions:
  - "<5.2.4.4"
  - ">=6.0.0.0  <6.0.3.3"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2020-15169
  cwe:
  - CWE-79
  disclosed_date: 2020-09-10
  created_date: 2020-09-10
  last_modified_date: 2020-09-10
  credit:
  - Unknown
  references:
  - https://github.com/rails/rails/commit/aaa7ab1320330b3c4fa8f0fbda716dcfa21e3d65
  - https://groups.google.com/g/rubyonrails-security/c/b-C9kSGXYrc
  source_url: https://snyk.io/vuln/SNYK-RUBY-ACTIONVIEW-632514
