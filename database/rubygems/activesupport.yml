---
- id: rubyadvisory:rubygems:activesupport:CVE-2012-1098
  title: Ruby on Rails SafeBuffer Object [] Direct Manipulation XSS
  description: |
    Ruby on Rails contains a flaw that allows a remote cross-site scripting (XSS)
    attack. This flaw exists because athe application does not validate direct
    manipulations of SafeBuffer objects via '[]' and other methods. This may
    allow a user to create a specially crafted request that would execute
    arbitrary script code in a user's browser within the trust relationship
    between their browser and the server.
  affected_package: activesupport
  unaffected_versions:
  - "< 3.0.0"
  patched_versions:
  - ">= 3.2.2"
  - "~> 3.0.12"
  - "~> 3.1.4"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2012-1098
  osvdb: 79726
  cvss_v2_score: 4.3
  disclosed_date: 2012-03-01
  created_date: 2012-03-01
  last_modified_date: 2012-03-01
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://nvd.nist.gov/vuln/detail/CVE-2012-1098
- id: rubyadvisory:rubygems:activesupport:CVE-2012-3464
  title: Ruby on Rails HTML Escaping Code XSS
  description: |
    Ruby on Rails contains a flaw that allows a remote cross-site scripting (XSS)
    attack. This flaw exists because the HTML escaping code functionality does
    not properly escape a single quote character. This may allow a user to create
    a specially crafted request that would execute arbitrary script code in a
    user's browser within the trust relationship between their browser and the
    server.
  affected_package: activesupport
  patched_versions:
  - ">= 3.2.8"
  - "~> 3.0.17"
  - "~> 3.1.8"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2012-3464
  osvdb: 84516
  cvss_v2_score: 4.3
  disclosed_date: 2012-08-09
  created_date: 2012-08-09
  last_modified_date: 2012-08-09
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://nvd.nist.gov/vuln/detail/CVE-2012-3464
- id: rubyadvisory:rubygems:activesupport:CVE-2013-0333
  title: Ruby on Rails JSON Parser Crafted Payload YAML Subset Decoding Remote Code
    Execution
  description: |
    Ruby on Rails contains a flaw in the JSON parser. Rails supports multiple
    parsing backends, one of which involves transforming JSON into YAML via the
    YAML parser. With a specially crafted payload, an attacker can subvert the
    backend into decoding a subset of YAML. This may allow a remote attacker to
    bypass restrictions, allowing them to bypass authentication systems, inject
    arbitrary SQL, inject and execute arbitrary code, or perform a DoS attack on
    a Rails application.
  affected_package: activesupport
  patched_versions:
  - ">= 3.0.20"
  - "~> 2.3.16"
  severity: high
  package_manager: rubygems
  cve:
  - CVE-2013-0333
  osvdb: 89594
  cvss_v2_score: 9.3
  disclosed_date: 2013-01-28
  created_date: 2013-01-28
  last_modified_date: 2013-01-28
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://nvd.nist.gov/vuln/detail/CVE-2013-0333
- id: rubyadvisory:rubygems:activesupport:CVE-2013-1856
  title: XML Parsing Vulnerability affecting JRuby users
  description: |
    The ActiveSupport XML parsing functionality supports multiple
    pluggable backends. One backend supported for JRuby users is
    ActiveSupport::XmlMini_JDOM which makes use of the
    javax.xml.parsers.DocumentBuilder class. In some JVM configurations
    the default settings of that class can allow an attacker to construct
    XML which, when parsed, will contain the contents of arbitrary URLs
    including files from the application server. They may also allow for
    various denial of service attacks. Action Pack
  affected_package: activesupport
  unaffected_versions:
  - "~> 2.3.0"
  patched_versions:
  - ">= 3.2.13"
  - "~> 3.1.12"
  severity: high
  package_manager: rubygems
  cve:
  - CVE-2013-1856
  osvdb: 91451
  cvss_v2_score: 7.8
  disclosed_date: 2013-03-19
  created_date: 2013-03-19
  last_modified_date: 2013-03-19
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://nvd.nist.gov/vuln/detail/CVE-2013-1856
- id: rubyadvisory:rubygems:activesupport:CVE-2015-3226
  title: 'XSS Vulnerability in ActiveSupport::JSON.encode

'
  description: "When a `Hash` containing user-controlled data is encode as JSON (either
    through \n`Hash#to_json` or `ActiveSupport::JSON.encode`), Rails does not perform
    adequate \nescaping that matches the guarantee implied by the `escape_html_entities_in_json`
    \noption (which is enabled by default). If this resulting JSON string is subsequently
    \ninserted directly into an HTML page, the page will be vulnerable to XSS attacks.
    \n\nFor example, the following code snippet is vulnerable to this attack: \n\n
    \   <%= javascript_tag \"var data = #{user_supplied_data.to_json};\" %> \n\nSimilarly,
    the following is also vulnerable: \n\n    <script> \n      var data = <%= ActiveSupport::JSON.encode(user_supplied_data).html_safe
    %>; \n    </script> \n\nAll applications that renders JSON-encoded strings that
    contains user-controlled \ndata in their views should either upgrade to one of
    the FIXED versions or use \nthe suggested workaround immediately. \n\nWorkarounds
    \n----------- \nTo work around this problem add an initializer with the following
    code: \n\n  module ActiveSupport \n    module JSON \n      module Encoding \n
    \       private \n        class EscapedString \n          def to_s \n            self
    \n          end \n        end \n      end \n    end \n  end \n"
  affected_package: activesupport
  unaffected_versions:
  - "< 4.1.0"
  patched_versions:
  - ">= 4.2.2"
  - "~> 4.1.11"
  package_manager: rubygems
  cve:
  - CVE-2015-3226
  disclosed_date: 2015-06-16
  created_date: 2015-06-16
  last_modified_date: 2015-06-16
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://groups.google.com/forum/#!topic/ruby-security-ann/7VlB_pck3hU
- id: rubyadvisory:rubygems:activesupport:CVE-2015-3227
  title: 'Possible Denial of Service attack in Active Support

'
  description: "Specially crafted XML documents can cause applications to raise a
    \n`SystemStackError` and potentially cause a denial of service attack.  This \nonly
    impacts applications using REXML or JDOM as their XML processor.  Other \nXML
    processors that Rails supports are not impacted. \n\nAll users running an affected
    release should either upgrade or use one of the work arounds immediately.\n\nWorkarounds
    \n----------- \nUse an XML parser that is not impacted by this problem, such as
    Nokogiri or \nLibXML.  You can change the processor like this: \n\n  ActiveSupport::XmlMini.backend
    = 'Nokogiri' \n\nIf you cannot change XML parsers, then adjust \n`RUBY_THREAD_MACHINE_STACK_SIZE`.
    \n"
  affected_package: activesupport
  patched_versions:
  - ">= 4.2.2"
  - "~> 3.2.22"
  - "~> 4.1.11"
  package_manager: rubygems
  cve:
  - CVE-2015-3227
  disclosed_date: 2015-06-16
  created_date: 2015-06-16
  last_modified_date: 2015-06-16
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://groups.google.com/forum/#!topic/rubyonrails-security/bahr2JLnxvk
- id: rubyadvisory:rubygems:activesupport:OSVDB-79726
  title: Ruby on Rails SafeBuffer Object [] Direct Manipulation XSS
  description: |
    Ruby on Rails contains a flaw that allows a remote cross-site scripting (XSS)
    attack. This flaw exists because athe application does not validate direct
    manipulations of SafeBuffer objects via '[]' and other methods. This may
    allow a user to create a specially crafted request that would execute
    arbitrary script code in a user's browser within the trust relationship
    between their browser and the server.
  affected_package: activesupport
  unaffected_versions:
  - "< 3.0.0"
  patched_versions:
  - ">= 3.2.2"
  - "~> 3.0.12"
  - "~> 3.1.4"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2012-1098
  osvdb: 79726
  cvss_v2_score: 4.3
  disclosed_date: 2012-03-01
  created_date: 2012-03-01
  last_modified_date: 2012-03-01
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: http://osvdb.org/79726
- id: rubyadvisory:rubygems:activesupport:OSVDB-84516
  title: Ruby on Rails HTML Escaping Code XSS
  description: |
    Ruby on Rails contains a flaw that allows a remote cross-site scripting (XSS)
    attack. This flaw exists because the HTML escaping code functionality does
    not properly escape a single quote character. This may allow a user to create
    a specially crafted request that would execute arbitrary script code in a
    user's browser within the trust relationship between their browser and the
    server.
  affected_package: activesupport
  patched_versions:
  - ">= 3.2.8"
  - "~> 3.0.17"
  - "~> 3.1.8"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2012-3464
  osvdb: 84516
  cvss_v2_score: 4.3
  disclosed_date: 2012-08-09
  created_date: 2012-08-09
  last_modified_date: 2012-08-09
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: http://www.osvdb.org/show/osvdb/84516
- id: rubyadvisory:rubygems:activesupport:OSVDB-89594
  title: Ruby on Rails JSON Parser Crafted Payload YAML Subset Decoding Remote Code
    Execution
  description: |
    Ruby on Rails contains a flaw in the JSON parser. Rails supports multiple
    parsing backends, one of which involves transforming JSON into YAML via the
    YAML parser. With a specially crafted payload, an attacker can subvert the
    backend into decoding a subset of YAML. This may allow a remote attacker to
    bypass restrictions, allowing them to bypass authentication systems, inject
    arbitrary SQL, inject and execute arbitrary code, or perform a DoS attack on
    a Rails application.
  affected_package: activesupport
  patched_versions:
  - ">= 3.0.20"
  - "~> 2.3.16"
  severity: high
  package_manager: rubygems
  cve:
  - CVE-2013-0333
  osvdb: 89594
  cvss_v2_score: 9.3
  disclosed_date: 2013-01-28
  created_date: 2013-01-28
  last_modified_date: 2013-01-28
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: http://osvdb.org/show/osvdb/89594
- id: rubyadvisory:rubygems:activesupport:OSVDB-91451
  title: XML Parsing Vulnerability affecting JRuby users
  description: |
    The ActiveSupport XML parsing functionality supports multiple
    pluggable backends. One backend supported for JRuby users is
    ActiveSupport::XmlMini_JDOM which makes use of the
    javax.xml.parsers.DocumentBuilder class. In some JVM configurations
    the default settings of that class can allow an attacker to construct
    XML which, when parsed, will contain the contents of arbitrary URLs
    including files from the application server. They may also allow for
    various denial of service attacks. Action Pack
  affected_package: activesupport
  unaffected_versions:
  - "~> 2.3.0"
  patched_versions:
  - ">= 3.2.13"
  - "~> 3.1.12"
  severity: high
  package_manager: rubygems
  cve:
  - CVE-2013-1856
  osvdb: 91451
  cvss_v2_score: 7.8
  disclosed_date: 2013-03-19
  created_date: 2013-03-19
  last_modified_date: 2013-03-19
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: http://www.osvdb.org/show/osvdb/91451
- id: snykio:rubygems:activesupport:20025
  title: Cross-site Scripting (XSS)
  description: |+
    [`activesupport`][1] is toolkit of support libraries and Ruby core
    extensions extracted from the Rails frameworkץ

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). The application does not validate direct manipulations of
    SafeBuffer objects via \'\[\]\' and other methods. This may allow a user
    to create a specially crafted request that would execute arbitrary
    script code in a user\'s browser within the trust relationship between
    their browser and the server.



    [1]: https://rubygems.org/gems/activesupport
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: activesupport
  vulnerable_versions:
  - "< 3.0.12  >= 3.0.0"
  - "< 3.1.4  >= 3.1"
  - "< 3.2.2  >= 3.2"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2012-1098
  cwe:
  - CWE-79
  disclosed_date: 2012-02-29
  created_date: 2012-02-29
  last_modified_date: 2012-02-29
  credit:
  - Akira Matsuda
  references:
  - http://rubysec.com/advisories/activesupport-OSVDB-79726
  - https://groups.google.com/forum/#!topic/rubyonrails-security/7dKPHj0E6RM
  source_url: https://snyk.io/vuln/SNYK-RUBY-ACTIVESUPPORT-20025
- id: snykio:rubygems:activesupport:20036
  title: Cross-site Scripting (XSS)
  description: |+
    [`activesupport`][1] is toolkit of support libraries and Ruby core
    extensions extracted from the Rails framework.

    Affected versions of this package are vulnerable to Cross-site
    Scripting. The HTML escaping code functionality does not properly escape
    a single quote character. This may allow a user to create a specially
    crafted request that would execute arbitrary script code in a user\'s
    browser within the trust relationship between their browser and the
    server.



    [1]: https://rubygems.org/gems/activesupport
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: activesupport
  vulnerable_versions:
  - "< 3.0.17"
  - "< 3.1.8  >= 3.1"
  - "< 3.2.8  >= 3.2"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2012-3464
  cwe:
  - CWE-79
  disclosed_date: 2012-08-08
  created_date: 2012-08-08
  last_modified_date: 2012-08-08
  credit:
  - Unknown
  references:
  - https://nvd.nist.gov/vuln/detail/CVE-2012-3464
  - https://rubysec.com/advisories/activesupport-OSVDB-84516
  source_url: https://snyk.io/vuln/SNYK-RUBY-ACTIVESUPPORT-20036
- id: snykio:rubygems:activesupport:20054
  title: Arbitrary Code Injection
  description: |+
    [`activesupport`][1] is toolkit of support libraries and Ruby core
    extensions extracted from the Rails framework

    Ruby on Rails contains a flaw in the JSON parser which may allow a
    remote attacker to bypass restrictions, allowing them to bypass
    authentication systems, inject arbitrary SQL, inject and execute
    arbitrary code, or perform a DoS attack on a Rails application.



    [1]: https://rubygems.org/gems/activesupport
    \nRails supports multiple parsing backends, one of which involves
    transforming JSON into YAML via the YAML parser. With a specially
    crafted payload, an attacker can subvert the backend into decoding a
    subset of YAML. This may allow a remote attacker to bypass restrictions,
    allowing them to bypass authentication systems, inject arbitrary SQL,
    inject and execute arbitrary code, or perform a DoS attack on a Rails
    application.

  affected_package: activesupport
  vulnerable_versions:
  - "< 2.3.16"
  - "< 3.0.20  >= 2.4"
  severity: high
  package_manager: rubygems
  cve:
  - CVE-2013-0333
  cwe:
  - CWE-94
  disclosed_date: 2013-01-27
  created_date: 2013-01-27
  last_modified_date: 2013-01-27
  credit:
  - Lawrence Pit
  references:
  - http://rubysec.com/advisories/OSVDB-89594
  - https://groups.google.com/d/msg/rubyonrails-security/1h2DR63ViGo/GOUVafeaF1IJ
  source_url: https://snyk.io/vuln/SNYK-RUBY-ACTIVESUPPORT-20054
- id: snykio:rubygems:activesupport:20089
  title: Sensitive Information Exposure
  description: |
    [`activesupport`][1] is toolkit of support libraries and Ruby core
    extensions extracted from the Rails framework.

    Affected versions of this package are vulnerable to Sensitive
    Information Exposure. Under certain configurations, the ActiveSupport
    XML parsing can allow an attacker to construct XML which, when parsed,
    will contain the contents of arbitrary URLs including files from the
    application server. The ActiveSupport XML parsing functionality supports
    multiple pluggable backends. One backend supported for JRuby users is
    `ActiveSupport::XmlMini_JDOM` which makes use of the
    `javax.xml.parsers.DocumentBuilder` class. In some JVM configurations
    the default settings of that class can allow an attacker to construct
    XML which, when parsed, will contain the contents of arbitrary URLs
    including files from the application server.



    [1]: https://rubygems.org/gems/activesupport
  affected_package: activesupport
  vulnerable_versions:
  - "< 2.3.0"
  - "< 3.1.12  >= 2.4"
  - "< 3.2.13  >= 3.2"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2013-1856
  cwe:
  - CWE-200
  disclosed_date: 2013-03-18
  created_date: 2013-03-18
  last_modified_date: 2013-03-18
  credit:
  - Ben Murphy
  references:
  - http://rubysec.com/advisories/activesupport-OSVDB-91451
  - https://groups.google.com/d/msg/rubyonrails-security/KZwsQbYsOiI/5kUV7dSCJGwJ
  source_url: https://snyk.io/vuln/SNYK-RUBY-ACTIVESUPPORT-20089
- id: snykio:rubygems:activesupport:20228
  title: Cross-site Scripting (XSS)
  description: |+
    [`activesupport`][1] is toolkit of support libraries and Ruby core
    extensions extracted from the Rails framework

    Rails does not perform adequate escaping when a `Hash` containing
    user-controlled data is encoded as JSON

    When a `Hash` containing user-controlled data is encoded as JSON (either
    through `Hash#to_json` or `ActiveSupport::JSON.encode`), Rails does not
    perform adequate escaping that matches the guarantee implied by the
    `escape_html_entities_in_json` option (which is enabled by default). If
    this resulting JSON string is subsequently inserted directly into an
    HTML page, the page will be vulnerable to XSS attacks.

    For example, the following code snippet is vulnerable to this attack:

        <%= javascript_tag "var data = #{user_supplied_data.to_json};" %>

    Similarly, the following is also vulnerable:

        <script>
          var data = <%= ActiveSupport::JSON.encode(user_supplied_data).html_safe %>;
        </script>

    All applications that renders JSON-encoded strings that contains
    user-controlled data in their views should either upgrade to one of the
    FIXED versions or use the suggested workaround immediately.



    [1]: https://rubygems.org/gems/activesupport
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: activesupport
  vulnerable_versions:
  - "< 4.1.11  >= 4.1.0"
  - "< 4.2.2  >= 4.2"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2015-3226
  cwe:
  - CWE-79
  disclosed_date: 2015-06-15
  created_date: 2015-06-15
  last_modified_date: 2015-06-15
  credit:
  - Francois Chagnon
  references:
  - http://rubysec.com/advisories/CVE-2015-3226
  - https://groups.google.com/forum/#!topic/ruby-security-ann/7VlB_pck3hU
  source_url: https://snyk.io/vuln/SNYK-RUBY-ACTIVESUPPORT-20228
- id: snykio:rubygems:activesupport:20229
  title: Denial of Service (DoS)
  description: |+
    [`activesupport`][1] is toolkit of support libraries and Ruby core
    extensions extracted from the Rails framework.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS). Specially crafted XML documents can cause applications to raise a
    `SystemStackError`. This only impacts applications using REXML or JDOM
    as their XML processor. Other XML processors that Rails supports are not
    impacted.



    [1]: https://rubygems.org/gems/activesupport
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: activesupport
  vulnerable_versions:
  - "< 3.2.22"
  - "< 4.1.11  >= 3.3"
  - "< 4.2.2  >= 4.2"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2015-3227
  cwe:
  - CWE-400
  disclosed_date: 2015-06-15
  created_date: 2015-06-15
  last_modified_date: 2015-06-15
  credit:
  - Tomek Rabczak
  references:
  - https://nvd.nist.gov/vuln/detail/CVE-2015-3227
  - https://rubysec.com/advisories/activesupport-CVE-2015-3227
  source_url: https://snyk.io/vuln/SNYK-RUBY-ACTIVESUPPORT-20229
- id: snykio:rubygems:activesupport:20294
  title: Denial of Service (DoS)
  description: |+
    [`activesupport`][1] is toolkit of support libraries and Ruby core
    extensions extracted from the Rails framework

    Affected versions of this package are vulnerable to Denial of Service
    (Dos) attacks. The ActiveSupport XML parsing functionality supports
    multiple pluggable backends. One backend supported for JRuby users is
    `ActiveSupport::XmlMini_JDOM` which makes use of the
    `javax.xml.parsers.DocumentBuilder` class. In some JVM configurations
    the default settings of that class can allow an attacker to construct
    XML which may allow for various denial of service attacks.



    [1]: https://rubygems.org/gems/activesupport
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: activesupport
  vulnerable_versions:
  - "< 2.3.0"
  - "< 3.1.12  >= 2.4"
  - "< 3.2.13  >= 3.2"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2013-1856
  cwe:
  - CWE-400
  disclosed_date: 2013-03-18
  created_date: 2013-03-18
  last_modified_date: 2013-03-18
  credit:
  - Unknown
  references:
  - https://groups.google.com/d/msg/rubyonrails-security/KZwsQbYsOiI/5kUV7dSCJGwJ
  - https://rubysec.com/advisories/activesupport-OSVDB-91451
  source_url: https://snyk.io/vuln/SNYK-RUBY-ACTIVESUPPORT-20294
- id: snykio:rubygems:activesupport:536101
  title: Cross-site Scripting (XSS)
  description: |+
    [activesupport][1] is a toolkit of support libraries and Ruby core
    extensions extracted from the Rails framework.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS).
    `activesupport/lib/active_support/core_ext/string/output_safety.rb`
    allows remote attackers to inject arbitrary web script or HTML via a
    malformed Unicode string, related to a \"UTF-8 escaping vulnerability.\"



    [1]: https://rubygems.org/gems/activesupport
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: activesupport
  vulnerable_versions:
  - ">=2.0.0  <2.3.13"
  - ">=3.0.0  <3.0.10"
  - ">=3.1.0.beta1  <3.1.0.rc5"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2011-2932
  cwe:
  - CWE-79
  disclosed_date: 2011-08-29
  created_date: 2019-11-26
  last_modified_date: 2019-11-26
  credit:
  - Unknown
  references:
  - http://weblog.rubyonrails.org/2011/8/16/ann-rails-3-1-0-rc6
  - https://github.com/rails/rails/commit/bfc432574d0b141fd7fe759edfe9b6771dd306bd
  - https://groups.google.com/forum/#!topic/rubyonrails-security/Vr_7WSOrEZU
  source_url: https://snyk.io/vuln/SNYK-RUBY-ACTIVESUPPORT-536101
