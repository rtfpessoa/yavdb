---
- id: rubyadvisory:rubygems:bson:CVE-2015-4411
  title: Potential denial of service in bson rubygem
  description: |
    The Moped::BSON::ObjecId.legal? method in mongodb/bson-ruby before 3.0.4
    as used in rubygem-moped allows remote attackers to cause a denial of service (worker
    resource consumption) via a crafted string. NOTE: This issue is due to an incomplete
    fix to CVE-2015-4410.
  affected_package: bson
  patched_versions:
  - ">= 3.0.4"
  severity: high
  package_manager: rubygems
  cve:
  - CVE-2015-4411
  cvss_v3_score: 7.5
  disclosed_date: 2020-04-29
  created_date: 2020-04-29
  last_modified_date: 2020-04-29
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://github.com/advisories/GHSA-qh4w-7pw3-p4rp
- id: rubyadvisory:rubygems:bson:CVE-2015-4412
  title: Data Injection Vulnerability in bson Rubygem
  description: A flaw in the ObjectId validation regular expression can enable attackers
    to inject arbitrary information into a given BSON object.
  affected_package: bson
  patched_versions:
  - ">= 3.0.4"
  - "~> 1.12.3"
  package_manager: rubygems
  cve:
  - CVE-2015-4412
  disclosed_date: 2015-06-04
  created_date: 2015-06-04
  last_modified_date: 2015-06-04
  credit:
  - Rubysec
  references:
  - https://github.com/mongodb/bson-ruby/compare/7446d7c6764dfda8dc4480ce16d5c023e74be5ca...28f34978a85b689a4480b4d343389bf4886522e7
  - https://github.com/mongodb/mongo-ruby-driver/compare/6ae981167759d5819ba3d41e374e5b2af5b79077~1...9859a3ab9773a8a883eb8438b665a921cc991c71
  - https://github.com/rubysec/ruby-advisory-db
  source_url: http://sakurity.com/blog/2015/06/04/mongo_ruby_regexp.html
- id: snykio:rubygems:bson:20220
  title: Data Injection
  description: |
    [`bson`][1] is a full featured BSON specification implementation in
    Ruby.

    Affected versions of this gem allow an attacker to perform a BSON
    Injection. A flaw in the `ObjectId` validation regular expression can
    enable attackers to inject arbitrary information into a given BSON
    object.



    [1]: https://rubygems.org/gems/bson
  affected_package: bson
  vulnerable_versions:
  - "<3.0.4"
  - ">=1.13  <1.12.3"
  severity: high
  package_manager: rubygems
  cve:
  - CVE-2015-4412
  cwe:
  - CWE-74
  disclosed_date: 2015-06-03
  created_date: 2015-06-03
  last_modified_date: 2015-06-03
  credit:
  - Unknown
  references:
  - http://rubysec.com/advisories/CVE-2015-4412
  - http://sakurity.com/blog/2015/06/04/mongo_ruby_regexp.html
  - https://access.redhat.com/security/cve/cve-2015-4412
  source_url: https://snyk.io/vuln/SNYK-RUBY-BSON-20220
- id: snykio:rubygems:bson:567886
  title: Denial of Service (DoS)
  description: "[bson][1] is an a fully featured BSON specification implementation
    in\nRuby.\n\nAffected versions of this package are vulnerable to Denial of Service\n(DoS).
    The `Moped::BSON::ObjecId.legal?` method in `mongodb/bson-ruby`\nas used in `rubygem-moped`
    allows remote attackers to cause a denial of\nservice (worker resource consumption)
    via a crafted string. NOTE: This\nissue is due to an incomplete fix to CVE-2015-4410.\n\n\n\n[1]:
    https://rubygems.org/gems/bson\n\\nDenial of Service (DoS) describes a family
    of attacks, all aimed at\nmaking a system inaccessible to its original and legitimate
    users. There\nare many types of DoS attacks, ranging from trying to clog the network\npipes
    to the system by generating a large volume of traffic from many\nmachines (a Distributed
    Denial of Service - DDoS - attack) to sending\ncrafted requests that cause a system
    to crash or take a disproportional\namount of time to process.\n\nThe Regular
    expression Denial of Service (ReDoS) is a type of Denial of\nService attack. Regular
    expressions are incredibly powerful, but they\naren\\'t very intuitive and can
    ultimately end up making it easy for\nattackers to take your site down.\n\nLet’s
    take the following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n{:
    .language-js}\n\nThis regular expression accomplishes the following:\n\n* `A`
    The string must start with the letter \\'A\\'\n* `(B|C+)+` The string must then
    follow the letter A with either the\n  letter \\'B\\' or some number of occurrences
    of the letter \\'C\\' (the\n  `+` matches one or more times). The `+` at the end
    of this section\n  states that we can look for one or more matches of this section.\n*
    `D` Finally, we ensure this section of the string ends with a \\'D\\'\n\nThe expression
    would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt
    most cases, it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n
    \   $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s
    user 0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n{: .language-bash}\n\nThe entire
    process of testing it against a 30 characters long string\ntakes around ~52ms.
    But when given an invalid string, it takes nearly\ntwo seconds to complete the
    test, over ten times as long as it took to\ntest a valid string. The dramatic
    difference is due to the way regular\nexpressions get evaluated.\n\nMost Regex
    engines will work very similarly (with minor differences).\nThe engine will match
    the first possible way to accept the current\ncharacter and proceed to the next
    one. If it then fails to match the\nnext one, it will backtrack and see if there
    was another way to digest\nthe previous character. If it goes too far down the
    rabbit hole only to\nfind out the string doesn’t match in the end, and if many
    characters\nhave multiple valid regex paths, the number of backtracking steps
    can\nbecome very large, resulting in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s
    look at how our expression runs into this problem, using a\nshorter string: \\\"ACCCX\\\".
    While it seems fairly straightforward, there\nare still four different ways that
    the engine could match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.
    \ C+C+C.\n\nThe engine has to try each of those combinations to see if any of
    them\npotentially match against the expression. When you combine that with the\nother
    steps the engine must take, we can use [RegEx 101 debugger][1] to\nsee the engine
    has to take a total of 38 steps before it can determine\nthe string doesn\\'t
    match.\n\nFrom there, the number of steps the engine must use to validate a string\njust
    continues to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n|
    ACCCX | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX
    | 14 | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to
    take over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n"
  affected_package: bson
  vulnerable_versions:
  - "<3.0.4"
  severity: high
  package_manager: rubygems
  cve:
  - CVE-2015-4411
  cwe:
  - CWE-400
  disclosed_date: 2020-04-30
  created_date: 2020-04-30
  last_modified_date: 2020-04-30
  credit:
  - Unknown
  references:
  - https://nvd.nist.gov/vuln/detail/CVE-2015-4411
  source_url: https://snyk.io/vuln/SNYK-RUBY-BSON-567886
