---
- id: rubyadvisory:rubygems:actionpack:CVE-2012-1099
  title: Ruby on Rails actionpack/lib/action_view/helpers/form_options_helper.rb Manually
    Generated Select Tag Options XSS
  description: "Ruby on Rails contains a flaw that allows a remote cross-site scripting
    (XSS) \nattack. This flaw exists because the application does not validate manually\ngenerated
    'select tag options' upon submission to\nactionpack/lib/action_view/helpers/form_options_helper.rb.
    This may allow a\nuser to create a specially crafted request that would execute
    arbitrary\nscript code in a user's browser within the trust relationship between
    their\nbrowser and the server.\n"
  affected_package: actionpack
  patched_versions:
  - ">= 3.2.2"
  - "~> 3.0.12"
  - "~> 3.1.4"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2012-1099
  osvdb: 79727
  cvss_v2_score: 4.3
  disclosed_date: 2012-03-01
  created_date: 2012-03-01
  last_modified_date: 2012-03-01
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://nvd.nist.gov/vuln/detail/CVE-2012-1099
- id: rubyadvisory:rubygems:actionpack:CVE-2012-3424
  title: Ruby on Rails actionpack/lib/action_controller/metal/http_authentication.rb
    with_http_digest Helper Method Remote DoS
  description: |
    Ruby on Rails contains a flaw that may allow a remote denial of service.
    The issue is triggered when an error occurs in
    actionpack/lib/action_controller/metal/http_authentication.rb when the
    with_http_digest helper method is being used. This may allow a remote
    attacker to cause a loss of availability for the program.
  affected_package: actionpack
  unaffected_versions:
  - ">= 2.3.5  <= 2.3.14"
  patched_versions:
  - ">= 3.2.7"
  - "~> 3.0.16"
  - "~> 3.1.7"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2012-3424
  osvdb: 84243
  cvss_v2_score: 5.0
  disclosed_date: 2012-07-26
  created_date: 2012-07-26
  last_modified_date: 2012-07-26
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://nvd.nist.gov/vuln/detail/CVE-2012-3424
- id: rubyadvisory:rubygems:actionpack:CVE-2012-3463
  title: Ruby on Rails select_tag Helper Method prompt Value XSS
  description: |
    Ruby on Rails contains a flaw that allows a remote cross-site scripting (XSS)
    attack. This flaw exists because input passed via the prompt value is not
    properly sanitized by the select_tag helper method before returning it to
    the user. This may allow a user to create a specially crafted request that
    would execute arbitrary script code in a user's browser within the trust
    relationship between their browser and the server.
  affected_package: actionpack
  unaffected_versions:
  - "~> 2.3.0"
  patched_versions:
  - ">= 3.2.8"
  - "~> 3.0.17"
  - "~> 3.1.8"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2012-3463
  osvdb: 84515
  cvss_v2_score: 4.3
  disclosed_date: 2012-08-09
  created_date: 2012-08-09
  last_modified_date: 2012-08-09
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://nvd.nist.gov/vuln/detail/CVE-2012-3463
- id: rubyadvisory:rubygems:actionpack:CVE-2012-3465
  title: Ruby on Rails strip_tags Helper Method XSS
  description: |
    Ruby on Rails contains a flaw that allows a remote cross-site scripting (XSS)
    attack. This flaw exists because the application does not validate input
    passed via the 'strip_tags' helper method before returning it to the user.
    This may allow a user to create a specially crafted request that would
    execute arbitrary script code in a user's browser within the trust
    relationship between their browser and the server.
  affected_package: actionpack
  patched_versions:
  - ">= 3.2.8"
  - "~> 3.0.17"
  - "~> 3.1.8"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2012-3465
  osvdb: 84513
  cvss_v2_score: 4.3
  disclosed_date: 2012-08-09
  created_date: 2012-08-09
  last_modified_date: 2012-08-09
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://nvd.nist.gov/vuln/detail/CVE-2012-3465
- id: rubyadvisory:rubygems:actionpack:CVE-2013-0156
  title: Ruby on Rails params_parser.rb Action Pack Type Casting Parameter Parsing
    Remote Code Execution
  description: |
    Ruby on Rails contains a flaw in params_parser.rb of the Action Pack.
    The issue is triggered when a type casting error occurs during the parsing
    of parameters. This may allow a remote attacker to potentially execute
    arbitrary code.
  affected_package: actionpack
  patched_versions:
  - ">= 3.2.11"
  - "~> 2.3.15"
  - "~> 3.0.19"
  - "~> 3.1.10"
  severity: high
  package_manager: rubygems
  cve:
  - CVE-2013-0156
  osvdb: 89026
  cvss_v2_score: 10.0
  disclosed_date: 2013-01-08
  created_date: 2013-01-08
  last_modified_date: 2013-01-08
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://nvd.nist.gov/vuln/detail/CVE-2013-0156
- id: rubyadvisory:rubygems:actionpack:CVE-2013-1855
  title: XSS vulnerability in sanitize_css in Action Pack
  description: |
    There is an XSS vulnerability in the `sanitize_css` method in Action
    Pack. Carefully crafted text can bypass the sanitization provided in
    the `sanitize_css` method in Action Pack
  affected_package: actionpack
  patched_versions:
  - ">= 3.2.13"
  - "~> 2.3.18"
  - "~> 3.1.12"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2013-1855
  osvdb: 91452
  cvss_v2_score: 4.3
  disclosed_date: 2013-03-19
  created_date: 2013-03-19
  last_modified_date: 2013-03-19
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://nvd.nist.gov/vuln/detail/CVE-2013-1855
- id: rubyadvisory:rubygems:actionpack:CVE-2013-1857
  title: XSS Vulnerability in the `sanitize` helper of Ruby on Rails
  description: |
    The sanitize helper in Ruby on Rails is designed to
    filter HTML and remove all tags and attributes which could be
    malicious. The code which ensured that URLs only contain supported
    protocols contained several bugs which could allow an attacker to
    embed a tag containing a URL which executes arbitrary javascript
    code.
  affected_package: actionpack
  patched_versions:
  - ">= 3.2.13"
  - "~> 2.3.18"
  - "~> 3.1.12"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2013-1857
  osvdb: 91454
  cvss_v2_score: 4.3
  disclosed_date: 2013-03-19
  created_date: 2013-03-19
  last_modified_date: 2013-03-19
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://nvd.nist.gov/vuln/detail/CVE-2013-1857
- id: rubyadvisory:rubygems:actionpack:CVE-2014-0081
  title: XSS Vulnerability in number_to_currency, number_to_percentage and number_to_human
  description: |
    Ruby on Rails contains a flaw that allows a cross-site scripting (XSS) attack.
    This flaw exists because the actionpack/lib/action_view/helpers/number_helper.rb
    script does not validate input to the 'number_to_currency', 'number_to_percentage',
    and 'number_to_human' helpers before returning it to users. This may allow a
    remote attacker to create a specially crafted request that would execute arbitrary
    script code in a user's browser session within the trust relationship between
    their browser and the server.
  affected_package: actionpack
  patched_versions:
  - ">= 4.1.0.beta2"
  - "~> 3.2.17"
  - "~> 4.0.3"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2014-0081
  osvdb: 103439
  cvss_v2_score: 4.3
  disclosed_date: 2014-02-18
  created_date: 2014-02-18
  last_modified_date: 2014-02-18
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://nvd.nist.gov/vuln/detail/CVE-2014-0081
- id: rubyadvisory:rubygems:actionpack:CVE-2014-0082
  title: Denial of Service Vulnerability in Action View when using render :text
  description: |
    Ruby on Rails contains a flaw in actionpack/lib/action_view/template/text.rb
    in the text rendering component of Action View that is triggered when
    handling MIME types that are converted to symbols. This may allow a
    remote attacker to cause a denial of service.
  affected_package: actionpack
  unaffected_versions:
  - ">= 4.0.0"
  patched_versions:
  - ">= 3.2.17"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2014-0082
  osvdb: 103440
  cvss_v2_score: 5.0
  disclosed_date: 2014-02-18
  created_date: 2014-02-18
  last_modified_date: 2014-02-18
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://nvd.nist.gov/vuln/detail/CVE-2014-0082
- id: rubyadvisory:rubygems:actionpack:CVE-2014-0130
  title: Directory Traversal Vulnerability With Certain Route Configurations
  description: |
    There is a vulnerability in the 'implicit render'
    functionality in Ruby on Rails.The implicit render functionality
    allows controllers to render a template, even if there is no
    explicit action with the corresponding name.  This module does not
    perform adequate input sanitization which could allow an attacker to
    use a specially crafted request to retrieve arbitrary files from the
    rails application server.
  affected_package: actionpack
  patched_versions:
  - ">= 4.1.1"
  - "~> 3.2.18"
  - "~> 4.0.5"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2014-0130
  cvss_v2_score: 4.3
  disclosed_date: 2014-05-06
  created_date: 2014-05-06
  last_modified_date: 2014-05-06
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://groups.google.com/forum/#!topic/rubyonrails-security/NkKc7vTW70o
- id: rubyadvisory:rubygems:actionpack:CVE-2014-7818
  title: Arbitrary file existence disclosure in Action Pack
  description: |
    Specially crafted requests can be used to determine whether a file exists on
    the filesystem that is outside the Rails application's root directory.  The
    files will not be served, but attackers can determine whether or not the file
    exists.
  affected_package: actionpack
  unaffected_versions:
  - "< 3.0.0"
  patched_versions:
  - ">= 4.2.0.beta3"
  - "~> 3.2.20"
  - "~> 4.0.11"
  - "~> 4.1.7"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2014-7818
  cvss_v2_score: 4.3
  disclosed_date: 2014-10-30
  created_date: 2014-10-30
  last_modified_date: 2014-10-30
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://groups.google.com/forum/#!topic/rubyonrails-security/dCp7duBiQgo
- id: rubyadvisory:rubygems:actionpack:CVE-2014-7829
  title: Arbitrary file existence disclosure in Action Pack
  description: |
    Specially crafted requests can be used to determine whether a file exists on
    the filesystem that is outside the Rails application's root directory.  The
    files will not be served, but attackers can determine whether or not the file
    exists.  This vulnerability is very similar to CVE-2014-7818, but the
    specially crafted string is slightly different.
  affected_package: actionpack
  unaffected_versions:
  - "< 3.0.0"
  patched_versions:
  - ">= 4.1.8"
  - "~> 3.2.21"
  - "~> 4.0.11.1"
  - "~> 4.0.12"
  - "~> 4.1.7.1"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2014-7829
  cvss_v2_score: 5.0
  disclosed_date: 2014-11-17
  created_date: 2014-11-17
  last_modified_date: 2014-11-17
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://groups.google.com/forum/#!topic/rubyonrails-security/rMTQy4oRCGk
- id: rubyadvisory:rubygems:actionpack:CVE-2015-7576
  title: Timing attack vulnerability in basic authentication in Action Controller.
  description: |
    There is a timing attack vulnerability in the basic authentication support
    in Action Controller. This vulnerability has been assigned the CVE
    identifier CVE-2015-7576.

    Versions Affected:  All.
    Not affected:       None.
    Fixed Versions:     5.0.0.beta1.1, 4.2.5.1, 4.1.14.1, 3.2.22.1

    Impact
    ------
    Due to the way that Action Controller compares user names and passwords in
    basic authentication authorization code, it is possible for an attacker to
    analyze the time taken by a response and intuit the password.

    For example, this string comparison:

      "foo" == "bar"

    is possibly faster than this comparison:

      "foo" == "fo1"

    Attackers can use this information to attempt to guess the username and
    password used in the basic authentication system.

    You can tell you application is vulnerable to this attack by looking for
    `http_basic_authenticate_with` method calls in your application.

    All users running an affected release should either upgrade or use one of
    the workarounds immediately.

    Releases
    --------
    The FIXED releases are available at the normal locations.

    Workarounds
    -----------
    If you can't upgrade, please use the following monkey patch in an initializer
    that is loaded before your application:

    ```
    $ cat config/initializers/basic_auth_fix.rb
    module ActiveSupport
      module SecurityUtils
        def secure_compare(a, b)
          return false unless a.bytesize == b.bytesize

          l = a.unpack "C#{a.bytesize}"

          res = 0
          b.each_byte { |byte| res |= byte ^ l.shift }
          res == 0
        end
        module_function :secure_compare

        def variable_size_secure_compare(a, b)
          secure_compare(::Digest::SHA256.hexdigest(a), ::Digest::SHA256.hexdigest(b))
        end
        module_function :variable_size_secure_compare
      end
    end

    module ActionController
      class Base
        def self.http_basic_authenticate_with(options = {})
          before_action(options.except(:name, :password, :realm)) do
            authenticate_or_request_with_http_basic(options[:realm] || "Application") do |name, password|
              # This comparison uses & so that it doesn't short circuit and
              # uses `variable_size_secure_compare` so that length information
              # isn't leaked.
              ActiveSupport::SecurityUtils.variable_size_secure_compare(name, options[:name]) &
                ActiveSupport::SecurityUtils.variable_size_secure_compare(password, options[:password])
            end
          end
        end
      end
    end
    ```


    Patches
    -------
    To aid users who aren't able to upgrade immediately we have provided patches for
    the two supported release series. They are in git-am format and consist of a
    single changeset.

    * 4-1-basic_auth.patch - Patch for 4.1 series
    * 4-2-basic_auth.patch - Patch for 4.2 series
    * 5-0-basic_auth.patch - Patch for 5.0 series

    Please note that only the 4.1.x and 4.2.x series are supported at present. Users
    of earlier unsupported releases are advised to upgrade as soon as possible as we
    cannot guarantee the continued availability of security fixes for unsupported
    releases.

    Credits
    -------

    Thank you to Daniel Waterworth for reporting the problem and working with us to
    fix it.
  affected_package: actionpack
  patched_versions:
  - ">= 5.0.0.beta1.1"
  - "~> 3.2.22.1"
  - "~> 4.1.14  >= 4.1.14.1"
  - "~> 4.2.5  >= 4.2.5.1"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2015-7576
  cvss_v2_score: 4.3
  cvss_v3_score: 3.7
  disclosed_date: 2016-01-25
  created_date: 2016-01-25
  last_modified_date: 2016-01-25
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://groups.google.com/forum/#!topic/rubyonrails-security/ANv0HDHEC3k
- id: rubyadvisory:rubygems:actionpack:CVE-2015-7581
  title: Object leak vulnerability for wildcard controller routes in Action Pack
  description: "There is an object leak vulnerability for wildcard controllers in
    Action Pack. \nThis vulnerability has been assigned the CVE identifier CVE-2015-7581.
    \n\nVersions Affected:  >= 4.0.0 and < 5.0.0.beta1 \nNot affected:       < 4.0.0,
    5.0.0.beta1 and newer \nFixed Versions:     4.2.5.1, 4.1.14.1 \n\nImpact \n------
    \nUsers that have a route that contains the string \":controller\" are susceptible
    \nto objects being leaked globally which can lead to unbounded memory growth.
    \nTo identify if your application is vulnerable, look for routes that contain
    \n\":controller\". \n\nInternally, Action Pack keeps a map of \"url controller
    name\" to \"controller \nclass name\".  This map is cached globally, and is populated
    even if the \ncontroller class doesn't actually exist. \n\nAll users running an
    affected release should either upgrade or use one of the \nworkarounds immediately.
    \n\nReleases \n-------- \nThe FIXED releases are available at the normal locations.
    \n\nWorkarounds \n----------- \nThere are no feasible workarounds for this issue.
    \n\nPatches \n------- \nTo aid users who aren't able to upgrade immediately we
    have provided patches for the two supported release series.  They are in git-am
    format and consist of a single changeset. \n\n* 4-1-wildcard_route.patch - Patch
    for 4.1 series \n* 4-2-wildcard_route.patch - Patch for 4.2 series \n\nPlease
    note that only the 4.1.x and 4.2.x series are supported at present.  Users of
    earlier unsupported releases are advised to upgrade as soon as possible as we
    cannot guarantee the continued availability of security fixes for unsupported
    releases.\n"
  affected_package: actionpack
  unaffected_versions:
  - "< 4.0.0"
  - ">= 5.0.0.beta1"
  patched_versions:
  - "~> 4.1.14  >= 4.1.14.1"
  - "~> 4.2.5  >= 4.2.5.1"
  package_manager: rubygems
  cve:
  - CVE-2015-7581
  disclosed_date: 2016-01-25
  created_date: 2016-01-25
  last_modified_date: 2016-01-25
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://groups.google.com/forum/#!topic/rubyonrails-security/dthJ5wL69JE
- id: rubyadvisory:rubygems:actionpack:CVE-2016-0751
  title: Possible Object Leak and Denial of Service attack in Action Pack
  description: |
    There is a possible object leak which can lead to a denial of service
    vulnerability in Action Pack. This vulnerability has been
    assigned the CVE identifier CVE-2016-0751.

    Versions Affected:  All.
    Not affected:       None.
    Fixed Versions:     5.0.0.beta1.1, 4.2.5.1, 4.1.14.1, 3.2.22.1

    Impact
    ------
    A carefully crafted accept header can cause a global cache of mime types to
    grow indefinitely which can lead to a possible denial of service attack in
    Action Pack.

    All users running an affected release should either upgrade or use one of the
    workarounds immediately.

    Releases
    --------
    The FIXED releases are available at the normal locations.

    Workarounds
    -----------
    This attack can be mitigated by a proxy that only allows known mime types in
    the Accept header.

    Placing the following code in an initializer will also mitigate the issue:

    ```ruby
    require 'action_dispatch/http/mime_type'

    Mime.const_set :LOOKUP, Hash.new { |h,k|
      Mime::Type.new(k) unless k.blank?
    }
    ```

    Patches
    -------
    To aid users who aren't able to upgrade immediately we have provided patches for
    the two supported release series. They are in git-am format and consist of a
    single changeset.

    * 5-0-mime_types_leak.patch - Patch for 5.0 series
    * 4-2-mime_types_leak.patch - Patch for 4.2 series
    * 4-1-mime_types_leak.patch - Patch for 4.1 series
    * 3-2-mime_types_leak.patch - Patch for 3.2 series

    Please note that only the 4.1.x and 4.2.x series are supported at present. Users
    of earlier unsupported releases are advised to upgrade as soon as possible as we
    cannot guarantee the continued availability of security fixes for unsupported
    releases.

    Credits
    -------
    Aaron Patterson <3<3
  affected_package: actionpack
  patched_versions:
  - ">= 5.0.0.beta1.1"
  - "~> 3.2.22.1"
  - "~> 4.1.14  >= 4.1.14.1"
  - "~> 4.2.5  >= 4.2.5.1"
  severity: high
  package_manager: rubygems
  cve:
  - CVE-2016-0751
  cvss_v2_score: 5.0
  cvss_v3_score: 7.5
  disclosed_date: 2016-01-25
  created_date: 2016-01-25
  last_modified_date: 2016-01-25
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://groups.google.com/forum/#!topic/rubyonrails-security/9oLY_FCzvoc
- id: rubyadvisory:rubygems:actionpack:CVE-2016-0752
  title: Possible Information Leak Vulnerability in Action View
  description: |
    There is a possible directory traversal and information leak vulnerability in
    Action View. This vulnerability has been assigned the CVE identifier
    CVE-2016-0752.

    Versions Affected:  All.
    Not affected:       None.
    Fixed Versions:     5.0.0.beta1.1, 4.2.5.1, 4.1.14.1, 3.2.22.1

    Impact
    ------
    Applications that pass unverified user input to the `render` method in a
    controller may be vulnerable to an information leak vulnerability.

    Impacted code will look something like this:

    ```ruby
    def index
      render params[:id]
    end
    ```

    Carefully crafted requests can cause the above code to render files from
    unexpected places like outside the application's view directory, and can
    possibly escalate this to a remote code execution attack.

    All users running an affected release should either upgrade or use one of the
    workarounds immediately.

    Releases
    --------
    The FIXED releases are available at the normal locations.

    Workarounds
    -----------
    A workaround to this issue is to not pass arbitrary user input to the `render`
    method.  Instead, verify that data before passing it to the `render` method.

    For example, change this:

    ```ruby
    def index
      render params[:id]
    end
    ```

    To this:

    ```ruby
    def index
      render verify_template(params[:id])
    end

    private
    def verify_template(name)
      # add verification logic particular to your application here
    end
    ```

    Patches
    -------
    To aid users who aren't able to upgrade immediately we have provided patches for
    the two supported release series. They are in git-am format and consist of a
    single changeset.

    * 3-2-render_data_leak.patch - Patch for 3.2 series
    * 4-1-render_data_leak.patch - Patch for 4.1 series
    * 4-2-render_data_leak.patch - Patch for 4.2 series
    * 5-0-render_data_leak.patch - Patch for 5.0 series

    Please note that only the 4.1.x and 4.2.x series are supported at present. Users
    of earlier unsupported releases are advised to upgrade as soon as possible as we
    cannot guarantee the continued availability of security fixes for unsupported
    releases.

    Credits
    -------
    Thanks John Poulin for reporting this!
  affected_package: actionpack
  unaffected_versions:
  - ">= 4.1.0"
  patched_versions:
  - ">= 5.0.0.beta1.1"
  - "~> 3.2.22.1"
  - "~> 4.1.14  >= 4.1.14.1"
  - "~> 4.2.5  >= 4.2.5.1"
  package_manager: rubygems
  cve:
  - CVE-2016-0752
  disclosed_date: 2016-01-25
  created_date: 2016-01-25
  last_modified_date: 2016-01-25
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://groups.google.com/forum/#!topic/rubyonrails-security/335P1DcLG00
- id: rubyadvisory:rubygems:actionpack:CVE-2016-2097
  title: Possible Information Leak Vulnerability in Action View
  description: "\nThere is a possible directory traversal and information leak vulnerability
    \nin Action View. This was meant to be fixed on CVE-2016-0752. However the 3.2
    \npatch was not covering all the scenarios. This vulnerability has been \nassigned
    the CVE identifier CVE-2016-2097.\n\nVersions Affected:  3.2.x, 4.0.x, 4.1.x\nNot
    affected:       4.2+\nFixed Versions:     3.2.22.2, 4.1.14.2\n\nImpact \n------
    \nApplications that pass unverified user input to the `render` method in a\ncontroller
    may be vulnerable to an information leak vulnerability.\n\nImpacted code will
    look something like this:\n\n```ruby\ndef index\n  render params[:id]\nend\n```\n\nCarefully
    crafted requests can cause the above code to render files from\nunexpected places
    like outside the application's view directory, and can\npossibly escalate this
    to a remote code execution attack.\n\nAll users running an affected release should
    either upgrade or use one of the\nworkarounds immediately.\n\nReleases \n--------
    \nThe FIXED releases are available at the normal locations. \n\nWorkarounds \n-----------
    \nA workaround to this issue is to not pass arbitrary user input to the `render`\nmethod.
    Instead, verify that data before passing it to the `render` method.\n\nFor example,
    change this:\n\n```ruby\ndef index\n  render params[:id]\nend\n```\n\nTo this:\n\n```ruby\ndef
    index\n  render verify_template(params[:id])\nend\n\nprivate\ndef verify_template(name)\n
    \ # add verification logic particular to your application here\nend\n```\n\nPatches
    \n------- \nTo aid users who aren't able to upgrade immediately we have provided
    patches \nfor it. It is in git-am format and consist of a single changeset.\n\n*
    3-2-render_data_leak_2.patch - Patch for 3.2 series\n* 4-1-render_data_leak_2.patch
    - Patch for 4.1 series\n\nCredits \n------- \nThanks to both Jyoti Singh and Tobias
    Kraze from makandra for reporting this \nand working with us in the patch!\n"
  affected_package: actionpack
  unaffected_versions:
  - ">= 4.1.0"
  patched_versions:
  - ">= 4.1.14.2"
  - "~> 3.2.22.2"
  - "~> 4.1.14"
  package_manager: rubygems
  cve:
  - CVE-2016-2097
  disclosed_date: 2016-02-29
  created_date: 2016-02-29
  last_modified_date: 2016-02-29
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://groups.google.com/forum/#!topic/rubyonrails-security/ddY6HgqB2z4
- id: rubyadvisory:rubygems:actionpack:CVE-2016-2098
  title: Possible remote code execution vulnerability in Action Pack
  description: "There is a possible remote code execution vulnerability in Action
    Pack.\nThis vulnerability has been assigned the CVE identifier CVE-2016-2098.\n\nVersions
    Affected:  3.2.x, 4.0.x, 4.1.x, 4.2.x\nNot affected:       5.0+\nFixed Versions:
    \    3.2.22.2, 4.1.14.2, 4.2.5.2\n\nImpact \n------ \nApplications that pass unverified
    user input to the `render` method in a\ncontroller or a view may be vulnerable
    to a code injection.\n\nImpacted code will look like this:\n\n```ruby\nclass TestController
    < ApplicationController\n  def show\n    render params[:id]\n  end\nend\n```\n\nAn
    attacker could use the request parameters to coerce the above example\nto execute
    arbitrary ruby code.\n\nAll users running an affected release should either upgrade
    or use one of \nthe workarounds immediately.\n\nReleases \n-------- \nThe FIXED
    releases are available at the normal locations.\n\nWorkarounds \n----------- \nA
    workaround to this issue is to not pass arbitrary user input to the `render`\nmethod.
    Instead, verify that data before passing it to the `render` method.\n\nFor example,
    change this:\n\n```ruby\ndef index\n  render params[:id]\nend\n```\n\nTo this:\n\n```ruby\ndef
    index\n  render verify_template(params[:id])\nend\n\nprivate\ndef verify_template(name)\n
    \ # add verification logic particular to your application here\nend\n```\n\nPatches
    \n------- \nTo aid users who aren't able to upgrade immediately we have provided
    a \npatch for it. It is in git-am format and consist of a single changeset.\n\n*
    3-2-secure_inline_with_params.patch - Patch for 3.2 series\n* 4-1-secure_inline_with_params.patch
    - Patch for 4.1 series\n* 4-2-secure_inline_with_params.patch - Patch for 4.2
    series\n\nCredits \n------- \nThanks to both Tobias Kraze from makandra and joernchen
    of Phenoelit for \nreporting this!\n"
  affected_package: actionpack
  unaffected_versions:
  - ">= 5.0.0.beta1"
  patched_versions:
  - "~> 3.2.22.2"
  - "~> 4.1.14  >= 4.1.14.2"
  - "~> 4.2.5  >= 4.2.5.2"
  package_manager: rubygems
  cve:
  - CVE-2016-2098
  disclosed_date: 2016-02-29
  created_date: 2016-02-29
  last_modified_date: 2016-02-29
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://groups.google.com/forum/#!topic/rubyonrails-security/ly-IH-fxr_Q
- id: rubyadvisory:rubygems:actionpack:CVE-2016-6316
  title: Possible XSS Vulnerability in Action View
  description: |
    There is a possible XSS vulnerability in Action View.  Text declared as "HTML
    safe" will not have quotes escaped when used as attribute values in tag
    helpers.

    Impact
    ------

    Text declared as "HTML safe" when passed as an attribute value to a tag helper
    will not have quotes escaped which can lead to an XSS attack.  Impacted code
    looks something like this:

    ```ruby
    content_tag(:div, "hi", title: user_input.html_safe)
    ```

    Some helpers like the `sanitize` helper will automatically mark strings as
    "HTML safe", so impacted code could also look something like this:

    ```ruby
    content_tag(:div, "hi", title: sanitize(user_input))
    ```

    All users running an affected release should either upgrade or use one of the
    workarounds immediately.

    Workarounds
    -----------
    You can work around this issue by either *not* marking arbitrary user input as
    safe, or by manually escaping quotes like this:

    ```ruby
    def escape_quotes(value)
      value.gsub(/"/, '&quot;'.freeze)
    end

    content_tag(:div, "hi", title: escape_quotes(sanitize(user_input)))
    ```
  affected_package: actionpack
  unaffected_versions:
  - "< 3.0.0"
  - ">= 4.1.0"
  patched_versions:
  - ">= 5.0.0.1"
  - "~> 3.2.22.3"
  - "~> 4.2.7.1"
  package_manager: rubygems
  cve:
  - CVE-2016-6316
  disclosed_date: 2016-08-11
  created_date: 2016-08-11
  last_modified_date: 2016-08-11
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://groups.google.com/forum/#!topic/rubyonrails-security/I-VWr034ouk
- id: rubyadvisory:rubygems:actionpack:CVE-2020-8164
  title: Possible Strong Parameters Bypass in ActionPack
  description: |
    There is a strong parameters bypass vector in ActionPack.

    Versions Affected:  rails <= 6.0.3
    Not affected:       rails < 4.0.0
    Fixed Versions:     rails >= 5.2.4.3, rails >= 6.0.3.1

    Impact
    ------
    In some cases user supplied information can be inadvertently leaked from
    Strong Parameters.  Specifically the return value of `each`, or `each_value`,
    or `each_pair` will return the underlying "untrusted" hash of data that was
    read from the parameters.  Applications that use this return value may be
    inadvertently use untrusted user input.

    Impacted code will look something like this:

    ```
    def update
      # Attacker has included the parameter: `{ is_admin: true }`
      User.update(clean_up_params)
    end

    def clean_up_params
       params.each { |k, v|  SomeModel.check(v) if k == :name }
    end
    ```

    Note the mistaken use of `each` in the `clean_up_params` method in the above
    example.

    Workarounds
    -----------
    Do not use the return values of `each`, `each_value`, or `each_pair` in your
    application.
  affected_package: actionpack
  unaffected_versions:
  - "< 4.0.0"
  patched_versions:
  - ">= 6.0.3.1"
  - "~> 5.2.4.3"
  package_manager: rubygems
  cve:
  - CVE-2020-8164
  disclosed_date: 2020-05-18
  created_date: 2020-05-18
  last_modified_date: 2020-05-18
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://groups.google.com/forum/#!topic/rubyonrails-security/f6ioe4sdpbY
- id: rubyadvisory:rubygems:actionpack:CVE-2020-8166
  title: Ability to forge per-form CSRF tokens given a global CSRF token
  description: |
    It is possible to possible to, given a global CSRF token such as the one
    present in the authenticity_token meta tag, forge a per-form CSRF token for
    any action for that session.

    Versions Affected:  rails < 5.2.5, rails < 6.0.4
    Not affected:       Applications without existing HTML injection vulnerabilities.
    Fixed Versions:     rails >= 5.2.4.3, rails >= 6.0.3.1

    Impact
    ------

    Given the ability to extract the global CSRF token, an attacker would be able to
    construct a per-form CSRF token for that session.

    Workarounds
    -----------

    This is a low-severity security issue. As such, no workaround is necessarily
    until such time as the application can be upgraded.
  affected_package: actionpack
  patched_versions:
  - ">= 6.0.3.1"
  - "~> 5.2.4.3"
  package_manager: rubygems
  cve:
  - CVE-2020-8166
  disclosed_date: 2020-05-18
  created_date: 2020-05-18
  last_modified_date: 2020-05-18
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://groups.google.com/forum/#!topic/rubyonrails-security/NOjKiGeXUgw
- id: rubyadvisory:rubygems:actionpack:OSVDB-100524
  title: XSS Vulnerability in number_to_currency
  description: |
    There is an XSS vulnerability in the number_to_currency helper in Ruby on Raile.
    The number_to_currency helper allows users to nicely format a numeric value. One
    of the parameters to the helper (unit) is not escaped correctly.  Applications
    which pass user controlled data as the unit parameter are vulnerable to an XSS attack.
  affected_package: actionpack
  patched_versions:
  - ">= 4.0.2"
  - "~> 3.2.16"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2013-6415
  osvdb: 100524
  cvss_v2_score: 4.3
  disclosed_date: 2013-12-03
  created_date: 2013-12-03
  last_modified_date: 2013-12-03
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://groups.google.com/forum/#!topic/ruby-security-ann/9WiRn2nhfq0
- id: rubyadvisory:rubygems:actionpack:OSVDB-100525
  title: Denial of Service Vulnerability in Action View
  description: |
    There is a denial of service vulnerability in the header handling component of
    Action View.
  affected_package: actionpack
  unaffected_versions:
  - "~> 2.3.0"
  patched_versions:
  - ">= 4.0.2"
  - "~> 3.2.16"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2013-6414
  osvdb: 100525
  cvss_v2_score: 5.0
  disclosed_date: 2013-12-03
  created_date: 2013-12-03
  last_modified_date: 2013-12-03
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://groups.google.com/forum/#!topic/ruby-security-ann/A-ebV4WxzKg
- id: rubyadvisory:rubygems:actionpack:OSVDB-100526
  title: XSS Vulnerability in simple_format helper
  description: |
    There is a vulnerability in the simple_format helper in Ruby on Rails.
    The simple_format helper converts user supplied text into html text
    which is intended to be safe for display. A change made to the
    implementation of this helper means that any user provided HTML
    attributes will not be escaped correctly. As a result of this error,
    applications which pass user-controlled data to be included as html
    attributes will be vulnerable to an XSS attack.
  affected_package: actionpack
  unaffected_versions:
  - "~> 2.3.0"
  - "~> 3.1.0"
  - "~> 3.2.0"
  patched_versions:
  - ">= 4.0.2"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2013-6416
  osvdb: 100526
  cvss_v2_score: 4.3
  disclosed_date: 2013-12-03
  created_date: 2013-12-03
  last_modified_date: 2013-12-03
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://groups.google.com/forum/#!topic/ruby-security-ann/5ZI1-H5OoIM
- id: rubyadvisory:rubygems:actionpack:OSVDB-100527
  title: Incomplete fix to CVE-2013-0155 (Unsafe Query Generation Risk)
  description: |
    The prior fix to CVE-2013-0155 was incomplete and the use of common
    3rd party libraries can accidentally circumvent the protection. Due
    to the way that Rack::Request and Rails::Request interact, it is
    possible for a 3rd party or custom rack middleware to parse the
    parameters insecurely and store them in the same key that Rails uses
    for its own parameters.  In the event that happens the application
    will receive unsafe parameters and could be vulnerable to the earlier
    vulnerability.
  affected_package: actionpack
  patched_versions:
  - ">= 4.0.2"
  - "~> 3.2.16"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2013-6417
  osvdb: 100527
  cvss_v2_score: 6.4
  disclosed_date: 2013-12-03
  created_date: 2013-12-03
  last_modified_date: 2013-12-03
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://groups.google.com/forum/#!topic/ruby-security-ann/niK4drpSHT4
- id: rubyadvisory:rubygems:actionpack:OSVDB-100528
  title: Reflective XSS Vulnerability in Ruby on Rails
  description: |
    There is a vulnerability in the internationalization component of Ruby on
    Rails. Under certain common configurations an attacker can provide specially
    crafted input which will execute a reflective XSS attack.

    The root cause of this issue is a vulnerability in the i18n gem which has
    been assigned the identifier CVE-2013-4492.
  affected_package: actionpack
  patched_versions:
  - ">= 4.0.2"
  - "~> 3.2.16"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2013-4491
  osvdb: 100528
  cvss_v2_score: 4.3
  disclosed_date: 2013-12-03
  created_date: 2013-12-03
  last_modified_date: 2013-12-03
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://groups.google.com/forum/#!topic/ruby-security-ann/pLrh6DUw998
- id: rubyadvisory:rubygems:actionpack:OSVDB-103439
  title: XSS Vulnerability in number_to_currency, number_to_percentage and number_to_human
  description: |
    Ruby on Rails contains a flaw that allows a cross-site scripting (XSS) attack.
    This flaw exists because the actionpack/lib/action_view/helpers/number_helper.rb
    script does not validate input to the 'number_to_currency', 'number_to_percentage',
    and 'number_to_human' helpers before returning it to users. This may allow a
    remote attacker to create a specially crafted request that would execute arbitrary
    script code in a user's browser session within the trust relationship between
    their browser and the server.
  affected_package: actionpack
  patched_versions:
  - ">= 4.1.0.beta2"
  - "~> 3.2.17"
  - "~> 4.0.3"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2014-0081
  osvdb: 103439
  cvss_v2_score: 4.3
  disclosed_date: 2014-02-18
  created_date: 2014-02-18
  last_modified_date: 2014-02-18
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: http://osvdb.org/show/osvdb/103439
- id: rubyadvisory:rubygems:actionpack:OSVDB-103440
  title: Denial of Service Vulnerability in Action View when using render :text
  description: |
    Ruby on Rails contains a flaw in actionpack/lib/action_view/template/text.rb
    in the text rendering component of Action View that is triggered when
    handling MIME types that are converted to symbols. This may allow a
    remote attacker to cause a denial of service.
  affected_package: actionpack
  unaffected_versions:
  - ">= 4.0.0"
  patched_versions:
  - ">= 3.2.17"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2014-0082
  osvdb: 103440
  cvss_v2_score: 5.0
  disclosed_date: 2014-02-18
  created_date: 2014-02-18
  last_modified_date: 2014-02-18
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: http://osvdb.org/show/osvdb/103440
- id: rubyadvisory:rubygems:actionpack:OSVDB-74616
  title: Response Splitting Vulnerability in Ruby on Rails
  description: |
    A response splitting flaw in Ruby on Rails 2.3.x was reported that could allow
    a remote attacker to inject arbitrary HTTP headers into a response due to
    insufficient sanitization of the values provided for response content types.
  affected_package: actionpack
  patched_versions:
  - ">= 2.3.13"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2011-3186
  osvdb: 74616
  cvss_v2_score: 4.3
  disclosed_date: 2011-08-16
  created_date: 2011-08-16
  last_modified_date: 2011-08-16
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://groups.google.com/forum/#!topic/rubyonrails-security/b_yTveAph2g
- id: rubyadvisory:rubygems:actionpack:OSVDB-77199
  title: XSS vulnerability in the translate helper method in Ruby on Rails
  description: |
    A cross-site scripting (XSS) flaw was found in the way the 'translate' helper
    method of the Ruby on Rails performed HTML escaping of interpolated user
    input, when interpolation in combination with HTML-safe translations were
    used. A remote attacker could use this flaw to execute arbitrary HTML or web
    script by providing a specially-crafted input to Ruby on Rails application,
    using the ActionPack module and its 'translate' helper method without explicit
    (application specific) sanitization of user provided input.
  affected_package: actionpack
  patched_versions:
  - ">= 3.1.2"
  - "~> 3.0.11"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2011-4319
  osvdb: 77199
  cvss_v2_score: 4.3
  disclosed_date: 2011-11-17
  created_date: 2011-11-17
  last_modified_date: 2011-11-17
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://groups.google.com/forum/#!topic/rubyonrails-security/K2HXD7c8fMU
- id: rubyadvisory:rubygems:actionpack:OSVDB-79727
  title: Ruby on Rails actionpack/lib/action_view/helpers/form_options_helper.rb Manually
    Generated Select Tag Options XSS
  description: "Ruby on Rails contains a flaw that allows a remote cross-site scripting
    (XSS) \nattack. This flaw exists because the application does not validate manually\ngenerated
    'select tag options' upon submission to\nactionpack/lib/action_view/helpers/form_options_helper.rb.
    This may allow a\nuser to create a specially crafted request that would execute
    arbitrary\nscript code in a user's browser within the trust relationship between
    their\nbrowser and the server.\n"
  affected_package: actionpack
  patched_versions:
  - ">= 3.2.2"
  - "~> 3.0.12"
  - "~> 3.1.4"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2012-1099
  osvdb: 79727
  cvss_v2_score: 4.3
  disclosed_date: 2012-03-01
  created_date: 2012-03-01
  last_modified_date: 2012-03-01
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: http://www.osvdb.org/show/osvdb/79727
- id: rubyadvisory:rubygems:actionpack:OSVDB-84243
  title: Ruby on Rails actionpack/lib/action_controller/metal/http_authentication.rb
    with_http_digest Helper Method Remote DoS
  description: |
    Ruby on Rails contains a flaw that may allow a remote denial of service.
    The issue is triggered when an error occurs in
    actionpack/lib/action_controller/metal/http_authentication.rb when the
    with_http_digest helper method is being used. This may allow a remote
    attacker to cause a loss of availability for the program.
  affected_package: actionpack
  unaffected_versions:
  - ">= 2.3.5  <= 2.3.14"
  patched_versions:
  - ">= 3.2.7"
  - "~> 3.0.16"
  - "~> 3.1.7"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2012-3424
  osvdb: 84243
  cvss_v2_score: 5.0
  disclosed_date: 2012-07-26
  created_date: 2012-07-26
  last_modified_date: 2012-07-26
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: http://www.osvdb.org/show/osvdb/84243
- id: rubyadvisory:rubygems:actionpack:OSVDB-84513
  title: Ruby on Rails strip_tags Helper Method XSS
  description: |
    Ruby on Rails contains a flaw that allows a remote cross-site scripting (XSS)
    attack. This flaw exists because the application does not validate input
    passed via the 'strip_tags' helper method before returning it to the user.
    This may allow a user to create a specially crafted request that would
    execute arbitrary script code in a user's browser within the trust
    relationship between their browser and the server.
  affected_package: actionpack
  patched_versions:
  - ">= 3.2.8"
  - "~> 3.0.17"
  - "~> 3.1.8"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2012-3465
  osvdb: 84513
  cvss_v2_score: 4.3
  disclosed_date: 2012-08-09
  created_date: 2012-08-09
  last_modified_date: 2012-08-09
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: http://www.osvdb.org/show/osvdb/84513
- id: rubyadvisory:rubygems:actionpack:OSVDB-84515
  title: Ruby on Rails select_tag Helper Method prompt Value XSS
  description: |
    Ruby on Rails contains a flaw that allows a remote cross-site scripting (XSS)
    attack. This flaw exists because input passed via the prompt value is not
    properly sanitized by the select_tag helper method before returning it to
    the user. This may allow a user to create a specially crafted request that
    would execute arbitrary script code in a user's browser within the trust
    relationship between their browser and the server.
  affected_package: actionpack
  unaffected_versions:
  - "~> 2.3.0"
  patched_versions:
  - ">= 3.2.8"
  - "~> 3.0.17"
  - "~> 3.1.8"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2012-3463
  osvdb: 84515
  cvss_v2_score: 4.3
  disclosed_date: 2012-08-09
  created_date: 2012-08-09
  last_modified_date: 2012-08-09
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: http://osvdb.org/84515
- id: rubyadvisory:rubygems:actionpack:OSVDB-89026
  title: Ruby on Rails params_parser.rb Action Pack Type Casting Parameter Parsing
    Remote Code Execution
  description: |
    Ruby on Rails contains a flaw in params_parser.rb of the Action Pack.
    The issue is triggered when a type casting error occurs during the parsing
    of parameters. This may allow a remote attacker to potentially execute
    arbitrary code.
  affected_package: actionpack
  patched_versions:
  - ">= 3.2.11"
  - "~> 2.3.15"
  - "~> 3.0.19"
  - "~> 3.1.10"
  severity: high
  package_manager: rubygems
  cve:
  - CVE-2013-0156
  osvdb: 89026
  cvss_v2_score: 10.0
  disclosed_date: 2013-01-08
  created_date: 2013-01-08
  last_modified_date: 2013-01-08
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: http://osvdb.org/show/osvdb/89026
- id: rubyadvisory:rubygems:actionpack:OSVDB-91452
  title: XSS vulnerability in sanitize_css in Action Pack
  description: |
    There is an XSS vulnerability in the `sanitize_css` method in Action
    Pack. Carefully crafted text can bypass the sanitization provided in
    the `sanitize_css` method in Action Pack
  affected_package: actionpack
  patched_versions:
  - ">= 3.2.13"
  - "~> 2.3.18"
  - "~> 3.1.12"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2013-1855
  osvdb: 91452
  cvss_v2_score: 4.3
  disclosed_date: 2013-03-19
  created_date: 2013-03-19
  last_modified_date: 2013-03-19
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: http://www.osvdb.org/show/osvdb/91452
- id: rubyadvisory:rubygems:actionpack:OSVDB-91454
  title: XSS Vulnerability in the `sanitize` helper of Ruby on Rails
  description: |
    The sanitize helper in Ruby on Rails is designed to
    filter HTML and remove all tags and attributes which could be
    malicious. The code which ensured that URLs only contain supported
    protocols contained several bugs which could allow an attacker to
    embed a tag containing a URL which executes arbitrary javascript
    code.
  affected_package: actionpack
  patched_versions:
  - ">= 3.2.13"
  - "~> 2.3.18"
  - "~> 3.1.12"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2013-1857
  osvdb: 91454
  cvss_v2_score: 4.3
  disclosed_date: 2013-03-19
  created_date: 2013-03-19
  last_modified_date: 2013-03-19
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: http://osvdb.org/show/osvdb/91454
- id: snykio:rubygems:actionpack:20015
  title: HTTP Response Splitting
  description: |
    [`actionpack`][1] is a web app builder and tester on Rails. Affected
    versions of this Gem, do not sanitize the values provided for response
    content types, allowing a remote attacker to inject arbitrary HTTP
    headers into a response.



    [1]: https://rubygems.org/gems/actionpack
  affected_package: actionpack
  vulnerable_versions:
  - "< 2.3.13"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2011-3186
  cwe:
  - CWE-93
  disclosed_date: 2011-08-15
  created_date: 2011-08-15
  last_modified_date: 2011-08-15
  credit:
  - Brent Miller
  references:
  - http://rubysec.com/advisories/CVE-2011-3186/
  - https://groups.google.com/forum/#!topic/rubyonrails-security/b_yTveAph2g
  source_url: https://snyk.io/vuln/SNYK-RUBY-ACTIONPACK-20015
- id: snykio:rubygems:actionpack:20020
  title: Cross-site Scripting (XSS)
  description: |+
    [`actionpack`][1] is a web app builder and tester on Rails.

    Affected versions of this Gem are vulnerable to Cross-site Scripting
    (XSS) attacks via the `translate` helper method. A cross-site scripting
    (XSS) flaw was found in the way the `translate` helper method of the
    Ruby on Rails performed HTML escaping of interpolated user input, when
    interpolation in combination with HTML-safe translations were used. A
    remote attacker could use this flaw to execute arbitrary HTML or web
    script by providing a specially-crafted input to Ruby on Rails
    application, using the `ActionPack` module and its `translate` helper
    method without explicit (application specific) sanitization of user
    provided input.



    [1]: https://rubygems.org/gems/actionpack
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: actionpack
  vulnerable_versions:
  - "< 3.0.11"
  - "< 3.1.2  >= 3.1"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2011-4319
  cwe:
  - CWE-79
  disclosed_date: 2011-11-16
  created_date: 2011-11-16
  last_modified_date: 2011-11-16
  credit:
  - Sergey Nartimov
  references:
  - http://rubysec.com/advisories/CVE-2011-4319/
  - https://groups.google.com/forum/#!topic/rubyonrails-security/K2HXD7c8fMU
  source_url: https://snyk.io/vuln/SNYK-RUBY-ACTIONPACK-20020
- id: snykio:rubygems:actionpack:20024
  title: Cross-site Scripting (XSS)
  description: |+
    [`actionpack`][1] is a web app builder and tester on Rails.

    Affected versions of this Gem are vulnerabile to Cross-site Scripting
    (XSS) attacks due to lack of validation of manually generated `select
    tag options`. The application does not validate manually generated
    \'select tag options\' upon submission. This may allow a user to create
    a specially crafted request that would execute arbitrary script code in
    a user\'s browser within the trust relationship between their browser
    and the server.



    [1]: https://rubygems.org/gems/actionpack
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: actionpack
  vulnerable_versions:
  - "< 3.0.12"
  - "< 3.1.4  >= 3.1"
  - "< 3.2.2  >= 3.2"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2012-1099
  cwe:
  - CWE-79
  disclosed_date: 2012-02-29
  created_date: 2012-02-29
  last_modified_date: 2012-02-29
  credit:
  - Unknown
  references:
  - http://weblog.rubyonrails.org/2012/3/1/ann-rails-3-0-12-has-been-released/
  - https://bugzilla.redhat.com/show_bug.cgi?id=799276
  - https://nvd.nist.gov/vuln/detail/CVE-2012-1099
  source_url: https://snyk.io/vuln/SNYK-RUBY-ACTIONPACK-20024
- id: snykio:rubygems:actionpack:20035
  title: Denial of Service (DoS)
  description: |+
    [`actionpack`][1] is a web app builder and tester on Rails.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS) attacks when the `with_http_digest` helper method is being used.
    It may allow a remote denial of service. The issue is triggered when an
    error occurs in when the `with_http_digest` helper method is being used.
    This may allow a remote attacker to cause a loss of availability for the
    program.



    [1]: https://rubygems.org/gems/actionpack
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: actionpack
  vulnerable_versions:
  - "< 2.3.5"
  - "< 3.0.16  > 2.3.14"
  - "< 3.1.7  >= 3.1"
  - "< 3.2.7  >= 3.2"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2012-3424
  cwe:
  - CWE-400
  disclosed_date: 2012-07-25
  created_date: 2016-10-18
  last_modified_date: 2016-10-18
  credit:
  - Unknown
  references:
  - http://rubysec.com/advisories/actionpack-OSVDB-84243
  source_url: https://snyk.io/vuln/SNYK-RUBY-ACTIONPACK-20035
- id: snykio:rubygems:actionpack:20037
  title: Cross-site Scripting (XSS)
  description: |+
    [`actionpack`][1] is a web app builder and tester on Rails.

    Affected versions of this Gem are vulnerable to Cross-site Scripting
    (XSS) attacks. Input passed via the prompt value is not properly
    sanitized by the `select_tag` helper method before returning it to the
    user. This may allow a user to create a specially crafted request that
    would execute arbitrary script code in a user\'s browser within the
    trust relationship between their browser and the server.



    [1]: https://rubygems.org/gems/actionpack
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: actionpack
  vulnerable_versions:
  - "< 2.3.0"
  - "< 3.0.17  >= 2.4"
  - "< 3.1.8  >= 3.1"
  - "< 3.2.8  >= 3.2"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2012-3463
  cwe:
  - CWE-79
  disclosed_date: 2012-08-08
  created_date: 2012-08-08
  last_modified_date: 2012-08-08
  credit:
  - Unknown
  references:
  - http://weblog.rubyonrails.org/2012/8/9/ann-rails-3-2-8-has-been-released/
  - https://access.redhat.com/errata/RHSA-2013:0154
  - https://nvd.nist.gov/vuln/detail/CVE-2012-3463
  source_url: https://snyk.io/vuln/SNYK-RUBY-ACTIONPACK-20037
- id: snykio:rubygems:actionpack:20038
  title: Cross-site Scripting (XSS)
  description: |+
    [`actionpack`][1] is a web app builder and tester on Rails.

    Affected versions of this Gem are vulnerable to Cross-site Scripting
    (XSS) attacks. The application does not validate input passed via the
    \'strip\_tags\' helper method before returning it to the user. This may
    allow a user to create a specially crafted request that would execute
    arbitrary script code in a user\'s browser within the trust relationship
    between their browser and the server.



    [1]: https://rubygems.org/gems/actionpack
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: actionpack
  vulnerable_versions:
  - "< 3.0.17"
  - "< 3.1.8  >= 3.1"
  - "< 3.2.8  >= 3.2"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2012-3465
  cwe:
  - CWE-79
  disclosed_date: 2012-08-08
  created_date: 2016-10-18
  last_modified_date: 2016-10-18
  credit:
  - Unknown
  references:
  - http://weblog.rubyonrails.org/2012/8/9/ann-rails-3-2-8-has-been-released/
  - https://access.redhat.com/errata/RHSA-2013:0154
  - https://nvd.nist.gov/vuln/detail/CVE-2012-3465
  source_url: https://snyk.io/vuln/SNYK-RUBY-ACTIONPACK-20038
- id: snykio:rubygems:actionpack:20047
  title: Arbitrary Code Execution
  description: |
    [`actionpack`][1] is a web app builder and tester on Rails.

    Affected versions of this Gem are vulnerable to Arbitrary Remote Code
    Execution. The issue is triggered when a type casting error occurs
    during the parsing of parameters. This may allow a remote attacker to
    potentially execute arbitrary code.



    [1]: https://rubygems.org/gems/actionpack
  affected_package: actionpack
  vulnerable_versions:
  - "<2.3.15"
  - ">=3.0.0  <3.0.19"
  - ">=3.1.0  <3.1.10"
  - ">=3.2.0  <3.2.11"
  severity: high
  package_manager: rubygems
  cve:
  - CVE-2013-0156
  cwe:
  - CWE-94
  disclosed_date: 2013-01-07
  created_date: 2016-10-18
  last_modified_date: 2016-10-18
  credit:
  - Unknown
  references:
  - http://rubysec.com/advisories/actionpack-OSVDB-89026
  source_url: https://snyk.io/vuln/SNYK-RUBY-ACTIONPACK-20047
- id: snykio:rubygems:actionpack:20087
  title: Cross-site Scripting (XSS)
  description: |+
    [`actionpack`][1] is a web app builder and tester on Rails.

    Affected versions of this Gem are vulnerable to Cross-site Scripting
    (XSS) attacks. The sanitize helper in Ruby on Rails is designed to
    filter HTML and remove all tags and attributes which could be malicious.
    The code which ensured that URLs only contain supported protocols
    contained several bugs which could allow an attacker to embed a tag
    containing a URL which executes arbitrary javascript code.



    [1]: https://rubygems.org/gems/actionpack
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: actionpack
  vulnerable_versions:
  - "< 2.3.18"
  - "< 3.1.12  >= 2.4"
  - "< 3.2.13  >= 3.2"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2013-1857
  cwe:
  - CWE-79
  disclosed_date: 2013-03-18
  created_date: 2016-10-18
  last_modified_date: 2016-10-18
  credit:
  - Unknown
  references:
  - https://access.redhat.com/errata/RHSA-2013:0698
  - https://nvd.nist.gov/vuln/detail/CVE-2013-1857
  source_url: https://snyk.io/vuln/SNYK-RUBY-ACTIONPACK-20087
- id: snykio:rubygems:actionpack:20090
  title: Cross-site Scripting (XSS)
  description: |+
    [`actionpack`][1] is a web app builder and tester on Rails. There is a
    Cross-site Scripting (XSS) vulnerability in the `sanitize_css` method in
    Action Pack. Carefully crafted text can bypass the sanitization provided
    in the `sanitize_css` method in Action Pack.



    [1]: https://rubygems.org/gems/actionpack
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: actionpack
  vulnerable_versions:
  - "< 2.3.18"
  - "< 3.1.12  >= 2.4"
  - "< 3.2.13  >= 3.2"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2013-1855
  cwe:
  - CWE-79
  disclosed_date: 2013-03-18
  created_date: 2013-10-16
  last_modified_date: 2013-10-16
  credit:
  - Unknown
  references:
  - https://access.redhat.com/errata/RHSA-2013:0698
  - https://nvd.nist.gov/vuln/detail/CVE-2013-1855
  source_url: https://snyk.io/vuln/SNYK-RUBY-ACTIONPACK-20090
- id: snykio:rubygems:actionpack:20120
  title: Cross-site Scripting (XSS)
  description: |+
    [`actionpack`][1] is a web app builder and tester on Rails.

    Affected versions of this Gem are vulnerable to Cross-site Scripting
    (XSS) attacks via the `simple_format` helper in Ruby on Rails meaning
    that any user provided HTML attributes will not be escaped correctly.
    The simple\_format helper converts user supplied text into html text
    which is intended to be safe for display. A change made to the
    implementation of this helper means that any user provided HTML
    attributes will not be escaped correctly. As a result of this error,
    applications which pass user-controlled data to be included as html
    attributes will be vulnerable to an XSS attack.



    [1]: https://rubygems.org/gems/actionpack
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: actionpack
  vulnerable_versions:
  - "< 2.3.0"
  - "< 3.1.0  >= 2.4"
  - "< 4.0.2  >= 3.3"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2013-6416
  cwe:
  - CWE-79
  disclosed_date: 2013-12-02
  created_date: 2013-12-02
  last_modified_date: 2013-12-02
  credit:
  - Kevin Reintjes
  references:
  - http://weblog.rubyonrails.org/2013/12/3/Rails_3_2_16_and_4_0_2_have_been_released/
  - https://nvd.nist.gov/vuln/detail/CVE-2013-6416
  source_url: https://snyk.io/vuln/SNYK-RUBY-ACTIONPACK-20120
- id: snykio:rubygems:actionpack:20121
  title: Cross-site Scripting (XSS)
  description: |+
    [`actionpack`][1] is a web app builder and tester on Rails.

    Affected versions of this Gem are vulnerable to Cross-site Scripting
    (XSS) in the `number_to_currency` helper. It allows users to nicely
    format a numeric value. One of the parameters to the helper (unit) is
    not escaped correctly. Applications which pass user controlled data as
    the unit parameter are vulnerable to an XSS attack.



    [1]: https://rubygems.org/gems/actionpack
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: actionpack
  vulnerable_versions:
  - "< 3.2.16"
  - "< 4.0.2  >= 3.3"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2013-6415
  cwe:
  - CWE-79
  disclosed_date: 2013-12-02
  created_date: 2013-12-02
  last_modified_date: 2013-12-02
  credit:
  - Ankit Gupta
  references:
  - https://groups.google.com/forum/#!topic/ruby-security-ann/9WiRn2nhfq0
  - https://nvd.nist.gov/vuln/detail/CVE-2013-6415
  source_url: https://snyk.io/vuln/SNYK-RUBY-ACTIONPACK-20121
- id: snykio:rubygems:actionpack:20122
  title: Denial of Service (DoS)
  description: |+
    [`actionpack`][1] is a web app builder and tester on Rails.

    Affected versions of this Gem are vulnerable to Denial of Service (DoS)
    attacks via the header handling component.
    `actionpack/lib/action_view/lookup_context.rb` in Action View allows
    remote attackers to cause a denial of service (memory consumption) via a
    header containing an invalid MIME type that leads to excessive caching.



    [1]: https://rubygems.org/gems/actionpack
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: actionpack
  vulnerable_versions:
  - "< 2.3.0"
  - "< 3.2.16  >= 2.4"
  - "< 4.0.2  >= 3.3"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2013-6414
  cwe:
  - CWE-400
  disclosed_date: 2013-12-02
  created_date: 2013-12-02
  last_modified_date: 2013-12-02
  credit:
  - Unknown
  references:
  - https://groups.google.com/forum/#!topic/ruby-security-ann/A-ebV4WxzKg
  - https://rubysec.com/advisories/actionpack-OSVDB-100525
  source_url: https://snyk.io/vuln/SNYK-RUBY-ACTIONPACK-20122
- id: snykio:rubygems:actionpack:20123
  title: Cross-site Scripting (XSS)
  description: |+
    [`actionpack`][1] is a web app builder and tester on Rails.

    Affected versions of this Gem are vulnerable to Cross-site Scripting
    (XSS) attacks. When the i18n gem is unable to provide a translation for
    a given string, it creates a fallback HTML string. Under certain
    configurations, an attacker can provide a specially crafted input which
    will execute a reflective XSS attack.

    The root cause of this issue is a [vulnerability in the i18n gem][2]
    which has been assigned the identifier CVE-2013-4492.



    [1]: https://rubygems.org/gems/actionpack
    [2]: https://snyk.io/vuln/SNYK-RUBY-I18N-20124
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: actionpack
  vulnerable_versions:
  - "< 3.2.16"
  - "< 4.0.2  >= 3.3"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2013-4491
  cwe:
  - CWE-79
  disclosed_date: 2013-12-02
  created_date: 2013-12-02
  last_modified_date: 2013-12-02
  credit:
  - Peter McLarnan
  references:
  - https://groups.google.com/forum/#!topic/ruby-security-ann/pLrh6DUw998
  - https://hakiri.io/technologies/rails/issues/4c55efe3784050
  source_url: https://snyk.io/vuln/SNYK-RUBY-ACTIONPACK-20123
- id: snykio:rubygems:actionpack:20125
  title: Unsafe Query Generation Risk
  description: |+
    [`actionpack`][1] is a web app builder and tester on Rails. Affected
    versions of this Gem are vulnerable to Unsafe Query Generation Risk.

    The prior fix to [CVE-2013-0155][2] was incomplete, and some 3rd party
    libraries can accidentally circumvent the protection.



    [1]: https://rubygems.org/gems/actionpack
    [2]: https://snyk.io/vuln/SNYK-RUBY-ACTIONPACK-20125
    \nIt is possible for a 3rd party or custom rack middleware to parse the
    parameters insecurely and store them in the same key that Rails uses for
    its own parameters. This is due to the way that `Rack::Request` and
    `Rails::Request` interact.

    If this happens, the application will receive unsafe parameters and
    could be vulnerable to the earlier vulnerability.

  affected_package: actionpack
  vulnerable_versions:
  - "< 3.2.16"
  - "< 4.0.2  >= 3.3"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2013-6417
  cwe:
  - CWE-943
  disclosed_date: 2013-12-02
  created_date: 2013-12-02
  last_modified_date: 2013-12-02
  credit:
  - Sudhir Rao
  references:
  - http://rubysec.com/advisories/CVE-2013-6417/
  - https://groups.google.com/forum/#!topic/ruby-security-ann/niK4drpSHT4
  source_url: https://snyk.io/vuln/SNYK-RUBY-ACTIONPACK-20125
- id: snykio:rubygems:actionpack:20147
  title: Cross-site Scripting (XSS)
  description: |+
    [`actionpack`][1] is a web app builder and tester on Rails.

    Affected versions of this Gem are vulnerable to Cross-site Scripting
    (XSS) attacks via the
    `actionpack/lib/action_view/helpers/number_helper.rb` script that does
    not validate input to the `number_to_currency`, `number_to_percentage`,
    and `number_to_human` helpers before returning it to users. This would
    allow a remote attacker to create a request that executes code in a
    user\'s browser session.



    [1]: https://rubygems.org/gems/actionpack
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: actionpack
  vulnerable_versions:
  - "<3.2.17"
  - ">=4.0.0.beta1  <4.0.3"
  - ">=4.1.0.beta1  <4.1.0.beta2"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2014-0081
  cwe:
  - CWE-79
  - CWE-94
  disclosed_date: 2014-02-17
  created_date: 2014-02-17
  last_modified_date: 2014-02-17
  credit:
  - Kevin Reintjes
  references:
  - https://nvd.nist.gov/vuln/detail/CVE-2014-0081
  - https://www.securitytracker.com/id/1029782
  source_url: https://snyk.io/vuln/SNYK-RUBY-ACTIONPACK-20147
- id: snykio:rubygems:actionpack:20148
  title: Denial of Service (DoS)
  description: |+
    [`actionpack`][1] is a web app builder and tester on Rails.

    Affected versions of this Gem are vulnerable to Denial of Service (DoS)
    attacks via the text rendering component. It contains a flaw in
    `_actionpack/lib/action_view/template/text.rb_` in the text rendering
    component of Action View when using render :text. This is triggered when
    handling MIME types that are converted to symbols.



    [1]: https://rubygems.org/gems/actionpack
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: actionpack
  vulnerable_versions:
  - "< 3.2.17"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2014-0082
  cwe:
  - CWE-400
  disclosed_date: 2014-02-17
  created_date: 2014-02-17
  last_modified_date: 2014-02-17
  credit:
  - Toby Hsieh
  references:
  - https://groups.google.com/forum/#!topic/rubyonrails-security/LMxO_3_eCuc
  - https://rubysec.com/advisories/actionpack-OSVDB-103440
  source_url: https://snyk.io/vuln/SNYK-RUBY-ACTIONPACK-20148
- id: snykio:rubygems:actionpack:20158
  title: Directory Traversal
  description: |
    [`actionpack`][1] is a web app builder and tester on Rails.

    Affected versions of this Gem are vulnerable to Directory Traversal
    attacks. The `implicit render` functionality allows controllers to
    render a template, even if there is no explicit action with the
    corresponding name. This module does not perform adequate input
    sanitization, which could allow an attacker to use a specially crafted
    request to retrieve arbitrary files from the rails application server.



    [1]: https://rubygems.org/gems/actionpack
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
  affected_package: actionpack
  vulnerable_versions:
  - "< 3.2.18"
  - "< 4.0.5  >= 3.3"
  - "< 4.1.1  >= 4.1"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2014-0130
  cwe:
  - CWE-22
  disclosed_date: 2014-05-05
  created_date: 2014-05-05
  last_modified_date: 2014-05-05
  credit:
  - Ville Lautanala
  references:
  - http://rubysec.com/advisories/actionpack-CVE-2014-0130
  - https://groups.google.com/forum/#!topic/rubyonrails-security/NkKc7vTW70o
  source_url: https://snyk.io/vuln/SNYK-RUBY-ACTIONPACK-20158
- id: snykio:rubygems:actionpack:20198
  title: Arbitrary File Existence Exposure
  description: |
    [`actionpack`][1] is a web app builder and tester on Rails.

    Affected versions of this Gem are vulnerable to Arbitrary File Existence
    Exposure. Specially crafted requests can be used to determine whether a
    file exists on the file system, outside of the Rails application\'s root
    directory. The files will not be served, but attackers can determine
    whether or not the file exists.



    [1]: https://rubygems.org/gems/actionpack
  affected_package: actionpack
  vulnerable_versions:
  - ">=3.0.0  <3.2.20"
  - ">=3.3.0  <4.0.11"
  - ">=4.1.0  <4.1.7"
  - ">=4.2.0.beta1  <4.2.0.beta3"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2014-7818
  cwe:
  - CWE-200
  disclosed_date: 2014-10-29
  created_date: 2014-10-29
  last_modified_date: 2014-10-29
  credit:
  - Alex Ianus
  - Christian Hansen
  - Dennis Hackethal
  - Eaden McKee
  - Juan C. Müller
  - Mike McClurg
  references:
  - http://rubysec.com/advisories/actionpack-CVE-2014-7818
  - https://groups.google.com/forum/#!topic/rubyonrails-security/dCp7duBiQgo
  source_url: https://snyk.io/vuln/SNYK-RUBY-ACTIONPACK-20198
- id: snykio:rubygems:actionpack:20200
  title: Arbitrary File Existence Exposure
  description: |
    [`actionpack`][1] is a web app builder and tester on Rails.

    Affected versions of this Gem are vulnerable to Arbitrary File Existence
    Exposure. Specially crafted requests can be used to determine whether a
    file exists on the file system, outside of the Rails application\'s root
    directory. The files will not be served, but attackers can determine
    whether or not the file exists.



    [1]: https://rubygems.org/gems/actionpack
  affected_package: actionpack
  vulnerable_versions:
  - "< 3.2.21  >= 3.0.0"
  - "< 4.0.11.1  >= 3.3"
  - "< 4.1.7.1  >= 4.1"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2014-7829
  cwe:
  - CWE-200
  disclosed_date: 2014-11-16
  created_date: 2014-11-16
  last_modified_date: 2014-11-16
  credit:
  - Patrick Toomey
  - Remon Oldenbeuving
  references:
  - http://rubysec.com/advisories/actionpack-CVE-2014-7829
  - https://groups.google.com/forum/#!topic/rubyonrails-security/rMTQy4oRCGk
  source_url: https://snyk.io/vuln/SNYK-RUBY-ACTIONPACK-20200
- id: snykio:rubygems:actionpack:20255
  title: Denial of Service (DoS)
  description: |+
    [`actionpack`][1] is a web app builder and tester on Rails. Affected
    versions of this Gem are vulnerable to Denial of Service (DoS) attacks.

    Ruby on Rails applications that have a route containing the string
    `":controller"` are susceptible to denial of service caused by unbounded
    memory growth.



    [1]: https://rubygems.org/gems/actionpack
    \nAction Pack keeps a map of `url controller name` to `controller class
    name`. This map is cached globally, and is populated even if the
    controller class doesn\'t actually exist. An attacker could flood a
    vulnerable application route with requests for non-existent controllers,
    leading to unbounded memory growth in this cache.

    To identify if your application is vulnerable, look for routes that
    contain `":controller"`.

  affected_package: actionpack
  vulnerable_versions:
  - "< 4.1.14.1  >= 4.0.0"
  - "< 4.2.5.1  >= 4.2"
  - "< 5.0.0.beta1  >= 4.3"
  severity: high
  package_manager: rubygems
  cve:
  - CVE-2015-7581
  cwe:
  - CWE-200
  disclosed_date: 2016-01-24
  created_date: 2016-01-24
  last_modified_date: 2016-01-24
  credit:
  - Unknown
  references:
  - http://rubysec.com/advisories/CVE-2015-7581
  - https://groups.google.com/forum/#!topic/rubyonrails-security/dthJ5wL69JE
  source_url: https://snyk.io/vuln/SNYK-RUBY-ACTIONPACK-20255
- id: snykio:rubygems:actionpack:20256
  title: Denial of Service (DoS)
  description: |+
    [`actionpack`][1] is a web app builder and tester on Rails.

    Affected versions of this Gem are vulnerable to Denial of Service (DoS)
    Attacks. A carefully crafted accept header can cause a global cache of
    mime types to grow indefinitely which can lead to a possible denial of
    service attack.



    [1]: https://rubygems.org/gems/actionpack
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: actionpack
  vulnerable_versions:
  - "< 3.2.22.1"
  - "< 4.1.14.1  >= 3.2.23"
  - "< 4.2.5.1  >= 4.2"
  - "< 5.0.0.beta1.1  >= 4.3"
  severity: high
  package_manager: rubygems
  cve:
  - CVE-2016-0751
  cwe:
  - CWE-200
  - CWE-400
  disclosed_date: 2016-01-24
  created_date: 2016-01-24
  last_modified_date: 2016-01-24
  credit:
  - Aaron Patterson
  references:
  - https://groups.google.com/forum/#!topic/rubyonrails-security/9oLY_FCzvoc
  - https://rubysec.com/advisories/actionpack-CVE-2016-0751
  source_url: https://snyk.io/vuln/SNYK-RUBY-ACTIONPACK-20256
- id: snykio:rubygems:actionpack:20258
  title: Timing Attack
  description: |
    [`actionpack`][1] is a web app builder and tester on Rails.

    Affected versions of this Gem are vulnerable to a Timing Attack, via the
    basic authentication support in Action Controller. This can allow an
    attacker to determine basic authentication usernames and passwords.



    [1]: https://rubygems.org/gems/actionpack
    \nDue to the way that Action Controller compares user names and passwords
    in basic authentication authorization code, it is possible for an
    attacker to analyze the time taken by a response and guess the password.

    For example, the string comparison `"foo" == "far"` is possibly faster
    than the comparison `"foo" == "for"`, as `"far"` has fewer characters in
    common with `"foo"`. Attackers can use this information to attempt to
    guess the username and password used in the basic authentication system,
    one character at a time.

    You can tell your application is vulnerable to this attack by looking
    for `http_basic_authenticate_with` method calls in your application.

    You can read more about timing attacks (using Node.js as an example) on
    the Snyk blog: [https://snyk.io/blog/node-js-timing-attack-ccc-ctf/][1]



    [1]: https://snyk.io/blog/node-js-timing-attack-ccc-ctf/
  affected_package: actionpack
  vulnerable_versions:
  - "< 3.2.22.1"
  - "< 4.1.14.1  >= 3.2.23"
  - "< 4.2.5.1  >= 4.2"
  - "< 5.0.0.beta1.1  >= 4.3"
  severity: low
  package_manager: rubygems
  cve:
  - CVE-2015-7576
  cwe:
  - CWE-208
  disclosed_date: 2016-01-24
  created_date: 2016-01-24
  last_modified_date: 2016-01-24
  credit:
  - Daniel Waterworth
  references:
  - http://rubysec.com/advisories/actionpack-CVE-2015-7576
  - https://groups.google.com/forum/#!topic/rubyonrails-security/ANv0HDHEC3k
  source_url: https://snyk.io/vuln/SNYK-RUBY-ACTIONPACK-20258
- id: snykio:rubygems:actionpack:20264
  title: Arbitrary Code Injection
  description: |+
    [`actionpack`][1] is a web app builder and tester on Rails. Affected
    versions of this Gem are vulnerable to Arbitrary Code Injection.



    [1]: https://rubygems.org/gems/actionpack
    \nApplications that pass unverified user input to the `render` method in a
    controller or a view may be vulnerable to a code injection.

    Impacted code will look like this:

        class TestController < ApplicationController
          def show
            render params[:id]
          end
        end
    {: .language-ruby}

    An attacker could use the request parameters to coerce the above example
    to execute arbitrary ruby code.

    All users running an affected release should either upgrade or use one
    of the workarounds immediately.

  affected_package: actionpack
  vulnerable_versions:
  - ">=3.2.0.rc1  <3.2.22.2"
  - ">=4.0.0  <4.1.14.2"
  - ">=4.2.0  <4.2.5.2"
  severity: high
  package_manager: rubygems
  cve:
  - CVE-2016-2098
  cwe:
  - CWE-94
  disclosed_date: 2016-02-28
  created_date: 2016-02-28
  last_modified_date: 2016-02-28
  credit:
  - joernchen
  - Tobias Kraze
  references:
  - http://rubysec.com/advisories/CVE-2016-2098
  - https://groups.google.com/forum/#!topic/rubyonrails-security/ly-IH-fxr_Q
  source_url: https://snyk.io/vuln/SNYK-RUBY-ACTIONPACK-20264
- id: snykio:rubygems:actionpack:20274
  title: Cross-site Scripting (XSS)
  description: |+
    [`actionpack`][1] is a web app builder and tester on Rails. Applications
    using `:encode => :javascript` are vulnerable to Cross-site Scripting
    (XSS) attacks. This configuration allows attackers to use a specially
    crafted name or email value and leverage that to inject arbitrary script
    or HTML.



    [1]: https://rubygems.org/gems/actionpack
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: actionpack
  vulnerable_versions:
  - ">= 2.3.0  <= 2.3.10"
  - ">= 3.0.0  <= 3.0.3"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2011-0446
  cwe:
  - CWE-79
  disclosed_date: 2011-02-08
  created_date: 2017-02-28
  last_modified_date: 2017-02-28
  credit:
  - Brendan Coles
  references:
  - http://weblog.rubyonrails.org/2011/2/8/new-releases-2-3-11-and-3-0-4/
  - http://www.securitytracker.com/id?1025064
  - https://groups.google.com/forum/#!searchin/rubyonrails-security/CVE-2011-0446/rubyonrails-security/8CpI7egxX4E/SmtqtyOKWzYJ
  source_url: https://snyk.io/vuln/SNYK-RUBY-ACTIONPACK-20274
- id: snykio:rubygems:actionpack:20275
  title: Cross-site Request Forgery (CSRF)
  description: |+
    [`actionpack`][1] is a web app builder and tester on Rails. Affected
    versions of this package are vulnerable to Cross-site Request Forgery
    (CSRF) attacks.



    [1]: https://rubygems.org/gems/actionpack
    \nHTTP requests are not properly validated, and will allow requests
    containing an X-Requested-With header to be manipulated by an attacker.
    By spoofing AJAX requests and API requests that leverage a combination
    of browser plugins and HTTP redirects, an attacker may bypass the built
    in CSRF protection and successfully attack an application.

  affected_package: actionpack
  vulnerable_versions:
  - ">= 2.1.0  <= 2.3.10"
  - ">= 3.0.0  <= 3.0.3"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2011-0447
  cwe:
  - CWE-352
  disclosed_date: 2011-02-08
  created_date: 2017-02-28
  last_modified_date: 2017-02-28
  credit:
  - Felix Gröbert
  references:
  - http://weblog.rubyonrails.org/2011/2/8/csrf-protection-bypass-in-ruby-on-rails/
  - http://weblog.rubyonrails.org/2011/2/8/new-releases-2-3-11-and-3-0-4/
  - http://www.securitytracker.com/id?1025064
  - https://groups.google.com/forum/#!topic/rubyonrails-security/LZWjzCPgNmU
  source_url: https://snyk.io/vuln/SNYK-RUBY-ACTIONPACK-20275
- id: snykio:rubygems:actionpack:20276
  title: SQL Injection
  description: |
    [`actionpack`][1] is a web app builder and tester on Rails. The
    `limit()` function in actionpack does not specify integer values and
    will allow other characters. This allows an attacker to run a specially
    crafted arguments to execute SQL commands on the host servers database.



    [1]: https://rubygems.org/gems/actionpack
  affected_package: actionpack
  vulnerable_versions:
  - ">= 3.0.0  <=3.0.3"
  severity: high
  package_manager: rubygems
  cve:
  - CVE-2011-0448
  cwe:
  - CWE-89
  disclosed_date: 2011-02-08
  created_date: 2017-02-28
  last_modified_date: 2017-02-28
  credit:
  - Eaden McKee
  references:
  - http://securitytracker.com/id?1025063
  - http://weblog.rubyonrails.org/2011/2/8/new-releases-2-3-11-and-3-0-4/
  - https://groups.google.com/forum/#!topic/rubyonrails-security/tliQLPa_Tu0
  source_url: https://snyk.io/vuln/SNYK-RUBY-ACTIONPACK-20276
- id: snykio:rubygems:actionpack:20278
  title: Authentication Bypass
  description: |
    [`actionpack`][1] is a web app builder and tester on Rails. To list the
    templates available to an application, `actionpack` uses the filesystem
    operations. While using case-insensitive filesystems, an attacker may
    change the case of an action name, and use this to bypass authentication
    processes and leak sensitive data.



    [1]: https://rubygems.org/gems/actionpack
  affected_package: actionpack
  vulnerable_versions:
  - ">= 3.0.0  <=3.0.3"
  severity: high
  package_manager: rubygems
  cve:
  - CVE-2011-0449
  cwe:
  - CWE-592
  disclosed_date: 2011-02-08
  created_date: 2017-02-28
  last_modified_date: 2017-02-28
  credit:
  - Jan M. Faber
  references:
  - http://securitytracker.com/id?1025061
  - http://weblog.rubyonrails.org/2011/2/8/new-releases-2-3-11-and-3-0-4/
  - https://groups.google.com/forum/#!topic/rubyonrails-security/Ni8fvBdhszY
  source_url: https://snyk.io/vuln/SNYK-RUBY-ACTIONPACK-20278
- id: snykio:rubygems:actionpack:20279
  title: Arbitrary View Rendering
  description: |
    [`actionpack`][1] is a web app builder and tester on Rails.

    The template selection code contains a vulnerability which allows an
    attacker to craft a URL and cause Rails to render an arbitrary view,
    regardless of if they have permissions to view the template. This only
    affects 3.0 applications which use `:action` in their routes.



    [1]: https://rubygems.org/gems/actionpack
  affected_package: actionpack
  vulnerable_versions:
  - ">=3.0.0  <3.0.10"
  - ">=3.1.0.beta1  <3.1.0.rc6"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2011-2929
  cwe:
  - CWE-284
  disclosed_date: 2011-08-16
  created_date: 2017-02-28
  last_modified_date: 2017-02-28
  credit:
  - Jan M. Faber
  references:
  - http://weblog.rubyonrails.org/2011/8/16/ann-rails-3-1-0-rc6/
  - https://bugzilla.redhat.com/show_bug.cgi?id=731432
  - https://github.com/rails/rails/commit/5f94b93279f6d0682fafb237c301302c107a9552
  - https://groups.google.com/forum/#!topic/rubyonrails-security/NCCsca7TEtY
  source_url: https://snyk.io/vuln/SNYK-RUBY-ACTIONPACK-20279
- id: snykio:rubygems:actionpack:20280
  title: Log Text Injection
  description: |
    [`actionpack`][1] is a web app builder and tester on Rails. The `to_s`
    method in `actionpack` does not validate the `X-Forwarded-For` header in
    requests from IP addresses on a Class C network, which might allow
    remote attackers to inject arbitrary text into log files or bypass
    intended address parsing via a crafted header.



    [1]: https://rubygems.org/gems/actionpack
  affected_package: actionpack
  vulnerable_versions:
  - ">=3.0.5  <3.0.6.rc1"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2011-3187
  cwe:
  - CWE-74
  disclosed_date: 2011-02-15
  created_date: 2017-02-28
  last_modified_date: 2017-02-28
  credit:
  - Jimmy Bandit
  references:
  - http://webservsec.blogspot.co.il/2011/02/ruby-on-rails-vulnerability.html
  - https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2011-3187
  - https://gist.github.com/rand99/868268
  source_url: https://snyk.io/vuln/SNYK-RUBY-ACTIONPACK-20280
- id: snykio:rubygems:actionpack:20281
  title: Cross-site Scripting (XSS)
  description: |+
    [`actionpack`][1] is a web app builder and tester on Rails.

    Affected versions of this Gem are vulnerable to Cross-site Scripting
    (XSS) attacks. The `strip_tags` helper method does not validate input
    passed before returning it to the user. This may allow an attacker to
    create a specially crafted request that would manipulate the parser and
    cause HTML tags to be injected into the response. This can be exploited
    to inject arbitrary javascript into the rendered page.



    [1]: https://rubygems.org/gems/actionpack
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: actionpack
  vulnerable_versions:
  - "< 3.0.10"
  - ">= 2.3.0  < 2.3.13"
  - ">=3.1.0.rc1  <3.1.0.rc5"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2011-2931
  cwe:
  - CWE-79
  disclosed_date: 2011-08-29
  created_date: 2016-12-26
  last_modified_date: 2016-12-26
  credit:
  - Sascha Depold
  references:
  - https://bugzilla.redhat.com/show_bug.cgi?id=731436
  - https://github.com/rails/rails/commit/586a944ddd4d03e66dea1093306147594748037a
  - https://groups.google.com/forum/#!topic/rubyonrails-security/K5EwdJt06hI
  source_url: https://snyk.io/vuln/SNYK-RUBY-ACTIONPACK-20281
- id: snykio:rubygems:actionpack:569599
  title: Cross-site Request Forgery (CSRF)
  description: |+
    Affected versions of this package are vulnerable to Cross-site Request
    Forgery (CSRF) given a global CSRF token such as the one present in the
    `authenticity_token` meta tag.

  affected_package: actionpack
  vulnerable_versions:
  - "<5.2.4.3"
  - ">=6.0.0  <6.0.3.1"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2020-8166
  cwe:
  - CWE-352
  disclosed_date: 2020-05-19
  created_date: 2020-05-19
  last_modified_date: 2020-05-19
  credit:
  - Unknown
  references:
  - https://github.com/rails/rails/commit/d124f19287f4892c72ca54da728a781591c6fca1
  - https://groups.google.com/forum/#!topic/rubyonrails-security/NOjKiGeXUgw
  source_url: https://snyk.io/vuln/SNYK-RUBY-ACTIONPACK-569599
- id: snykio:rubygems:actionpack:569600
  title: Information Exposure
  description: |+
    Affected versions of this package are vulnerable to Information Exposure
    by Bypassing Strong Parameters. Specifically the return value of `each`,
    or `each_value`, or `each_pair` will return the underlying \"untrusted\"
    hash of data that was read from the parameters.

  affected_package: actionpack
  vulnerable_versions:
  - "<5.2.4.3"
  - ">=6.0.0  <6.0.3.1"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2020-8164
  cwe:
  - CWE-200
  disclosed_date: 2020-05-19
  created_date: 2020-05-19
  last_modified_date: 2020-05-19
  credit:
  - Unknown
  references:
  - https://github.com/rails/rails/commit/b3230c500d780b5a5d500cc57496074e1d3d8ea9
  - https://groups.google.com/forum/#!topic/rubyonrails-security/f6ioe4sdpbY
  source_url: https://snyk.io/vuln/SNYK-RUBY-ACTIONPACK-569600
- id: snykio:rubygems:actionpack:572498
  title: Improper Authorization
  description: |+
    Affected versions of this package are vulnerable to Improper
    Authorization. By default, an attacker is able to execute any migrations
    that are pending for a Rails app running in production mode.

  affected_package: actionpack
  vulnerable_versions:
  - ">=6.0.0  <6.0.3.2"
  severity: high
  package_manager: rubygems
  cve:
  - CVE-2020-8185
  cwe:
  - CWE-285
  disclosed_date: 2020-06-17
  created_date: 2020-06-17
  last_modified_date: 2020-06-17
  credit:
  - Unknown
  references:
  - https://github.com/rails/rails/commit/661da266b94909574426fd1121ef13b800e01b9a
  - https://groups.google.com/g/rubyonrails-security/c/pAe9EV8gbM0
  source_url: https://snyk.io/vuln/SNYK-RUBY-ACTIONPACK-572498
