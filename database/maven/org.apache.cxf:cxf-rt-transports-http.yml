---
- id: ossindex:maven:org.apache.cxf:cxf-rt-transports-http:359766
  title: "[CVE-2014-0110]  Resource Management Errors"
  description: Apache CXF before 2.6.14 and 2.7.x before 2.7.11 allows remote attackers
    to cause a denial of service (/tmp disk consumption) via a large invalid SOAP
    message.
  affected_package: org.apache.cxf:cxf-rt-transports-http
  vulnerable_versions:
  - ">=2.2.6 <=2.6.13"
  package_manager: maven
  cve:
  - CVE-2014-0110
  disclosed_date: 2014-05-08
  created_date: 2014-05-08
  last_modified_date: 2017-06-02
  credit:
  - OSSIndex
  references:
  - http://cxf.apache.org/security-advisories.data/CVE-2014-0110.txt.asc?version=1&modificationDate=1398873378628&api=v2
  - http://rhn.redhat.com/errata/RHSA-2014-1351.html
  - http://rhn.redhat.com/errata/RHSA-2015-0850.html
  - http://rhn.redhat.com/errata/RHSA-2015-0851.html
  - http://www.securitytracker.com/id/1030202
  source_url: https://ossindex.net/resource/package/7015377866/vulnerabilities
- id: ossindex:maven:org.apache.cxf:cxf-rt-transports-http:362452
  title: "[CVE-2014-3577] org.apache.http.conn.ssl.AbstractVerifier in Apache HttpComponents
    HttpClient be..."
  description: org.apache.http.conn.ssl.AbstractVerifier in Apache HttpComponents
    HttpClient before 4.3.5 and HttpAsyncClient before 4.0.2 does not properly verify
    that the server hostname matches a domain name in the subject's Common Name (CN)
    or subjectAltName field of the X.509 certificate, which allows man-in-the-middle
    attackers to spoof SSL servers via a "CN=" string in a field in the distinguished
    name (DN) of a certificate, as demonstrated by the "foo,CN=www.apache.org" string
    in the O field.
  affected_package: org.apache.cxf:cxf-rt-transports-http
  vulnerable_versions:
  - ">=2.7.0 <=2.7.13"
  package_manager: maven
  cve:
  - CVE-2014-3577
  disclosed_date: 2014-08-21
  created_date: 2014-08-21
  last_modified_date: 2017-06-02
  credit:
  - OSSIndex
  references:
  - http://packetstormsecurity.com/files/127913/Apache-HttpComponents-Man-In-The-Middle.html
  - http://rhn.redhat.com/errata/RHSA-2014-1146.html
  - http://rhn.redhat.com/errata/RHSA-2014-1166.html
  - http://rhn.redhat.com/errata/RHSA-2014-1833.html
  - http://rhn.redhat.com/errata/RHSA-2014-1834.html
  - http://rhn.redhat.com/errata/RHSA-2014-1835.html
  - http://rhn.redhat.com/errata/RHSA-2014-1836.html
  - http://rhn.redhat.com/errata/RHSA-2014-1891.html
  - http://rhn.redhat.com/errata/RHSA-2014-1892.html
  - http://rhn.redhat.com/errata/RHSA-2015-0125.html
  - http://rhn.redhat.com/errata/RHSA-2015-0158.html
  - http://rhn.redhat.com/errata/RHSA-2015-0675.html
  - http://rhn.redhat.com/errata/RHSA-2015-0720.html
  - http://rhn.redhat.com/errata/RHSA-2015-0765.html
  - http://rhn.redhat.com/errata/RHSA-2015-0850.html
  - http://rhn.redhat.com/errata/RHSA-2015-0851.html
  - http://rhn.redhat.com/errata/RHSA-2015-1176.html
  - http://rhn.redhat.com/errata/RHSA-2015-1177.html
  - http://rhn.redhat.com/errata/RHSA-2015-1888.html
  - http://rhn.redhat.com/errata/RHSA-2016-1773.html
  - http://rhn.redhat.com/errata/RHSA-2016-1931.html
  - http://seclists.org/fulldisclosure/2014/Aug/48
  - http://secunia.com/advisories/60466
  - http://secunia.com/advisories/60589
  - http://secunia.com/advisories/60713
  - http://www.osvdb.org/110143
  - http://www.securityfocus.com/bid/69258
  - http://www.securitytracker.com/id/1030812
  - http://www.ubuntu.com/usn/USN-2769-1
  - http://xforce.iss.net/xforce/xfdb/95327
  - https://access.redhat.com/solutions/1165533
  - https://exchange.xforce.ibmcloud.com/vulnerabilities/95327
  - https://h20565.www2.hpe.com/portal/site/hpsc/public/kb/docDisplay?docId=emr_na-c05103564
  - https://h20566.www2.hpe.com/portal/site/hpsc/public/kb/docDisplay?docId=emr_na-c05103564
  - https://h20566.www2.hpe.com/portal/site/hpsc/public/kb/docDisplay?docId=emr_na-c05363782
  source_url: https://ossindex.net/resource/package/7015377866/vulnerabilities
- id: snykio:maven:org.apache.cxf:cxf-rt-transports-http:30580
  title: Denial of Service (DoS)
  description: |+
    [org.apache.cxf:cxf-rt-transports-http][1] is a open source services
    framework.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS) via a large invalid SOAP message.



    [1]: http://cxf.apache.org/index.html
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: org.apache.cxf:cxf-rt-transports-http
  vulnerable_versions:
  - ">= 2.2.6 < 2.6.14"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2014-0110
  cwe:
  - CWE-399
  disclosed_date: 2014-05-08
  created_date: 2016-07-14
  last_modified_date: 2016-07-14
  credit:
  - Unknown
  references:
  - http://cxf.apache.org/security-advisories.data/CVE-2014-0110.txt.asc?version=1&modificationDate=1398873378628&api=v2
  - https://git-wip-us.apache.org/repos/asf?p=cxf.git;a=commit;h=8f4799b5bc5ed0fe62d6e018c45d960e3652373e
  - https://github.com/apache/cxf/commit/8f4799b5bc5ed0fe62d6e018c45d960e3652373e
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHECXF-30580
- id: snykio:maven:org.apache.cxf:cxf-rt-transports-http:30581
  title: Man-in-the-Middle (MitM)
  description: |
    [`org.apache.cxf:cxf-rt-transports-http`][1] is an open source services
    framework.

    org.apache.http.conn.ssl.AbstractVerifier in Apache HttpComponents
    HttpClient before 4.3.5 and HttpAsyncClient before 4.0.2 does not
    properly verify that the server hostname matches a domain name in the
    subject\'s Common Name (CN) or subjectAltName field of the X.509
    certificate, which allows man-in-the-middle attackers to spoof SSL
    servers via a \"CN=\" string in a field in the distinguished name (DN)
    of a certificate, as demonstrated by the \"foo,CN=[www.apache.org\"][2]
    string in the O field.



    [1]: https://http://cxf.apache.org/
    [2]: http://www.apache.org&quot;
  affected_package: org.apache.cxf:cxf-rt-transports-http
  vulnerable_versions:
  - ">= 2.7.0 <= 2.7.13"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2014-3577
  cwe:
  - CWE-300
  disclosed_date: 2014-09-08
  created_date: 2014-09-08
  last_modified_date: 2014-09-08
  credit:
  - Unknown
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-3577
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHECXF-30581
- id: snykio:maven:org.apache.cxf:cxf-rt-transports-http:30582
  title: Cross-site Scripting (XSS)
  description: |+
    [org.apache.cxf:cxf-rt-transports-http][1] is an open source services
    framework.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). Apache CXF HTTP transport module uses
    `FormattedServiceListWriter` to provide an HTML page which lists the
    names and the absolute URL addresses of the available service endpoints.
    The module calculates the base URL using the current
    `HttpServletRequest`. The calculated base URL is used by
    `FormattedServiceListWriter` to build the service endpoint absolute
    URLs. If the unexpected matrix parameters have been injected into the
    request URL then these matrix parameters will find their way back to the
    client in the services list page which represents an XSS risk to the
    client.



    [1]: http://cxf.apache.org/index.html
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: org.apache.cxf:cxf-rt-transports-http
  vulnerable_versions:
  - "< 3.0.12"
  - ">= 3.1.0 < 3.1.9"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2016-6812
  cwe:
  - CWE-79
  disclosed_date: 2016-12-28
  created_date: 2016-12-28
  last_modified_date: 2016-12-28
  credit:
  - Donald Kwakkel
  references:
  - http://cxf.apache.org/security-advisories.data/CVE-2016-6812.txt.asc?version=1&modificationDate=1482164360602&api=v2
  - https://github.com/apache/cxf/commit/1be97cb1
  - https://github.com/apache/cxf/commit/1f824d80
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHECXF-30582
- id: snykio:maven:org.apache.cxf:cxf-rt-transports-http:31691
  title: Man-in-the-Middle (MitM)
  description: |
    [org.apache.cxf:cxf-rt-transports-http][1] is an open source services
    framework.

    Affected versions of this package are vulnerable to Man-in-the-Middle
    (MitM). When configuring CXF to use the `com.sun.net.ssl` implementation
    via:

        System.setProperty("java.protocol.handler.pkgs", "com.sun.net.ssl.internal.www.protocol");
    {: .language-java}

    It attempts to make the `HostnameVerifier` work with the old
    `com.sun.net.ssl.HostnameVerifier` interface, but the default
    `HostnameVerifier` implementation in CXF does not implement the method
    in this interface which caused an exception is thrown. This exception
    caught in the reflection code and not properly propagated. Thus the TLS
    hostname verification error will not be thrown, leaving a CXF client
    subject to man-in-the-middle attacks.



    [1]: http://cxf.apache.org/index.html
  affected_package: org.apache.cxf:cxf-rt-transports-http
  vulnerable_versions:
  - "< 3.1.16"
  - ">= 3.2.0 < 3.2.6"
  severity: high
  package_manager: maven
  cve:
  - CVE-2018-8039
  cwe:
  - CWE-300
  disclosed_date: 2018-07-02
  created_date: 2018-07-04
  last_modified_date: 2018-07-04
  credit:
  - Unknown
  references:
  - http://cxf.apache.org/security-advisories.data/CVE-2018-8039.txt.asc?version=1&modificationDate=1530184663000&api=v2
  - https://github.com/apache/cxf/commit/fae6fabf9bd7647f5e9cb68897a7d72b545b741b
  - https://lists.apache.org/thread.html/1f8ff31df204ad0374ab26ad333169e0387a5e7ec92422f337431866@%3Cdev.cxf.apache.org%3E
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHECXF-31691
- id: snykio:maven:org.apache.cxf:cxf-rt-transports-http:536119
  title: Denial of Service (DoS)
  description: |+
    [org.apache.cxf:cxf-rt-transports-http][1] is an open source services
    framework.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS). It allows remote attackers to cause a denial of service (/tmp
    disk consumption) via a large invalid SOAP message.



    [1]: http://cxf.apache.org/index.html
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: org.apache.cxf:cxf-rt-transports-http
  vulnerable_versions:
  - ">= 2.6.0 < 2.6.14"
  - ">= 2.7.0 < 2.7.11"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2014-0110
  cwe:
  - CWE-399
  disclosed_date: 2014-05-08
  created_date: 2016-07-14
  last_modified_date: 2016-07-14
  credit:
  - Unknown
  references:
  - http://cxf.apache.org/security-advisories.data/CVE-2014-0110.txt.asc?version=1&modificationDate=1398873378628&api=v2
  - https://github.com/apache/cxf/commit/8f4799b5bc5ed0fe62d6e018c45d960e3652373e
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHECXF-536119
- id: snykio:maven:org.apache.cxf:cxf-rt-transports-http:542666
  title: Cross-site Scripting (XSS)
  description: |+
    [org.apache.cxf:cxf-rt-transports-http][1] is an open source services
    framework.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). By default, Apache CXF creates a /services page containing a
    listing of the available endpoint names and addresses. This webpage is
    vulnerable to a reflected Cross-Site Scripting (XSS) attack, which
    allows a malicious actor to inject javascript into the web page. Please
    note that the attack exploits a feature which is not typically not
    present in modern browsers, who remove dot segments before sending the
    request. However, Mobile applications may be vulnerable.



    [1]: http://cxf.apache.org/index.html
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: org.apache.cxf:cxf-rt-transports-http
  vulnerable_versions:
  - "< 3.2.12"
  - ">= 3.3.0 < 3.3.5"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2019-17573
  cwe:
  - CWE-79
  disclosed_date: 2020-01-16
  created_date: 2020-01-19
  last_modified_date: 2020-01-19
  credit:
  - GE cyber security team
  references:
  - http://cxf.apache.org/security-advisories.data/CVE-2019-17573.txt.asc?version=1&modificationDate=1579178542000&api=v2
  - https://github.com/apache/cxf/commit/a02e96ba1095596bef481919f16a90c5e80a92c8
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHECXF-542666
