---
- id: snykio:maven:org.apache.nifi:nifi-security-utils:1015373
  title: Information Exposure
  description: |
    [org.apache.nifi:nifi-security-utils][1] is a system to process and
    distribute data.

    Affected versions of this package are vulnerable to Information
    Exposure. The NiFi stateless execution engine produced log output which
    included sensitive property values. When a flow was triggered, the flow
    definition configuration JSON was printed, potentially containing
    sensitive values in plaintext.



    [1]: https://nifi.apache.org
  affected_package: org.apache.nifi:nifi-security-utils
  vulnerable_versions:
  - ">= 1.10.0 < 1.12.0"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2020-9486
  cwe:
  - CWE-200
  disclosed_date: 2020-10-02
  created_date: 2020-10-02
  last_modified_date: 2020-10-02
  credit:
  - Unknown
  references:
  - https://github.com/apache/nifi/commit/148537d64a017b73160b0d49943183c18f883ab0
  - https://issues.apache.org/jira/browse/NIFI-7377
  - https://nifi.apache.org/security#CVE-2020-9486
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHENIFI-1015373
- id: snykio:maven:org.apache.nifi:nifi-security-utils:31562
  title: XML External Entity (XXE) Injection
  description: |+
    [`org.apache.nifi:nifi-security-util`][1] is an easy to use, powerful,
    and reliable system to process and distribute data.

    Affected versions of the package are vulnerable to XML External Entity
    (XXE) Injection. An authorized user could upload a template which
    contained malicious code and accessed sensitive files via an XML
    External Entity (XXE) attack. The fix to properly handle XML External
    Entities was applied on the Apache NiFi 1.4.0 release. Users running a
    prior 1.x release should upgrade to the appropriate release.



    [1]: https://nifi.apache.org
    \nXXE Injection is a type of attack against an application that parses XML
    input. XML is a markup language that defines a set of rules for encoding
    documents in a format that is both human-readable and machine-readable.
    By default, many XML processors allow specification of an external
    entity, a URI that is dereferenced and evaluated during XML processing.
    When an XML document is being parsed, the parser can make a request and
    include the content at the specified URI inside of the XML document.

    Attacks can include disclosing local files, which may contain sensitive
    data such as passwords or private user data, using file: schemes or
    relative paths in the system identifier.

    For example, below is a sample XML document, containing an XML element-
    username.

        <?xml version="1.0" encoding="ISO-8859-1"?>
           <username>John</username>
        </xml>
    {: .language-xml}

    An external XML entity - `xxe`, is defined using a system identifier and
    present within a DOCTYPE header. These entities can access local or
    remote content. For example the below code contains an external XML
    entity that would fetch the content of `/etc/passwd` and display it to
    the user rendered by `username`.

        <?xml version="1.0" encoding="ISO-8859-1"?>
        <!DOCTYPE foo [
           <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
           <username>&xxe;</username>
        </xml>
    {: .language-xml}

    Other XXE Injection attacks can access local resources that may not stop
    returning data, possibly impacting application availability and leading
    to Denial of Service.

  affected_package: org.apache.nifi:nifi-security-utils
  vulnerable_versions:
  - "< 1.4.0"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2017-12623
  cwe:
  - CWE-611
  disclosed_date: 2017-10-01
  created_date: 2017-11-09
  last_modified_date: 2017-11-09
  credit:
  - PaweÅ‚ Gocyla
  references:
  - https://nifi.apache.org/security.html#CVE-2017-12623
  - https://nvd.nist.gov/vuln/detail/CVE-2017-12623
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHENIFI-31562
- id: snykio:maven:org.apache.nifi:nifi-security-utils:31623
  title: Deserialization of Untrusted Data
  description: |
    [Apache NiFi][1] is a system to process and distribute data.

    Affected versions of this package are vulnerable to Deserialization of
    Untrusted Data.

    Any authenticated user (valid client certificate but without ACL
    permissions) could upload a template which contained malicious code and
    caused a denial of service via Java deserialization attack. The fix to
    properly handle Java deserialization was applied on the Apache NiFi
    1.4.0 release. Users running a prior 1.x release should upgrade to the
    appropriate release.

    \##Details Serialization is a process of converting an object into a
    sequence of bytes which can be persisted to a disk or database or can be
    sent through streams. The reverse process of creating object from
    sequence of bytes is called deserialization. Serialization is commonly
    used for communication (sharing objects between multiple hosts) and
    persistence (store the object state in a file or a database). It is an
    integral part of popular protocols like *Remote Method Invocation
    (RMI)*, *Java Management Extension (JMX)*, *Java Messaging System
    (JMS)*, *Action Message Format (AMF)*, *Java Server Faces (JSF)
    ViewState*, etc.

    *Deserialization of untrusted data* ([CWE-502][2]), is when the
    application deserializes untrusted data without sufficiently verifying
    that the resulting data will be valid, letting the attacker to control
    the state or the flow of the execution.

    Java deserialization issues have been known for years. However, interest
    in the issue intensified greatly in 2015, when classes that could be
    abused to achieve remote code execution were found in a [popular library
    (Apache Commons Collection)][3]. These classes were used in zero-days
    affecting IBM WebSphere, Oracle WebLogic and many other products.

    An attacker just needs to identify a piece of software that has both a
    vulnerable class on its path, and performs deserialization on untrusted
    data. Then all they need to do is send the payload into the
    deserializer, getting the command executed.

    > Developers put too much trust in Java Object Serialization. Some even
    > de-serialize objects pre-authentication. When deserializing an Object
    > in Java you typically cast it to an expected type, and therefore
    > Java\'s strict type system will ensure you only get valid object
    > trees. Unfortunately, by the time the type checking happens, platform
    > code has already created and executed significant logic. So, before
    > the final type is checked a lot of code is executed from the
    > readObject() methods of various objects, all of which is out of the
    > developer\'s control. By combining the readObject() methods of various
    > classes which are available on the classpath of the vulnerable
    > application an attacker can execute functions (including calling
    > Runtime.exec() to execute local OS commands).

    * Apache Blog

    \##Remediation Upgrade `Apache NiFi` to 1.4.0 version or higher.



    [1]: https://nifi.apache.org/
    [2]: https://cwe.mitre.org/data/definitions/502.html
    [3]: https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078
  affected_package: org.apache.nifi:nifi-security-utils
  vulnerable_versions:
  - "< 1.4.0"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2017-15703
  cwe:
  - CWE-611
  disclosed_date: 2017-10-02
  created_date: 2018-02-06
  last_modified_date: 2018-02-06
  credit:
  - Andy LoPresto
  references:
  - https://github.com/apache/nifi/pull/2134/commits/91ff58d038d3afe6a6c1aa13226a2c3050612938
  - https://issues.apache.org/jira/browse/NIFI-4357
  - https://nifi.apache.org/security.html#CVE-2017-15703
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHENIFI-31623
- id: snykio:maven:org.apache.nifi:nifi-security-utils:534979
  title: Information Exposure
  description: |
    [org.apache.nifi:nifi-security-utils][1] is a system to process and
    distribute data.

    Affected versions of this package are vulnerable to Information
    Exposure. The `XMLFileLookupService` allows trusted users to
    inadvertently configure a potentially malicious XML file. The XML file
    has the ability to make external calls to services (via XXE) and reveal
    information such as the versions of Java, Jersey, and Apache that the
    NiFI instance uses.



    [1]: https://nifi.apache.org
  affected_package: org.apache.nifi:nifi-security-utils
  vulnerable_versions:
  - ">= 1.3.0 < 1.10.0"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2019-10080
  cwe:
  - CWE-200
  disclosed_date: 2019-06-12
  created_date: 2019-11-19
  last_modified_date: 2019-11-19
  credit:
  - RunningSnail
  references:
  - https://github.com/apache/nifi/pull/3507
  - https://issues.apache.org/jira/browse/NIFI-6301
  - https://nifi.apache.org/security.html#CVE-2019-10080
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHENIFI-534979
- id: snykio:maven:org.apache.nifi:nifi-security-utils:548592
  title: Information Exposure
  description: |
    [org.apache.nifi:nifi-security-utils][1] is a system to process and
    distribute data.

    Affected versions of this package are vulnerable to Information
    Exposure. The flow fingerprint factory generated flow fingerprints which
    included sensitive property descriptor values. In the event a node
    attempted to join a cluster and the cluster flow was not inheritable,
    the flow fingerprint of both the cluster and local flow was printed,
    potentially containing sensitive values in plaintext.



    [1]: https://nifi.apache.org
  affected_package: org.apache.nifi:nifi-security-utils
  vulnerable_versions:
  - "< 1.11.1"
  severity: high
  package_manager: maven
  cve:
  - CVE-2020-1942
  cwe:
  - CWE-200
  disclosed_date: 2020-02-11
  created_date: 2020-02-12
  last_modified_date: 2020-02-12
  credit:
  - Andy LoPresto
  references:
  - https://github.com/apache/nifi/pull/4028
  - https://nifi.apache.org/security.html#CVE-2020-1942
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHENIFI-548592
