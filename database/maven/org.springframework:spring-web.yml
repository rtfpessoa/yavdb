---
- id: ossindex:maven:org.springframework:spring-web:357383
  title: "[CVE-2013-4152]  Permissions, Privileges, and Access Controls"
  description: The Spring OXM wrapper in Spring Framework before 3.2.4 and 4.0.0.M1,
    when using the JAXB marshaller, does not disable entity resolution, which allows
    context-dependent attackers to read arbitrary files, cause a denial of service,
    and conduct CSRF attacks via an XML external entity declaration in conjunction
    with an entity reference in a (1) DOMSource, (2) StAXSource, (3) SAXSource, or
    (4) StreamSource, aka an XML External Entity (XXE) issue.
  affected_package: org.springframework:spring-web
  vulnerable_versions:
  - "> >=3.0.0 <3.2.4"
  package_manager: maven
  cve:
  - CVE-2013-4152
  disclosed_date: 2014-01-23
  created_date: 2014-01-23
  last_modified_date: 2017-06-02
  credit:
  - OSSIndex
  references:
  - http://rhn.redhat.com/errata/RHSA-2014-0212.html
  - http://rhn.redhat.com/errata/RHSA-2014-0245.html
  - http://rhn.redhat.com/errata/RHSA-2014-0254.html
  - http://rhn.redhat.com/errata/RHSA-2014-0400.html
  - http://seclists.org/bugtraq/2013/Aug/154
  - http://seclists.org/fulldisclosure/2013/Nov/14
  - http://secunia.com/advisories/56247
  - http://secunia.com/advisories/57915
  - http://www.debian.org/security/2014/dsa-2842
  - http://www.gopivotal.com/security/cve-2013-4152
  - http://www.securityfocus.com/bid/61951
  - https://github.com/spring-projects/spring-framework/pull/317/files
  - https://jira.springsource.org/browse/SPR-10806
  source_url: https://ossindex.net/resource/package/7015204622/vulnerabilities
- id: ossindex:maven:org.springframework:spring-web:359720
  title: "[CVE-2014-0054]  Cross-Site Request Forgery (CSRF)"
  description: 'The Jaxb2RootElementHttpMessageConverter in Spring MVC in Spring Framework
    before 3.2.8 and 4.0.0 before 4.0.2 does not disable external entity resolution,
    which allows remote attackers to read arbitrary files, cause a denial of service,
    and conduct CSRF attacks via crafted XML, aka an XML External Entity (XXE) issue.  NOTE:
    this vulnerability exists because of an incomplete fix for CVE-2013-4152, CVE-2013-7315,
    and CVE-2013-6429.'
  affected_package: org.springframework:spring-web
  vulnerable_versions:
  - "> >=4.0.0 <4.0.2"
  package_manager: maven
  cve:
  - CVE-2014-0054
  disclosed_date: 2014-04-17
  created_date: 2014-04-17
  last_modified_date: 2017-06-02
  credit:
  - OSSIndex
  references:
  - http://rhn.redhat.com/errata/RHSA-2014-0400.html
  - http://secunia.com/advisories/57915
  - http://www.securityfocus.com/bid/66148
  - https://jira.spring.io/browse/SPR-11376
  source_url: https://ossindex.net/resource/package/7015204622/vulnerabilities
- id: ossindex:maven:org.springframework:spring-web:8399934729
  title: "[CVE-2015-3192]  Improper Restriction of Operations within the Bounds of
    a Memory Buffer"
  description: Pivotal Spring Framework before 3.2.14 and 4.x before 4.1.7 do not
    properly process inline DTD declarations when DTD is not entirely disabled, which
    allows remote attackers to cause a denial of service (memory consumption and out-of-memory
    errors) via a crafted XML file.
  affected_package: org.springframework:spring-web
  vulnerable_versions:
  - "> >=3.2.0 <=3.2.13"
  - "> >=4.0.0 <=4.1.6"
  package_manager: maven
  cve:
  - CVE-2015-3192
  disclosed_date: 2016-07-12
  created_date: 2016-07-12
  last_modified_date: 2017-06-02
  credit:
  - OSSIndex
  references:
  - http://lists.fedoraproject.org/pipermail/package-announce/2015-July/162015.html
  - http://lists.fedoraproject.org/pipermail/package-announce/2015-July/162017.html
  - http://pivotal.io/security/cve-2015-3192
  - http://rhn.redhat.com/errata/RHSA-2016-1592.html
  - http://rhn.redhat.com/errata/RHSA-2016-1593.html
  - http://rhn.redhat.com/errata/RHSA-2016-2035.html
  - http://rhn.redhat.com/errata/RHSA-2016-2036.html
  - http://www.securityfocus.com/bid/90853
  - http://www.securitytracker.com/id/1036587
  - https://access.redhat.com/errata/RHSA-2016:1218
  - https://access.redhat.com/errata/RHSA-2016:1219
  - https://jira.spring.io/browse/SPR-13136
  source_url: https://ossindex.net/resource/package/7015204622/vulnerabilities
- id: ossindex:maven:org.springframework:spring-web:8404580678
  title: '[CVE-2014-0225]  Improper Restriction of XML External Entity Reference ("XXE")'
  description: When processing user provided XML documents, the Spring Framework 4.0.0
    to 4.0.4, 3.0.0 to 3.2.8, and possibly earlier unsupported versions did not disable
    by default the resolution of URI references in a DTD declaration. This enabled
    an XXE attack.
  affected_package: org.springframework:spring-web
  vulnerable_versions:
  - "> >=3.0.0 <=3.2.8"
  - "> >=4.0.0 <=4.0.4"
  package_manager: maven
  cve:
  - CVE-2014-0225
  disclosed_date: 2017-05-25
  created_date: 2017-05-25
  last_modified_date: 2017-06-07
  credit:
  - OSSIndex
  references:
  - https://pivotal.io/security/cve-2014-0225
  source_url: https://ossindex.net/resource/package/7015204622/vulnerabilities
- id: ossindex:maven:org.springframework:spring-web:8404580684
  title: "[CVE-2015-5211]  Improper Input Validation"
  description: Under some situations, the Spring Framework 4.2.0 to 4.2.1, 4.0.0 to
    4.1.7, 3.2.0 to 3.2.14 and older unsupported versions is vulnerable to a Reflected
    File Download (RFD) attack. The attack involves a malicious user crafting a URL
    with a batch script extension that results in the response being downloaded rather
    than rendered and also includes some input reflected in the response.
  affected_package: org.springframework:spring-web
  vulnerable_versions:
  - "> ((>=3.2.0 <=3.2.14"
  - "> >=4.0.0 <=4.0.9"
  - "> >=4.1.0 <=4.1.7"
  - "> >=4.2.0 <=4.2.1"
  package_manager: maven
  cve:
  - CVE-2015-5211
  disclosed_date: 2017-05-25
  created_date: 2017-05-25
  last_modified_date: 2017-06-08
  credit:
  - OSSIndex
  references:
  - https://pivotal.io/security/cve-2015-5211
  - https://www.trustwave.com/Resources/SpiderLabs-Blog/Reflected-File-Download---A-New-Web-Attack-Vector/
  source_url: https://ossindex.net/resource/package/7015204622/vulnerabilities
- id: snykio:maven:org.springframework:spring-web:1009832
  title: Improper Input Validation
  description: |
    [org.springframework:spring-web][1] is a package that provides a
    comprehensive programming and configuration model for modern Java-based
    enterprise applications - on any kind of deployment platform.

    Affected versions of this package are vulnerable to Improper Input
    Validation. The protections against Reflected File Download attacks from
    CVE-2015-5211 may be bypassed depending on the browser used through the
    use of a `jsessionid` path parameter.



    [1]: https://github.com/spring-projects/spring-framework
  affected_package: org.springframework:spring-web
  vulnerable_versions:
  - "< 4.3.29.RELEASE"
  - ">= 5.0.0.RELEASE < 5.0.18.RELEASE"
  - ">= 5.1.0.RELEASE < 5.1.17.RELEASE"
  - ">= 5.2.0.RELEASE < 5.2.8.RELEASE"
  severity: high
  package_manager: maven
  cve:
  - CVE-2020-5421
  cwe:
  - CWE-20
  disclosed_date: 2020-09-18
  created_date: 2020-09-18
  last_modified_date: 2020-09-18
  credit:
  - Unknown
  references:
  - https://pivotal.io/security/cve-2020-5421
  - https://tanzu.vmware.com/security/cve-2015-5211
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORK-1009832
- id: snykio:maven:org.springframework:spring-web:30160
  title: XML External Entity (XXE) Injection
  description: |+
    [org.springframework:spring-web][1] is a package that provides a
    comprehensive programming and configuration model for modern Java-based
    enterprise applications - on any kind of deployment platform.

    Affected versions of this package are vulnerable to XML External Entity
    (XXE) Injection. The `SourceHttpMessageConverter` processor does not
    disable external entity resolution, which allows remote attackers to
    read arbitrary files, cause a denial of service, and conduct CSRF
    attacks via crafted XML, aka an XML External Entity (XXE) issue, and a
    different vulnerability than [CVE-2013-4152][2] and [CVE-2013-7315][3].



    [1]: https://github.com/spring-projects/spring-framework
    [2]: https://snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORK-31330
    [3]: https://snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORK-30162
    \nXXE Injection is a type of attack against an application that parses XML
    input. XML is a markup language that defines a set of rules for encoding
    documents in a format that is both human-readable and machine-readable.
    By default, many XML processors allow specification of an external
    entity, a URI that is dereferenced and evaluated during XML processing.
    When an XML document is being parsed, the parser can make a request and
    include the content at the specified URI inside of the XML document.

    Attacks can include disclosing local files, which may contain sensitive
    data such as passwords or private user data, using file: schemes or
    relative paths in the system identifier.

    For example, below is a sample XML document, containing an XML element-
    username.

        <?xml version="1.0" encoding="ISO-8859-1"?>
           <username>John</username>
        </xml>
    {: .language-xml}

    An external XML entity - `xxe`, is defined using a system identifier and
    present within a DOCTYPE header. These entities can access local or
    remote content. For example the below code contains an external XML
    entity that would fetch the content of `/etc/passwd` and display it to
    the user rendered by `username`.

        <?xml version="1.0" encoding="ISO-8859-1"?>
        <!DOCTYPE foo [
           <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
           <username>&xxe;</username>
        </xml>
    {: .language-xml}

    Other XXE Injection attacks can access local resources that may not stop
    returning data, possibly impacting application availability and leading
    to Denial of Service.

  affected_package: org.springframework:spring-web
  vulnerable_versions:
  - ">= 3.0.0.RELEASE < 3.2.4.RELEASE"
  - ">= 4.0.0.RELEASE < 4.0.1.RELEASE"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2013-6429
  cwe:
  - CWE-661
  disclosed_date: 2014-01-26
  created_date: 2016-12-25
  last_modified_date: 2016-12-25
  credit:
  - Unknown
  references:
  - http://www.gopivotal.com/security/cve-2013-6429
  - https://bugzilla.redhat.com/CVE-2013-6429
  - https://github.com/spring-projects/spring-framework/commit/2ae6a6a3415eebc57babcb9d3e5505887eda6d8a
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORK-30160
- id: snykio:maven:org.springframework:spring-web:30161
  title: Cross-site Scripting (XSS)
  description: |+
    [org.springframework:spring-web][1] package that provides a
    comprehensive programming and configuration model for modern Java-based
    enterprise applications - on any kind of deployment platform.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). The `JavaScriptUtils.javaScriptEscape()` method did not escape
    all characters that are sensitive within either a JS single quoted
    string, JS double quoted string, or HTML script data context. In most
    cases this will result in an unexploitable parse error but in some cases
    it could result in an XSS vulnerability.



    [1]: https://github.com/spring-projects/spring-framework
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: org.springframework:spring-web
  vulnerable_versions:
  - ">= 3.0.0.RELEASE < 3.2.2.RELEASE"
  severity: low
  package_manager: maven
  cve:
  - CVE-2013-6430
  cwe:
  - CWE-79
  disclosed_date: 2016-12-25
  created_date: 2016-12-25
  last_modified_date: 2016-12-25
  credit:
  - Arun Neelicattu
  - Jon Passki
  references:
  - http://www.gopivotal.com/security/cve-2013-6430
  - https://bugzilla.redhat.com/CVE-2013-6430
  - https://github.com/spring-projects/spring-framework/commit/7a7df6637478607bef0277bf52a4e0a03e20a248
  - https://jira.spring.io/browse/SPR-9983
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORK-30161
- id: snykio:maven:org.springframework:spring-web:30162
  title: XML External Entity (XXE) Injection
  description: |+
    [org.springframework:spring-web][1] is a package that provides a
    comprehensive programming and configuration model for modern Java-based
    enterprise applications - on any kind of deployment platform.

    Affected versions of this package are vulnerable to XML External Entity
    (XXE) Injection due to not disabling external entity resolution for the
    `StAX` `XMLInputFactory`. This allows context-dependent attackers to
    read arbitrary files, cause a denial of service, and conduct CSRF
    attacks via crafted XML with JAXB.

    **NOTE:** this issue was SPLIT from [CVE-2013-4152][2] due to different
    affected versions.



    [1]: https://github.com/spring-projects/spring-framework
    [2]: https://snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORK-31330
    \nXXE Injection is a type of attack against an application that parses XML
    input. XML is a markup language that defines a set of rules for encoding
    documents in a format that is both human-readable and machine-readable.
    By default, many XML processors allow specification of an external
    entity, a URI that is dereferenced and evaluated during XML processing.
    When an XML document is being parsed, the parser can make a request and
    include the content at the specified URI inside of the XML document.

    Attacks can include disclosing local files, which may contain sensitive
    data such as passwords or private user data, using file: schemes or
    relative paths in the system identifier.

    For example, below is a sample XML document, containing an XML element-
    username.

        <?xml version="1.0" encoding="ISO-8859-1"?>
           <username>John</username>
        </xml>
    {: .language-xml}

    An external XML entity - `xxe`, is defined using a system identifier and
    present within a DOCTYPE header. These entities can access local or
    remote content. For example the below code contains an external XML
    entity that would fetch the content of `/etc/passwd` and display it to
    the user rendered by `username`.

        <?xml version="1.0" encoding="ISO-8859-1"?>
        <!DOCTYPE foo [
           <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
           <username>&xxe;</username>
        </xml>
    {: .language-xml}

    Other XXE Injection attacks can access local resources that may not stop
    returning data, possibly impacting application availability and leading
    to Denial of Service.

  affected_package: org.springframework:spring-web
  vulnerable_versions:
  - ">= 3.0.0.RELEASE < 3.2.4.RELEASE"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2013-7315
  cwe:
  - CWE-611
  disclosed_date: 2013-08-22
  created_date: 2013-08-22
  last_modified_date: 2013-08-22
  credit:
  - Alvaro Munoz
  references:
  - https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2013-7315
  - https://github.com/spring-projects/spring-framework/commit/434735fbf6e7f9051af2ef027657edb99120b173
  - https://github.com/spring-projects/spring-framework/issues/15432
  - https://pivotal.io/security/cve-2013-7315
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORK-30162
- id: snykio:maven:org.springframework:spring-web:30163
  title: XML External Entity (XXE) Injection
  description: |+
    [org.springframework:spring-web][1] is a package that provides a
    comprehensive programming and configuration model for modern Java-based
    enterprise applications - on any kind of deployment platform.

    Affected versions of this package are vulnerable to XML External Entity
    (XXE) Injection. This is due to not disabling the resolution of URI
    references by default in a DTD declaration. This occurs only when
    processing user provided XML documents.



    [1]: https://github.com/spring-projects/spring-framework
    \nXXE Injection is a type of attack against an application that parses XML
    input. XML is a markup language that defines a set of rules for encoding
    documents in a format that is both human-readable and machine-readable.
    By default, many XML processors allow specification of an external
    entity, a URI that is dereferenced and evaluated during XML processing.
    When an XML document is being parsed, the parser can make a request and
    include the content at the specified URI inside of the XML document.

    Attacks can include disclosing local files, which may contain sensitive
    data such as passwords or private user data, using file: schemes or
    relative paths in the system identifier.

    For example, below is a sample XML document, containing an XML element-
    username.

        <?xml version="1.0" encoding="ISO-8859-1"?>
           <username>John</username>
        </xml>
    {: .language-xml}

    An external XML entity - `xxe`, is defined using a system identifier and
    present within a DOCTYPE header. These entities can access local or
    remote content. For example the below code contains an external XML
    entity that would fetch the content of `/etc/passwd` and display it to
    the user rendered by `username`.

        <?xml version="1.0" encoding="ISO-8859-1"?>
        <!DOCTYPE foo [
           <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
           <username>&xxe;</username>
        </xml>
    {: .language-xml}

    Other XXE Injection attacks can access local resources that may not stop
    returning data, possibly impacting application availability and leading
    to Denial of Service.

  affected_package: org.springframework:spring-web
  vulnerable_versions:
  - ">= 3.0.0.RELEASE < 3.2.9.RELEASE"
  - ">= 4.0.0.RELEASE < 4.0.5.RELEASE"
  severity: high
  package_manager: maven
  cve:
  - CVE-2014-0225
  cwe:
  - CWE-611
  disclosed_date: 2016-12-25
  created_date: 2016-12-25
  last_modified_date: 2016-12-25
  credit:
  - Unknown
  references:
  - http://www.gopivotal.com/security/cve-2014-0225
  - https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2014-0225
  - https://github.com/spring-projects/spring-framework/commit/c6503ebbf7c9e21ff022c58706dbac5417b2b5eb
  - https://github.com/spring-projects/spring-framework/issues/16390
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORK-30163
- id: snykio:maven:org.springframework:spring-web:30164
  title: Denial of Service (DoS)
  description: |+
    [org.springframework:spring-web][1] is a package that provides a
    comprehensive programming and configuration model for modern Java-based
    enterprise applications - on any kind of deployment platform.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS). It does not properly process inline DTD declarations when DTD is
    not entirely disabled, which allows remote attackers to cause a denial
    of service (memory consumption and out-of-memory errors) via a crafted
    XML file.



    [1]: https://github.com/spring-projects/spring-framework
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: org.springframework:spring-web
  vulnerable_versions:
  - ">= 3.2.0.RELEASE < 3.2.14.RELEASE"
  - ">= 4.0.0.RELEASE < 4.1.7.RELEASE"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2015-3192
  cwe:
  - CWE-119
  disclosed_date: 2016-07-12
  created_date: 2016-12-25
  last_modified_date: 2016-12-25
  credit:
  - Toshiaki Maki
  references:
  - http://pivotal.io/security/cve-2015-3192
  - https://github.com/spring-projects/spring-framework/commit/5a711c05ec750f069235597173084c2ee796242
  - https://github.com/spring-projects/spring-framework/issues/17727
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORK-30164
- id: snykio:maven:org.springframework:spring-web:30165
  title: Reflected File Download
  description: |
    [org.springframework:spring-web][1] package that provides a
    comprehensive programming and configuration model for modern Java-based
    enterprise applications - on any kind of deployment platform.

    Affected versions of this package are vulnerable to Reflected File
    Download via a crafted URL with a batch script extension, resulting in
    the response being downloaded rather than rendered.



    [1]: https://github.com/spring-projects/spring-framework
  affected_package: org.springframework:spring-web
  vulnerable_versions:
  - ">= 3.2.0.RELEASE < 3.2.15.RELEASE"
  - ">= 4.0.0.RELEASE < 4.1.8.RELEASE"
  - ">= 4.2.0.RELEASE < 4.2.2.RELEASE"
  severity: high
  package_manager: maven
  cve:
  - CVE-2015-5211
  cwe:
  - CWE-494
  disclosed_date: 2015-10-15
  created_date: 2016-12-25
  last_modified_date: 2016-12-25
  credit:
  - Alvaro Muñoz
  references:
  - http://pivotal.io/security/cve-2015-5211
  - https://access.redhat.com/security/cve/cve-2015-5211
  - https://github.com/spring-projects/spring-framework/commit/03f547eb9868f48f44d59b56067d4ac4740672c3
  - https://github.com/spring-projects/spring-framework/commit/2bd1daa75ee0b8ec33608ca6ab065ef3e1815543
  - https://github.com/spring-projects/spring-framework/commit/a95c3d820dbc4c3ae752f1b3ee22ee860b162402
  - https://github.com/spring-projects/spring-framework/issues/18124
  - https://www.trustwave.com/Resources/SpiderLabs-Blog/Reflected-File-Download---A-New-Web-Attack-Vector/
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORK-30165
- id: snykio:maven:org.springframework:spring-web:31329
  title: Expression Language Injection
  description: |
    [org.springframework:spring-web][1] is a package that provides a
    comprehensive programming and configuration model for modern Java-based
    enterprise applications - on any kind of deployment platform.

    Affected versions of this package are vulnerable to Expression Language
    Injection. When a container supports Expression Language (EL), evaluates
    EL expressions in tags twice, which allows remote attackers to obtain
    sensitive information via a (1) name attribute in a (a)
    spring:hasBindErrors tag; (2) path attribute in a (b) spring:bind or (c)
    spring:nestedpath tag; (3) arguments, (4) code, (5) text, (6) var, (7)
    scope, or (8) message attribute in a (d) spring:message or (e)
    spring:theme tag; or (9) var, (10) scope, or (11) value attribute in a
    (f) spring:transform tag, aka \"Expression Language Injection.\"



    [1]: https://github.com/spring-projects/spring-framework
  affected_package: org.springframework:spring-web
  vulnerable_versions:
  - "< 2.5.6.SEC03"
  - ">= 3.0.0.RELEASE < 3.0.6.RELEASE"
  severity: high
  package_manager: maven
  cve:
  - CVE-2011-2730
  cwe:
  - CWE-16
  disclosed_date: 2011-09-09
  created_date: 2011-09-09
  last_modified_date: 2011-09-09
  credit:
  - Arshan Dabirsiaghi
  - Stefano Di Paola
  references:
  - https://github.com/spring-projects/spring-framework/commit/9772eb8410e37cd0bdec0d1b133218446c778beb
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2011-2730
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORK-31329
- id: snykio:maven:org.springframework:spring-web:31330
  title: XML External Entity (XXE) Injection
  description: |+
    [org.springframework:spring-web][1] is a package that provides a
    comprehensive programming and configuration model for modern Java-based
    enterprise applications - on any kind of deployment platform.

    Affected versions of this package are vulnerable to XML External Entity
    (XXE) Injection due to not disabling entity resolution when using the
    `JAXB` marshaller. This allows context-dependent attackers to read
    arbitrary files, cause a denial of service, and conduct CSRF attacks via
    an XML external entity declaration in conjunction with an entity
    reference in a (1) DOMSource, (2) StAXSource, (3) SAXSource, or (4)
    StreamSource.

    **NOTE:** this issue was SPLIT from [CVE-2013-7315][2] due to different
    affected versions.



    [1]: https://github.com/spring-projects/spring-framework
    [2]: https://snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORK-30162
    \nXXE Injection is a type of attack against an application that parses XML
    input. XML is a markup language that defines a set of rules for encoding
    documents in a format that is both human-readable and machine-readable.
    By default, many XML processors allow specification of an external
    entity, a URI that is dereferenced and evaluated during XML processing.
    When an XML document is being parsed, the parser can make a request and
    include the content at the specified URI inside of the XML document.

    Attacks can include disclosing local files, which may contain sensitive
    data such as passwords or private user data, using file: schemes or
    relative paths in the system identifier.

    For example, below is a sample XML document, containing an XML element-
    username.

        <?xml version="1.0" encoding="ISO-8859-1"?>
           <username>John</username>
        </xml>
    {: .language-xml}

    An external XML entity - `xxe`, is defined using a system identifier and
    present within a DOCTYPE header. These entities can access local or
    remote content. For example the below code contains an external XML
    entity that would fetch the content of `/etc/passwd` and display it to
    the user rendered by `username`.

        <?xml version="1.0" encoding="ISO-8859-1"?>
        <!DOCTYPE foo [
           <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
           <username>&xxe;</username>
        </xml>
    {: .language-xml}

    Other XXE Injection attacks can access local resources that may not stop
    returning data, possibly impacting application availability and leading
    to Denial of Service.

  affected_package: org.springframework:spring-web
  vulnerable_versions:
  - ">= 3 < 3.2.4"
  - ">= 4-alpha < 4.0.0.M2"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2013-4152
  cwe:
  - CWE-264
  disclosed_date: 2014-01-23
  created_date: 2014-06-08
  last_modified_date: 2014-06-08
  credit:
  - Unknown
  references:
  - https://github.com/spring-projects/spring-framework/commit/7576274874deeccb6da6b09a8d5bd62e8b5538b7
  - https://github.com/spring-projects/spring-framework/pull/317
  - https://github.com/spring-projects/spring-framework/pull/317/commits/2843b7d2ee12e3f9c458f6f816befd21b402e3b9
  - https://pivotal.io/security/cve-2013-4152
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2013-4152
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORK-31330
- id: snykio:maven:org.springframework:spring-web:31331
  title: Cross-site Request Forgery (CSRF)
  description: |
    [`org.springframework:spring-web`][1] Affected versions of this package
    do not disable external entity resolution, which allows remote attackers
    to read arbitrary files, cause a denial of service and conduct CSRF
    attacks via crafted XML, aka an XML External Entity (XXE) issue.

    **NOTE:** this vulnerability exists because of an incomplete fix for
    [CVE-2013-4152][2], [CVE-2013-7315][3], and [CVE-2013-6429][4].



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22spring-web%22
    [2]: https://snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORK-31330
    [3]: https://snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORK-30162
    [4]: https://snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORK-30160
  affected_package: org.springframework:spring-web
  vulnerable_versions:
  - ">= 3.0.0.RELEASE < 3.2.8.RELEASE"
  - ">= 4.0.0.RELEASE < 4.0.2.RELEASE"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2014-0054
  cwe:
  - CWE-352
  disclosed_date: 2014-04-17
  created_date: 2014-06-06
  last_modified_date: 2014-06-06
  credit:
  - Spase Markovski
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-0054
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORK-31331
- id: snykio:maven:org.springframework:spring-web:31644
  title: Authentication Bypass
  description: |
    [`org.springframework.security:spring-security-ldap`][1] provides
    security services for the Spring IO Platform.

    Affected versions of the package are vulnerable to Authentication
    Bypass.



    [1]: https://springframework.org
  affected_package: org.springframework:spring-web
  vulnerable_versions:
  - "<= 0"
  severity: medium
  package_manager: maven
  cwe:
  - CWE-592
  disclosed_date: 2016-01-02
  created_date: 2018-03-06
  last_modified_date: 2018-03-06
  credit:
  - Unknown
  references:
  - https://github.com/spring-projects/spring-security/commit/7269aacbdd42183afeedc84e2233580b917da4c0
  - https://github.com/spring-projects/spring-security/issues/3392
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORK-31644
- id: snykio:maven:org.springframework:spring-web:31689
  title: Information Exposure
  description: |
    [org.springframework:spring-web][1] is a package that provides a
    comprehensive programming and configuration model for modern Java-based
    enterprise applications - on any kind of deployment platform.

    Affected versions of this package are vulnerable to Information
    Exposure. It allows web applications to enable cross-domain requests via
    JSONP (JSON with Padding) through `AbstractJsonpResponseBodyAdvice` for
    REST controllers, and `MappingJackson2JsonView` for browser requests.
    When `MappingJackson2JsonView` is configured in an application, JSONP
    support is automatically ready to use through the `jsonp` and `callback`
    JSONP parameters, enabling cross-domain requests. Allowing cross-domain
    requests from untrusted origins may expose user information to 3rd party
    browser scripts.



    [1]: https://github.com/spring-projects/spring-framework
  affected_package: org.springframework:spring-web
  vulnerable_versions:
  - ">= 4.3.0.RELEASE < 4.3.18.RELEASE"
  - ">= 5.0.0.RELEASE < 5.0.7.RELEASE"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2018-11040
  cwe:
  - CWE-200
  disclosed_date: 2016-12-25
  created_date: 2016-12-25
  last_modified_date: 2016-12-25
  credit:
  - Mariusz Luciow
  references:
  - https://github.com/spring-projects/spring-framework/commit/b80c13b722bb207ddf43f53a007ee3ddc1dd2e26
  - https://github.com/spring-projects/spring-framework/issues/21338
  - https://pivotal.io/security/cve-2018-11040
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORK-31689
- id: snykio:maven:org.springframework:spring-web:451604
  title: Cross-Site Tracing (XST)
  description: |
    [org.springframework:spring-web][1] is a package that provides a
    comprehensive programming and configuration model for modern Java-based
    enterprise applications - on any kind of deployment platform.

    Affected versions of this package are vulnerable to Cross-Site Tracing
    (XST). It allows web applications to change the HTTP request method to
    any HTTP method (including TRACE) using the `HiddenHttpMethodFilter` in
    Spring MVC. If an application has a pre-existing XSS vulnerability, a
    malicious user (or attacker) can use this filter to escalate to an XST
    attack.



    [1]: https://github.com/spring-projects/spring-framework
  affected_package: org.springframework:spring-web
  vulnerable_versions:
  - ">= 4.3.0.RELEASE < 4.3.18.RELEASE"
  - ">= 5.0.0.RELEASE < 5.0.7.RELEASE"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2018-11039
  cwe:
  - CWE-284
  disclosed_date: 2016-12-25
  created_date: 2016-12-25
  last_modified_date: 2016-12-25
  credit:
  - Mariusz Luciow
  references:
  - https://github.com/spring-projects/spring-framework/commit/dac97f1b7dac3e70ff603fb6fc9f205b95dd6b01
  - https://github.com/spring-projects/spring-framework/commit/f2694a8ed93f1f63f87ce45d0bb638478b426acd
  - https://github.com/spring-projects/spring-framework/issues/21376
  - https://pivotal.io/security/cve-2018-11039
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORK-451604
- id: snykio:maven:org.springframework:spring-web:559346
  title: Reflected File Download (RFD)
  description: |
    [org.springframework:spring-web][1] is a package that provides a
    comprehensive programming and configuration model for modern Java-based
    enterprise applications - on any kind of deployment platform.

    Affected versions of this package are vulnerable to Reflected File
    Download (RFD). A reflected file download attack is possible when the
    filename attribute of the `Content-Disposition` header is derived from
    user-supplied input.



    [1]: https://github.com/spring-projects/spring-framework
  affected_package: org.springframework:spring-web
  vulnerable_versions:
  - ">= 5.0.0 < 5.0.16"
  - ">= 5.1.0 < 5.1.13"
  - ">= 5.2.0 < 5.2.3"
  severity: high
  package_manager: maven
  cve:
  - CVE-2020-5398
  cwe:
  - CWE-494
  disclosed_date: 2020-01-16
  created_date: 2020-01-22
  last_modified_date: 2020-01-22
  credit:
  - Roman Shalymov
  references:
  - https://github.com/spring-projects/spring-framework/commit/41f40c6c229d3b4f768718f1ec229d8f0ad76d76
  - https://github.com/spring-projects/spring-framework/issues/24220
  - https://pivotal.io/security/cve-2020-5398
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORK-559346
- id: snykio:maven:org.springframework:spring-web:72470
  title: Denial of Service (DoS)
  description: "[org.springframework:spring-web][1] is a package that provides a\ncomprehensive
    programming and configuration model for modern Java-based\nenterprise applications
    - on any kind of deployment platform.\n\nAffected versions of this package are
    vulnerable to Denial of Service\n(DoS). A malicious user could add a range header
    with a high number of\nranges, or with wide ranges that overlap, or both, for
    a denial of\nservice attack.\n\n\n\n[1]: https://github.com/spring-projects/spring-framework\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n{: .language-js}\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n{: .language-bash}\n\nThe entire
    process of testing it against a 30 characters long string\ntakes around ~52ms.
    But when given an invalid string, it takes nearly\ntwo seconds to complete the
    test, over ten times as long as it took to\ntest a valid string. The dramatic
    difference is due to the way regular\nexpressions get evaluated.\n\nMost Regex
    engines will work very similarly (with minor differences).\nThe engine will match
    the first possible way to accept the current\ncharacter and proceed to the next
    one. If it then fails to match the\nnext one, it will backtrack and see if there
    was another way to digest\nthe previous character. If it goes too far down the
    rabbit hole only to\nfind out the string doesn’t match in the end, and if many
    characters\nhave multiple valid regex paths, the number of backtracking steps
    can\nbecome very large, resulting in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s
    look at how our expression runs into this problem, using a\nshorter string: \\\"ACCCX\\\".
    While it seems fairly straightforward, there\nare still four different ways that
    the engine could match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.
    \ C+C+C.\n\nThe engine has to try each of those combinations to see if any of
    them\npotentially match against the expression. When you combine that with the\nother
    steps the engine must take, we can use [RegEx 101 debugger][1] to\nsee the engine
    has to take a total of 38 steps before it can determine\nthe string doesn\\'t
    match.\n\nFrom there, the number of steps the engine must use to validate a string\njust
    continues to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n|
    ACCCX | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX
    | 14 | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to
    take over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n"
  affected_package: org.springframework:spring-web
  vulnerable_versions:
  - ">= 4.2.0.RELEASE < 4.3.20.RELEASE"
  - ">= 5.0.0.RELEASE < 5.0.10.RELEASE"
  - ">= 5.1.0.RELEASE < 5.1.1.RELEASE"
  severity: low
  package_manager: maven
  cve:
  - CVE-2018-15756
  cwe:
  - CWE-400
  disclosed_date: 2018-10-03
  created_date: 2018-10-18
  last_modified_date: 2018-10-18
  credit:
  - Nicholas Starke
  references:
  - https://github.com/spring-projects/spring-framework/commit/423aa28ed584b4ff6e5bad218c09beef5e91951e
  - https://pivotal.io/security/cve-2018-15756
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORK-72470
- id: snykio:maven:org.springframework:spring-web:73573
  title: Directory Traversal
  description: |
    [org.springframework:spring-web][1] is a provides a comprehensive
    programming and configuration model for modern Java-based enterprise
    applications - on any kind of deployment platform.

    Affected versions of this package are vulnerable to Directory Traversal.
    It allows remote attackers to read arbitrary files via a crafted URL.



    [1]: https://github.com/spring-projects/spring-framework
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
  affected_package: org.springframework:spring-web
  vulnerable_versions:
  - ">= 3.0.0.RELEASE < 3.2.9.RELEASE"
  - ">= 4.0.0.RELEASE < 4.0.5.RELEASE"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2014-3578
  cwe:
  - CWE-22
  disclosed_date: 2014-09-05
  created_date: 2014-09-05
  last_modified_date: 2014-09-05
  credit:
  - Takeshi Terada
  references:
  - http://jvndb.jvn.jp/en/contents/2014/JVNDB-2014-000054.html
  - https://bugzilla.redhat.com/show_bug.cgi?id=1131882
  - https://github.com/spring-projects/spring-framework/commit/e3e71ba92a8b82dadf474eda76cd2741f65a77a8
  - https://jira.spring.io/browse/SPR-12354
  - https://pivotal.io/security/cve-2014-3578
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-3578
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORK-73573
- id: victims:maven:org.springframework:spring-web:2013-6429
  title: XML External Entity (XXE) injection in Spring Framework
  affected_package: org.springframework:spring-web
  vulnerable_versions:
  - '3'
  - '4'
  - "<=3.2.4.RELEASE"
  - "<=4.0.0.M3"
  patched_versions:
  - '3'
  - '4'
  - ">=3.2.5.RELEASE"
  - ">=4.0.0.RC2"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2013-6429
  cvss_v2_score: 5.0
  credit:
  - Victims CVE Database
  references:
  - http://www.gopivotal.com/security/cve-2013-6429
  - https://bugzilla.redhat.com/CVE-2013-6429
  source_url: https://github.com/victims/victims-cve-db/blob/master/database/java/2013/6429.yaml
- id: victims:maven:org.springframework:spring-web:2013-6430
  title: Possible XSS when using Spring MVC
  affected_package: org.springframework:spring-web
  vulnerable_versions:
  - '3'
  - "<=3.2.1.RELEASE"
  patched_versions:
  - '3'
  - ">=3.2.2.RELEASE"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2013-6430
  cvss_v2_score: 4.3
  credit:
  - Victims CVE Database
  references:
  - http://www.gopivotal.com/security/cve-2013-6430
  - https://bugzilla.redhat.com/CVE-2013-6430
  source_url: https://github.com/victims/victims-cve-db/blob/master/database/java/2013/6430.yaml
- id: victims:maven:org.springframework:spring-web:2013-7315
  title: XML External Entity (XXE) injection in Spring Framework
  affected_package: org.springframework:spring-web
  vulnerable_versions:
  - '3'
  - '4'
  - "<=3.2.3.RELEASE"
  - "<=4.0.0.M3"
  patched_versions:
  - '3'
  - '4'
  - ">=3.2.4.RELEASE"
  - ">=4.0.0.RC1"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2013-7315
  cvss_v2_score: 5.0
  credit:
  - Victims CVE Database
  references:
  - http://www.gopivotal.com/security/cve-2013-4152
  - https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2013-7315
  source_url: https://github.com/victims/victims-cve-db/blob/master/database/java/2013/7315.yaml
- id: victims:maven:org.springframework:spring-web:2014-0225
  title: Information disclosure via SSRF
  affected_package: org.springframework:spring-web
  vulnerable_versions:
  - '3'
  - '4'
  - "<=3.2.8.RELEASE"
  - "<=4.0.4.RELEASE"
  patched_versions:
  - '3'
  - '4'
  - ">=3.2.9.RELEASE"
  - ">=4.0.5.RELEASE"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2014-0225
  cvss_v2_score: 5.0
  credit:
  - Victims CVE Database
  references:
  - http://www.gopivotal.com/security/cve-2014-0225
  - https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2014-0225
  source_url: https://github.com/victims/victims-cve-db/blob/master/database/java/2014/0225.yaml
- id: victims:maven:org.springframework:spring-web:2015-3192
  title: 'Spring Framework: DoS Attack with XML Input'
  description: 'Inline DTD declarations can be used to perform Denial of Service attacks
    known as  XML bombs.

'
  affected_package: org.springframework:spring-web
  vulnerable_versions:
  - '3.2'
  - '4'
  - "<=3.2.13.RELEASE"
  - "<=4.1.6.RELEASE"
  patched_versions:
  - '3.2'
  - '4'
  - ">=3.2.14.RELEASE"
  - ">=4.1.7.RELEASE"
  severity: low
  package_manager: maven
  cve:
  - CVE-2015-3192
  cvss_v2_score: 3.0
  credit:
  - Victims CVE Database
  references:
  - http://pivotal.io/security/cve-2015-3192
  source_url: https://github.com/victims/victims-cve-db/blob/master/database/java/2015/3192.yaml
- id: victims:maven:org.springframework:spring-web:2015-5211
  title: 'Spring Framework: reflected file download vulnerability'
  description: 'Under some situations, the Spring Framework is vulnerable to a Reflected
    File Download (RFD) attack. The attack involves a malicious user crafting a URL
    with a batch script extension that results in the response being downloaded rather
    than rendered and also includes some input reflected in the response.

'
  affected_package: org.springframework:spring-web
  vulnerable_versions:
  - '3.2'
  - '4.0'
  - '4.1'
  - '4.2'
  - "<=3.2.14.RELEASE"
  - "<=4.0.9.RELEASE"
  - "<=4.1.7.RELEASE"
  - "<=4.2.1.RELEASE"
  patched_versions:
  - '3.2'
  - '4.1'
  - '4.2'
  - ">=3.2.15.RELEASE"
  - ">=4.1.8.RELEASE"
  - ">=4.2.2.RELEASE"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2015-5211
  cvss_v2_score: 4.0
  credit:
  - Victims CVE Database
  references:
  - http://pivotal.io/security/cve-2015-5211
  - https://access.redhat.com/security/cve/cve-2015-5211
  source_url: https://github.com/victims/victims-cve-db/blob/master/database/java/2015/5211.yaml
