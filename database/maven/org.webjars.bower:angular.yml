---
- id: ossindex:maven:org.webjars.bower:angular:8398799712
  title: Cross Site Scripting (XSS) in ng-srcset
  description: |-
    There is a security issue with ng-srcset; URIs aren't sanitized.

    The behavior is correct for ng-src but not for ng-srcset. The problem is with src/ng/compile.js that it ignores srcset.
  affected_package: org.webjars.bower:angular
  vulnerable_versions:
  - "<1.3.0-rc.3"
  package_manager: maven
  disclosed_date: 2016-04-29
  created_date: 2016-04-29
  last_modified_date: 2016-04-29
  credit:
  - OSSIndex
  references:
  - https://cwe.mitre.org/data/definitions/79.html
  - https://github.com/angular/angular.js/pull/8975
  source_url: https://ossindex.net/resource/package/7103386464/vulnerabilities
- id: ossindex:maven:org.webjars.bower:angular:8398878757
  title: Cross Site Scripting (XSS) in JSONP
  description: JSONP allows untrusted resource URLs, which provides a vector for attack
    by malicious actors.
  affected_package: org.webjars.bower:angular
  vulnerable_versions:
  - "<1.6.0-rc.0"
  package_manager: maven
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 2017-04-27
  credit:
  - OSSIndex
  references:
  - https://github.com/angular/angular.js/commit/6476af83cd0418c84e034a955b12a842794385c4
  - https://github.com/angular/angular.js/issues/11352
  source_url: https://ossindex.net/resource/package/7103386464/vulnerabilities
- id: ossindex:maven:org.webjars.bower:angular:8399952428
  title: Injection Attack
  description: AngularJS offers frontend developers a scope object that attempts to
    isolate global variables from the templating work-flow and keep things lean and
    "Angular-only". This makes sense - and to be fair, the AngularJS documentation
    explicitly states that the scope object is not considered to be a sandbox. And
    indeed it is none. With a simple JavaScript trick one can break out of this "non-sandbox"
    and execute arbitrary code in window and other host objects.
  affected_package: org.webjars.bower:angular
  vulnerable_versions:
  - "<1.2.0"
  package_manager: maven
  disclosed_date: 2016-07-28
  created_date: 2016-07-28
  last_modified_date: 2016-07-28
  credit:
  - OSSIndex
  references:
  - https://code.google.com/p/mustache-security/wiki/AngularJS
  source_url: https://ossindex.net/resource/package/7103386464/vulnerabilities
- id: ossindex:maven:org.webjars.bower:angular:8399952430
  title: AngularJS Sandbox Bypass
  description: "The AngularJS sandbox can be bypassed, allowing the execution of arbitrary
    JavaScript from within the Angular scope.\n\n"
  affected_package: org.webjars.bower:angular
  vulnerable_versions:
  - ">=1.2.19 <1.2.24"
  package_manager: maven
  disclosed_date: 2016-07-28
  created_date: 2016-07-28
  last_modified_date: 2016-07-28
  credit:
  - OSSIndex
  references:
  - http://avlidienbrunn.se/angular.txt
  source_url: https://ossindex.net/resource/package/7103386464/vulnerabilities
- id: ossindex:maven:org.webjars.bower:angular:8399952527
  title: Code injection
  description: "There is a possible code injection made possible by allowing the passing
    of functions to Array.sort\n\n"
  affected_package: org.webjars.bower:angular
  vulnerable_versions:
  - ">1.3.0-beta.1 <1.3.0-rc.1"
  - ">=1.2.19 <1.2.19"
  package_manager: maven
  disclosed_date: 2016-07-28
  created_date: 2016-07-28
  last_modified_date: 2017-03-05
  credit:
  - OSSIndex
  references:
  - https://github.com/angular/angular.js/commit/b39e1d47b9a1b39a9fe34c847a81f589fba522f8
  source_url: https://ossindex.net/resource/package/7103386464/vulnerabilities
- id: ossindex:maven:org.webjars.bower:angular:8399952528
  title: Arbitrary code execution
  description: Arbitrary code execution was possible under very specific conditions.
  affected_package: org.webjars.bower:angular
  vulnerable_versions:
  - ">1.3.0-beta.1 <1.3.0-beta.14"
  package_manager: maven
  disclosed_date: 2016-07-28
  created_date: 2016-07-28
  last_modified_date: 2016-07-28
  credit:
  - OSSIndex
  references:
  - https://github.com/angular/angular.js/blob/b3b5015cb7919708ce179dc3d6f0d7d7f43ef621/CHANGELOG.md#1
  source_url: https://ossindex.net/resource/package/7103386464/vulnerabilities
- id: ossindex:maven:org.webjars.bower:angular:8399952529
  title: Angular Js Sandbox Bypass
  description: The AngularJS sandbox can be bypassed, allowing the execution of arbitrary
    JavaScript from within the Angular scope.
  affected_package: org.webjars.bower:angular
  vulnerable_versions:
  - ">1.3.0-beta.1 <1.3.0-rc.1"
  package_manager: maven
  disclosed_date: 2016-07-28
  created_date: 2016-07-28
  last_modified_date: 2016-07-28
  credit:
  - OSSIndex
  references:
  - http://avlidienbrunn.se/angular.txt#1
  source_url: https://ossindex.net/resource/package/7103386464/vulnerabilities
- id: ossindex:maven:org.webjars.bower:angular:8399952530
  title: "[Duplicate] Code injection"
  description: |-
    See https://ossindex.net/resource/vulnerability/8399952527

    There is a possible code injection made possible by allowing the passing of functions to Array.sort
  affected_package: org.webjars.bower:angular
  vulnerable_versions:
  - ">1.3.0-beta.1 <1.3.0-rc.1"
  package_manager: maven
  disclosed_date: 2016-07-28
  created_date: 2016-07-28
  last_modified_date: 2017-03-05
  credit:
  - OSSIndex
  references:
  - https://github.com/angular/angular.js/commit/b39e1d47b9a1b39a9fe34c847a81f589fba522f8#1
  source_url: https://ossindex.net/resource/package/7103386464/vulnerabilities
- id: ossindex:maven:org.webjars.bower:angular:8399952531
  title: Expression sandbox bypass
  description: 'These issues affect only applications with known server-side XSS holes
    that are also using CSP to secure their client-side code. '
  affected_package: org.webjars.bower:angular
  vulnerable_versions:
  - "<1.3.2"
  package_manager: maven
  disclosed_date: 2016-07-28
  created_date: 2016-07-28
  last_modified_date: 2016-07-28
  credit:
  - OSSIndex
  references:
  - https://github.com/angular/angular.js/blob/master/CHANGELOG.md
  source_url: https://ossindex.net/resource/package/7103386464/vulnerabilities
- id: ossindex:maven:org.webjars.bower:angular:8399952532
  title: Possible security hold with usemap attribute
  description: The attribute usemap has been blacklisted as it can be used as a security
    exploit.
  affected_package: org.webjars.bower:angular
  vulnerable_versions:
  - "<1.5.0-rc.2"
  package_manager: maven
  disclosed_date: 2016-07-28
  created_date: 2016-07-28
  last_modified_date: 2016-07-28
  credit:
  - OSSIndex
  references:
  - https://github.com/angular/angular.js/blob/master/CHANGELOG.md#1
  source_url: https://ossindex.net/resource/package/7103386464/vulnerabilities
- id: ossindex:maven:org.webjars.bower:angular:8399952533
  title: UI Redress Attack Through Improper Sanitization Of SVG Elements
  description: 'angular is susceptible to UI redress attacks. The vulnerability is
    due to the lack of proper sanitisation of an html input string by stripping all
    potentially dangerous tokens. So, an attacker can place svg elements outside of
    the containing element, leading to rendering it over other elements on the page
    (example: a login link).'
  affected_package: org.webjars.bower:angular
  vulnerable_versions:
  - "<1.5.0-beta.2"
  package_manager: maven
  disclosed_date: 2016-07-28
  created_date: 2016-07-28
  last_modified_date: 2016-07-28
  credit:
  - OSSIndex
  references:
  - https://github.com/angular/angular.js/commit/181fc567d873df065f1e84af7225deb70a8d2eb9
  - https://github.com/angular/angular.js/pull/12524
  - https://srcclr.com/security/ui-redress-attack-through-improper/javascript/s-2252
  source_url: https://ossindex.net/resource/package/7103386464/vulnerabilities
- id: ossindex:maven:org.webjars.bower:angular:8399952534
  title: Arbitrary Code Execution
  description: SVG animations tags are not being sanitized properly, resulting in
    possible arbitrary code execution.
  affected_package: org.webjars.bower:angular
  vulnerable_versions:
  - "<1.5.0-beta.2"
  package_manager: maven
  disclosed_date: 2016-07-28
  created_date: 2016-07-28
  last_modified_date: 2017-02-05
  credit:
  - OSSIndex
  references:
  - https://cwe.mitre.org/data/definitions/78.html
  - https://github.com/angular/angular.js/commit/67688d5ca00f6de4c7fe6084e2fa762a00d25610
  - https://github.com/angular/angular.js/pull/11290
  - https://srcclr.com/security/arbitrary-code-execution-through-svg/javascript/s-2253
  source_url: https://ossindex.net/resource/package/7103386464/vulnerabilities
- id: ossindex:maven:org.webjars.bower:angular:8401421233
  title: Cross Site Scripting (XSS)
  description: The linky filter is vulnerable to XSS due to its usage of the unsafeHTML
    filter.
  affected_package: org.webjars.bower:angular
  vulnerable_versions:
  - "<0.9.1"
  package_manager: maven
  disclosed_date: 2016-11-13
  created_date: 2016-11-13
  last_modified_date: 2016-11-13
  credit:
  - OSSIndex
  references:
  - https://cwe.mitre.org/data/definitions/79.html
  - https://github.com/angular/angular.js/issues/34
  source_url: https://ossindex.net/resource/package/7103386464/vulnerabilities
- id: ossindex:maven:org.webjars.bower:angular:8402281289
  title: Cross Site Scripting (XSS) when loaded from an extension
  description: "> Extension URIs (`resource://...`) bypass Content-Security-Policy
    in Chrome and Firefox and can always be loaded. Now if a site already has a XSS
    bug, and uses CSP to protect itself, but the user has an extension installed that
    uses Angular, an attacke[r] can load Angular from the extension, and Angular's
    auto-bootstrapping can be used to bypass the victim site's CSP protection.\n>
    \n> -- [github.com](https://github.com/angular/angular.js/pull/15346)"
  affected_package: org.webjars.bower:angular
  vulnerable_versions:
  - ">=1.5.0 <1.5.9"
  package_manager: maven
  disclosed_date: 2016-12-30
  created_date: 2016-12-30
  last_modified_date: 2017-02-01
  credit:
  - OSSIndex
  references:
  - https://cwe.mitre.org/data/definitions/79.html
  - https://github.com/angular/angular.js/commit/0ff10e1b56c6b7c4ac465e35c96a5886e294bac5
  - https://github.com/angular/angular.js/issues/15346
  - https://github.com/angular/angular.js/pull/15346
  source_url: https://ossindex.net/resource/package/7103386464/vulnerabilities
- id: ossindex:maven:org.webjars.bower:angular:8402281303
  title: Cross Site Scripting (XSS) through use elements referencing external SVG
  description: "> The use element can reference external svg's (same origin) and can
    include\nxlink javascript urls or foreign object that can execute xss.\n> \n>
    -- [github.com](https://github.com/angular/angular.js/pull/13453)"
  affected_package: org.webjars.bower:angular
  vulnerable_versions:
  - "<1.5.0"
  package_manager: maven
  disclosed_date: 2016-12-30
  created_date: 2016-12-30
  last_modified_date: 2016-12-30
  credit:
  - OSSIndex
  references:
  - https://cwe.mitre.org/data/definitions/79.html
  - https://github.com/angular/angular.js/issues/13453
  source_url: https://ossindex.net/resource/package/7103386464/vulnerabilities
- id: ossindex:maven:org.webjars.bower:angular:8402281308
  title: Cross Site Scripting (XSS) in server rendered templates
  description: "> When rendering Angular templates with a server-side templating engine
    like ERB or Haml it is easy to introduce XSS vulnerabilities. These vulnerabilities
    are enabled by AngularJS evaluating user-provided strings containing interpolation
    symbols (default symbols are {{ and }}).\n> \n> -- [github.com](https://github.com/angular/angular.js/issues/5601)\n"
  affected_package: org.webjars.bower:angular
  vulnerable_versions:
  - "<1.3.0-beta.10"
  package_manager: maven
  disclosed_date: 2016-12-30
  created_date: 2016-12-30
  last_modified_date: 2017-02-22
  credit:
  - OSSIndex
  references:
  - https://cwe.mitre.org/data/definitions/79.html
  - https://github.com/angular/angular.js/commit/e3f78c17d3b5d3a714402d7314094aabe7f6512a
  - https://github.com/angular/angular.js/issues/5601
  - https://github.com/angular/angular.js/issues/7496
  - https://github.com/angular/angular.js/pull/7517
  source_url: https://ossindex.net/resource/package/7103386464/vulnerabilities
- id: snykio:maven:org.webjars.bower:angular:473852
  title: Denial of Service (DoS)
  description: |+
    [org.webjars.bower:angular][1] is a bower WebJar for angular.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS). None



    [1]: https://search.maven.org/artifact/org.webjars.bower/angular/
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: org.webjars.bower:angular
  vulnerable_versions:
  - "< 1.6.3"
  severity: medium
  package_manager: maven
  cwe:
  - CWE-400
  disclosed_date: 2017-02-10
  created_date: 2019-10-04
  last_modified_date: 2019-10-04
  credit:
  - Unknown
  references:
  - https://github.com/angular/angular.js/commit/3bb1dd5d7f7dcde6fea5a3148f8f10e92f451e9d
  - https://github.com/angular/angular.js/pull/15699
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSBOWER-473852
- id: snykio:maven:org.webjars.bower:angular:473853
  title: Cross-site Scripting (XSS)
  description: |+
    [org.webjars.bower:angular][1] is a bower WebJar for angular.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). None



    [1]: https://search.maven.org/artifact/org.webjars.bower/angular/
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: org.webjars.bower:angular
  vulnerable_versions:
  - "< 1.6.5"
  severity: medium
  package_manager: maven
  cwe:
  - CWE-79
  disclosed_date: 2015-05-25
  created_date: 2019-10-04
  last_modified_date: 2019-10-04
  credit:
  - Cure53
  references:
  - https://github.com/angular/angular.js/commit/8f31f1ff43b673a24f84422d5c13d6312b2c4d94
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSBOWER-473853
- id: snykio:maven:org.webjars.bower:angular:473854
  title: Cross-site Scripting (XSS)
  description: |+
    [org.webjars.bower:angular][1] is a bower WebJar for angular.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). None



    [1]: https://search.maven.org/artifact/org.webjars.bower/angular/
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: org.webjars.bower:angular
  vulnerable_versions:
  - "< 1.6.0-rc.2"
  severity: medium
  package_manager: maven
  cwe:
  - CWE-79
  disclosed_date: 2015-03-17
  created_date: 2019-10-04
  last_modified_date: 2019-10-04
  credit:
  - Chirayu Krishnappa
  references:
  - https://github.com/angular/angular.js/commit/6476af83cd0418c84e034a955b12a842794385c4
  - https://github.com/angular/angular.js/issues/11352
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSBOWER-473854
- id: snykio:maven:org.webjars.bower:angular:479385
  title: Cross-site Scripting (XSS)
  description: |+
    [org.webjars.bower:angular][1] is a bower WebJar for angular.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) due to no proper sanitization of `xlink:href` attributes.



    [1]: https://search.maven.org/artifact/org.webjars.bower/angular/
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: org.webjars.bower:angular
  vulnerable_versions:
  - ">= 1.0.0 < 1.5.0-beta.0"
  severity: high
  package_manager: maven
  cve:
  - CVE-2019-14863
  cwe:
  - CWE-78
  disclosed_date: 2015-08-06
  created_date: 2017-01-23
  last_modified_date: 2017-01-23
  credit:
  - Igor Minar
  references:
  - https://github.com/angular/angular.js/commit/f33ce173c90736e349cf594df717ae3ee41e0f7a
  - https://github.com/angular/angular.js/pull/12524
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSBOWER-479385
- id: snykio:maven:org.webjars.bower:angular:479389
  title: Cross-site Scripting (XSS)
  description: |+
    [org.webjars.bower:angular][1] is a bower WebJar for angular.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). This error occurs when `$sanitize` sanitizer tries to check the
    input for possible mXSS payload and the verification errors due to the
    input mutating indefinitely. This could be a sign that the payload
    contains code exploiting an mXSS vulnerability in the browser.

    mXSS attack exploit browser bugs that cause some browsers parse a
    certain html strings into DOM, which once serialized doesn\'t match the
    original input. These browser bugs can be exploited by attackers to
    create payload which looks harmless to sanitizers, but due to mutations
    caused by the browser are turned into dangerous code once processed
    after sanitization.



    [1]: https://search.maven.org/artifact/org.webjars.bower/angular/
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.
      ## Remediation   {#remediation}

    Upgrade `org.webjars.bower:angular` to version 1.5.0-beta.2 or higher.

  affected_package: org.webjars.bower:angular
  vulnerable_versions:
  - "< 1.5.0-beta.2"
  severity: high
  package_manager: maven
  cwe:
  - CWE-79
  disclosed_date: 2015-09-08
  created_date: 2017-01-23
  last_modified_date: 2017-01-23
  credit:
  - Igor Minar
  references:
  - https://github.com/angular/angular.js/commit/bc0d8c4eea9a34bff5e29dd492dcdd668251be40
  - https://github.com/angular/angular.js/pull/12524
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSBOWER-479389
- id: snykio:maven:org.webjars.bower:angular:479392
  title: Arbitrary Code Execution
  description: |+
    [org.webjars.bower:angular][1] is a bower WebJar for angular.

    Affected versions of this package are vulnerable to Arbitrary Code
    Execution via unsafe svg animation tags.



    [1]: https://search.maven.org/artifact/org.webjars.bower/angular/
    \nExploit Example:

        <svg>
          <a xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="?">
            <circle r="400"></circle>
            <animate attributeName="xlink:href" begin="0" from="javascript:alert(1)" to="&" />
          </a>
        </svg>
    {: .language-html}

    Here the anchor\'s href is animated, starting from a value that\'s a
    javascript URI. This allows execution of arbitrary javascript in the
    process. Preventing only the animation of links is tricky, as SVG is
    weird and namespaces aren\'t predictable. The fix is to have the
    sanitizer filter out svg animation tags instead.

  affected_package: org.webjars.bower:angular
  vulnerable_versions:
  - "< 1.4.0"
  severity: high
  package_manager: maven
  cwe:
  - CWE-78
  disclosed_date: 2015-03-09
  created_date: 2017-01-23
  last_modified_date: 2017-01-23
  credit:
  - Rodric Haddad
  references:
  - https://github.com/angular/angular.js/commit/67688d5ca00f6de4c7fe6084e2fa762a00d25610
  - https://github.com/angular/angular.js/pull/11290
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSBOWER-479392
- id: snykio:maven:org.webjars.bower:angular:479395
  title: Cross-site Scripting (XSS)
  description: |+
    [org.webjars.bower:angular][1] is a bower WebJar for angular.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) due to the `usemap` attribute not being blacklisted.



    [1]: https://search.maven.org/artifact/org.webjars.bower/angular/
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.
      ## Remediation   {#remediation}

    Upgrade `org.webjars.bower:angular` to version 1.5.0-rc.2 or higher.

  affected_package: org.webjars.bower:angular
  vulnerable_versions:
  - ">= 1.3.0 < 1.5.0-rc.2"
  severity: medium
  package_manager: maven
  cwe:
  - CWE-79
  disclosed_date: 2016-01-21
  created_date: 2017-01-23
  last_modified_date: 2017-01-23
  credit:
  - Lucas Mirelmann
  references:
  - https://github.com/angular/angular.js/blob/master/CHANGELOG.md#150-rc2-controller-requisition-2016-01-28
  - https://github.com/angular/angular.js/commit/234053fc9ad90e0d05be7e8359c6af66be94c094
  - https://github.com/angular/angular.js/pull/13826
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSBOWER-479395
- id: snykio:maven:org.webjars.bower:angular:479398
  title: Arbitrary Command Execution
  description: |
    [org.webjars.bower:angular][1] is a bower WebJar for angular.

    Affected versions of this package are vulnerable to Arbitrary Command
    Execution due to the assignment functions accessing constructors
    functions, allowing attackers to execute their malicious code.



    [1]: https://search.maven.org/artifact/org.webjars.bower/angular/
  affected_package: org.webjars.bower:angular
  vulnerable_versions:
  - "< 1.3.2"
  severity: medium
  package_manager: maven
  cwe:
  - CWE-78
  disclosed_date: 2014-11-03
  created_date: 2017-01-23
  last_modified_date: 2017-01-23
  credit:
  - Gábor Molnár
  - Jann Horn
  - Sebastian Lekies
  references:
  - https://github.com/angular/angular.js/blob/master/CHANGELOG.md#132-cardiovasculatory-magnification-2014-11-07
  - https://github.com/angular/angular.js/commit/e676d642f5feb8d3ba88944634afb479ba525c36
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSBOWER-479398
- id: snykio:maven:org.webjars.bower:angular:479401
  title: JSONP Callback Attack
  description: |
    [org.webjars.bower:angular][1] is a bower WebJar for angular.

    Affected versions of this package are vulnerable to JSONP Callback
    Attack. `JSONP` (JSON with padding) is a method used to request data
    from a server residing in a different domain than the client.

    Any url could perform JSONP requests, allowing full access to the
    browser and the JavaScript context. This can lead to Cross-site
    Scripting.



    [1]: https://search.maven.org/artifact/org.webjars.bower/angular/
  affected_package: org.webjars.bower:angular
  vulnerable_versions:
  - "< 1.6.1"
  severity: medium
  package_manager: maven
  cwe:
  - CWE-79
  disclosed_date: 2015-03-14
  created_date: 2017-02-13
  last_modified_date: 2017-02-13
  credit:
  - Pete Bacon Darwin
  references:
  - https://github.com/angular/angular.js/issues/11328
  - https://github.com/angular/angular.js/pull/15143
  - https://github.com/angular/angular.js/pull/15161
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSBOWER-479401
- id: snykio:maven:org.webjars.bower:angular:479404
  title: Cross-site Scripting (XSS)
  description: |+
    [org.webjars.bower:angular][1] is a bower WebJar for angular.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) due to unsanitized URIs in `ng-srcset`.



    [1]: https://search.maven.org/artifact/org.webjars.bower/angular/
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: org.webjars.bower:angular
  vulnerable_versions:
  - "< 1.3.0-rc.4"
  severity: medium
  package_manager: maven
  cwe:
  - CWE-79
  disclosed_date: 2014-09-07
  created_date: 2017-01-23
  last_modified_date: 2017-01-23
  credit:
  - Laurent Trillaud
  references:
  - https://github.com/angular/angular.js/commit/ab80cd90661396dbb1c94c5f4dd2d11ee8f6b6af
  - https://github.com/angular/angular.js/pull/8975
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSBOWER-479404
- id: snykio:maven:org.webjars.bower:angular:479407
  title: Cross-site Scripting (XSS)
  description: |-
    [org.webjars.bower:angular][1] is a bower WebJar for angular.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). Browsers mutate attributes values such as `　javascript:alert(1)`
    when they are written to the DOM via `innerHTML` in various vendor
    specific ways. In Chrome (&lt;62), this mutation removed the preceding
    \"whitespace\" resulting in a value that could end up being executed as
    JavaScript.

    Here is an example of what could happen:

        // Code goes here
        var h1 = document.querySelector('h1');
        h1.innerHTML = '<a href="　javascript:alert(1)">CLICKME</a>';
        var innerHTML = h1.innerHTML;
        console.log(innerHTML);
        h1.innerHTML = innerHTML;
    {: .language-js}

    The sanitizer contains a bit of code that triggers this mutation on an
    inert piece of DOM, [before angular sanitizes it][2].

    **Note:** Chrome 62 does not appear to mutate this particular string any
    more, instead it just leaves the \"whitespace\" in place. This probably
    means that Chrome 62 is no longer vulnerable to this specific attack
    vector.



    [1]: https://search.maven.org/artifact/org.webjars.bower/angular/
    [2]: https://github.com/angular/angular.js/blob/817ac567/src/ngSanitize/sanitize.js#L406-L417
    \n
  affected_package: org.webjars.bower:angular
  vulnerable_versions:
  - "< 1.6.7"
  severity: medium
  package_manager: maven
  cwe:
  - CWE-79
  disclosed_date: 2017-10-17
  created_date: 2017-12-25
  last_modified_date: 2017-12-25
  credit:
  - Unknown
  references:
  - https://github.com/angular/angular.js/commit/667db466f959f8bbca1451d0f1c1a3db25d46a6c
  - https://github.com/angular/angular.js/issues/16288
  - https://github.com/angular/angular.js/pull/16311
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSBOWER-479407
- id: snykio:maven:org.webjars.bower:angular:479411
  title: Cross-site Scripting (XSS)
  description: |+
    [org.webjars.bower:angular][1] is a bower WebJar for angular.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks involving assignment on `constructor` properties.



    [1]: https://search.maven.org/artifact/org.webjars.bower/angular/
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: org.webjars.bower:angular
  vulnerable_versions:
  - "< 1.4.10"
  severity: medium
  package_manager: maven
  cwe:
  - CWE-79
  disclosed_date: 2015-11-29
  created_date: 2017-01-23
  last_modified_date: 2017-01-23
  credit:
  - Lucas Mirelmann
  references:
  - https://github.com/angular/angular.js/commit/5a674f3bb9d1118d11b333e3b966c01a571c09e6
  - https://github.com/angular/angular.js/pull/13417
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSBOWER-479411
- id: snykio:maven:org.webjars.bower:angular:479414
  title: Clickjacking
  description: |
    [org.webjars.bower:angular][1] is a bower WebJar for angular.

    Affected versions of this package are vulnerable to Clickjacking By
    enabling the SVG setting without taking other precautions, you might
    expose your application to click-hijacking attacks. In these attacks,
    sanitized SVG elements could be positioned outside of the containing
    element and be rendered over other elements on the page (e.g. a login
    link). Such behavior can then result in phishing incidents.

    To protect against these, explicitly setup `overflow: hidden` css rule
    for all potential SVG tags within the sanitized content:

        .rootOfTheIncludedContent svg {
          overflow: hidden !important;
        }
    {: .language-ruby}



    [1]: https://search.maven.org/artifact/org.webjars.bower/angular/
  affected_package: org.webjars.bower:angular
  vulnerable_versions:
  - ">= 1.3.1 < 1.5.0-beta.0"
  severity: medium
  package_manager: maven
  cwe:
  - CWE-693
  disclosed_date: 2015-08-06
  created_date: 2017-01-23
  last_modified_date: 2017-01-23
  credit:
  - Igor Minar
  references:
  - https://github.com/angular/angular.js/commit/181fc567d873df065f1e84af7225deb70a8d2eb9
  - https://github.com/angular/angular.js/pull/12524
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSBOWER-479414
- id: snykio:maven:org.webjars.bower:angular:479417
  title: Arbitrary Script Injection
  description: |
    [org.webjars.bower:angular][1] is a bower WebJar for angular.

    Affected versions of this package are vulnerable to Arbitrary Script
    Injection. Attributes were not protected via `$sce`, which prevents
    interpolated values that fail the `RESOURCE_URL` context tests from
    being used in interpolation. For example if the application is running
    at `https://docs.angularjs.org` then the following will fail:

        <link href="{{ 'http://mydomain.org/unsafe.css' }}" rel="stylesheet">
    {: .language-html}

    By default, `RESOURCE_URL` safe URLs are only allowed from the same
    domain and protocol as the application document.



    [1]: https://search.maven.org/artifact/org.webjars.bower/angular/
  affected_package: org.webjars.bower:angular
  vulnerable_versions:
  - ">= 1.0.0 < 1.2.30"
  severity: medium
  package_manager: maven
  cwe:
  - CWE-94
  disclosed_date: 2016-05-26
  created_date: 2017-01-23
  last_modified_date: 2017-01-23
  credit:
  - Raphaël Jamet
  references:
  - https://github.com/angular/angular.js/blob/master/CHANGELOG.md#1230-patronal-resurrection-2016-07-21
  - https://github.com/angular/angular.js/commit/f35f334bd3197585bdf034f4b6d9ffa3122dac62
  - https://github.com/angular/angular.js/pull/14687
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSBOWER-479417
- id: snykio:maven:org.webjars.bower:angular:479420
  title: Cross-site Scripting (XSS)
  description: |+
    [org.webjars.bower:angular][1] is a bower WebJar for angular.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) via the SVG `<use>` element. The `<use>` element can reference
    external SVG\'s (same origin) and can include `xlink:href` javascript
    urls or foreign object that can execute XSS. The change disallows
    `<use>` elements in sanitized SVG markup.

    An example of a malicious SVG document would be:

    SVG to sanitize:

        <svg><use xlink:href="test.svg#xss" /></svg>
    {: .language-html}

    External SVG file (test.svg):

        <?xml version="1.0" encoding="UTF-8" standalone="no"?>
        <svg xmlns:svg="http://www.w3.org/2000/svg"
           xmlns="http://www.w3.org/2000/svg" width="100"
           height="100"
           id="xss">
        <a xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="javascript:alert(1)">
          <circle cx="50" cy="50" r="40" stroke="black" stroke-width="3" fill="red" />
        </a>
        </svg>
    {: .language-html}

    Here the SVG to sanitize loads in the `test.svg` file via the `<use>`
    element. The sanitizer is not able to parse this file, which contains
    malicious executable mark-up. This can only be taken advantage of if the
    external file is available via the same origin restrictions in place.



    [1]: https://search.maven.org/artifact/org.webjars.bower/angular/
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.
      ## Remediation   {#remediation}

    Upgrade `org.webjars.bower:angular` to version 1.5.0-rc.0 or higher.

  affected_package: org.webjars.bower:angular
  vulnerable_versions:
  - "< 1.5.0-rc.0"
  severity: medium
  package_manager: maven
  cwe:
  - CWE-79
  disclosed_date: 2015-12-04
  created_date: 2017-01-23
  last_modified_date: 2017-01-23
  credit:
  - Pete Bacon Darwin
  references:
  - https://github.com/angular/angular.js/commit/7a668cdd7d08a7016883eb3c671cbcd586223ae8
  - https://github.com/angular/angular.js/pull/13453
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSBOWER-479420
- id: snykio:maven:org.webjars.bower:angular:479423
  title: Protection Bypass
  description: |
    [org.webjars.bower:angular][1] is a bower WebJar for angular.

    Affected versions of this package are vulnerable to Protection Bypass
    via `ng-attr-action` and `ng-attr-srcdoc` allowing binding to
    Javascript. The fix was to require bindings to `form[action]` to be
    `$sce.RESOURCE_URL` and bindings to `iframe[srcdoc]` to be `$sce.HTML`



    [1]: https://search.maven.org/artifact/org.webjars.bower/angular/
  affected_package: org.webjars.bower:angular
  vulnerable_versions:
  - "< 1.2.2"
  severity: high
  package_manager: maven
  cwe:
  - CWE-284
  disclosed_date: 2013-11-12
  created_date: 2017-01-23
  last_modified_date: 2017-01-23
  credit:
  - Chirayu Krishnappa
  references:
  - https://code.google.com/archive/p/mustache-security/wikis/AngularJS.wiki#The_State_of_AngularJS_1.2.x
  - https://github.com/angular/angular.js/issues/4927
  - https://github.com/angular/angular.js/pull/4933
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSBOWER-479423
- id: snykio:maven:org.webjars.bower:angular:479427
  title: Arbitrary Script Injection
  description: |
    [org.webjars.bower:angular][1] is a bower WebJar for angular.

    Affected versions of this package are vulnerable to Arbitrary Script
    Injection due to improper sanitization of the `$event` object passed to
    the native constructor functions. That isn\'t protected by the fast
    paths in `$parse`.



    [1]: https://search.maven.org/artifact/org.webjars.bower/angular/
  affected_package: org.webjars.bower:angular
  vulnerable_versions:
  - "< 1.1.5"
  severity: high
  package_manager: maven
  cwe:
  - CWE-78
  disclosed_date: 2013-06-24
  created_date: 2017-01-23
  last_modified_date: 2017-01-23
  credit:
  - Chirayu Krishnappa
  - Igor Minar
  references:
  - https://github.com/angular/angular.js/blob/master/CHANGELOG.md#120rc1-spooky-giraffe-2013-08-13
  - https://github.com/angular/angular.js/commit/5349b20097dc5cdff0216ee219ac5f6e6ef8c219
  - https://github.com/angular/angular.js/pull/3043
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSBOWER-479427
- id: snykio:maven:org.webjars.bower:angular:479430
  title: Cross-site Scripting (XSS)
  description: |-
    [org.webjars.bower:angular][1] is a bower WebJar for angular.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). DOM event handlers await events to occur (e.g. onclick,
    onkeypress, etc) and execute arbitrary Javascript code in accordance to
    the event. By default, interpolations inside DOM event handlers are
    disallowed. Using an interpolation for such handlers means that the
    interpolated value is a JS string being evaluated. Storing or generating
    such strings is error prone and likely leads to a Cross-site Scripting
    (XSS) vulnerability if you\'re not careful. On the other hand, ng-click
    and such event handlers evaluate Angular expressions that are a lot
    safer (e.g. No direct access to global objects - only scope), cleaner
    and harder to exploit.

    To migrate the code follow the example below: Before:

        JS:   scope.foo = 'alert(1)';
    {: .language-js}

        HTML: <div onclick="{{foo}}">
    {: .language-html}

    After:

        JS:   scope.foo = function() { alert(1); }
    {: .language-js}

        HTML: <div ng-click="foo()">
    {: .language-html}



    [1]: https://search.maven.org/artifact/org.webjars.bower/angular/
    \n
  affected_package: org.webjars.bower:angular
  vulnerable_versions:
  - "< 1.2.0"
  severity: medium
  package_manager: maven
  cwe:
  - CWE-78
  disclosed_date: 2013-06-20
  created_date: 2017-01-23
  last_modified_date: 2017-01-23
  credit:
  - Chirayu Krishnappa
  references:
  - https://github.com/angular/angular.js/commit/39841f2ec9b17b3b2920fd1eb548d444251f4f56
  - https://github.com/angular/angular.js/pull/3028
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSBOWER-479430
- id: snykio:maven:org.webjars.bower:angular:479433
  title: Cross-site Scripting (XSS)
  description: |
    [org.webjars.bower:angular][1] is a bower WebJar for angular.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) Concatenating expressions makes it hard to reason about whether
    some combination of concatenated values are unsafe to use and could
    easily lead to XSS. By requiring that a single expression be used for
    `*[src/ng-src]` such as `iframe[src]`, `object[src]`, etc. (but not
    `img[src/ng-src]` since that value is sanitized), it is ensured that the
    value that\'s used is assigned or constructed by some JS code somewhere
    that is more testable or make it obvious that you bound the value to
    some user controlled value. This helps reduce the load when auditing for
    XSS issues.

    To migrate your code, follow the example below:

    Before:

        JS:
        scope.baseUrl = 'page';
        scope.a = 1;
        scope.b = 2;
    {: .language-js}

        HTML:
        <!-- Are a and b properly escaped here? Is baseUrl
         controlled by user? -->
        <iframe src="{{baseUrl}}?a={{a}&b={{b}}">
    {: .language-html}

    After:

        JS:
        var baseUrl = "page";
        scope.getIframeSrc = function() {
          // There are obviously better ways to do this.  The
          // key point is that one will think about this and do
          // it the right way.
          var qs = ["a", "b"].map(function(value, name) {
          return encodeURIComponent(name) + "=" +
         encodeURIComponent(value);
        }).join("&");
          // baseUrl isn't on scope so it isn't bound to a user
          // controlled value.
          return baseUrl + "?" + qs;
        }
    {: .language-js}

        HTML: <iframe src="{{getIframeSrc()}}">Before:
    {: .language-html}

    \##Details A cross-site scripting attack occurs when the attacker tricks
    a legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.



    [1]: https://search.maven.org/artifact/org.webjars.bower/angular/
  affected_package: org.webjars.bower:angular
  vulnerable_versions:
  - ">= 1.0.0 < 1.2.0"
  severity: medium
  package_manager: maven
  cwe:
  - CWE-79
  disclosed_date: 2013-06-21
  created_date: 2017-01-23
  last_modified_date: 2017-01-23
  credit:
  - Chirayu Krishnappa
  references:
  - https://github.com/angular/angular.js/commit/38deedd6e3d806eb8262bb43f26d47245f6c2739
  - https://github.com/angular/angular.js/pull/3030
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSBOWER-479433
- id: snykio:maven:org.webjars.bower:angular:479436
  title: Arbitrary Code Execution
  description: |
    [org.webjars.bower:angular][1] is a bower WebJar for angular.

    Affected versions of this package are vulnerable to Arbitrary Code
    Execution. `$parse` allowed arbitrary code execution via Angular
    expressions under some very specific conditions. The only applications
    affected by these vulnerabilities are those that match all of the
    following conditions:

    * Application mixes server-side and client-side templating
    * The server-side templating contains XSS vulnerabilities
    * The vulnerabilities in the server-side templating are being guarded by
      server-side XSS filters or on the client-side via CSP
    * The server-side XSS vulnerabilities can be used to augment the
      client-side template processed by Angular
    * *Applications not meeting all of the conditions are not vulnerable.\**



    [1]: https://search.maven.org/artifact/org.webjars.bower/angular/
  affected_package: org.webjars.bower:angular
  vulnerable_versions:
  - "< 1.3.0"
  severity: low
  package_manager: maven
  cwe:
  - CWE-94
  disclosed_date: 2014-06-07
  created_date: 2017-01-23
  last_modified_date: 2017-01-23
  credit:
  - Jann Horn
  references:
  - https://github.com/angular/angular.js/blob/b3b5015cb7919708ce179dc3d6f0d7d7f43ef621/CHANGELOG.md#130-beta14-harmonious-cacophonies-2014-06-30
  - https://github.com/angular/angular.js/commit/48fa3aadd546036c7e69f71046f659ab1de244c6
  - https://github.com/angular/angular.js/commit/528be29d1662122a34e204dd607e1c0bd9c16bbc
  - https://github.com/angular/angular.js/commit/77ada4c82d6b8fc6d977c26f3cdb48c2f5fbe5a5
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSBOWER-479436
- id: snykio:maven:org.webjars.bower:angular:479439
  title: Content Security Policy (CSP) Bypass
  description: |
    [org.webjars.bower:angular][1] is a bower WebJar for angular.

    Affected versions of this package are vulnerable to Content Security
    Policy (CSP) Bypass. Extension URIs (`resource://...`) bypass
    Content-Security-Policy in Chrome and Firefox and can always be loaded.
    Now if a site already has a XSS bug, and uses CSP to protect itself, but
    the user has an extension installed that uses Angular, an attacker can
    load Angular from the extension, and Angular\'s auto-bootstrapping can
    be used to bypass the victim site\'s CSP protection.



    [1]: https://search.maven.org/artifact/org.webjars.bower/angular/
  affected_package: org.webjars.bower:angular
  vulnerable_versions:
  - ">= 1.5.0 < 1.5.9"
  severity: medium
  package_manager: maven
  cwe:
  - CWE-284
  disclosed_date: 2016-10-31
  created_date: 2017-01-23
  last_modified_date: 2017-01-23
  credit:
  - Martin Probst
  references:
  - https://github.com/angular/angular.js/commit/0ff10e1b56c6b7c4ac465e35c96a5886e294bac5
  - https://github.com/angular/angular.js/pull/15346
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSBOWER-479439
- id: snykio:maven:org.webjars.bower:angular:479442
  title: Unsafe Object Deserialization
  description: |
    [org.webjars.bower:angular][1] is a bower WebJar for angular.

    Affected versions of this package are vulnerable to Unsafe Object
    Deserialization.



    [1]: https://search.maven.org/artifact/org.webjars.bower/angular/
  affected_package: org.webjars.bower:angular
  vulnerable_versions:
  - ">= 1.2.19 < 1.2.24"
  severity: high
  package_manager: maven
  cwe:
  - CWE-502
  disclosed_date: 2014-09-08
  created_date: 2017-01-23
  last_modified_date: 2017-01-23
  credit:
  - Chirayu Krishnappa
  references:
  - https://github.com/angular/angular.js/commit/b39e1d47b9a1b39a9fe34c847a81f589fba522f8
  - https://github.com/angular/angular.js/pull/8984
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSBOWER-479442
- id: snykio:maven:org.webjars.bower:angular:479445
  title: Cross-site Scripting (XSS)
  description: |+
    [org.webjars.bower:angular][1] is a bower WebJar for angular.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) through SVG files if `enableSvg` is set.



    [1]: https://search.maven.org/artifact/org.webjars.bower/angular/
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: org.webjars.bower:angular
  vulnerable_versions:
  - "< 1.6.9"
  severity: medium
  package_manager: maven
  cwe:
  - CWE-79
  disclosed_date: 2018-02-02
  created_date: 2018-02-19
  last_modified_date: 2018-02-19
  credit:
  - Unknown
  references:
  - https://github.com/angular/angular.js/blob/master/CHANGELOG.md#169-fiery-basilisk-2018-02-02
  - https://github.com/angular/angular.js/commit/b9ef6585e10477fbbf912a971fe0b390bca692a6
  - https://github.com/angular/angular.js/pull/16414
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSBOWER-479445
- id: snykio:maven:org.webjars.bower:angular:539653
  title: Prototype Pollution
  description: |
    [org.webjars.bower:angular][1] is a bower WebJar for angular.

    Affected versions of this package are vulnerable to Prototype Pollution.
    The function `merge()` could be tricked into adding or modifying
    properties of `Object.prototype` using a `__proto__` payload.



    [1]: https://search.maven.org/artifact/org.webjars.bower/angular/
  affected_package: org.webjars.bower:angular
  vulnerable_versions:
  - ">= 1.4.6 < 1.7.9"
  severity: high
  package_manager: maven
  cve:
  - CVE-2019-10768
  cwe:
  - CWE-400
  disclosed_date: 2019-11-06
  created_date: 2019-11-19
  last_modified_date: 2019-11-19
  credit:
  - Snyk Security Team
  references:
  - https://github.com/angular/angular.js/commit/add78e62004e80bb1e16ab2dfe224afa8e513bc3
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSBOWER-539653
