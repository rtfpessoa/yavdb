---
- id: snykio:maven:com.typesafe.play:play:1037654
  title: Denial of Service (DoS)
  description: |
    Affected versions of this package are vulnerable to Denial of Service
    (DoS). Data amplification can occur when an application accepts
    `multipart/form-data` JSON input.

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package][1]



    [1]: https://snyk.io/vuln/npm:ws:20171108
  affected_package: com.typesafe.play:play
  vulnerable_versions:
  - ">= 2.6.0 < 2.7.6"
  - ">= 2.8.0 < 2.8.3"
  severity: high
  package_manager: maven
  cve:
  - CVE-2020-26882
  cwe:
  - CWE-400
  disclosed_date: 2020-11-06
  created_date: 2020-11-06
  last_modified_date: 2020-11-06
  credit:
  - Unknown
  references:
  - https://github.com/playframework/playframework/commit/c8bff5635254ffa1a37db640effc5ef55002d2e8
  - https://www.playframework.com/security/vulnerability/CVE-2020-26882-JsonParseDataAmplification
  source_url: https://snyk.io/vuln/SNYK-JAVA-COMTYPESAFEPLAY-1037654
- id: snykio:maven:com.typesafe.play:play:32415
  title: Directory Traversal
  description: |
    [com.typesafe.play:play][1] combines productivity and performance making
    it easy to build scalable web applications with Java and Scala.

    Affected versions of this package are vulnerable to Directory Traversal.
    When an application is running on Windows, it is possible to access
    files on the `classpath` stored outside the public folder, such as the
    `conf/application.conf` file.

    **Note** this vulnerability only affects Windows, it does not affect
    Linux.



    [1]: https://github.com/playframework/playframework
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
  affected_package: com.typesafe.play:play
  vulnerable_versions:
  - ">= 2.6.12 < 2.6.16"
  severity: high
  package_manager: maven
  cve:
  - CVE-2018-13864
  cwe:
  - CWE-22
  disclosed_date: 2018-07-16
  created_date: 2018-07-19
  last_modified_date: 2018-07-19
  credit:
  - Unknown
  references:
  - https://www.playframework.com/security/vulnerability/CVE-2018-13864-PathTraversal
  source_url: https://snyk.io/vuln/SNYK-JAVA-COMTYPESAFEPLAY-32415
