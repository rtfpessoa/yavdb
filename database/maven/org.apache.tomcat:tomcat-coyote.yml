---
- id: ossindex:maven:org.apache.tomcat:tomcat-coyote:311310
  title: "[CVE-2005-2090] Jakarta Tomcat 5.0.19 (Coyote/1.1) and Tomcat 4.1.24 (Coyote/1.0)
    allows remote ..."
  description: 'Jakarta Tomcat 5.0.19 (Coyote/1.1) and Tomcat 4.1.24 (Coyote/1.0)
    allows remote attackers to poison the web cache, bypass web application firewall
    protection, and conduct XSS attacks via an HTTP request with both a "Transfer-Encoding:
    chunked" header and a Content-Length header, which causes Tomcat to incorrectly
    handle and forward the body of the request in a way that causes the receiving
    server to process it as a separate HTTP request, aka "HTTP Request Smuggling."'
  affected_package: org.apache.tomcat:tomcat-coyote
  vulnerable_versions:
  - '1.0'
  - '1.1'
  package_manager: maven
  cve:
  - CVE-2005-2090
  disclosed_date: 2005-07-05
  created_date: 2005-07-05
  last_modified_date: 2017-04-19
  credit:
  - OSSIndex
  references:
  - http://community.ca.com/blogs/casecurityresponseblog/archive/2009/01/23.aspx
  - http://docs.info.apple.com/article.html?artnum=306172
  - http://h20000.www2.hp.com/bizsupport/TechSupport/Document.jsp?objectID=c01178795
  - http://lists.apple.com/archives/security-announce//2007/Jul/msg00004.html
  - http://lists.opensuse.org/opensuse-security-announce/2008-03/msg00001.html
  - http://lists.vmware.com/pipermail/security-announce/2008/000003.html
  - http://seclists.org/lists/bugtraq/2005/Jun/0025.html
  - http://secunia.com/advisories/26235
  - http://secunia.com/advisories/26660
  - http://secunia.com/advisories/27037
  - http://secunia.com/advisories/28365
  - http://secunia.com/advisories/29242
  - http://secunia.com/advisories/30899
  - http://secunia.com/advisories/30908
  - http://secunia.com/advisories/33668
  - http://securitytracker.com/id?1014365
  - http://sunsolve.sun.com/search/document.do?assetkey=1-26-239312-1
  - http://support.avaya.com/elmodocs2/security/ASA-2007-206.htm
  - http://support.ca.com/irj/portal/anonymous/phpsupcontent?contentID=197540
  - http://tomcat.apache.org/security-4.html
  - http://tomcat.apache.org/security-5.html
  - http://tomcat.apache.org/security-6.html
  - http://www.fujitsu.com/global/support/software/security/products-f/interstage-200703e.html
  - http://www.redhat.com/support/errata/RHSA-2007-0327.html
  - http://www.redhat.com/support/errata/RHSA-2007-0360.html
  - http://www.redhat.com/support/errata/RHSA-2008-0261.html
  - http://www.securiteam.com/securityreviews/5GP0220G0U.html
  - http://www.securityfocus.com/archive/1/archive/1/485938/100/0/threaded
  - http://www.securityfocus.com/archive/1/archive/1/500396/100/0/threaded
  - http://www.securityfocus.com/archive/1/archive/1/500412/100/0/threaded
  - http://www.securityfocus.com/bid/13873
  - http://www.securityfocus.com/bid/25159
  - http://www.vupen.com/english/advisories/2007/2732
  - http://www.vupen.com/english/advisories/2007/3087
  - http://www.vupen.com/english/advisories/2007/3386
  - http://www.vupen.com/english/advisories/2008/0065
  - http://www.vupen.com/english/advisories/2008/1979/references
  - http://www.vupen.com/english/advisories/2009/0233
  - http://www.watchfire.com/resources/HTTP-Request-Smuggling.pdf
  source_url: https://ossindex.net/resource/package/7015341707/vulnerabilities
- id: ossindex:maven:org.apache.tomcat:tomcat-coyote:8402545391
  title: "[Disputed] Arbitrary file upload via deserialization"
  description: "> A poison null byte flaw was found in the implementation of the DiskFileItem
    class. A remote attacker able to supply a serialized instance of the DiskFileItem
    class, which will be deserialized on a server, could use this flaw to write arbitrary
    content to any location on the server that is permitted by the user running the
    application server process.\n> \n> -- [redhat.com](https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2013-2185)"
  affected_package: org.apache.tomcat:tomcat-coyote
  vulnerable_versions:
  - ">=7.0.0 <7.0.40"
  package_manager: maven
  disclosed_date: 2017-03-10
  created_date: 2017-03-10
  last_modified_date: 2017-04-19
  credit:
  - OSSIndex
  references:
  - https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2013-2185
  - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-2185
  - https://github.com/victims/victims-cve-db/blob/master/database/java/2013/2185.yaml
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2013-2185
  source_url: https://ossindex.net/resource/package/7015341707/vulnerabilities
- id: snykio:maven:org.apache.tomcat:tomcat-coyote:1017114
  title: HTTP Request Smuggling
  description: |
    [org.apache.tomcat:tomcat-coyote][1] is a Tomcat Connectors and HTTP
    parser.

    Affected versions of this package are vulnerable to HTTP Request
    Smuggling. If an HTTP/2 client connecting to Apache Tomcat exceeded the
    agreed maximum number of concurrent streams for a connection (in
    violation of the HTTP/2 protocol), it was possible that a subsequent
    request made on that connection could contain HTTP headers - including
    HTTP/2 pseudo headers - from a previous request rather than the intended
    headers. This could lead to users seeing responses for unexpected
    resources.



    [1]: https://mvnrepository.com/artifact/org.apache.tomcat/tomcat-coyote
  affected_package: org.apache.tomcat:tomcat-coyote
  vulnerable_versions:
  - ">= 10.0.0-M1 < 10.0.0-M8"
  - ">= 8.5.1 < 8.5.5"
  - ">= 9.0.0.M5 < 9.0.38"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2020-13943
  cwe:
  - CWE-444
  disclosed_date: 2020-10-13
  created_date: 2020-10-13
  last_modified_date: 2020-10-13
  credit:
  - Unknown
  references:
  - https://github.com/apache/tomcat/commit/1bbc650cbc3f08d85a1ec6d803c47ae53a84f3bb
  - https://lists.apache.org/thread.html/r4a390027eb27e4550142fac6c8317cc684b157ae314d31514747f307%40%3Cannounce.tomcat.apache.org%3E
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHETOMCAT-1017114
- id: snykio:maven:org.apache.tomcat:tomcat-coyote:1058922
  title: Information Exposure
  description: |
    [org.apache.tomcat:tomcat-coyote][1] is a Tomcat Connectors and HTTP
    parser.

    Affected versions of this package are vulnerable to Information
    Exposure. An HTTP request header value could be reused from the previous
    stream received on an HTTP/2 connection for the request associated with
    the subsequent stream. While this would most likely lead to an error and
    the closure of the HTTP/2 connection, it is possible that information
    could leak between requests.



    [1]: https://mvnrepository.com/artifact/org.apache.tomcat/tomcat-coyote
  affected_package: org.apache.tomcat:tomcat-coyote
  vulnerable_versions:
  - ">= 10.0.0-M1 < 10.0.0-M10"
  - ">= 8.5.0 < 8.5.60"
  - ">= 9.0.0 < 9.0.40"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2020-17527
  cwe:
  - CWE-200
  disclosed_date: 2020-12-04
  created_date: 2020-12-04
  last_modified_date: 2020-12-04
  credit:
  - Unknown
  references:
  - https://bz.apache.org/bugzilla/show_bug.cgi?id=64830
  - https://github.com/apache/tomcat/commit/d56293f816d6dc9e2b47107f208fa9e95db58c65
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHETOMCAT-1058922
- id: snykio:maven:org.apache.tomcat:tomcat-coyote:174102
  title: Denial of Service (DoS)
  description: "[org.apache.tomcat:tomcat-coyote][1] is a Tomcat Connectors and HTTP\nparser.\n\nAffected
    versions of this package are vulnerable to Denial of Service\n(DoS). The `HTTP/2`
    implementation accepted streams with excessive\nnumbers of `SETTINGS` frames and
    also permitted clients to keep streams\nopen without reading/writing request/response
    data. By keeping streams\nopen for requests that utilised the Servlet API\\'s
    blocking I/O, clients\nwere able to cause server-side threads to block eventually
    leading to\nthread exhaustion.\n\n\n\n[1]: https://mvnrepository.com/artifact/org.apache.tomcat/tomcat-coyote\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLetâ€™s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n{: .language-js}\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n{: .language-bash}\n\nThe entire
    process of testing it against a 30 characters long string\ntakes around ~52ms.
    But when given an invalid string, it takes nearly\ntwo seconds to complete the
    test, over ten times as long as it took to\ntest a valid string. The dramatic
    difference is due to the way regular\nexpressions get evaluated.\n\nMost Regex
    engines will work very similarly (with minor differences).\nThe engine will match
    the first possible way to accept the current\ncharacter and proceed to the next
    one. If it then fails to match the\nnext one, it will backtrack and see if there
    was another way to digest\nthe previous character. If it goes too far down the
    rabbit hole only to\nfind out the string doesnâ€™t match in the end, and if many
    characters\nhave multiple valid regex paths, the number of backtracking steps
    can\nbecome very large, resulting in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s
    look at how our expression runs into this problem, using a\nshorter string: \\\"ACCCX\\\".
    While it seems fairly straightforward, there\nare still four different ways that
    the engine could match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.
    \ C+C+C.\n\nThe engine has to try each of those combinations to see if any of
    them\npotentially match against the expression. When you combine that with the\nother
    steps the engine must take, we can use [RegEx 101 debugger][1] to\nsee the engine
    has to take a total of 38 steps before it can determine\nthe string doesn\\'t
    match.\n\nFrom there, the number of steps the engine must use to validate a string\njust
    continues to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n|
    ACCCX | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX
    | 14 | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to
    take over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n"
  affected_package: org.apache.tomcat:tomcat-coyote
  vulnerable_versions:
  - ">= 8.5.0 < 8.5.38"
  - ">= 9.0.0.M1 < 9.0.16"
  severity: high
  package_manager: maven
  cve:
  - CVE-2019-0199
  cwe:
  - CWE-400
  disclosed_date: 2019-03-25
  created_date: 2019-04-04
  last_modified_date: 2019-04-04
  credit:
  - Michal Karm
  references:
  - http://tomcat.apache.org/security-8.html
  - http://tomcat.apache.org/security-9.html
  - https://bugzilla.redhat.com/show_bug.cgi?id=1693325
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHETOMCAT-174102
- id: snykio:maven:org.apache.tomcat:tomcat-coyote:30066
  title: Arbitrary file upload
  description: |
    [`org.apache.tomcat:tomcat-coyote`][1] The readObject method in the
    DiskFileItem class in Apache Tomcat and JBoss Web, as used in Red Hat
    JBoss Enterprise Application Platform 6.1.0 and Red Hat JBoss Portal
    6.0.0, allows remote attackers to write to arbitrary files via a NULL
    byte in a file name in a serialized instance, a similar issue to
    CVE-2013-2186. NOTE: this issue is reportedly disputed by the Apache
    Tomcat team, although Red Hat considers it a vulnerability. The dispute
    appears to regard whether it is the responsibility of applications to
    avoid providing untrusted data to be deserialized, or whether this class
    should inherently protect against this issue.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22tomcat-coyote%22
  affected_package: org.apache.tomcat:tomcat-coyote
  vulnerable_versions:
  - ">= 7.0.0 <= 7.0.33"
  severity: high
  package_manager: maven
  cve:
  - CVE-2013-2185
  cwe:
  - CWE-434
  disclosed_date: 2016-12-25
  created_date: 2016-12-25
  last_modified_date: 2016-12-25
  credit:
  - Unknown
  references:
  - https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2013-2185
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHETOMCAT-30066
- id: snykio:maven:org.apache.tomcat:tomcat-coyote:30067
  title: Denial of Service (DoS)
  description: |+
    [`org.apache.tomcat:tomcat-coyote`][1] MultipartStream.java in Apache
    Commons FileUpload before 1.3.1, as used in Apache Tomcat, JBoss Web,
    and other products, allows remote attackers to cause a denial of service
    (infinite loop and CPU consumption) via a crafted Content-Type header
    that bypasses a loop\'s intended exit conditions.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22tomcat-coyote%22
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: org.apache.tomcat:tomcat-coyote
  vulnerable_versions:
  - ">= 7 < 7.0.51"
  - ">= 8 < 8.0.2"
  severity: high
  package_manager: maven
  cve:
  - CVE-2014-0050
  cwe:
  - CWE-264
  disclosed_date: 2014-04-01
  created_date: 2016-12-25
  last_modified_date: 2016-12-25
  credit:
  - Peter Magnusson
  - PrzemysÅ‚aw Celej
  references:
  - http://blog.spiderlabs.com/2014/02/cve-2014-0050-exploit-with-boundaries-loops-without-boundaries.html
  - http://mail-archives.apache.org/mod_mbox/www-announce/201402.mbox/%3C52F373FC.9030907@apache.org%3E
  - http://struts.apache.org/docs/s2-020.html
  - http://svn.apache.org/viewvc?view=revision&revision=1565143
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-0050
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHETOMCAT-30067
- id: snykio:maven:org.apache.tomcat:tomcat-coyote:30920
  title: Information Exposure
  description: |
    [org.apache.tomcat:tomcat-coyote][1] is a Tomcat Connectors and HTTP
    parser.

    Affected versions of this package are vulnerable to Information
    Exposure. Does not properly handle an invalid Transfer-Encoding header,
    which allows remote attackers to cause a denial of service (application
    outage) or obtain sensitive information via a crafted header that
    interferes with \"recycling of a buffer.\"



    [1]: https://mvnrepository.com/artifact/org.apache.tomcat/tomcat-coyote
  affected_package: org.apache.tomcat:tomcat-coyote
  vulnerable_versions:
  - ">= 5.5.0 < 5.5.30"
  - ">= 6.0.0 < 6.0.28"
  - ">= 7.0.0 < 7.0.2"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2010-2227
  cwe:
  - CWE-119
  disclosed_date: 2010-07-13
  created_date: 2014-01-10
  last_modified_date: 2014-01-10
  credit:
  - Unknown
  references:
  - https://github.com/apache/tomcat/commit/40e5880dfc51517334acda5f12beacdec52ca283
  - https://github.com/apache/tomcat/commit/4e97b367a97a356d2f8bb9986875e20d0807d32c
  - https://github.com/apache/tomcat55/commit/4faaca9353e5e3f963c7a674b3ac6a0bd1c3757e
  - https://svn.apache.org/viewvc?view=revision&revision=958977
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHETOMCAT-30920
- id: snykio:maven:org.apache.tomcat:tomcat-coyote:30921
  title: Denial of Service (DoS)
  description: |+
    [`org.apache.tomcat:tomcat-coyote`][1] Apache Tomcat 7.0.0 through 7.0.6
    and 6.0.0 through 6.0.30 does not enforce the maxHttpHeaderSize limit
    for requests involving the NIO HTTP connector, which allows remote
    attackers to cause a denial of service (OutOfMemoryError) via a crafted
    request.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22tomcat-coyote%22
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: org.apache.tomcat:tomcat-coyote
  vulnerable_versions:
  - ">= 7.0.0 <= 7.0.6"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2011-0534
  cwe:
  - CWE-399
  disclosed_date: 2011-02-10
  created_date: 2015-06-10
  last_modified_date: 2015-06-10
  credit:
  - Unknown
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2011-0534
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHETOMCAT-30921
- id: snykio:maven:org.apache.tomcat:tomcat-coyote:30922
  title: Improper Input Validation
  description: |
    [`org.apache.tomcat:tomcat-coyote`][1] The HTTP BIO connector in Apache
    Tomcat 7.0.x before 7.0.12 does not properly handle HTTP pipelining,
    which allows remote attackers to read responses intended for other
    clients in opportunistic circumstances by examining the application data
    in HTTP packets, related to \"a mix-up of responses for requests from
    different users.\"



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22tomcat-coyote%22
  affected_package: org.apache.tomcat:tomcat-coyote
  vulnerable_versions:
  - ">= 7.0.0 < 7.0.12"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2011-1475
  cwe:
  - CWE-20
  disclosed_date: 2011-04-08
  created_date: 2014-09-08
  last_modified_date: 2014-09-08
  credit:
  - Unknown
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2011-1475
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHETOMCAT-30922
- id: snykio:maven:org.apache.tomcat:tomcat-coyote:30923
  title: Improper Input Validation
  description: |
    [`org.apache.tomcat:tomcat-coyote`][1] Apache Tomcat 5.5.x before
    5.5.34, 6.x before 6.0.33, and 7.x before 7.0.19, when sendfile is
    enabled for the HTTP APR or HTTP NIO connector, does not validate
    certain request attributes, which allows local users to bypass intended
    file access restrictions or cause a denial of service (infinite loop or
    JVM crash) by leveraging an untrusted web application.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22tomcat-coyote%22
  affected_package: org.apache.tomcat:tomcat-coyote
  vulnerable_versions:
  - ">= 7.0.0 < 7.0.19"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2011-2526
  cwe:
  - CWE-20
  disclosed_date: 2011-07-14
  created_date: 2015-05-19
  last_modified_date: 2015-05-19
  credit:
  - Unknown
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2011-2526
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHETOMCAT-30923
- id: snykio:maven:org.apache.tomcat:tomcat-coyote:30924
  title: Access Restriction Bypass
  description: |
    [`org.apache.tomcat:tomcat-coyote`][1] Certain AJP protocol connector
    implementations in Apache Tomcat 7.0.0 through 7.0.20, 6.0.0 through
    6.0.33, 5.5.0 through 5.5.33, and possibly other versions allow remote
    attackers to spoof AJP requests, bypass authentication, and obtain
    sensitive information by causing the connector to interpret a request
    body as a new request.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22tomcat-coyote%22
  affected_package: org.apache.tomcat:tomcat-coyote
  vulnerable_versions:
  - ">= 7.0.0 <= 7.0.20"
  severity: high
  package_manager: maven
  cve:
  - CVE-2011-3190
  cwe:
  - CWE-264
  disclosed_date: 2011-08-31
  created_date: 2015-06-10
  last_modified_date: 2015-06-10
  credit:
  - Unknown
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2011-3190
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHETOMCAT-30924
- id: snykio:maven:org.apache.tomcat:tomcat-coyote:30925
  title: Information Exposure
  description: |
    [`org.apache.tomcat:tomcat-coyote`][1] Apache Tomcat 6.0.30 through
    6.0.33 and 7.x before 7.0.22 does not properly perform certain caching
    and recycling operations involving request objects, which allows remote
    attackers to obtain unintended read access to IP address and HTTP header
    information in opportunistic circumstances by reading TCP data.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22tomcat-coyote%22
  affected_package: org.apache.tomcat:tomcat-coyote
  vulnerable_versions:
  - ">= 7.0.0 < 7.0.22"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2011-3375
  cwe:
  - CWE-200
  disclosed_date: 2012-01-19
  created_date: 2015-06-10
  last_modified_date: 2015-06-10
  credit:
  - Unknown
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2011-3375
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHETOMCAT-30925
- id: snykio:maven:org.apache.tomcat:tomcat-coyote:30926
  title: Improper Input Validation
  description: |
    [`org.apache.tomcat:tomcat-coyote`][1]
    java/org/apache/coyote/http11/InternalNioInputBuffer.java in the HTTP
    NIO connector in Apache Tomcat 6.x before 6.0.36 and 7.x before 7.0.28
    does not properly restrict the request-header size, which allows remote
    attackers to cause a denial of service (memory consumption) via a large
    amount of header data.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22tomcat-coyote%22
  affected_package: org.apache.tomcat:tomcat-coyote
  vulnerable_versions:
  - ">= 7.0.0 < 7.0.28"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2012-2733
  cwe:
  - CWE-20
  disclosed_date: 2012-11-16
  created_date: 2014-06-17
  last_modified_date: 2014-06-17
  credit:
  - Unknown
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2012-2733
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHETOMCAT-30926
- id: snykio:maven:org.apache.tomcat:tomcat-coyote:30927
  title: Improper Input Validation
  description: |
    [`org.apache.tomcat:tomcat-coyote`][1] Apache Tomcat 6.x before 6.0.37
    and 7.x before 7.0.30 does not properly handle chunk extensions in
    chunked transfer coding, which allows remote attackers to cause a denial
    of service by streaming data.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22tomcat-coyote%22
  affected_package: org.apache.tomcat:tomcat-coyote
  vulnerable_versions:
  - ">= 7.0.0 < 7.0.30"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2012-3544
  cwe:
  - CWE-20
  disclosed_date: 2013-06-01
  created_date: 2014-06-17
  last_modified_date: 2014-06-17
  credit:
  - Unknown
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2012-3544
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHETOMCAT-30927
- id: snykio:maven:org.apache.tomcat:tomcat-coyote:30928
  title: Denial of Service (DoS)
  description: |+
    [`org.apache.tomcat:tomcat-coyote`][1]
    org/apache/tomcat/util/net/NioEndpoint.java in Apache Tomcat 6.x before
    6.0.36 and 7.x before 7.0.28, when the NIO connector is used in
    conjunction with sendfile and HTTPS, allows remote attackers to cause a
    denial of service (infinite loop) by terminating the connection during
    the reading of a response.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22tomcat-coyote%22
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: org.apache.tomcat:tomcat-coyote
  vulnerable_versions:
  - ">= 7.0.0 < 7.0.28"
  severity: low
  package_manager: maven
  cve:
  - CVE-2012-4534
  cwe:
  - CWE-399
  disclosed_date: 2012-12-19
  created_date: 2014-06-17
  last_modified_date: 2014-06-17
  credit:
  - Unknown
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2012-4534
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHETOMCAT-30928
- id: snykio:maven:org.apache.tomcat:tomcat-coyote:30929
  title: Improper Input Validation
  description: |
    [`org.apache.tomcat:tomcat-coyote`][1] Apache Tomcat before 6.0.39, 7.x
    before 7.0.47, and 8.x before 8.0.0-RC3, when an HTTP connector or AJP
    connector is used, does not properly handle certain inconsistent HTTP
    request headers, which allows remote attackers to trigger incorrect
    identification of a request\'s length and conduct request-smuggling
    attacks via (1) multiple Content-Length headers or (2) a Content-Length
    header and a \"Transfer-Encoding: chunked\" header. NOTE: this
    vulnerability exists because of an incomplete fix for CVE-2005-2090.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22tomcat-coyote%22
  affected_package: org.apache.tomcat:tomcat-coyote
  vulnerable_versions:
  - ">= 7.0.0 < 7.0.47"
  - ">= 8.0.0-RC1 < 8.0.0-RC3"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2013-4286
  cwe:
  - CWE-20
  disclosed_date: 2014-02-26
  created_date: 2015-03-03
  last_modified_date: 2015-03-03
  credit:
  - Unknown
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2013-4286
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHETOMCAT-30929
- id: snykio:maven:org.apache.tomcat:tomcat-coyote:30930
  title: Improper Input Validation
  description: |
    [`org.apache.tomcat:tomcat-coyote`][1] Apache Tomcat before 6.0.39, 7.x
    before 7.0.50, and 8.x before 8.0.0-RC10 processes chunked transfer
    coding without properly handling (1) a large total amount of chunked
    data or (2) whitespace characters in an HTTP header value within a
    trailer field, which allows remote attackers to cause a denial of
    service by streaming data. NOTE: this vulnerability exists because of an
    incomplete fix for CVE-2012-3544.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22tomcat-coyote%22
  affected_package: org.apache.tomcat:tomcat-coyote
  vulnerable_versions:
  - ">= 7.0.0 < 7.0.50"
  - ">= 8.0.0-RC1 < 8.0.0-RC10"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2013-4322
  cwe:
  - CWE-20
  disclosed_date: 2014-02-26
  created_date: 2014-06-08
  last_modified_date: 2014-06-08
  credit:
  - Unknown
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2013-4322
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHETOMCAT-30930
- id: snykio:maven:org.apache.tomcat:tomcat-coyote:30931
  title: Arbitrary Code Execution
  description: |
    [`org.apache.tomcat:tomcat-coyote`][1] Unrestricted file upload
    vulnerability in Apache Tomcat 7.x before 7.0.40, in certain situations
    involving outdated java.io.File code and a custom JMX configuration,
    allows remote attackers to execute arbitrary code by uploading and
    accessing a JSP file.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22tomcat-coyote%22
  affected_package: org.apache.tomcat:tomcat-coyote
  vulnerable_versions:
  - ">= 7.0.0 < 7.0.40"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2013-4444
  cwe:
  - CWE-94
  disclosed_date: 2014-09-15
  created_date: 2014-09-15
  last_modified_date: 2014-09-15
  credit:
  - Unknown
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2013-4444
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHETOMCAT-30931
- id: snykio:maven:org.apache.tomcat:tomcat-coyote:30932
  title: Denial of Service (DoS)
  description: |+
    [org.apache.tomcat:tomcat-coyote][1] is a Tomcat Connectors and HTTP
    parser.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS) in the parseChunkHeader function in
    java/org/apache/coyote/http11/filters/ChunkedInputFilter.java in Apache
    Tomcat before 6.0.40, 7.x before 7.0.53, and 8.x before 8.0.4 allows
    remote attackers to cause a denial of service (resource consumption) via
    a malformed chunk size in chunked transfer coding of a request during
    the streaming of data.



    [1]: https://mvnrepository.com/artifact/org.apache.tomcat/tomcat-coyote
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: org.apache.tomcat:tomcat-coyote
  vulnerable_versions:
  - ">= 7.0.0 < 7.0.53"
  - ">= 8 < 8.0.4"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2014-0075
  cwe:
  - CWE-189
  disclosed_date: 2014-05-31
  created_date: 2014-09-08
  last_modified_date: 2014-09-08
  credit:
  - Unknown
  references:
  - https://github.com/apache/tomcat/commit/b6974571c122f6a1e7ec74a90fa212976fa7b0ed
  - https://github.com/apache/tomcat/commit/f646a5acd5e32d6f5a2d9bf1d94ca66b65477675
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-0075
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHETOMCAT-30932
- id: snykio:maven:org.apache.tomcat:tomcat-coyote:30933
  title: Improper Input Validation
  description: |
    [`org.apache.tomcat:tomcat-coyote`][1]
    java/org/apache/coyote/ajp/AbstractAjpProcessor.java in Apache Tomcat
    8.x before 8.0.4 allows remote attackers to cause a denial of service
    (thread consumption) by using a \"Content-Length: 0\" AJP request to
    trigger a hang in request processing.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22tomcat-coyote%22
  affected_package: org.apache.tomcat:tomcat-coyote
  vulnerable_versions:
  - ">= 8.0 < 8.0.4"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2014-0095
  cwe:
  - CWE-20
  disclosed_date: 2014-05-31
  created_date: 2014-09-08
  last_modified_date: 2014-09-08
  credit:
  - Unknown
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-0095
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHETOMCAT-30933
- id: snykio:maven:org.apache.tomcat:tomcat-coyote:30934
  title: HTTP Request Smuggling
  description: |
    [`org.apache.tomcat:tomcat-coyote`][1] Integer overflow in
    java/org/apache/tomcat/util/buf/Ascii.java in Apache Tomcat before
    6.0.40, 7.x before 7.0.53, and 8.x before 8.0.4, when operated behind a
    reverse proxy, allows remote attackers to conduct HTTP request smuggling
    attacks via a crafted Content-Length HTTP header.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22tomcat-coyote%22
  affected_package: org.apache.tomcat:tomcat-coyote
  vulnerable_versions:
  - ">= 7.0.0 < 7.0.53"
  - ">= 8 < 8.0.4"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2014-0099
  cwe:
  - CWE-189
  disclosed_date: 2014-05-31
  created_date: 2015-03-03
  last_modified_date: 2015-03-03
  credit:
  - Unknown
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-0099
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHETOMCAT-30934
- id: snykio:maven:org.apache.tomcat:tomcat-coyote:30935
  title: HTTP Request Smuggling
  description: |
    [org.apache.tomcat:tomcat-coyote][1] is a Tomcat Connectors and HTTP
    parser.

    Affected versions of this package are vulnerable to HTTP Request
    Smuggling. It does not properly handle attempts to continue reading data
    after an error has occurred, which allows remote attackers to conduct
    HTTP request smuggling attacks or cause a denial of service (resource
    consumption) by streaming data with malformed chunked transfer coding.



    [1]: https://mvnrepository.com/artifact/org.apache.tomcat/tomcat-coyote
  affected_package: org.apache.tomcat:tomcat-coyote
  vulnerable_versions:
  - ">= 7.0.0 < 7.0.55"
  - ">= 8 < 8.0.9"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2014-0227
  cwe:
  - CWE-19
  disclosed_date: 2015-02-16
  created_date: 2015-02-16
  last_modified_date: 2015-02-16
  credit:
  - Unknown
  references:
  - https://github.com/apache/tomcat/commit/593a2447e6ebe465585cfa07e93b5635dffa1c70
  - https://github.com/apache/tomcat/commit/6b23790bf7dc4233affaacec57e06cff6b6c6fd3
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-0227
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHETOMCAT-30935
- id: snykio:maven:org.apache.tomcat:tomcat-coyote:30936
  title: Information Exposure
  description: |
    [org.apache.tomcat:tomcat-coyote][1] is a Tomcat Connectors and HTTP
    parser.

    Affected versions of this package are vulnerable to Information
    Exposure. The code that parsed the HTTP request line permitted invalid
    characters. This could be exploited, in conjunction with a proxy that
    also permitted the invalid characters but with a different
    interpretation, to inject data into the HTTP response. By manipulating
    the HTTP response the attacker could poison a web-cache, perform an XSS
    attack and/or obtain sensitive information from requests other then
    their own.



    [1]: https://mvnrepository.com/artifact/org.apache.tomcat/tomcat-coyote
  affected_package: org.apache.tomcat:tomcat-coyote
  vulnerable_versions:
  - ">= 7.0.0 < 7.0.73"
  - ">= 8 < 8.0.39"
  - ">= 8.5.0 < 8.5.8"
  - ">= 9-alpha < 9.0.0.M13"
  severity: high
  package_manager: maven
  cve:
  - CVE-2016-6816
  cwe:
  - CWE-200
  disclosed_date: 2016-11-23
  created_date: 2016-11-23
  last_modified_date: 2016-11-23
  credit:
  - Regis Leroy
  references:
  - http://www.openwall.com/lists/oss-security/2016/11/22/17
  - https://github.com/apache/tomcat/commit/516bda676ac8d0284da3e0295a7df70391315360
  - https://github.com/apache/tomcat/commit/cdc0a935c2173aff60039a0b85e57a461381107c
  - https://github.com/apache/tomcat/commit/f96f5751d418ae5a2f550be040daf9c5f7d99256
  - https://github.com/apache/tomcat80/commit/779d5d34e68e50d2f721897050b147106992f566
  - https://www.exploit-db.com/exploits/41783
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHETOMCAT-30936
- id: snykio:maven:org.apache.tomcat:tomcat-coyote:30937
  title: Denial of Service (DoS)
  description: |
    [org.apache.tomcat:tomcat-coyote][1] is a Tomcat Connectors and HTTP
    parser.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS). The HTTP/2 header parser entered an infinite loop if a header was
    received that was larger than the available buffer.



    [1]: https://mvnrepository.com/artifact/org.apache.tomcat/tomcat-coyote
  affected_package: org.apache.tomcat:tomcat-coyote
  vulnerable_versions:
  - ">= 8.5.0 < 8.5.8"
  - ">= 9.0.0M1 < 9.0.0M13"
  severity: high
  package_manager: maven
  cve:
  - CVE-2016-6817
  cwe:
  - CWE-400
  disclosed_date: 2016-11-23
  created_date: 2016-11-23
  last_modified_date: 2016-11-23
  credit:
  - Apache Tomcat Security Team
  references:
  - http://seclists.org/oss-sec/2016/q4/501
  - https://github.com/apache/tomcat/commit/079372fc7bac8e2e378942715c9ce26a4a72c07a
  - https://github.com/apache/tomcat/commit/85c63227edabbfb4f2f500fc557480a190135d21
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHETOMCAT-30937
- id: snykio:maven:org.apache.tomcat:tomcat-coyote:30938
  title: Information Exposure
  description: |
    [`org.apache.tomcat:tomcat-coyote`][1] Affected versions of the package
    are vulnerable to Information Exposure. The refactoring of the Connector
    code for 8.5.x onwards introduced a regression in the error handling of
    the send file code for the NIO HTTP connector. An error during send file
    processing resulted in the current Processor object being added to the
    Processor cache multiple times. This in turn meant that the same
    Processor could be used for concurrent requests. Sharing a Processor can
    result in information leakage between requests including, not not
    limited to, session ID and the response body.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22tomcat-coyote%22
  affected_package: org.apache.tomcat:tomcat-coyote
  vulnerable_versions:
  - ">= 7 < 7.0.74"
  - ">= 8.0.0RC1 < 8.0.40"
  - ">= 8.5.0 < 8.5.9"
  - ">= 9.0.0M1 < 9.0.0M15"
  severity: high
  package_manager: maven
  cve:
  - CVE-2016-8745
  cwe:
  - CWE-200
  disclosed_date: 2016-12-13
  created_date: 2016-12-13
  last_modified_date: 2016-12-13
  credit:
  - Unknown
  references:
  - http://seclists.org/bugtraq/2016/Dec/15
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHETOMCAT-30938
- id: snykio:maven:org.apache.tomcat:tomcat-coyote:31402
  title: Information Exposure
  description: |
    [`org.apache.tomcat:tomcat-coyote`][1] In Apache Tomcat 9.0.0.M1 to
    9.0.0.M18 and 8.5.0 to 8.5.12, the refactoring of the HTTP connectors
    introduced a regression in the send file processing. If the send file
    processing completed quickly, it was possible for the Processor to be
    added to the processor cache twice. This could result in the same
    Processor being used for multiple requests which in turn could lead to
    unexpected errors and/or response mix-up.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22tomcat-coyote%22
  affected_package: org.apache.tomcat:tomcat-coyote
  vulnerable_versions:
  - ">= 8.5.0 < 8.5.13"
  - ">= 9-alpha < 9.0.0.M19"
  severity: high
  package_manager: maven
  cve:
  - CVE-2017-5651
  cwe:
  - CWE-19
  disclosed_date: 2017-04-11
  created_date: 2017-05-21
  last_modified_date: 2017-05-21
  credit:
  - Unknown
  references:
  - https://lists.apache.org/thread.html/6694538826b87522fb723d2dcedd537e14ebe0a381d92e5525a531d8@%3Cannounce.tomcat.apache.org%3E
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2017-5651
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHETOMCAT-31402
- id: snykio:maven:org.apache.tomcat:tomcat-coyote:31433
  title: Information Exposure
  description: |
    [`org.apache.tomcat:tomcat-coyote`][1] A bug in the handling of the
    pipelined requests in Apache Tomcat 9.0.0.M1 to 9.0.0.M18, 8.5.0 to
    8.5.12, 8.0.0.RC1 to 8.0.42, 7.0.0 to 7.0.76, and 6.0.0 to 6.0.52, when
    send file was used, results in the pipelined request being lost when
    send file processing of the previous request completed. This could
    result in responses appearing to be sent for the wrong request. For
    example, a user agent that sent requests A, B and C could see the
    correct response for request A, the response for request C for request B
    and no response for request C.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22tomcat-coyote%22
  affected_package: org.apache.tomcat:tomcat-coyote
  vulnerable_versions:
  - ">= 7.0.0 < 7.0.77"
  - ">= 8 < 8.0.43"
  - ">= 8.5.0 < 8.5.13"
  - ">= 9-alpha < 9.0.0.M19"
  severity: high
  package_manager: maven
  cve:
  - CVE-2017-5647
  cwe:
  - CWE-200
  disclosed_date: 2017-04-11
  created_date: 2017-05-21
  last_modified_date: 2017-05-21
  credit:
  - Tomcat Security Team
  references:
  - https://lists.apache.org/thread.html/5796678c5a773c6f3ff57c178ac247d85ceca0dee9190ba48171451a@%3Cusers.tomcat.apache.org%3E
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2017-5647
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHETOMCAT-31433
- id: snykio:maven:org.apache.tomcat:tomcat-coyote:31434
  title: Denial of Service (DoS)
  description: |+
    [`org.apache.tomcat:tomcat-coyote`][1] In Apache Tomcat 9.0.0.M1 to
    9.0.0.M18 and 8.5.0 to 8.5.12, the handling of an HTTP/2 GOAWAY frame
    for a connection did not close streams associated with that connection
    that were currently waiting for a `WINDOW_UPDATE` before allowing the
    application to write more data. These waiting streams each consumed a
    thread. A malicious client could therefore construct a series of HTTP/2
    requests that would consume all available processing threads.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22tomcat-coyote%22
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: org.apache.tomcat:tomcat-coyote
  vulnerable_versions:
  - ">= 8.5.0 < 8.5.13"
  - ">= 9-alpha < 9.0.0.M19"
  severity: high
  package_manager: maven
  cve:
  - CVE-2017-5650
  cwe:
  - CWE-399
  disclosed_date: 2017-04-11
  created_date: 2017-05-21
  last_modified_date: 2017-05-21
  credit:
  - Chun Han Hsiao
  references:
  - https://lists.apache.org/thread.html/d24303fb095db072740d8154b0f0db3f2b8f67bc91a0562dbe89c738@%3Cannounce.tomcat.apache.org%3E
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2017-5650
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHETOMCAT-31434
- id: snykio:maven:org.apache.tomcat:tomcat-coyote:31440
  title: Denial of Service (DoS)
  description: |+
    [`org.apache.tomcat:tomcat-coyote`][1] It was discovered that a
    programming error in the processing of HTTPS requests in the Apache
    Tomcat servlet and JSP engine may result in denial of service via an
    infinite loop. The denial of service is easily achievable as a
    consequence of backporting a CVE-2016-6816 fix but not backporting the
    fix for Tomcat bug 57544. Distributions affected by this backporting
    issue include Debian (before 7.0.56-3+deb8u8 and 8.0.14-1+deb8u7 in
    jessie) and Ubuntu.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22tomcat-coyote%22
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: org.apache.tomcat:tomcat-coyote
  vulnerable_versions:
  - ">= 7.0.0 <= 7.0.59"
  severity: high
  package_manager: maven
  cve:
  - CVE-2017-6056
  cwe:
  - CWE-399
  disclosed_date: 2017-02-17
  created_date: 2017-05-21
  last_modified_date: 2017-05-21
  credit:
  - Unknown
  references:
  - https://lists.debian.org/debian-security-announce/2017/msg00038.html
  - https://lists.debian.org/debian-security-announce/2017/msg00039.html
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2017-6056
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHETOMCAT-31440
- id: snykio:maven:org.apache.tomcat:tomcat-coyote:32103
  title: Information Exposure
  description: |
    [org.apache.tomcat:tomcat-coyote][1] is a Tomcat Connectors and HTTP
    parser.

    Affected versions of this package are vulnerable to Information
    Exposure. A class in the`Http11InputBuffer.java` allows remote attackers
    to read data that was intended to be associated with a different
    request.



    [1]: https://mvnrepository.com/artifact/org.apache.tomcat/tomcat-coyote
  affected_package: org.apache.tomcat:tomcat-coyote
  vulnerable_versions:
  - ">= 8.5.7 < 8.5.11"
  - ">= 9.0.0.M1 < 9.0.0.M17"
  severity: high
  package_manager: maven
  cve:
  - CVE-2016-8747
  cwe:
  - CWE-200
  disclosed_date: 2017-03-13
  created_date: 2018-02-22
  last_modified_date: 2018-02-22
  credit:
  - Unknown
  references:
  - http://tomcat.apache.org/security-8.html
  - https://github.com/apache/tomcat/commit/452c8094a665ef6375530e81c033da4eeb2e4865
  - https://github.com/apache/tomcat/commit/9601a937ff3b7ef5d04b2a0e950d0e44e1bb4cbd
  - https://nvd.nist.gov/vuln/detail/CVE-2016-8747
  - https://www.securityfocus.com/bid/96895
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHETOMCAT-32103
- id: snykio:maven:org.apache.tomcat:tomcat-coyote:451044
  title: Denial of Service (DoS)
  description: "[org.apache.tomcat:tomcat-coyote][1] is a Tomcat Connectors and HTTP\nparser.\n\nAffected
    versions of this package are vulnerable to Denial of Service\n(DoS) due to not
    sending `WINDOW_UPDATE` messages for the connection\nwindow, clients were able
    to cause server-side threads to block\neventually leading to thread exhaustion
    and a DoS.\n\n**Note:** This vulnerability is due to an incomplete fix for\n[CVE-2019-0199][2].\n\n\n\n[1]:
    https://mvnrepository.com/artifact/org.apache.tomcat/tomcat-coyote\n[2]: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHETOMCAT-174102\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLetâ€™s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n{: .language-js}\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n{: .language-bash}\n\nThe entire
    process of testing it against a 30 characters long string\ntakes around ~52ms.
    But when given an invalid string, it takes nearly\ntwo seconds to complete the
    test, over ten times as long as it took to\ntest a valid string. The dramatic
    difference is due to the way regular\nexpressions get evaluated.\n\nMost Regex
    engines will work very similarly (with minor differences).\nThe engine will match
    the first possible way to accept the current\ncharacter and proceed to the next
    one. If it then fails to match the\nnext one, it will backtrack and see if there
    was another way to digest\nthe previous character. If it goes too far down the
    rabbit hole only to\nfind out the string doesnâ€™t match in the end, and if many
    characters\nhave multiple valid regex paths, the number of backtracking steps
    can\nbecome very large, resulting in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s
    look at how our expression runs into this problem, using a\nshorter string: \\\"ACCCX\\\".
    While it seems fairly straightforward, there\nare still four different ways that
    the engine could match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.
    \ C+C+C.\n\nThe engine has to try each of those combinations to see if any of
    them\npotentially match against the expression. When you combine that with the\nother
    steps the engine must take, we can use [RegEx 101 debugger][1] to\nsee the engine
    has to take a total of 38 steps before it can determine\nthe string doesn\\'t
    match.\n\nFrom there, the number of steps the engine must use to validate a string\njust
    continues to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n|
    ACCCX | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX
    | 14 | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to
    take over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n"
  affected_package: org.apache.tomcat:tomcat-coyote
  vulnerable_versions:
  - ">= 8.5.0 < 8.5.40"
  - ">= 9.0.0.M1 < 9.0.20"
  severity: high
  package_manager: maven
  cve:
  - CVE-2019-10072
  cwe:
  - CWE-400
  disclosed_date: 2019-06-21
  created_date: 2019-06-27
  last_modified_date: 2019-06-27
  credit:
  - Unknown
  references:
  - http://tomcat.apache.org/security-9.html
  - https://github.com/apache/tomcat/commit/7f748eb
  - https://github.com/apache/tomcat/commit/ada725a
  - https://lists.apache.org/thread.html/df1a2c1b87c8a6c500ecdbbaf134c7f1491c8d79d98b48c6b9f0fa6a@%3Cannounce.tomcat.apache.org%3E
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHETOMCAT-451044
- id: snykio:maven:org.apache.tomcat:tomcat-coyote:551990
  title: Arbitrary File Upload
  description: |
    [org.apache.tomcat:tomcat-coyote][1] is a Tomcat Connectors and HTTP
    parser.

    Affected versions of this package are vulnerable to Arbitrary File
    Upload. This is enabled by default with a default configuration port of
    `8009`. A remote, unauthenticated attacker could exploit this
    vulnerability to read web application files from a vulnerable server. In
    instances where the vulnerable server allows file uploads, an attacker
    could upload malicious JavaServer Pages (JSP) code within a variety of
    file types and trigger this vulnerability to gain remote code execution
    (RCE).



    [1]: https://mvnrepository.com/artifact/org.apache.tomcat/tomcat-coyote
  affected_package: org.apache.tomcat:tomcat-coyote
  vulnerable_versions:
  - "< 7.0.100"
  - ">= 8.0.0 < 8.5.51"
  - ">= 9.0.0 < 9.0.31"
  severity: high
  package_manager: maven
  cve:
  - CVE-2020-1938
  cwe:
  - CWE-285
  disclosed_date: 2020-02-20
  created_date: 2020-02-24
  last_modified_date: 2020-02-24
  credit:
  - Chaitin Tech
  references:
  - https://bugzilla.redhat.com/show_bug.cgi?id=1806398
  - https://github.com/apache/tomcat/commit/0d633e72ebc7b3c242d0081c23bba5e4dacd9b72
  - https://github.com/apache/tomcat/commit/0f725b323a74b64cdb35fce04b54427582ad6063
  - https://github.com/apache/tomcat/commit/15cd78c528425c693f1d2b51057f32d3d63d360a
  - https://github.com/apache/tomcat/commit/b99fba5bd796d876ea536e83299603443842feba
  - https://github.com/YDHCUI/CNVD-2020-10487-Tomcat-Ajp-lfi
  - https://www.tenable.com/blog/cve-2020-1938-ghostcat-apache-tomcat-ajp-file-readinclusion-vulnerability-cnvd-2020-10487
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHETOMCAT-551990
- id: snykio:maven:org.apache.tomcat:tomcat-coyote:552156
  title: HTTP Request Smuggling
  description: |
    [org.apache.tomcat:tomcat-coyote][1] is a Tomcat Connectors and HTTP
    parser.

    Affected versions of this package are vulnerable to HTTP Request
    Smuggling. Invalid `Transfer-Encoding` headers were incorrectly
    processed, leading to possible information exposure if Tomcat was
    located behind a reverse proxy that incorrectly handled the invalid
    `Transfer-Encoding` header.



    [1]: https://mvnrepository.com/artifact/org.apache.tomcat/tomcat-coyote
  affected_package: org.apache.tomcat:tomcat-coyote
  vulnerable_versions:
  - ">= 7.0.98 < 7.0.100"
  - ">= 8.5.48 < 8.5.51"
  - ">= 9.0.28 < 9.0.31"
  severity: low
  package_manager: maven
  cve:
  - CVE-2019-17569
  - CVE-2020-1935
  cwe:
  - CWE-444
  disclosed_date: 2020-02-24
  created_date: 2020-02-25
  last_modified_date: 2020-02-25
  credit:
  - "@ZeddYu"
  references:
  - https://github.com/apache/tomcat/commit/060ecc5
  - https://lists.apache.org/thread.html/r88def002c5c78534674ca67472e035099fbe088813d50062094a1390%40%3Cannounce.tomcat.apache.org%3E
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHETOMCAT-552156
- id: snykio:maven:org.apache.tomcat:tomcat-coyote:574692
  title: Denial of Service (DoS)
  description: |+
    [org.apache.tomcat:tomcat-coyote][1] is a Tomcat Connectors and HTTP
    parser.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS). A specially crafted sequence of HTTP/2 requests could trigger
    high CPU usage for several seconds. If a sufficient number of such
    requests were made on concurrent HTTP/2 connections, the server could
    become unresponsive.



    [1]: https://mvnrepository.com/artifact/org.apache.tomcat/tomcat-coyote
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: org.apache.tomcat:tomcat-coyote
  vulnerable_versions:
  - ">= 10.0.0-M1 < 10.0.0-M6"
  - ">= 8.5.0 < 8.5.56"
  - ">= 9.0.0.M1 < 9.0.36"
  severity: high
  package_manager: maven
  cve:
  - CVE-2020-11996
  cwe:
  - CWE-400
  disclosed_date: 2020-06-28
  created_date: 2020-06-28
  last_modified_date: 2020-06-28
  credit:
  - Unknown
  references:
  - https://bz.apache.org/bugzilla/show_bug.cgi?id=64467
  - https://github.com/apache/tomcat/commit/9434a44d3449d620b1be70206819f8275b4a7509
  - https://lists.apache.org/thread.html/r5541ef6b6b68b49f76fc4c45695940116da2bcbe0312ef204a00a2e0%40%3Cannounce.tomcat.apache.org%3E
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHETOMCAT-574692
- id: snykio:maven:org.apache.tomcat:tomcat-coyote:584421
  title: Denial of Service (DoS)
  description: |+
    [org.apache.tomcat:tomcat-coyote][1] is a Tomcat Connectors and HTTP
    parser.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS). An `h2c` direct connection did not release the `HTTP/1.1`
    processor after the upgrade to `HTTP/2`. If a sufficient number of such
    requests are made, an `OutOfMemoryException` could occur leading to a
    denial of service.



    [1]: https://mvnrepository.com/artifact/org.apache.tomcat/tomcat-coyote
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: org.apache.tomcat:tomcat-coyote
  vulnerable_versions:
  - ">= 10.0.0-M1 < 10.0.0-M7"
  - ">= 8.5.1 < 8.5.57"
  - ">= 9.0.0.M5 < 9.0.37"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2020-13934
  cwe:
  - CWE-400
  disclosed_date: 2020-07-15
  created_date: 2020-07-15
  last_modified_date: 2020-07-15
  credit:
  - Unknown
  references:
  - https://github.com/apache/tomcat/commit/172977f04a5215128f1e278a688983dcd230f399
  - https://lists.apache.org/thread.html/r61f411cf82488d6ec213063fc15feeeb88e31b0ca9c29652ee4f962e%40%3Cannounce.tomcat.apache.org%3E
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHETOMCAT-584421
- id: snykio:maven:org.apache.tomcat:tomcat-coyote:584422
  title: Denial of Service (DoS)
  description: |+
    [org.apache.tomcat:tomcat-coyote][1] is a Tomcat Connectors and HTTP
    parser.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS). The payload length in a WebSocket frame was not correctly
    validated. Invalid payload lengths could trigger an infinite loop.
    Multiple requests with invalid payload lengths could lead to a denial of
    service.



    [1]: https://mvnrepository.com/artifact/org.apache.tomcat/tomcat-coyote
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: org.apache.tomcat:tomcat-coyote
  vulnerable_versions:
  - ">= 10.0.0-M1 < 10.0.0-M7"
  - ">= 7.0.27 < 7.0.105"
  - ">= 8.5.0 < 8.5.57"
  - ">= 9.0.0.M1 < 9.0.37"
  severity: high
  package_manager: maven
  cve:
  - CVE-2020-13935
  cwe:
  - CWE-400
  disclosed_date: 2020-06-28
  created_date: 2020-07-15
  last_modified_date: 2020-07-15
  credit:
  - Unknown
  references:
  - https://github.com/apache/tomcat/commit/40fa74c74822711ab878079d0a69f7357926723d
  - https://lists.apache.org/thread.html/rd48c72bd3255bda87564d4da3791517c074d94f8a701f93b85752651%40%3Cannounce.tomcat.apache.org%3E
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHETOMCAT-584422
- id: victims:maven:org.apache.tomcat:tomcat-coyote:2013-2185
  title: 'Tomcat/JBossWeb: Arbitrary file upload via deserialization'
  affected_package: org.apache.tomcat:tomcat-coyote
  vulnerable_versions:
  - '7'
  - "<=7.0.33"
  patched_versions:
  - '7'
  - ">=7.0.40"
  severity: high
  package_manager: maven
  cve:
  - CVE-2013-2185
  credit:
  - Victims CVE Database
  references:
  - https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2013-2185
  source_url: https://github.com/victims/victims-cve-db/blob/master/database/java/2013/2185.yaml
- id: victims:maven:org.apache.tomcat:tomcat-coyote:2014-0050
  title: 'Apache Commons FileUpload: Denial of service'
  description: 'MultipartStream.java in Apache Commons FileUpload before 1.3.1, as
    used in Apache Tomcat, JBoss Web, and other products, allows remote attackers
    to cause a denial of service (infinite loop and CPU consumption) via a crafted
    Content-Type header that bypasses a loop''s intended exit conditions.

'
  affected_package: org.apache.tomcat:tomcat-coyote
  vulnerable_versions:
  - '7'
  - '8'
  - "<=7.0.50"
  - "<=8.0.1"
  - "==7.0.51"
  patched_versions:
  - '8'
  - "==8.0.2"
  - ">=7.0.52"
  - ">=8.0.3"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2014-0050
  cvss_v2_score: 5.0
  credit:
  - Victims CVE Database
  references:
  - http://blog.spiderlabs.com/2014/02/cve-2014-0050-exploit-with-boundaries-loops-without-boundaries.html
  - http://mail-archives.apache.org/mod_mbox/www-announce/201402.mbox/%3C52F373FC.9030907@apache.org%3E
  - http://struts.apache.org/docs/s2-020.html
  - http://svn.apache.org/viewvc?view=revision&revision=1565143
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-0050
  source_url: https://github.com/victims/victims-cve-db/blob/master/database/java/2014/0050.yaml
