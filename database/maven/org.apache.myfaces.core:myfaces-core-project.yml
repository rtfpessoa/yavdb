---
- id: ossindex:maven:org.apache.myfaces.core:myfaces-core-project:341431
  title: "[CVE-2010-2057]  Cryptographic Issues"
  description: shared/util/StateUtils.java in Apache MyFaces 1.1.x before 1.1.8, 1.2.x
    before 1.2.9, and 2.0.x before 2.0.1 uses an encrypted View State without a Message
    Authentication Code (MAC), which makes it easier for remote attackers to perform
    successful modifications of the View State via a padding oracle attack.
  affected_package: org.apache.myfaces.core:myfaces-core-project
  vulnerable_versions:
  - 1.1.0
  - 1.1.1
  - 1.1.2
  - 1.1.3
  - 1.1.4
  - 1.1.5
  - 1.1.6
  - 1.1.7
  - 1.2.2
  - 1.2.3
  - 1.2.4
  - 1.2.5
  - 1.2.6
  - 1.2.7
  - 1.2.8
  - 2.0.0
  package_manager: maven
  cve:
  - CVE-2010-2057
  disclosed_date: 2010-10-20
  created_date: 2010-10-20
  last_modified_date: 2017-06-02
  credit:
  - OSSIndex
  references:
  - http://svn.apache.org/viewvc/myfaces/shared/trunk/core/src/main/java/org/apache/myfaces/shared/util/StateUtils.java?r1=943327&r2=951801
  - https://bugzilla.redhat.com/show_bug.cgi?id=623799
  - https://issues.apache.org/jira/browse/MYFACES-2749
  source_url: https://ossindex.net/resource/package/7015354953/vulnerabilities
- id: ossindex:maven:org.apache.myfaces.core:myfaces-core-project:341456
  title: '[CVE-2010-2086]  Improper Neutralization of Input During Web Page Generation
    ("Cross-site Scripting")'
  description: Apache MyFaces 1.1.7 and 1.2.8, as used in IBM WebSphere Application
    Server and other applications, does not properly handle an unencrypted view state,
    which allows remote attackers to conduct cross-site scripting (XSS) attacks or
    execute arbitrary Expression Language (EL) statements via vectors that involve
    modifying the serialized view object.
  affected_package: org.apache.myfaces.core:myfaces-core-project
  vulnerable_versions:
  - 1.1.7
  - 1.2.8
  package_manager: maven
  cve:
  - CVE-2010-2086
  disclosed_date: 2010-05-27
  created_date: 2010-05-27
  last_modified_date: 2017-04-19
  credit:
  - OSSIndex
  references:
  - http://www.blackhat.com/presentations/bh-dc-10/Byrne_David/BlackHat-DC-2010-Byrne-SGUI-slides.pdf
  - https://www.trustwave.com/spiderlabs/advisories/TWSL2010-001.txt
  source_url: https://ossindex.net/resource/package/7015354953/vulnerabilities
- id: ossindex:maven:org.apache.myfaces.core:myfaces-core-project:348092
  title: '[CVE-2011-4367]  Improper Limitation of a Pathname to a Restricted Directory
    ("Path Traversal")'
  description: Multiple directory traversal vulnerabilities in MyFaces JavaServer
    Faces (JSF) in Apache MyFaces Core 2.0.x before 2.0.12 and 2.1.x before 2.1.6
    allow remote attackers to read arbitrary files via a .. (dot dot) in the (1) ln
    parameter to faces/javax.faces.resource/web.xml or (2) the PATH_INFO to faces/javax.faces.resource/.
  affected_package: org.apache.myfaces.core:myfaces-core-project
  vulnerable_versions:
  - 2.0.0
  - 2.0.1
  - 2.0.10
  - 2.0.11
  - 2.0.2
  - 2.0.3
  - 2.0.4
  - 2.0.5
  - 2.0.6
  - 2.0.7
  - 2.0.8
  - 2.0.9
  - 2.1.0
  - 2.1.1
  - 2.1.2
  - 2.1.3
  - 2.1.4
  - 2.1.5
  package_manager: maven
  cve:
  - CVE-2011-4367
  disclosed_date: 2014-06-19
  created_date: 2014-06-19
  last_modified_date: 2017-04-19
  credit:
  - OSSIndex
  references:
  - http://mail-archives.apache.org/mod_mbox/myfaces-announce/201202.mbox/%3C4F33ED1F.4070007%40apache.org%3E
  - http://mail-archives.apache.org/mod_mbox/myfaces-announce/201202.mbox/%3C4F33ED1F.4070007@apache.org%3E
  - http://osvdb.org/show/osvdb/79002
  - http://seclists.org/fulldisclosure/2012/Feb/150
  - http://secunia.com/advisories/47973
  - http://www.securityfocus.com/bid/51939
  - http://xforce.iss.net/xforce/xfdb/73100
  - https://exchange.xforce.ibmcloud.com/vulnerabilities/73100
  source_url: https://ossindex.net/resource/package/7015354953/vulnerabilities
- id: ossindex:maven:org.apache.myfaces.core:myfaces-core-project:8400170118
  title: "[CVE-2016-5019]  Deserialization of Untrusted Data"
  description: CoreResponseStateManager in Apache MyFaces Trinidad 1.0.0 through 1.0.13,
    1.2.x before 1.2.15, 2.0.x before 2.0.2, and 2.1.x before 2.1.2 might allow attackers
    to conduct deserialization attacks via a crafted serialized view state string.
  affected_package: org.apache.myfaces.core:myfaces-core-project
  vulnerable_versions:
  - ">=1.0.0 <=1.0.13"
  - ">=1.2.0 <1.2.15"
  - ">=2.0.0 <2.0.2"
  - ">=2.1.0 <2.1.2"
  package_manager: maven
  cve:
  - CVE-2016-5019
  disclosed_date: 2016-10-03
  created_date: 2016-10-03
  last_modified_date: 2017-06-02
  credit:
  - OSSIndex
  references:
  - http://mail-archives.apache.org/mod_mbox/myfaces-users/201609.mbox/%3CCAM1yOjYM%2BEW3mLUfX0pNAVLfUFRAw-Bhvkp3UE5%3DEQzR8Yxsfw%40mail.gmail.com%3E
  - http://packetstormsecurity.com/files/138920/Apache-MyFaces-Trinidad-Information-Disclosure.html
  - http://www.oracle.com/technetwork/security-advisory/cpujul2016-2881720.html
  - http://www.oracle.com/technetwork/security-advisory/cpujul2017-3236622.html
  - http://www.oracle.com/technetwork/security-advisory/cpuoct2017-3236626.html
  - http://www.securityfocus.com/bid/93236
  - http://www.securitytracker.com/id/1037633
  - https://issues.apache.org/jira/browse/TRINIDAD-2542
  source_url: https://ossindex.net/resource/package/7015354953/vulnerabilities
- id: snykio:maven:org.apache.myfaces.core:myfaces-core-project:30672
  title: Cross-site Scripting (XSS)
  description: |+
    [org.apache.myfaces.core:myfaces-core-project][1] is a MyFaces
    implementation of the JavaServer Faces 2.3 specification, and consists
    of an API module (javax.faces.\* classes) and an implementation module
    (org.apache.myfaces.\* classes).

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). It does not properly handle an unencrypted view state, which
    allows remote attackers to conduct cross-site scripting (XSS) attacks or
    execute arbitrary Expression Language (EL) statements via vectors that
    involve modifying the serialized view object.



    [1]: https://mvnrepository.com/artifact/org.apache.myfaces.core/myfaces-core-project
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: org.apache.myfaces.core:myfaces-core-project
  vulnerable_versions:
  - ">= 1.1.7 < 1.1.8"
  - ">= 1.2.8 < 1.2.9"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2010-2086
  cwe:
  - CWE-79
  disclosed_date: 2010-05-27
  created_date: 2014-01-10
  last_modified_date: 2014-01-10
  credit:
  - Unknown
  references:
  - https://access.redhat.com/security/cve/cve-2010-2086
  - https://bugzilla.redhat.com/show_bug.cgi?id=598164
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2010-2086
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHEMYFACESCORE-30672
- id: snykio:maven:org.apache.myfaces.core:myfaces-core-project:30673
  title: Directory Traversal
  description: |
    [org.apache.myfaces.core:myfaces-core-project][1] is a MyFaces
    implementation of the JavaServer Faces 2.3 specification, and consists
    of an API module (javax.faces.\* classes) and an implementation module
    (org.apache.myfaces.\* classes).

    Affected versions of this package are vulnerable to Directory Traversal.
    It allows remote attackers to read arbitrary files via a `..` (dot dot)
    in the (1) ln parameter to `faces/javax.faces.resource/web.xml` or (2)
    the `PATH_INFO` to `faces/javax.faces.resource/`.



    [1]: https://mvnrepository.com/artifact/org.apache.myfaces.core/myfaces-core-project
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
  affected_package: org.apache.myfaces.core:myfaces-core-project
  vulnerable_versions:
  - ">= 2.0.0 < 2.0.12"
  - ">= 2.1.0 < 2.1.6"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2011-4367
  cwe:
  - CWE-22
  disclosed_date: 2014-06-19
  created_date: 2015-04-13
  last_modified_date: 2015-04-13
  credit:
  - Paul Nicolucci
  references:
  - https://exchange.xforce.ibmcloud.com/vulnerabilities/73100
  - https://seclists.org/fulldisclosure/2012/Feb/150
  - https://www.securityfocus.com/bid/51939
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHEMYFACESCORE-30673
- id: snykio:maven:org.apache.myfaces.core:myfaces-core-project:30680
  title: Deserialization of Untrusted Data
  description: |
    Affected versions of [`org.apache.myfaces.core:myfaces-core-project`][1]
    are vulnerable to Deserialization of Untrusted Data.



    [1]: https://core.myfaces.apache.org
    \nSerialization is a process of converting an object into a sequence of
    bytes which can be persisted to a disk or database or can be sent
    through streams. The reverse process of creating object from sequence of
    bytes is called deserialization. Serialization is commonly used for
    communication (sharing objects between multiple hosts) and persistence
    (store the object state in a file or a database). It is an integral part
    of popular protocols like *Remote Method Invocation (RMI)*, *Java
    Management Extension (JMX)*, *Java Messaging System (JMS)*, *Action
    Message Format (AMF)*, *Java Server Faces (JSF) ViewState*, etc.

    *Deserialization of untrusted data* ([CWE-502][1]), is when the
    application deserializes untrusted data without sufficiently verifying
    that the resulting data will be valid, letting the attacker to control
    the state or the flow of the execution.

    Java deserialization issues have been known for years. However, interest
    in the issue intensified greatly in 2015, when classes that could be
    abused to achieve remote code execution were found in a [popular library
    (Apache Commons Collection)][2]. These classes were used in zero-days
    affecting IBM WebSphere, Oracle WebLogic and many other products.

    An attacker just needs to identify a piece of software that has both a
    vulnerable class on its path, and performs deserialization on untrusted
    data. Then all they need to do is send the payload into the
    deserializer, getting the command executed.

    > Developers put too much trust in Java Object Serialization. Some even
    > de-serialize objects pre-authentication. When deserializing an Object
    > in Java you typically cast it to an expected type, and therefore
    > Java\'s strict type system will ensure you only get valid object
    > trees. Unfortunately, by the time the type checking happens, platform
    > code has already created and executed significant logic. So, before
    > the final type is checked a lot of code is executed from the
    > readObject() methods of various objects, all of which is out of the
    > developer\'s control. By combining the readObject() methods of various
    > classes which are available on the classpath of the vulnerable
    > application an attacker can execute functions (including calling
    > Runtime.exec() to execute local OS commands).

    * Apache Blog

    The vulnerability, also know as *Mad Gadget*

    > Mad Gadget is one of the most pernicious vulnerabilities we’ve seen.
    > By merely existing on the Java classpath, seven “gadget” classes in
    > Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0)
    > make object deserialization for the entire JVM process Turing complete
    > with an exec function. Since many business applications use object
    > deserialization to send messages across the network, it would be like
    > hiring a bank teller who was trained to hand over all the money in the
    > vault if asked to do so politely, and then entrusting that teller with
    > the key. The only thing that would keep a bank safe in such a
    > circumstance is that most people wouldn’t consider asking such a
    > question.

    * Google



    [1]: https://cwe.mitre.org/data/definitions/502.html
    [2]: https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078
  affected_package: org.apache.myfaces.core:myfaces-core-project
  vulnerable_versions:
  - "< 2.3.0"
  severity: high
  package_manager: maven
  cwe:
  - CWE-502
  disclosed_date: 2017-08-15
  created_date: 2017-10-30
  last_modified_date: 2017-10-30
  credit:
  - Peter Stöckli
  references:
  - https://issues.apache.org/jira/browse/MYFACES-4133
  - https://www.alphabot.com/security/blog/2017/java/Misconfigured-JSF-ViewStates-can-lead-to-severe-RCE-vulnerabilities.html
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHEMYFACESCORE-30680
