---
- id: ossindex:maven:org.apache.solr:solr-core:338217
  title: '[CVE-2009-3821]  Improper Neutralization of Input During Web Page Generation
    ("Cross-site Scripting")'
  description: Cross-site scripting (XSS) vulnerability in the Apache Solr Search
    (solr) extension 1.0.0 for TYPO3 allows remote attackers to inject arbitrary web
    script or HTML via unspecified vectors.
  affected_package: org.apache.solr:solr-core
  vulnerable_versions:
  - 1.0.0
  package_manager: maven
  cve:
  - CVE-2009-3821
  disclosed_date: 2009-10-28
  created_date: 2009-10-28
  last_modified_date: 2017-04-19
  credit:
  - OSSIndex
  references:
  - http://typo3.org/teams/security/security-bulletins/typo3-sa-2009-014/
  source_url: https://ossindex.net/resource/package/7015343870/vulnerabilities
- id: ossindex:maven:org.apache.solr:solr-core:353968
  title: "[CVE-2012-6612] The (1) UpdateRequestHandler for XSLT or (2) XPathEntityProcessor
    in Apache Solr..."
  description: The (1) UpdateRequestHandler for XSLT or (2) XPathEntityProcessor in
    Apache Solr before 4.1 allows remote attackers to have an unspecified impact via
    XML data containing an external entity declaration in conjunction with an entity
    reference, related to an XML External Entity (XXE) issue, different vectors than
    CVE-2013-6407.
  affected_package: org.apache.solr:solr-core
  vulnerable_versions:
  - "<4.1.0"
  package_manager: maven
  cve:
  - CVE-2012-6612
  disclosed_date: 2013-12-07
  created_date: 2013-12-07
  last_modified_date: 2017-04-19
  credit:
  - OSSIndex
  references:
  - http://rhn.redhat.com/errata/RHSA-2013-1844.html
  - http://rhn.redhat.com/errata/RHSA-2014-0029.html
  - http://svn.apache.org/viewvc/lucene/dev/branches/branch_4x/solr/CHANGES.txt?view=markup
  - https://issues.apache.org/jira/browse/SOLR-3895
  source_url: https://ossindex.net/resource/package/7015343870/vulnerabilities
- id: ossindex:maven:org.apache.solr:solr-core:358926
  title: "[CVE-2013-6288] Unspecified vulnerability in the Apache Solr for TYPO3 (solr)
    extension before 2..."
  description: Unspecified vulnerability in the Apache Solr for TYPO3 (solr) extension
    before 2.8.3 for TYPO3 has unknown impact and remote attack vectors, related to
    "Insecure Unserialize."
  affected_package: org.apache.solr:solr-core
  vulnerable_versions:
  - '1.0'
  - 1.3.0
  - 1.3.1
  - 2.1.0
  - 2.2.0
  - 2.2.1
  - 2.2.2
  - 2.8.0
  - 2.8.1
  - 2.8.2
  package_manager: maven
  cve:
  - CVE-2013-6288
  disclosed_date: 2013-10-28
  created_date: 2013-10-28
  last_modified_date: 2017-04-19
  credit:
  - OSSIndex
  references:
  - http://secunia.com/advisories/54978
  - http://typo3.org/extensions/repository/view/solr
  - http://typo3.org/teams/security/security-bulletins/typo3-extensions/typo3-ext-sa-2013-009/
  - http://www.securityfocus.com/bid/62674
  source_url: https://ossindex.net/resource/package/7015343870/vulnerabilities
- id: ossindex:maven:org.apache.solr:solr-core:358927
  title: '[CVE-2013-6289]  Improper Neutralization of Input During Web Page Generation
    ("Cross-site Scripting")'
  description: Cross-site scripting (XSS) vulnerability in the Apache Solr for TYPO3
    (solr) extension before 2.8.3 for TYPO3 allows remote attackers to inject arbitrary
    web script or HTML via unspecified vectors.
  affected_package: org.apache.solr:solr-core
  vulnerable_versions:
  - '1.0'
  - 1.3.0
  - 1.3.1
  - 2.1.0
  - 2.2.0
  - 2.2.1
  - 2.2.2
  - 2.8.0
  - 2.8.1
  - 2.8.2
  package_manager: maven
  cve:
  - CVE-2013-6289
  disclosed_date: 2013-10-28
  created_date: 2013-10-28
  last_modified_date: 2017-04-19
  credit:
  - OSSIndex
  references:
  - http://secunia.com/advisories/54978
  - http://typo3.org/extensions/repository/view/solr
  - http://typo3.org/teams/security/security-bulletins/typo3-extensions/typo3-ext-sa-2013-009/
  - http://www.securityfocus.com/bid/62674
  source_url: https://ossindex.net/resource/package/7015343870/vulnerabilities
- id: ossindex:maven:org.apache.solr:solr-core:359008
  title: '[CVE-2013-6397]  Improper Limitation of a Pathname to a Restricted Directory
    ("Path Traversal")'
  description: 'Directory traversal vulnerability in SolrResourceLoader in Apache
    Solr before 4.6 allows remote attackers to read arbitrary files via a .. (dot
    dot) or full pathname in the tr parameter to solr/select/, when the response writer
    (wt parameter) is set to XSLT.  NOTE: this can be leveraged using a separate XXE
    (XML eXternal Entity) vulnerability to allow access to files across restricted
    network boundaries.'
  affected_package: org.apache.solr:solr-core
  vulnerable_versions:
  - "<4.6.0"
  package_manager: maven
  cve:
  - CVE-2013-6397
  disclosed_date: 2013-12-07
  created_date: 2013-12-07
  last_modified_date: 2017-04-19
  credit:
  - OSSIndex
  references:
  - http://lucene.apache.org/solr/4_6_0/changes/Changes.html
  - http://rhn.redhat.com/errata/RHSA-2013-1844.html
  - http://rhn.redhat.com/errata/RHSA-2014-0029.html
  - http://secunia.com/advisories/55730
  - http://secunia.com/advisories/59372
  - http://www.agarri.fr/kom/archives/2013/11/27/compromising_an_unreachable_solr_server_with_cve-2013-6397/index.html
  - http://www.openwall.com/lists/oss-security/2013/11/27/1
  - http://www.securityfocus.com/bid/63935
  - https://issues.apache.org/jira/browse/SOLR-4882
  source_url: https://ossindex.net/resource/package/7015343870/vulnerabilities
- id: ossindex:maven:org.apache.solr:solr-core:359018
  title: "[CVE-2013-6407] The UpdateRequestHandler for XML in Apache Solr before 4.1
    allows remote attacke..."
  description: The UpdateRequestHandler for XML in Apache Solr before 4.1 allows remote
    attackers to have an unspecified impact via XML data containing an external entity
    declaration in conjunction with an entity reference, related to an XML External
    Entity (XXE) issue.
  affected_package: org.apache.solr:solr-core
  vulnerable_versions:
  - 3.6.0
  - 3.6.1
  - 3.6.2
  - 4.0.0
  package_manager: maven
  cve:
  - CVE-2013-6407
  disclosed_date: 2013-12-07
  created_date: 2013-12-07
  last_modified_date: 2017-04-19
  credit:
  - OSSIndex
  references:
  - http://rhn.redhat.com/errata/RHSA-2013-1844.html
  - http://rhn.redhat.com/errata/RHSA-2014-0029.html
  - http://secunia.com/advisories/55542
  - http://secunia.com/advisories/59372
  - http://svn.apache.org/viewvc/lucene/dev/branches/branch_4x/solr/CHANGES.txt?view=markup
  - http://www.openwall.com/lists/oss-security/2013/11/29/2
  - https://issues.apache.org/jira/browse/SOLR-3895
  source_url: https://ossindex.net/resource/package/7015343870/vulnerabilities
- id: ossindex:maven:org.apache.solr:solr-core:359019
  title: "[CVE-2013-6408] The DocumentAnalysisRequestHandler in Apache Solr before
    4.3.1 does not properly..."
  description: 'The DocumentAnalysisRequestHandler in Apache Solr before 4.3.1 does
    not properly use the EmptyEntityResolver, which allows remote attackers to have
    an unspecified impact via XML data containing an external entity declaration in
    conjunction with an entity reference, related to an XML External Entity (XXE)
    issue.  NOTE: this vulnerability exists because of an incomplete fix for CVE-2013-6407.'
  affected_package: org.apache.solr:solr-core
  vulnerable_versions:
  - ">=3.6.0 <=3.6.2"
  - ">=4.0.0 <4.3.1"
  package_manager: maven
  cve:
  - CVE-2013-6408
  disclosed_date: 2013-12-07
  created_date: 2013-12-07
  last_modified_date: 2017-04-19
  credit:
  - OSSIndex
  references:
  - http://rhn.redhat.com/errata/RHSA-2013-1844.html
  - http://rhn.redhat.com/errata/RHSA-2014-0029.html
  - http://secunia.com/advisories/55542
  - http://secunia.com/advisories/59372
  - http://svn.apache.org/viewvc/lucene/dev/branches/branch_4x/solr/CHANGES.txt?view=markup
  - http://www.openwall.com/lists/oss-security/2013/11/29/2
  - https://issues.apache.org/jira/browse/SOLR-4881
  source_url: https://ossindex.net/resource/package/7015343870/vulnerabilities
- id: ossindex:maven:org.apache.solr:solr-core:362485
  title: '[CVE-2014-3628]  Improper Neutralization of Input During Web Page Generation
    ("Cross-site Scripting")'
  description: Cross-site scripting (XSS) vulnerability in the Admin UI Plugin / Stats
    page in Apache Solr 4.x before 4.10.3 allows remote attackers to inject arbitrary
    web script or HTML via the fieldvaluecache object.
  affected_package: org.apache.solr:solr-core
  vulnerable_versions:
  - 4.0.0
  - 4.1.0
  - 4.10.0
  - 4.10.1
  - 4.10.2
  - 4.2.0
  - 4.2.1
  - 4.3.0
  - 4.3.1
  - 4.4.0
  - 4.5.0
  - 4.5.1
  - 4.6.0
  - 4.6.1
  - 4.7.0
  - 4.7.1
  - 4.7.2
  - 4.8.0
  - 4.8.1
  - 4.9.0
  - 4.9.1
  package_manager: maven
  cve:
  - CVE-2014-3628
  disclosed_date: 2015-01-06
  created_date: 2015-01-06
  last_modified_date: 2017-04-19
  credit:
  - OSSIndex
  references:
  - http://mail-archives.us.apache.org/mod_mbox/www-announce/201412.mbox/%3C54A1A7C7.2070804@apache.org%3E
  - http://secunia.com/advisories/62024
  source_url: https://ossindex.net/resource/package/7015343870/vulnerabilities
- id: ossindex:maven:org.apache.solr:solr-core:8398654614
  title: '[CVE-2015-8795]  Improper Neutralization of Input During Web Page Generation
    ("Cross-site Scripting")'
  description: Multiple cross-site scripting (XSS) vulnerabilities in the Admin UI
    in Apache Solr before 5.1 allow remote attackers to inject arbitrary web script
    or HTML via crafted fields that are mishandled during the rendering of the (1)
    Analysis page, related to webapp/web/js/scripts/analysis.js or (2) Schema-Browser
    page, related to webapp/web/js/scripts/schema-browser.js.
  affected_package: org.apache.solr:solr-core
  vulnerable_versions:
  - "<5.1.0"
  package_manager: maven
  cve:
  - CVE-2015-8795
  disclosed_date: 2016-02-15
  created_date: 2016-02-15
  last_modified_date: 2017-04-19
  credit:
  - OSSIndex
  references:
  - https://issues.apache.org/jira/browse/SOLR-7346
  source_url: https://ossindex.net/resource/package/7015343870/vulnerabilities
- id: ossindex:maven:org.apache.solr:solr-core:8398654615
  title: '[CVE-2015-8796]  Improper Neutralization of Input During Web Page Generation
    ("Cross-site Scripting")'
  description: Cross-site scripting (XSS) vulnerability in webapp/web/js/scripts/schema-browser.js
    in the Admin UI in Apache Solr before 5.3 allows remote attackers to inject arbitrary
    web script or HTML via a crafted schema-browse URL.
  affected_package: org.apache.solr:solr-core
  vulnerable_versions:
  - "<5.3.0"
  package_manager: maven
  cve:
  - CVE-2015-8796
  disclosed_date: 2016-02-15
  created_date: 2016-02-15
  last_modified_date: 2017-04-19
  credit:
  - OSSIndex
  references:
  - https://issues.apache.org/jira/browse/SOLR-7920
  source_url: https://ossindex.net/resource/package/7015343870/vulnerabilities
- id: ossindex:maven:org.apache.solr:solr-core:8398654616
  title: '[CVE-2015-8797]  Improper Neutralization of Input During Web Page Generation
    ("Cross-site Scripting")'
  description: Cross-site scripting (XSS) vulnerability in webapp/web/js/scripts/plugins.js
    in the stats page in the Admin UI in Apache Solr before 5.3.1 allows remote attackers
    to inject arbitrary web script or HTML via the entry parameter to a plugins/cache
    URI.
  affected_package: org.apache.solr:solr-core
  vulnerable_versions:
  - "<5.3.1"
  package_manager: maven
  cve:
  - CVE-2015-8797
  disclosed_date: 2016-02-15
  created_date: 2016-02-15
  last_modified_date: 2017-04-19
  credit:
  - OSSIndex
  references:
  - http://www-01.ibm.com/support/docview.wss?uid=swg21975544
  - https://issues.apache.org/jira/browse/SOLR-7949
  source_url: https://ossindex.net/resource/package/7015343870/vulnerabilities
- id: ossindex:maven:org.apache.solr:solr-core:8404719967
  title: "[CVE-2017-7660]  Improper Authentication"
  description: Apache Solr uses a PKI based mechanism to secure inter-node communication
    when security is enabled. It is possible to create a specially crafted node name
    that does not exist as part of the cluster and point it to a malicious node. This
    can trick the nodes in cluster to believe that the malicious node is a member
    of the cluster. So, if Solr users have enabled BasicAuth authentication mechanism
    using the BasicAuthPlugin or if the user has implemented a custom Authentication
    plugin, which does not implement either "HttpClientInterceptorPlugin" or "HttpClientBuilderPlugin",
    his/her servers are vulnerable to this attack. Users who only use SSL without
    basic authentication or those who use Kerberos are not affected.
  affected_package: org.apache.solr:solr-core
  vulnerable_versions:
  - 5.3.0
  - 5.3.1
  - 5.3.2
  - 5.4.0
  - 5.4.1
  - 5.5.0
  - 5.5.1
  - 5.5.2
  - 5.5.3
  - 5.5.4
  - 6.0.0
  - 6.0.1
  - 6.1.0
  - 6.2.0
  - 6.2.1
  - 6.3.0
  - 6.4.0
  - 6.4.1
  - 6.4.2
  - 6.5.0
  - 6.5.1
  package_manager: maven
  cve:
  - CVE-2017-7660
  disclosed_date: 2017-07-07
  created_date: 2017-07-07
  last_modified_date: 2017-07-17
  credit:
  - OSSIndex
  references:
  - http://mail-archives.us.apache.org/mod_mbox/www-announce/201707.mbox/%3CCAOOKt53EgrybaD%2BiSn-nBbvFdse-szhg%3DhMoDZuvUvyMme-Z%3Dg%40mail.gmail.com%3E
  - http://www.securityfocus.com/bid/99485
  source_url: https://ossindex.net/resource/package/7015343870/vulnerabilities
- id: snykio:maven:org.apache.solr:solr-core:173756
  title: Deserialization of Untrusted Data
  description: |
    [org.apache.solr:solr-core][1] is an open source enterprise search
    platform built on Apache Lucene

    Affected versions of this package are vulnerable to Deserialization of
    Untrusted Data. ConfigAPI allows to set a `jmx.serviceUrl` that will
    create a new `JMXConnectorServerFactory` and trigger a call with
    \'bind\' operation to a target RMI/LDAP server. A malicious RMI server
    could respond with arbitrary object that will be deserialized on the
    Solr side using java\'s `ObjectInputStream`, which is considered unsafe.
    This type of vulnerabilities can be exploited with ysoserial tool.
    Depending on the target `classpath`, an attacker can use one of known
    \"gadget chains\" to trigger Remote Code Execution on the Solr side.



    [1]: http://lucene.apache.org/solr/
  affected_package: org.apache.solr:solr-core
  vulnerable_versions:
  - ">= 5.0.0 < 7.0.0"
  severity: high
  package_manager: maven
  cve:
  - CVE-2019-0192
  cwe:
  - CWE-502
  disclosed_date: 2019-03-07
  created_date: 2019-03-07
  last_modified_date: 2019-03-07
  credit:
  - Michael Stepankin
  references:
  - http://mail-archives.us.apache.org/mod_mbox/www-announce/201903.mbox/%3CCAECwjAV1buZwg%2BMcV9EAQ19MeAWztPVJYD4zGK8kQdADFYij1w%40mail.gmail.com%3E
  - https://issues.apache.org/jira/browse/SOLR-13301
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHESOLR-173756
- id: snykio:maven:org.apache.solr:solr-core:173769
  title: Server-side Request Forgery (SSRF)
  description: |
    [org.apache.solr:solr-core][1] is an open source enterprise search
    platform built on Apache Lucene

    Affected versions of this package are vulnerable to Server-side Request
    Forgery (SSRF). The `shards` parameter does not have a corresponding
    whitelist mechanism, a remote attacker with access to the server could
    make Solr perform an `HTTP GET` request to any reachable URL.



    [1]: http://lucene.apache.org/solr/
  affected_package: org.apache.solr:solr-core
  vulnerable_versions:
  - ">= 1.3.0 < 7.6.0"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2017-3164
  cwe:
  - CWE-918
  disclosed_date: 2019-03-08
  created_date: 2019-03-10
  last_modified_date: 2019-03-10
  credit:
  - dk from Chaitin Tech
  references:
  - http://mail-archives.apache.org/mod_mbox/www-announce/201902.mbox/%3CCAECwjAVjBN%3DwO5rYs6ktAX-5%3D-f5JDFwbbTSM2TTjEbGO5jKKA%40mail.gmail.com%3E
  - https://issues.apache.org/jira/browse/SOLR-12770
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHESOLR-173769
- id: snykio:maven:org.apache.solr:solr-core:30033
  title: Directory Traversal
  description: |
    [`org.apache.solr:solr-core`][1] is an open source enterprise search
    platform built on Apache Lucene.

    Directory traversal vulnerability in SolrResourceLoader in Apache Solr
    before 4.6 allows remote attackers to read arbitrary files via a .. (dot
    dot) or full pathname in the tr parameter to solr/select/, when the
    response writer (wt parameter) is set to XSLT. NOTE: this can be
    leveraged using a separate XXE (XML eXternal Entity) vulnerability to
    allow access to files across restricted network boundaries.



    [1]: https://lucene.apache.org/solr/
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
  affected_package: org.apache.solr:solr-core
  vulnerable_versions:
  - "< 4.6.0"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2013-6397
  cwe:
  - CWE-22
  disclosed_date: 2013-12-07
  created_date: 2016-12-25
  last_modified_date: 2016-12-25
  credit:
  - Nicolas Grégoire
  references:
  - http://www.agarri.fr/kom/archives/2013/11/27/compromising_an_unreachable_solr_server_with_cve-2013-6397/index.html
  - https://bugzilla.redhat.com/CVE-2013-6397
  - https://nvd.nist.gov/vuln/detail/CVE-2013-6397
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHESOLR-30033
- id: snykio:maven:org.apache.solr:solr-core:30034
  title: XML External Entity (XXE) Injection
  description: |+
    [`org.apache.solr:solr-core`][1] is an open source enterprise search
    platform built on Apache Lucene.

    The UpdateRequestHandler for XML in Apache Solr before 4.1 allows remote
    attackers to have an unspecified impact via XML data containing an
    external entity declaration in conjunction with an entity reference,
    related to an XML External Entity (XXE) issue.



    [1]: https://lucene.apache.org/solr/
    \nXXE Injection is a type of attack against an application that parses XML
    input. XML is a markup language that defines a set of rules for encoding
    documents in a format that is both human-readable and machine-readable.
    By default, many XML processors allow specification of an external
    entity, a URI that is dereferenced and evaluated during XML processing.
    When an XML document is being parsed, the parser can make a request and
    include the content at the specified URI inside of the XML document.

    Attacks can include disclosing local files, which may contain sensitive
    data such as passwords or private user data, using file: schemes or
    relative paths in the system identifier.

    For example, below is a sample XML document, containing an XML element-
    username.

        <?xml version="1.0" encoding="ISO-8859-1"?>
           <username>John</username>
        </xml>
    {: .language-xml}

    An external XML entity - `xxe`, is defined using a system identifier and
    present within a DOCTYPE header. These entities can access local or
    remote content. For example the below code contains an external XML
    entity that would fetch the content of `/etc/passwd` and display it to
    the user rendered by `username`.

        <?xml version="1.0" encoding="ISO-8859-1"?>
        <!DOCTYPE foo [
           <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
           <username>&xxe;</username>
        </xml>
    {: .language-xml}

    Other XXE Injection attacks can access local resources that may not stop
    returning data, possibly impacting application availability and leading
    to Denial of Service.

  affected_package: org.apache.solr:solr-core
  vulnerable_versions:
  - ">= 3.6.1 < 4.1.0"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2013-6407
  cwe:
  - CWE-611
  disclosed_date: 2013-12-07
  created_date: 2016-12-25
  last_modified_date: 2016-12-25
  credit:
  - Unknown
  references:
  - https://bugzilla.redhat.com/CVE-2013-6407
  - https://issues.apache.org/jira/browse/SOLR-5520
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHESOLR-30034
- id: snykio:maven:org.apache.solr:solr-core:30035
  title: XML External Entity (XXE) Injection
  description: |+
    [`org.apache.solr:solr-core`][1] is an open source enterprise search
    platform built on Apache Lucene.

    The DocumentAnalysisRequestHandler in Apache Solr before 4.3.1 does not
    properly use the EmptyEntityResolver, which allows remote attackers to
    have an unspecified impact via XML data containing an external entity
    declaration in conjunction with an entity reference, related to an XML
    External Entity (XXE) issue. NOTE: this vulnerability exists because of
    an incomplete fix for CVE-2013-6407.



    [1]: https://lucene.apache.org/solr/
    \nXXE Injection is a type of attack against an application that parses XML
    input. XML is a markup language that defines a set of rules for encoding
    documents in a format that is both human-readable and machine-readable.
    By default, many XML processors allow specification of an external
    entity, a URI that is dereferenced and evaluated during XML processing.
    When an XML document is being parsed, the parser can make a request and
    include the content at the specified URI inside of the XML document.

    Attacks can include disclosing local files, which may contain sensitive
    data such as passwords or private user data, using file: schemes or
    relative paths in the system identifier.

    For example, below is a sample XML document, containing an XML element-
    username.

        <?xml version="1.0" encoding="ISO-8859-1"?>
           <username>John</username>
        </xml>
    {: .language-xml}

    An external XML entity - `xxe`, is defined using a system identifier and
    present within a DOCTYPE header. These entities can access local or
    remote content. For example the below code contains an external XML
    entity that would fetch the content of `/etc/passwd` and display it to
    the user rendered by `username`.

        <?xml version="1.0" encoding="ISO-8859-1"?>
        <!DOCTYPE foo [
           <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
           <username>&xxe;</username>
        </xml>
    {: .language-xml}

    Other XXE Injection attacks can access local resources that may not stop
    returning data, possibly impacting application availability and leading
    to Denial of Service.

  affected_package: org.apache.solr:solr-core
  vulnerable_versions:
  - "< 4.3.1"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2013-6408
  cwe:
  - CWE-611
  disclosed_date: 2013-12-07
  created_date: 2016-12-25
  last_modified_date: 2016-12-25
  credit:
  - Unknown
  references:
  - https://bugzilla.redhat.com/CVE-2013-6408
  - https://issues.apache.org/jira/browse/SOLR-5520
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHESOLR-30035
- id: snykio:maven:org.apache.solr:solr-core:30738
  title: XML External Entity (XXE) Injection
  description: |+
    [`org.apache.solr:solr-core`][1] is an open source enterprise search
    platform built on Apache Lucene.

    The (1) UpdateRequestHandler for XSLT or (2) XPathEntityProcessor in
    Apache Solr before 4.1 allows remote attackers to have an unspecified
    impact via XML data containing an external entity declaration in
    conjunction with an entity reference, related to an XML External Entity
    (XXE) issue, different vectors than CVE-2013-6407.



    [1]: https://lucene.apache.org/solr/
    \nXXE Injection is a type of attack against an application that parses XML
    input. XML is a markup language that defines a set of rules for encoding
    documents in a format that is both human-readable and machine-readable.
    By default, many XML processors allow specification of an external
    entity, a URI that is dereferenced and evaluated during XML processing.
    When an XML document is being parsed, the parser can make a request and
    include the content at the specified URI inside of the XML document.

    Attacks can include disclosing local files, which may contain sensitive
    data such as passwords or private user data, using file: schemes or
    relative paths in the system identifier.

    For example, below is a sample XML document, containing an XML element-
    username.

        <?xml version="1.0" encoding="ISO-8859-1"?>
           <username>John</username>
        </xml>
    {: .language-xml}

    An external XML entity - `xxe`, is defined using a system identifier and
    present within a DOCTYPE header. These entities can access local or
    remote content. For example the below code contains an external XML
    entity that would fetch the content of `/etc/passwd` and display it to
    the user rendered by `username`.

        <?xml version="1.0" encoding="ISO-8859-1"?>
        <!DOCTYPE foo [
           <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
           <username>&xxe;</username>
        </xml>
    {: .language-xml}

    Other XXE Injection attacks can access local resources that may not stop
    returning data, possibly impacting application availability and leading
    to Denial of Service.

  affected_package: org.apache.solr:solr-core
  vulnerable_versions:
  - "< 4.1.0"
  severity: high
  package_manager: maven
  cve:
  - CVE-2012-6612
  cwe:
  - CWE-611
  disclosed_date: 2013-12-07
  created_date: 2014-06-17
  last_modified_date: 2014-06-17
  credit:
  - Unknown
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2012-6612
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHESOLR-30738
- id: snykio:maven:org.apache.solr:solr-core:31393
  title: Directory Traversal
  description: |
    [`org.apache.solr:solr-core`][1] is an open source enterprise search
    platform built on Apache Lucene.

    Affected versions of this package are vulnerable to Directory Traversal
    attacks. The Index Replication feature supports an HTTP API, but does
    not validate the `file_name` parameter, which is supplied by the user.
    An attacker can craft a special request and read any file on the server.



    [1]: https://lucene.apache.org/solr/
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
  affected_package: org.apache.solr:solr-core
  vulnerable_versions:
  - ">= 1.4.0 < 5.5.4"
  - ">= 6.0.0 < 6.4.1"
  severity: high
  package_manager: maven
  cve:
  - CVE-2017-3163
  cwe:
  - CWE-22
  disclosed_date: 2017-02-16
  created_date: 2017-05-21
  last_modified_date: 2017-05-21
  credit:
  - Hrishikesh Gadre
  references:
  - http://lucene.472066.n3.nabble.com/SECURITY-CVE-2017-3163-Apache-Solr-ReplicationHandler-path-traversal-attack-td4320619.html
  - https://issues.apache.org/jira/browse/SOLR-10031
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2017-3163
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHESOLR-31393
- id: snykio:maven:org.apache.solr:solr-core:31461
  title: Information Exposure
  description: |
    [`org.apache.solr:solr-core`][1] is an open source enterprise search
    platform built on Apache Lucene.

    Affected versions of the package are vulnerable to Information Exposure.

    Apache Solr uses a PKI based mechanism to secure inter-node
    communication when security is enabled. It is possible to create a
    specially crafted node name that does not exist as part of the cluster
    and point it to a malicious node. This can trick the nodes in cluster to
    believe that the malicious node is a member of the cluster. So, if Solr
    users have enabled BasicAuth authentication mechanism using the
    BasicAuthPlugin or if the user has implemented a custom Authentication
    plugin, which does not implement either \"HttpClientInterceptorPlugin\"
    or \"HttpClientBuilderPlugin\", his/her servers are vulnerable to this
    attack. Users who only use SSL without basic authentication or those who
    use Kerberos are not affected.



    [1]: https://lucene.apache.org/solr/
  affected_package: org.apache.solr:solr-core
  vulnerable_versions:
  - ">= 5.3.0 < 5.5.5"
  - ">= 6.0.0 < 6.6.0"
  severity: high
  package_manager: maven
  cve:
  - CVE-2017-7660
  cwe:
  - CWE-287
  disclosed_date: 2017-07-06
  created_date: 2017-08-31
  last_modified_date: 2017-08-31
  credit:
  - Noble Paul
  references:
  - http://www.openwall.com/lists/oss-security/2017/07/07/4
  - https://github.com/apache/lucene-solr/commit/e3b0cfff396a7f92a4f621d598780116da916f3f
  - https://issues.apache.org/jira/browse/SOLR-10624
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHESOLR-31461
- id: snykio:maven:org.apache.solr:solr-core:31561
  title: Privilege Escalation
  description: |
    [`org.apache.solr:solr-core`][1] is an open source enterprise search
    platform built on Apache Lucene.

    Affected versions of the package are vulnerable to Privilege Escalation.
    Solr\'s Kerberos plugin can be configured to use delegation tokens,
    which allows an application to reuse the authentication of an end-user
    or another application. There are two issues with this functionality
    (when using SecurityAwareZkACLProvider type of ACL provider e.g.
    SaslZkACLProvider). Firstly, access to the security configuration can be
    leaked to users other than the solr super user. Secondly, malicious
    users can exploit this leaked configuration for privilege escalation to
    further expose/modify private data and/or disrupt operations in the Solr
    cluster. The vulnerability is fixed from Solr 6.6.1 onwards.



    [1]: https://solr.apache.org
  affected_package: org.apache.solr:solr-core
  vulnerable_versions:
  - ">= 6.2.0 < 6.6.1"
  severity: high
  package_manager: maven
  cve:
  - CVE-2017-9803
  cwe:
  - CWE-287
  disclosed_date: 2017-08-02
  created_date: 2017-11-05
  last_modified_date: 2017-11-05
  credit:
  - Hrishikesh Gadre
  references:
  - http://www.securityfocus.com/bid/100870/info
  - https://issues.apache.org/jira/browse/SOLR-11184
  - https://nvd.nist.gov/vuln/detail/CVE-2017-9803
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHESOLR-31561
- id: snykio:maven:org.apache.solr:solr-core:32013
  title: XML External Entity (XXE) Injection
  description: |+
    [`org.apache.solr:solr-core`][1] is an open source enterprise search
    platform built on Apache Lucene.

    Affected versions of this package are vulnerable to XML External Entity
    (XXE) Injection. Remote code execution occurs in Apache Solr before 7.1
    with Apache Lucene before 7.1 by exploiting XXE in conjunction with use
    of a Config API add-listener command to reach the RunExecutableListener
    class. Elasticsearch, although it uses Lucene, is NOT vulnerable to
    this. Note that the XML external entity expansion vulnerability occurs
    in the XML Query Parser which is available, by default, for any query
    request with parameters deftype=xmlparser and can be exploited to upload
    malicious data to the /upload request handler or as Blind XXE using ftp
    wrapper in order to read arbitrary local files from the Solr server.
    Note also that the second vulnerability relates to remote code execution
    using the RunExecutableListener available on all affected versions of
    Solr.



    [1]: https://lucene.apache.org/solr/
    \nXXE Injection is a type of attack against an application that parses XML
    input. XML is a markup language that defines a set of rules for encoding
    documents in a format that is both human-readable and machine-readable.
    By default, many XML processors allow specification of an external
    entity, a URI that is dereferenced and evaluated during XML processing.
    When an XML document is being parsed, the parser can make a request and
    include the content at the specified URI inside of the XML document.

    Attacks can include disclosing local files, which may contain sensitive
    data such as passwords or private user data, using file: schemes or
    relative paths in the system identifier.

    For example, below is a sample XML document, containing an XML element-
    username.

        <?xml version="1.0" encoding="ISO-8859-1"?>
           <username>John</username>
        </xml>
    {: .language-xml}

    An external XML entity - `xxe`, is defined using a system identifier and
    present within a DOCTYPE header. These entities can access local or
    remote content. For example the below code contains an external XML
    entity that would fetch the content of `/etc/passwd` and display it to
    the user rendered by `username`.

        <?xml version="1.0" encoding="ISO-8859-1"?>
        <!DOCTYPE foo [
           <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
           <username>&xxe;</username>
        </xml>
    {: .language-xml}

    Other XXE Injection attacks can access local resources that may not stop
    returning data, possibly impacting application availability and leading
    to Denial of Service.

  affected_package: org.apache.solr:solr-core
  vulnerable_versions:
  - ">= 5.5.0 < 5.5.5"
  - ">= 6.0.0 < 6.6.2"
  - ">= 7.0.0 < 7.1.0"
  severity: high
  package_manager: maven
  cve:
  - CVE-2017-12629
  cwe:
  - CWE-611
  disclosed_date: 2017-09-21
  created_date: 2017-12-04
  last_modified_date: 2017-12-04
  credit:
  - Michael Stepankin
  - Olga Barinova
  references:
  - https://nvd.nist.gov/vuln/detail/CVE-2017-12629
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHESOLR-32013
- id: snykio:maven:org.apache.solr:solr-core:32298
  title: XML External Entity (XXE) Injection
  description: |+
    [org.apache.solr:solr-core][1] is a text search engine library written
    in Java.

    Affected versions of this package are vulnerable to XML External Entity
    (XXE) Injection via the `solrconfig.xml`,`schema.xml` and
    `managed-schema` config files.



    [1]: https://github.com/apache/lucene-solr
    \nXXE Injection is a type of attack against an application that parses XML
    input. XML is a markup language that defines a set of rules for encoding
    documents in a format that is both human-readable and machine-readable.
    By default, many XML processors allow specification of an external
    entity, a URI that is dereferenced and evaluated during XML processing.
    When an XML document is being parsed, the parser can make a request and
    include the content at the specified URI inside of the XML document.

    Attacks can include disclosing local files, which may contain sensitive
    data such as passwords or private user data, using file: schemes or
    relative paths in the system identifier.

    For example, below is a sample XML document, containing an XML element-
    username.

        <?xml version="1.0" encoding="ISO-8859-1"?>
           <username>John</username>
        </xml>
    {: .language-xml}

    An external XML entity - `xxe`, is defined using a system identifier and
    present within a DOCTYPE header. These entities can access local or
    remote content. For example the below code contains an external XML
    entity that would fetch the content of `/etc/passwd` and display it to
    the user rendered by `username`.

        <?xml version="1.0" encoding="ISO-8859-1"?>
        <!DOCTYPE foo [
           <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
           <username>&xxe;</username>
        </xml>
    {: .language-xml}

    Other XXE Injection attacks can access local resources that may not stop
    returning data, possibly impacting application availability and leading
    to Denial of Service.

  affected_package: org.apache.solr:solr-core
  vulnerable_versions:
  - ">= 6.0.0 < 6.6.4"
  - ">= 7.0.0 < 7.3.1"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2018-8010
  cwe:
  - CWE-611
  disclosed_date: 2018-05-21
  created_date: 2018-05-22
  last_modified_date: 2018-05-22
  credit:
  - Unknown
  references:
  - https://mail-archives.apache.org/mod_mbox/www-announce/201805.mbox/%3C08a801d3f0f9%24df46d300%249dd47900%24%40apache.org%3E
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHESOLR-32298
- id: snykio:maven:org.apache.solr:solr-core:32408
  title: XML External Entity (XXE) Injection
  description: |+
    [org.apache.solr:solr-core][1] is an enterprise search platform written
    using Apache Lucene.

    Affected versions of this package are vulnerable to XML External Entity
    (XXE) Injection. It can be used as XXE using the `file/ftp/http`
    protocols in order to read arbitrary local files from the server or the
    internal network. The manipulated files can be uploaded as config sets
    using solr\'s API, allowing to exploit that vulnerability.



    [1]: https://github.com/apache/lucene-solr
    \nXXE Injection is a type of attack against an application that parses XML
    input. XML is a markup language that defines a set of rules for encoding
    documents in a format that is both human-readable and machine-readable.
    By default, many XML processors allow specification of an external
    entity, a URI that is dereferenced and evaluated during XML processing.
    When an XML document is being parsed, the parser can make a request and
    include the content at the specified URI inside of the XML document.

    Attacks can include disclosing local files, which may contain sensitive
    data such as passwords or private user data, using file: schemes or
    relative paths in the system identifier.

    For example, below is a sample XML document, containing an XML element-
    username.

        <?xml version="1.0" encoding="ISO-8859-1"?>
           <username>John</username>
        </xml>
    {: .language-xml}

    An external XML entity - `xxe`, is defined using a system identifier and
    present within a DOCTYPE header. These entities can access local or
    remote content. For example the below code contains an external XML
    entity that would fetch the content of `/etc/passwd` and display it to
    the user rendered by `username`.

        <?xml version="1.0" encoding="ISO-8859-1"?>
        <!DOCTYPE foo [
           <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
           <username>&xxe;</username>
        </xml>
    {: .language-xml}

    Other XXE Injection attacks can access local resources that may not stop
    returning data, possibly impacting application availability and leading
    to Denial of Service.

  affected_package: org.apache.solr:solr-core
  vulnerable_versions:
  - "< 6.6.5"
  - ">= 7.0.0 < 7.4.0"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2018-8026
  cwe:
  - CWE-611
  disclosed_date: 2018-07-05
  created_date: 2018-07-19
  last_modified_date: 2018-07-19
  credit:
  - Unknown
  references:
  - https://github.com/apache/lucene-solr/commit/e21d4937e0637c7b7949ac463f331da9a42c07f9
  - https://issues.apache.org/jira/browse/SOLR-12450
  - https://mail-archives.apache.org/mod_mbox/lucene-solr-user/201807.mbox/%3C0cdc01d413b7%24f97ba580%24ec72f080%24%40apache.org%3E
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHESOLR-32408
- id: snykio:maven:org.apache.solr:solr-core:535106
  title: Information Exposure
  description: |
    [org.apache.solr:solr-core][1] is an open source enterprise search
    platform built on Apache Lucene

    Affected versions of this package are vulnerable to Information
    Exposure. Insecure setting for the `ENABLE_REMOTE_JMX_OPT`S
    configuration option in the default `solr.in.sh` configuration file
    shipping with Solr. If you use the default solr.in.sh file from the
    affected releases, then JMX monitoring will be enabled and exposed on
    `RMI_PORT (default=18983)`, without any authentication. If this port is
    opened for inbound traffic in your firewall, then anyone with network
    access to your Solr nodes will be able to access JMX, which may in turn
    allow them to upload malicious code for execution on the Solr server.

    **Note** this affects Linux users only,



    [1]: http://lucene.apache.org/solr/
  affected_package: org.apache.solr:solr-core
  vulnerable_versions:
  - ">= 8.1.1 < 8.3.0"
  severity: high
  package_manager: maven
  cve:
  - CVE-2019-12409
  cwe:
  - CWE-306
  disclosed_date: 2019-11-18
  created_date: 2019-12-03
  last_modified_date: 2019-12-03
  credit:
  - Unknown
  references:
  - https://bugzilla.redhat.com/show_bug.cgi?id=1774734
  - https://github.com/apache/lucene-solr/pull/804
  - https://issues.apache.org/jira/browse/SOLR-13647
  - https://lists.apache.org/thread.html/6640c7e370fce2b74e466a605a46244ccc40666ad9e3064a4e04a85d@%3Csolr-user.lucene.apache.org%3E
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHESOLR-535106
- id: snykio:maven:org.apache.solr:solr-core:536063
  title: Improper Authentication
  description: |
    [org.apache.solr:solr-core][1] is an open source enterprise search
    platform built on Apache Lucene

    Affected versions of this package are vulnerable to Improper
    Authentication. `DataImportHandler` has a feature in which the whole DIH
    configuration can come from a request\'s \"dataConfig\" parameter, and
    since a DIH config can contain scripts, this parameter is a security
    risk. Starting with version 8.2.0 of Solr, use of this parameter
    requires setting the Java System property \"enable.dih.dataConfigParam\"
    to true.



    [1]: http://lucene.apache.org/solr/
  affected_package: org.apache.solr:solr-core
  vulnerable_versions:
  - "< 8.2.0"
  severity: high
  package_manager: maven
  cve:
  - CVE-2019-0193
  cwe:
  - CWE-287
  disclosed_date: 2019-08-01
  created_date: 2019-11-26
  last_modified_date: 2019-11-26
  credit:
  - Unknown
  references:
  - https://issues.apache.org/jira/browse/SOLR-13669
  - https://nvd.nist.gov/vuln/detail/CVE-2019-0193
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHESOLR-536063
- id: snykio:maven:org.apache.solr:solr-core:536486
  title: Directory Traversal
  description: |
    [org.apache.solr:solr-core][1] is a open source enterprise search
    platform built on Apache Lucene

    Affected versions of this package are vulnerable to Directory Traversal.
    In `SolrResourceLoader` attackers are able to read arbitrary files via a
    `..` (dot dot) or full pathname in the `tr` parameter to `solr/select/`,
    when the response writer (`wt` parameter) is set to`XSLT`. NOTE: this
    can be leveraged using a separate XXE (XML External Entity)
    vulnerability to allow access to files across restricted network
    boundaries.



    [1]: http://lucene.apache.org/solr/
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
  affected_package: org.apache.solr:solr-core
  vulnerable_versions:
  - "< 4.6.0"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2013-6397
  cwe:
  - CWE-22
  disclosed_date: 2013-11-27
  created_date: 2013-11-27
  last_modified_date: 2013-11-27
  credit:
  - Unknown
  references:
  - http://www.agarri.fr/kom/archives/2013/11/27/compromising_an_unreachable_solr_server_with_cve-2013-6397/index.html
  - https://bugzilla.redhat.com/CVE-2013-6397
  - https://github.com/apache/lucene-solr/commit/da34b18cb3092df4972e2b6fa5178d1059923910
  - https://issues.apache.org/jira/browse/SOLR-4882
  - https://issues.apache.org/jira/browse/SOLR-5520
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHESOLR-536486
- id: victims:maven:org.apache.solr:solr-core:2013-6397
  title: 'Apache Solr: directory traversal when loading XSL stylesheets and Velocity
    templates'
  description: '"It was found that the SolrResourceLoader class in Apache Solr allowed  loading
    of resources via absolute paths, or relative paths which were not  sanitized for
    directory traversal. Some Solr components expose REST  interfaces which load resources
    (XSL stylesheets and Velocity templates) via  SolrResourceLoader, using paths
    identified by REST parameters. A remote  attacker could use this flaw to load
    arbitrary local files on the server via  SolrResourceLoader, potentially resulting
    in information disclosure or  remote code execution."

'
  affected_package: org.apache.solr:solr-core
  vulnerable_versions:
  - "<=4.5.1"
  patched_versions:
  - '3'
  - '4'
  - ">=3.6.3"
  - ">=4.6.0"
  - ">=5.0.0"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2013-6397
  cvss_v2_score: 6.4
  credit:
  - Victims CVE Database
  references:
  - https://bugzilla.redhat.com/CVE-2013-6397
  source_url: https://github.com/victims/victims-cve-db/blob/master/database/java/2013/6397.yaml
- id: victims:maven:org.apache.solr:solr-core:2013-6407
  title: 'Apache Solr: XML eXternal Entity (XXE) flaw in XML and XSLT UpdateRequestHandler'
  description: '"It was found that the XML and XSLT UpdateRequestHandler classes in
    Apache  Solr would resolve external entities, permitting XXE attacks. A remote  attacker
    could use this flaw to read files accessible to the user running  the application
    server, and potentially perform other more advanced XXE  attacks."

'
  affected_package: org.apache.solr:solr-core
  vulnerable_versions:
  - "<=4.5.1"
  patched_versions:
  - '3'
  - '4'
  - ">=3.6.3"
  - ">=4.6.0"
  - ">=5.0.0"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2013-6407
  cvss_v2_score: 5.0
  credit:
  - Victims CVE Database
  references:
  - https://bugzilla.redhat.com/CVE-2013-6407
  - https://issues.apache.org/jira/browse/SOLR-5520
  source_url: https://github.com/victims/victims-cve-db/blob/master/database/java/2013/6407.yaml
- id: victims:maven:org.apache.solr:solr-core:2013-6408
  title: 'Apache Solr: XML eXternal Entity (XXE) flaw in DocumentAnalysisRequestHandler'
  description: '"It was found that the DocumentAnalysisRequestHandler class in Apache
    Solr  would resolve external entities, permitting XXE attacks. A remote attacker  could
    use this flaw to read files accessible to the user running the  application server,
    and potentially perform other more advanced XXE  attacks."

'
  affected_package: org.apache.solr:solr-core
  vulnerable_versions:
  - "<=4.5.1"
  patched_versions:
  - '3'
  - '4'
  - ">=3.6.3"
  - ">=4.6.0"
  - ">=5.0.0"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2013-6408
  cvss_v2_score: 5.0
  credit:
  - Victims CVE Database
  references:
  - https://bugzilla.redhat.com/CVE-2013-6408
  - https://issues.apache.org/jira/browse/SOLR-5520
  source_url: https://github.com/victims/victims-cve-db/blob/master/database/java/2013/6408.yaml
- id: victims:maven:org.apache.solr:solr-core:2017-12629
  title: Apache Solr config API add-listener command is vulnerable to Remote Code
    Execution attacks
  description: 'Remote code execution occurs in Apache Solr before 7.1 with Apache
    Lucene before 7.1 by exploiting XXE in conjunction with use of a Config API add-listener
    command to reach the RunExecutableListener class.

'
  affected_package: org.apache.solr:solr-core
  vulnerable_versions:
  - "<=7.0.1"
  - ">=5.5.0"
  patched_versions:
  - "==5.5.5"
  - "==6.6.2"
  - ">=7.0.2"
  severity: high
  package_manager: maven
  cve:
  - CVE-2017-12629
  cvss_v2_score: 7.5
  credit:
  - Victims CVE Database
  references:
  - http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-12629
  - http://lucene.472066.n3.nabble.com/Re-Several-critical-vulnerabilities-discovered-in-Apache-Solr-XXE-amp-RCE-tt4358355.html
  - http://www.cvedetails.com/cve/CVE-2017-12629/
  - https://nvd.nist.gov/vuln/detail/CVE-2017-12629
  source_url: https://github.com/victims/victims-cve-db/blob/master/database/java/2017/12629.yaml
- id: victims:maven:org.apache.solr:solr-core:2017-3163
  title: Apache Solr ReplicationHandler path traversal attack
  description: 'When using the Index Replication feature, Apache Solr nodes can pull
    index files from a master/leader node using an HTTP API which accepts a file name.
    However, Solr before 5.5.4 and 6.x before 6.4.1 did not validate the file name,
    hence it was possible to craft a special request involving path traversal, leaving
    any file readable to the Solr server process exposed. Solr servers protected and
    restricted by firewall rules and/or authentication would not be at risk since
    only trusted clients and users would gain direct HTTP access

'
  affected_package: org.apache.solr:solr-core
  vulnerable_versions:
  - '1.4'
  - '5.5'
  - '6.0'
  - '6.4'
  - "<=5.5.3"
  - "<=6.4.0"
  - ">=1.4.0"
  - ">=6.0.0"
  patched_versions:
  - "==5.5.4"
  - "==5.5.5"
  - ">=6.4.1"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2017-3163
  cvss_v2_score: 5.0
  credit:
  - Victims CVE Database
  references:
  - http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-3163
  - http://lucene.apache.org/solr/news.html#15-february-2017-security-cve-2017-3163
  - http://www.cvedetails.com/cve/CVE-2017-3163
  - https://issues.apache.org/jira/browse/SOLR-10031
  - https://nvd.nist.gov/vuln/detail/CVE-2017-3163
  source_url: https://github.com/victims/victims-cve-db/blob/master/database/java/2017/3163.yaml
- id: victims:maven:org.apache.solr:solr-core:2017-7660
  title: Security Vulnerability in secure inter-node communication in Apache Solr
  description: 'Solr uses a PKI based mechanism to secure inter-node communication
    when security is enabled. It is possible to create a specially crafted node name
    that does not exist as part of the cluster and point it to a malicious node. This
    can trick the nodes in cluster to believe that the malicious node is a member
    of the cluster. So, if Solr users have enabled BasicAuth authentication mechanism
    using the BasicAuthPlugin or if the user has implemented a custom Authentication
    plugin, which does not implement either HttpClientInterceptorPlugin or HttpClientBuilderPlugin,
    his/her servers are vulnerable to this attack. Users who only use SSL without
    basic authentication or those who use Kerberos are not affected

'
  affected_package: org.apache.solr:solr-core
  vulnerable_versions:
  - '5.3'
  - '5.5'
  - '6.0'
  - '6.5'
  - "<=5.5.4"
  - "<=6.5.1"
  - ">=5.3.0"
  - ">=6.0.0"
  patched_versions:
  - "==5.5.5"
  - ">=6.6.0"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2017-7660
  cvss_v2_score: 5.0
  credit:
  - Victims CVE Database
  references:
  - http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-7660
  - http://mail-archives.us.apache.org/mod_mbox/www-announce/201707.mbox/%3CCAOOKt53EgrybaD%2BiSn-nBbvFdse-szhg%3DhMoDZuvUvyMme-Z%3Dg%40mail.gmail.com%3E
  - https://nvd.nist.gov/vuln/detail/CVE-2017-7660
  source_url: https://github.com/victims/victims-cve-db/blob/master/database/java/2017/7660.yaml
- id: victims:maven:org.apache.solr:solr-core:2017-9803
  title: Security vulnerability in kerberos delegation token functionality
  description: 'Solr''s Kerberos plugin can be configured to use delegation tokens,
    which allows an application to reuse the authentication of an end-user or another
    application. There are two issues with this functionality (when using SecurityAwareZkACLProvider
    type of ACL provider e.g. SaslZkACLProvider). Firstly, access to the security
    configuration can be leaked to users other than the solr super user. Secondly,
    malicious users can exploit this leaked configuration for privilege escalation
    to further expose/modify private data and/or disrupt operations in the Solr cluster

'
  affected_package: org.apache.solr:solr-core
  vulnerable_versions:
  - '6.2'
  - '6.6'
  - "<=6.6.0"
  - ">=6.2.0"
  patched_versions:
  - ">=6.6.1"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2017-9803
  cvss_v2_score: 6.0
  credit:
  - Victims CVE Database
  references:
  - http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-9803
  - http://www.cvedetails.com/cve/CVE-2017-9803/
  - https://issues.apache.org/jira/browse/SOLR-11184
  - https://nvd.nist.gov/vuln/detail/CVE-2017-9803
  source_url: https://github.com/victims/victims-cve-db/blob/master/database/java/2017/9803.yaml
