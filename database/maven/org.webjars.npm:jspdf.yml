---
- id: snykio:maven:org.webjars.npm:jspdf:479841
  title: Cross-site Scripting (XSS)
  description: |+
    [`jspdf`][1] is a PDF Document creation from JavaScript. Affected
    versions of the package are vulnerable to Cross-site Scripting (XSS).



    [1]: https://www.npmjs.com/package/jspdf
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: org.webjars.npm:jspdf
  vulnerable_versions:
  - "< 1.1.135"
  severity: medium
  package_manager: maven
  cwe:
  - CWE-79
  disclosed_date: 2014-03-26
  created_date: 2017-03-28
  last_modified_date: 2017-03-28
  credit:
  - Diego Casorran
  references:
  - https://github.com/MrRio/jsPDF/commit/626567755ca1ed35295fd75c2a70654449332468
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-479841
- id: snykio:maven:org.webjars.npm:jspdf:575252
  title: Cross-site Scripting (XSS)
  description: "Affected versions of this package are vulnerable to Cross-site Scripting\n(XSS).
    It\\'s possible to use `<<script>script>` in order to go over the\nfiltering regex.\n\n###
    PoC   {#poc}\n\n    import jsPDF from \"jspdf\";\n    \n    var doc = new jsPDF();\n
    \   \n    let html = `\n    <p id='test'>a</p>\n    <<script>script>document.write(window.location);</</script>script>\n
    \   `;\n    doc.fromHTML(\n      html,\n      0,\n      0,\n      {\n        width:
    100 // max width of content on PDF\n      },\n      function(_) {\n        doc.save();\n
    \     }\n    );\n\n\\nA cross-site scripting attack occurs when the attacker tricks
    a\nlegitimate web-based application or site to accept a request as\noriginating
    from a trusted source.\n\nThis is done by escaping the context of the web application;
    the web\napplication then delivers that data to its users along with other\ntrusted
    dynamic content, without validating it. The browser unknowingly\nexecutes malicious
    script on the client side (through client-side\nlanguages; usually JavaScript
    or HTML) in order to perform actions that\nare otherwise typically blocked by
    the browser’s Same Origin Policy.\n\nֿInjecting malicious code is the most prevalent
    manner by which XSS is\nexploited; for this reason, escaping characters in order
    to prevent this\nmanipulation is the top method for securing code against this\nvulnerability.\n\nEscaping
    means that the application is coded to mark key characters, and\nparticularly
    key characters included in user input, to prevent those\ncharacters from being
    interpreted in a dangerous context. For example,\nin HTML, `<` can be coded as
    `&lt`; and `>` can be coded as `&gt`; in\norder to be interpreted and displayed
    as themselves in text, while\nwithin the code itself, they are used for HTML tags.
    If malicious\ncontent is injected into an application that escapes special characters\nand
    that malicious content uses `<` and `>` as HTML tags, those\ncharacters are nonetheless
    not interpreted as HTML tags by the browser\nif they’ve been correctly escaped
    in the application code and in this\nway the attempted attack is diverted.\n\nThe
    most prominent use of XSS is to steal cookies (source: OWASP\nHttpOnly) and hijack
    user sessions, but XSS exploits have been used to\nexpose sensitive information,
    enable access to privileged services and\nfunctionality and deliver malware.\n\n###
    Types of attacks   {#types-of-attacks}\n\nThere are a few methods by which XSS
    can be manipulated:\n\n| Type | Origin | Description |\n|----------\n| **Stored**
    | Server | The malicious code is inserted in the application (usually as a link)
    by the attacker. The code is activated every time a user clicks the link. |\n|
    **Reflected** | Server | The attacker delivers a malicious link externally from
    the vulnerable web site application to a user. When clicked, malicious code is
    sent to the vulnerable web site, which reflects the attack back to the user’s
    browser. |\n| **DOM-based** | Client | The attacker forces the user’s browser
    to render a malicious page. The data in the page itself delivers the cross-site
    scripting data. |\n| **Mutated** |  | The attacker injects code that appears safe,
    but is then rewritten and modified by the browser, while parsing the markup. An
    example is rebalancing unclosed quotation marks or even adding quotation marks
    to unquoted parameters. |\n\n### Affected environments   {#affected-environments}\n\nThe
    following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application
    servers\n* Web application environments\n\n### How to prevent   {#how-to-prevent}\n\nThis
    section describes the top best practices designed to specifically\nprotect your
    code:\n\n* Sanitize data input in an HTTP request before reflecting it back,\n
    \ ensuring all data is validated, filtered or escaped before echoing\n  anything
    back to the user, such as the values of query parameters\n  during searches.\n*
    Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces\n  to their
    respective HTML or URL encoded equivalents.\n* Give users the option to disable
    client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins,
    including those from two separate IP\n  addresses, and invalidate those sessions.\n*
    Use and enforce a Content Security Policy (source: Wikipedia) to\n  disable any
    features that might be manipulated for an XSS attack.\n* Read the documentation
    for any of the libraries referenced in your\n  code to understand which elements
    allow for embedded HTML.\n\n"
  affected_package: org.webjars.npm:jspdf
  vulnerable_versions:
  - ">= 0"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2020-7691
  cwe:
  - CWE-79
  disclosed_date: 2020-05-06
  created_date: 2020-07-03
  last_modified_date: 2020-07-03
  credit:
  - Snyk Security Team
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-575252
- id: snykio:maven:org.webjars.npm:jspdf:575257
  title: Cross-site Scripting (XSS)
  description: |+
    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). It\'s possible to inject JavaScript code via the `html` method.

    ### PoC   {#poc}

        var doc = new jsPDF();
        window.html2canvas = html2canvas;
        let html = `
        <p id='test'>a</p>
        <img src=x onerror=eval("document.getElementById('test').innerHTML=window.location") />
        `;
        doc.html(html, {
          callback: function (doc) {
            doc.save();
          }
        });

    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: org.webjars.npm:jspdf
  vulnerable_versions:
  - ">= 0"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2020-7690
  cwe:
  - CWE-79
  disclosed_date: 2020-06-04
  created_date: 2020-07-03
  last_modified_date: 2020-07-03
  credit:
  - Snyk Security Team
  references:
  - https://github.com/MrRio/jsPDF/issues/2795
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-575257
