---
- id: snykio:maven:org.apache.solr:solr-velocity:30036
  title: Directory Traversal
  description: |
    [org.apache.solr:solr-velocity][1] is a open source enterprise search
    platform built on Apache Lucene

    Affected versions of this package are vulnerable to Directory Traversal.
    In `SolrResourceLoader` attackers are able to read arbitrary files via a
    `..` (dot dot) or full pathname in the `tr` parameter to `solr/select/`,
    when the response writer (`wt` parameter) is set to`XSLT`. NOTE: this
    can be leveraged using a separate XXE (XML External Entity)
    vulnerability to allow access to files across restricted network
    boundaries.



    [1]: http://lucene.apache.org/solr/
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
  affected_package: org.apache.solr:solr-velocity
  vulnerable_versions:
  - "< 4.6.0"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2013-6397
  cwe:
  - CWE-22
  disclosed_date: 2013-11-27
  created_date: 2013-11-27
  last_modified_date: 2013-11-27
  credit:
  - Unknown
  references:
  - http://www.agarri.fr/kom/archives/2013/11/27/compromising_an_unreachable_solr_server_with_cve-2013-6397/index.html
  - https://bugzilla.redhat.com/CVE-2013-6397
  - https://github.com/apache/lucene-solr/commit/da34b18cb3092df4972e2b6fa5178d1059923910
  - https://issues.apache.org/jira/browse/SOLR-4882
  - https://issues.apache.org/jira/browse/SOLR-5520
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHESOLR-30036
- id: snykio:maven:org.apache.solr:solr-velocity:540341
  title: Remote Code Execution (RCE)
  description: |
    [org.apache.solr:solr-velocity][1] is an open source enterprise search
    platform built on Apache Lucene

    Affected versions of this package are vulnerable to Remote Code
    Execution (RCE) via the `VelocityResponseWriter` class. A user defined
    `configset` could contain renderable Velocity templates.



    [1]: http://lucene.apache.org/solr/
  affected_package: org.apache.solr:solr-velocity
  vulnerable_versions:
  - ">= 5.0.0 < 8.4.0"
  severity: high
  package_manager: maven
  cve:
  - CVE-2019-17558
  cwe:
  - CWE-94
  disclosed_date: 2019-12-30
  created_date: 2019-12-31
  last_modified_date: 2019-12-31
  credit:
  - Unknown
  references:
  - https://gist.github.com/s00py/a1ba36a3689fa13759ff910e179fc133
  - https://github.com/jas502n/solr_rce
  - https://issues.apache.org/jira/browse/SOLR-13971
  - https://issues.apache.org/jira/secure/attachment/12986890/SOLR-13971.patch
  - https://www.exploit-db.com/exploits/48338
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHESOLR-540341
- id: victims:maven:org.apache.solr:solr-velocity:2013-6397
  title: 'Apache Solr: directory traversal when loading XSL stylesheets and Velocity
    templates'
  description: '"It was found that the SolrResourceLoader class in Apache Solr allowed  loading
    of resources via absolute paths, or relative paths which were not  sanitized for
    directory traversal. Some Solr components expose REST  interfaces which load resources
    (XSL stylesheets and Velocity templates) via  SolrResourceLoader, using paths
    identified by REST parameters. A remote  attacker could use this flaw to load
    arbitrary local files on the server via  SolrResourceLoader, potentially resulting
    in information disclosure or  remote code execution."

'
  affected_package: org.apache.solr:solr-velocity
  vulnerable_versions:
  - "<=4.5.1"
  patched_versions:
  - '3'
  - '4'
  - ">=3.6.3"
  - ">=4.6.0"
  - ">=5.0.0"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2013-6397
  cvss_v2_score: 6.4
  credit:
  - Victims CVE Database
  references:
  - https://bugzilla.redhat.com/CVE-2013-6397
  source_url: https://github.com/victims/victims-cve-db/blob/master/database/java/2013/6397.yaml
