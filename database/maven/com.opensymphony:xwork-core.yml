---
- id: ossindex:maven:com.opensymphony:xwork-core:341246
  title: "[CVE-2010-1870] The OGNL extensive expression evaluation capability in XWork
    in Struts 2.0.0 thr..."
  description: 'The OGNL extensive expression evaluation capability in XWork in Struts
    2.0.0 through 2.1.8.1, as used in Atlassian Fisheye, Crucible, and possibly other
    products, uses a permissive whitelist, which allows remote attackers to modify
    server-side context objects and bypass the "#" protection mechanism in ParameterInterceptors
    via the (1) #context, (2) #_memberAccess, (3) #root, (4) #this, (5) #_typeResolver,
    (6) #_classResolver, (7) #_traceEvaluations, (8) #_lastEvaluation, (9) #_keepLastEvaluation,
    and possibly other OGNL context variables, a different vulnerability than CVE-2008-6504.'
  affected_package: com.opensymphony:xwork-core
  vulnerable_versions:
  - ">=2.1.4 <2.1.6"
  package_manager: maven
  cve:
  - CVE-2010-1870
  disclosed_date: 2010-08-17
  created_date: 2010-08-17
  last_modified_date: 2017-06-02
  credit:
  - OSSIndex
  references:
  - http://blog.o0o.nu/2010/07/cve-2010-1870-struts2xwork-remote.html
  - http://confluence.atlassian.com/display/FISHEYE/FishEye%20Security%20Advisory%202010-06-16
  - http://confluence.atlassian.com/display/FISHEYE/FishEye+Security+Advisory+2010-06-16
  - http://seclists.org/fulldisclosure/2010/Jul/183
  - http://secunia.com/advisories/59110
  - http://securityreason.com/securityalert/8345
  - http://struts.apache.org/2.2.1/docs/s2-005.html
  - http://tools.cisco.com/security/center/content/CiscoSecurityAdvisory/cisco-sa-20140709-struts2
  - http://www.exploit-db.com/exploits/14360
  - http://www.osvdb.org/66280
  - http://www.securityfocus.com/bid/41592
  source_url: https://ossindex.net/resource/package/7015445322/vulnerabilities
- id: ossindex:maven:com.opensymphony:xwork-core:345925
  title: '[CVE-2011-1772]  Improper Neutralization of Input During Web Page Generation
    ("Cross-site Scripting")'
  description: Multiple cross-site scripting (XSS) vulnerabilities in XWork in Apache
    Struts 2.x before 2.2.3, and OpenSymphony XWork in OpenSymphony WebWork, allow
    remote attackers to inject arbitrary web script or HTML via vectors involving
    (1) an action name, (2) the action attribute of an s:submit element, or (3) the
    method attribute of an s:submit element.
  affected_package: com.opensymphony:xwork-core
  vulnerable_versions:
  - ">=2.1.4 <=2.1.6"
  package_manager: maven
  cve:
  - CVE-2011-1772
  disclosed_date: 2011-05-13
  created_date: 2011-05-13
  last_modified_date: 2017-06-02
  credit:
  - OSSIndex
  references:
  - http://jvn.jp/en/jp/JVN25435092/index.html
  - http://jvndb.jvn.jp/jvndb/JVNDB-2011-000106
  - http://secureappdev.blogspot.com/2011/05/apache-struts-2-xwork-webwork-reflected.html
  - http://secureappdev.blogspot.com/2011/05/Struts_2_XWork_WebWork_XSS_in_error_pages.html
  - http://struts.apache.org/2.2.3/docs/version-notes-223.html
  - http://struts.apache.org/2.x/docs/s2-006.html
  - http://www.securityfocus.com/bid/47784
  - http://www.ventuneac.net/security-advisories/MVSA-11-006
  - http://www.vupen.com/english/advisories/2011/1198
  - https://issues.apache.org/jira/browse/WW-3579
  source_url: https://ossindex.net/resource/package/7015445322/vulnerabilities
- id: ossindex:maven:com.opensymphony:xwork-core:349190
  title: "[CVE-2012-0391]  Improper Input Validation"
  description: The ExceptionDelegator component in Apache Struts before 2.2.3.1 interprets
    parameter values as OGNL expressions during certain exception handling for mismatched
    data types of properties, which allows remote attackers to execute arbitrary Java
    code via a crafted parameter.
  affected_package: com.opensymphony:xwork-core
  vulnerable_versions:
  - ">=2.1.4 <=2.1.6"
  package_manager: maven
  cve:
  - CVE-2012-0391
  disclosed_date: 2012-01-08
  created_date: 2012-01-08
  last_modified_date: 2017-06-02
  credit:
  - OSSIndex
  references:
  - http://archives.neohapsis.com/archives/bugtraq/2012-01/0031.html
  - http://secunia.com/advisories/47393
  - http://struts.apache.org/2.x/docs/s2-008.html
  - http://struts.apache.org/2.x/docs/version-notes-2311.html
  - http://www.exploit-db.com/exploits/18329
  - https://issues.apache.org/jira/browse/WW-3668
  - https://www.sec-consult.com/files/20120104-0_Apache_Struts2_Multiple_Critical_Vulnerabilities.txt
  source_url: https://ossindex.net/resource/package/7015445322/vulnerabilities
- id: ossindex:maven:com.opensymphony:xwork-core:349191
  title: "[CVE-2012-0392]  Permissions, Privileges, and Access Controls"
  description: The CookieInterceptor component in Apache Struts before 2.3.1.1 does
    not use the parameter-name whitelist, which allows remote attackers to execute
    arbitrary commands via a crafted HTTP Cookie header that triggers Java code execution
    through a static method.
  affected_package: com.opensymphony:xwork-core
  vulnerable_versions:
  - ">=2.1.4 <=2.1.6"
  package_manager: maven
  cve:
  - CVE-2012-0392
  disclosed_date: 2012-01-08
  created_date: 2012-01-08
  last_modified_date: 2017-06-02
  credit:
  - OSSIndex
  references:
  - http://archives.neohapsis.com/archives/bugtraq/2012-01/0031.html
  - http://secunia.com/advisories/47393
  - http://struts.apache.org/2.x/docs/s2-008.html
  - http://struts.apache.org/2.x/docs/version-notes-2311.html
  - http://www.exploit-db.com/exploits/18329
  - https://lists.immunityinc.com/pipermail/dailydave/2012-January/000011.html
  - https://www.sec-consult.com/files/20120104-0_Apache_Struts2_Multiple_Critical_Vulnerabilities.txt
  source_url: https://ossindex.net/resource/package/7015445322/vulnerabilities
- id: ossindex:maven:com.opensymphony:xwork-core:352462
  title: "[CVE-2012-4387]  Permissions, Privileges, and Access Controls"
  description: Apache Struts 2.0.0 through 2.3.4 allows remote attackers to cause
    a denial of service (CPU consumption) via a long parameter name, which is processed
    as an OGNL expression.
  affected_package: com.opensymphony:xwork-core
  vulnerable_versions:
  - ">=2.1.4 <=2.1.6"
  package_manager: maven
  cve:
  - CVE-2012-4387
  disclosed_date: 2012-09-05
  created_date: 2012-09-05
  last_modified_date: 2017-06-02
  credit:
  - OSSIndex
  references:
  - http://secunia.com/advisories/50420
  - http://struts.apache.org/2.x/docs/s2-011.html
  - http://www.openwall.com/lists/oss-security/2012/09/01/4
  - http://www.openwall.com/lists/oss-security/2012/09/01/5
  - http://www.securityfocus.com/bid/55346
  - http://xforce.iss.net/xforce/xfdb/78183
  - https://exchange.xforce.ibmcloud.com/vulnerabilities/78183
  - https://issues.apache.org/jira/browse/WW-3860
  source_url: https://ossindex.net/resource/package/7015445322/vulnerabilities
- id: ossindex:maven:com.opensymphony:xwork-core:355667
  title: '[CVE-2013-1966]  Improper Control of Generation of Code ("Code Injection")'
  description: Apache Struts 2 before 2.3.14.1 allows remote attackers to execute
    arbitrary OGNL code via a crafted request that is not properly handled when using
    the includeParams attribute in the (1) URL or (2) A tag.
  affected_package: com.opensymphony:xwork-core
  vulnerable_versions:
  - ">=2.1.4 <=2.1.6"
  package_manager: maven
  cve:
  - CVE-2013-1966
  disclosed_date: 2013-07-10
  created_date: 2013-07-10
  last_modified_date: 2017-06-02
  credit:
  - OSSIndex
  references:
  - http://struts.apache.org/development/2.x/docs/s2-013.html
  - http://www.securityfocus.com/bid/60166
  - https://bugzilla.redhat.com/show_bug.cgi?id=967656
  - https://cwiki.apache.org/confluence/display/WW/S2-013
  source_url: https://ossindex.net/resource/package/7015445322/vulnerabilities
- id: ossindex:maven:com.opensymphony:xwork-core:355810
  title: '[CVE-2013-2135]  Improper Control of Generation of Code ("Code Injection")'
  description: Apache Struts 2 before 2.3.14.3 allows remote attackers to execute
    arbitrary OGNL code via a request with a crafted value that contains both "${}"
    and "%{}" sequences, which causes the OGNL code to be evaluated twice.
  affected_package: com.opensymphony:xwork-core
  vulnerable_versions:
  - ">=2.1.4 <=2.1.6"
  package_manager: maven
  cve:
  - CVE-2013-2135
  disclosed_date: 2013-07-16
  created_date: 2013-07-16
  last_modified_date: 2017-06-02
  credit:
  - OSSIndex
  references:
  - http://struts.apache.org/development/2.x/docs/s2-015.html
  - http://www.oracle.com/technetwork/topics/security/cpujan2014-1972949.html
  - http://www.oracle.com/technetwork/topics/security/cpuoct2013-1899837.html
  - http://www.securityfocus.com/bid/64758
  - https://cwiki.apache.org/confluence/display/WW/S2-015
  source_url: https://ossindex.net/resource/package/7015445322/vulnerabilities
- id: ossindex:maven:com.opensymphony:xwork-core:8399186888
  title: "[CVE-2016-3093]  Improper Input Validation"
  description: Apache Struts 2.0.0 through 2.3.24.1 does not properly cache method
    references when used with OGNL before 3.0.12, which allows remote attackers to
    cause a denial of service (block access to a web site) via unspecified vectors.
  affected_package: com.opensymphony:xwork-core
  vulnerable_versions:
  - ">=2.1.5 <=2.1.6"
  package_manager: maven
  cve:
  - CVE-2016-3093
  disclosed_date: 2016-06-07
  created_date: 2016-06-07
  last_modified_date: 2017-06-02
  credit:
  - OSSIndex
  references:
  - http://struts.apache.org/docs/s2-034.html
  - http://www-01.ibm.com/support/docview.wss?uid=swg21987854
  - http://www.securityfocus.com/bid/90961
  - http://www.securitytracker.com/id/1036018
  source_url: https://ossindex.net/resource/package/7015445322/vulnerabilities
- id: snykio:maven:com.opensymphony:xwork-core:30322
  title: Arbitrary Command Execution
  description: |
    [`com.opensymphony:xwork-core`][1] is an command-pattern framework that
    is used to power WebWork as well as other applications. XWork provides
    an Inversion of Control container, a powerful expression language, data
    type conversion, validation, and pluggable configuration.

    The OGNL extensive expression evaluation capability in XWork in Struts
    2.0.0 through 2.1.8.1, as used in Atlassian Fisheye, Crucible, and
    possibly other products, uses a permissive whitelist, which allows
    remote attackers to modify server-side context objects and bypass the
    \"#\" protection mechanism in ParameterInterceptors via the (1)
    #context, (2) #\_memberAccess, (3) #root, (4) #this, (5)
    #\_typeResolver, (6) #\_classResolver, (7) #\_traceEvaluations, (8)
    #\_lastEvaluation, (9) #\_keepLastEvaluation, and possibly other OGNL
    context variables, a different vulnerability than CVE-2008-6504.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22xwork-core%22
  affected_package: com.opensymphony:xwork-core
  vulnerable_versions:
  - ">= 2.1.4 < 2.1.6"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2010-1870
  cwe:
  - CWE-94
  disclosed_date: 2010-06-09
  created_date: 2010-06-09
  last_modified_date: 2010-06-09
  credit:
  - Meder Kydyraliev
  references:
  - http://blog.o0o.nu/2010/07/cve-2010-1870-struts2xwork-remote.html
  - http://struts.apache.org/docs/s2-005.html
  - https://github.com/apache/struts/commit/0c367776762b25c567b415ac4c2b0e48042cf34f
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2010-1870
  - https://www.exploit-db.com/exploits/14360/
  source_url: https://snyk.io/vuln/SNYK-JAVA-COMOPENSYMPHONY-30322
- id: snykio:maven:com.opensymphony:xwork-core:30323
  title: Cross-site Scripting (XSS)
  description: |+
    [com.opensymphony:xwork-core][1] is a command-pattern framework that is
    used to power WebWork as well as other applications.

    Affected versions of this package are vulnerable to multiple Cross-site
    Scripting (XSS) vulnerabilities allowing remote attackers to inject
    arbitrary web script or HTML via vectors involving (1) an action name,
    (2) the action attribute of an `s:submit` element, or (3) the method
    attribute of an `s:submit` element.



    [1]: https://mvnrepository.com/artifact/com.opensymphony/xwork-core
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: com.opensymphony:xwork-core
  vulnerable_versions:
  - ">= 0"
  severity: low
  package_manager: maven
  cve:
  - CVE-2011-1772
  cwe:
  - CWE-79
  disclosed_date: 2011-02-01
  created_date: 2011-02-01
  last_modified_date: 2011-02-01
  credit:
  - Marian Ventuneac
  references:
  - http://secureappdev.blogspot.co.il/2011/05/apache-struts-2-xwork-webwork-reflected.html
  - https://issues.apache.org/jira/browse/WW-3579
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2011-1772
  source_url: https://snyk.io/vuln/SNYK-JAVA-COMOPENSYMPHONY-30323
- id: snykio:maven:com.opensymphony:xwork-core:30324
  title: Arbitrary Code Execution
  description: |
    [`com.opensymphony:xwork-core`][1] is an command-pattern framework that
    is used to power WebWork as well as other applications. XWork provides
    an Inversion of Control container, a powerful expression language, data
    type conversion, validation, and pluggable configuration.

    OGNL provides, among other features, extensive expression evaluation
    capabilities. The vulnerability allows a malicious user to bypass all
    the protections (regex pattern, deny method invocation) built into the
    ParametersInterceptor, thus being able to inject a malicious expression
    in any exposed string variable for further evaluation.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22xwork-core%22
  affected_package: com.opensymphony:xwork-core
  vulnerable_versions:
  - ">= 2.1.4 < 2.1.6"
  severity: high
  package_manager: maven
  cve:
  - CVE-2011-3923
  cwe:
  - CWE-94
  disclosed_date: 2012-01-22
  created_date: 2012-01-22
  last_modified_date: 2012-01-22
  credit:
  - Meder Kydyraliev
  references:
  - http://blog.o0o.nu/2012/01/cve-2011-3923-yet-another-struts2.html
  - https://cwiki.apache.org/confluence/display/WW/S2-009
  - https://github.com/apache/struts/commit/2c1eb6bb57f90db7287fc3ed0086793d0a43fe9e
  - https://struts.apache.org/docs/s2-009.html
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2011-3923
  source_url: https://snyk.io/vuln/SNYK-JAVA-COMOPENSYMPHONY-30324
- id: snykio:maven:com.opensymphony:xwork-core:30325
  title: Arbitrary Code Execution
  description: |
    [`com.opensymphony:xwork-core`][1] is an command-pattern framework that
    is used to power WebWork as well as other applications. XWork provides
    an Inversion of Control container, a powerful expression language, data
    type conversion, validation, and pluggable configuration.

    The ExceptionDelegator component in Apache Struts before 2.2.3.1
    interprets parameter values as OGNL expressions during certain exception
    handling for mismatched data types of properties, which allows remote
    attackers to execute arbitrary Java code via a crafted parameter.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22xwork-core%22
  affected_package: com.opensymphony:xwork-core
  vulnerable_versions:
  - ">= 2.1.4 < 2.1.6"
  severity: high
  package_manager: maven
  cve:
  - CVE-2012-0391
  cwe:
  - CWE-20
  - CWE-94
  disclosed_date: 2011-12-20
  created_date: 2011-12-20
  last_modified_date: 2011-12-20
  credit:
  - Bruce Phillips
  - Johannes Dahse
  references:
  - http://struts.apache.org/docs/s2-008.html
  - https://github.com/apache/struts/commit/41f90ae39d0783f64641726e7e6b4741663c04bd
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2012-0391
  - https://www.exploit-db.com/exploits/18329/
  source_url: https://snyk.io/vuln/SNYK-JAVA-COMOPENSYMPHONY-30325
- id: snykio:maven:com.opensymphony:xwork-core:30326
  title: Arbitrary Command Execution
  description: |
    [`com.opensymphony:xwork-core`][1] is an command-pattern framework that
    is used to power WebWork as well as other applications. XWork provides
    an Inversion of Control container, a powerful expression language, data
    type conversion, validation, and pluggable configuration.

    The CookieInterceptor component in Apache Struts before 2.3.1.1 does not
    use the parameter-name whitelist, which allows remote attackers to
    execute arbitrary commands via a crafted HTTP Cookie header that
    triggers Java code execution through a static method.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22xwork-core%22
  affected_package: com.opensymphony:xwork-core
  vulnerable_versions:
  - ">= 2.1.4 <= 2.1.6"
  severity: high
  package_manager: maven
  cve:
  - CVE-2012-0392
  cwe:
  - CWE-264
  disclosed_date: 2011-12-20
  created_date: 2011-12-20
  last_modified_date: 2011-12-20
  credit:
  - Bruce Phillips
  - Johannes Dahse
  references:
  - http://struts.apache.org/docs/s2-008.html
  - https://github.com/apache/struts/commit/41f90ae39d0783f64641726e7e6b4741663c04bd
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2012-0392
  source_url: https://snyk.io/vuln/SNYK-JAVA-COMOPENSYMPHONY-30326
- id: snykio:maven:com.opensymphony:xwork-core:30327
  title: Denial of Service (DoS)
  description: |+
    [com.opensymphony:xwork-core][1] is a command-pattern framework that is
    used to power WebWork as well as other applications.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS). It allows remote attackers to cause a denial of service (CPU
    consumption) via a long parameter name, which is processed as an OGNL
    expression.



    [1]: https://mvnrepository.com/artifact/com.opensymphony/xwork-core
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: com.opensymphony:xwork-core
  vulnerable_versions:
  - ">= 0"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2012-4387
  cwe:
  - CWE-264
  disclosed_date: 2011-12-20
  created_date: 2011-12-20
  last_modified_date: 2011-12-20
  credit:
  - Johno Crawford
  references:
  - http://struts.apache.org/docs/s2-011
  - http://www.openwall.com/lists/oss-security/2012/09/01/4
  - https://github.com/apache/struts/commit/87935af56a27235e9399308ee1fcfb74f8edcefa
  - https://issues.apache.org/jira/browse/WW-3860
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2012-4387
  source_url: https://snyk.io/vuln/SNYK-JAVA-COMOPENSYMPHONY-30327
- id: snykio:maven:com.opensymphony:xwork-core:30328
  title: Arbitrary Code Execution
  description: |
    [`com.opensymphony:xwork-core`][1] is an command-pattern framework that
    is used to power WebWork as well as other applications. XWork provides
    an Inversion of Control container, a powerful expression language, data
    type conversion, validation, and pluggable configuration.

    Apache Struts 2 before 2.3.14.1 allows remote attackers to execute
    arbitrary OGNL code via a crafted request that is not properly handled
    when using the includeParams attribute in the (1) URL or (2) A tag.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22xwork-core%22
  affected_package: com.opensymphony:xwork-core
  vulnerable_versions:
  - ">= 2.1.4 < 2.1.6"
  severity: high
  package_manager: maven
  cve:
  - CVE-2013-1966
  cwe:
  - CWE-94
  disclosed_date: 2013-05-27
  created_date: 2013-05-27
  last_modified_date: 2013-05-27
  credit:
  - The Struts Team
  references:
  - http://struts.apache.org/docs/s2-013.html
  - https://github.com/apache/struts/commit/7e6f641ebb142663cbd1653dc49bed725edf7f56
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2013-1966
  source_url: https://snyk.io/vuln/SNYK-JAVA-COMOPENSYMPHONY-30328
- id: snykio:maven:com.opensymphony:xwork-core:30329
  title: Arbitrary Code Execution
  description: |
    [com.opensymphony:xwork-core][1] is a command-pattern framework that is
    used to power WebWork as well as other applications.

    Affected versions of this package are vulnerable to Arbitrary Code
    Execution. It allows remote attackers to execute arbitrary OGNL code via
    a request with a crafted value that contains both \"$\{}\" and \"%\{}\"
    sequences, which causes the OGNL code to be evaluated twice.



    [1]: https://mvnrepository.com/artifact/com.opensymphony/xwork-core
  affected_package: com.opensymphony:xwork-core
  vulnerable_versions:
  - ">= 2.1.4"
  severity: high
  package_manager: maven
  cve:
  - CVE-2013-2135
  cwe:
  - CWE-94
  disclosed_date: 2013-07-16
  created_date: 2014-06-08
  last_modified_date: 2014-06-08
  credit:
  - Jon Passki
  references:
  - http://struts.apache.org/docs/s2-015.html
  - https://github.com/apache/struts/commit/54e5c912ebd9a1599bfcf7a719da17c28127bbe3
  - https://issues.apache.org/jira/browse/WW-4090
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2013-2135
  source_url: https://snyk.io/vuln/SNYK-JAVA-COMOPENSYMPHONY-30329
- id: snykio:maven:com.opensymphony:xwork-core:30330
  title: Denial of Service (DoS)
  description: |+
    [`com.opensymphony:xwork-core`][1] is an command-pattern framework that
    is used to power WebWork as well as other applications. XWork provides
    an Inversion of Control container, a powerful expression language, data
    type conversion, validation, and pluggable configuration.

    Apache Struts 2.0.0 through 2.3.24.1 does not properly cache method
    references when used with OGNL before 3.0.12, which allows remote
    attackers to cause a denial of service (block access to a web site) via
    unspecified vectors.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22xwork-core%22
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: com.opensymphony:xwork-core
  vulnerable_versions:
  - ">= 2.1.5 <= 2.1.6"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2016-3093
  cwe:
  - CWE-20
  disclosed_date: 2016-05-31
  created_date: 2016-05-31
  last_modified_date: 2016-05-31
  credit:
  - Tao Wang
  references:
  - http://struts.apache.org/docs/s2-034.html
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-3093
  source_url: https://snyk.io/vuln/SNYK-JAVA-COMOPENSYMPHONY-30330
