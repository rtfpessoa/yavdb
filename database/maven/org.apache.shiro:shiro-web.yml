---
- id: ossindex:maven:org.apache.shiro:shiro-web:343081
  title: '[CVE-2010-3863]  Improper Limitation of a Pathname to a Restricted Directory
    ("Path Traversal")'
  description: Apache Shiro before 1.1.0, and JSecurity 0.9.x, does not canonicalize
    URI paths before comparing them to entries in the shiro.ini file, which allows
    remote attackers to bypass intended access restrictions via a crafted request,
    as demonstrated by the /./account/index.jsp URI.
  affected_package: org.apache.shiro:shiro-web
  vulnerable_versions:
  - 1.0.0
  package_manager: maven
  cve:
  - CVE-2010-3863
  disclosed_date: 2010-11-05
  created_date: 2010-11-05
  last_modified_date: 2017-04-19
  credit:
  - OSSIndex
  references:
  - http://archives.neohapsis.com/archives/fulldisclosure/2010-11/0020.html
  - http://osvdb.org/69067
  - http://secunia.com/advisories/41989
  - http://www.securityfocus.com/archive/1/archive/1/514616/100/0/threaded
  - http://www.securityfocus.com/bid/44616
  - http://www.vupen.com/english/advisories/2010/2888
  - http://xforce.iss.net/xforce/xfdb/62959
  source_url: https://ossindex.net/resource/package/7015344668/vulnerabilities
- id: ossindex:maven:org.apache.shiro:shiro-web:359737
  title: "[CVE-2014-0074]  Improper Authentication"
  description: Apache Shiro 1.x before 1.2.3, when using an LDAP server with unauthenticated
    bind enabled, allows remote attackers to bypass authentication via an empty (1)
    username or (2) password.
  affected_package: org.apache.shiro:shiro-web
  vulnerable_versions:
  - 1.0.0
  - 1.1.0
  - 1.2.0
  - 1.2.1
  - 1.2.2
  package_manager: maven
  cve:
  - CVE-2014-0074
  disclosed_date: 2014-10-06
  created_date: 2014-10-06
  last_modified_date: 2017-04-19
  credit:
  - OSSIndex
  references:
  - http://rhn.redhat.com/errata/RHSA-2014-1351.html
  - http://seclists.org/fulldisclosure/2014/Mar/22
  - https://issues.apache.org/jira/browse/SHIRO-460
  source_url: https://ossindex.net/resource/package/7015344668/vulnerabilities
- id: ossindex:maven:org.apache.shiro:shiro-web:8399186923
  title: "[CVE-2016-4437]  Improper Access Control"
  description: Apache Shiro before 1.2.5, when a cipher key has not been configured
    for the "remember me" feature, allows remote attackers to execute arbitrary code
    or bypass intended access restrictions via an unspecified request parameter.
  affected_package: org.apache.shiro:shiro-web
  vulnerable_versions:
  - "<1.2.5"
  package_manager: maven
  cve:
  - CVE-2016-4437
  disclosed_date: 2016-06-07
  created_date: 2016-06-07
  last_modified_date: 2017-04-19
  credit:
  - OSSIndex
  references:
  - http://packetstormsecurity.com/files/137310/Apache-Shiro-1.2.4-Information-Disclosure.html
  - http://rhn.redhat.com/errata/RHSA-2016-2035.html
  - http://rhn.redhat.com/errata/RHSA-2016-2036.html
  - http://www.securityfocus.com/archive/1/archive/1/538570/100/0/threaded
  - http://www.securityfocus.com/bid/91024
  - https://lists.apache.org/thread.html/ef3a800c7d727a00e04b78e2f06c5cd8960f09ca28c9b69d94c3c4c4@%3Cannouncements.aurora.apache.org%3E
  source_url: https://ossindex.net/resource/package/7015344668/vulnerabilities
- id: ossindex:maven:org.apache.shiro:shiro-web:8400155585
  title: "[CVE-2016-6802]  Improper Access Control"
  description: Apache Shiro before 1.3.2 allows attackers to bypass intended servlet
    filters and gain access by leveraging use of a non-root servlet context path.
  affected_package: org.apache.shiro:shiro-web
  vulnerable_versions:
  - "<1.3.2"
  package_manager: maven
  cve:
  - CVE-2016-6802
  disclosed_date: 2016-09-20
  created_date: 2016-09-20
  last_modified_date: 2017-04-19
  credit:
  - OSSIndex
  references:
  - http://packetstormsecurity.com/files/138709/Apache-Shiro-Filter-Bypass.html
  - http://www.securityfocus.com/archive/1/archive/1/539397/100/0/threaded
  - http://www.securityfocus.com/bid/92947
  source_url: https://ossindex.net/resource/package/7015344668/vulnerabilities
- id: snykio:maven:org.apache.shiro:shiro-web:174083
  title: Directory Traversal
  description: |
    [org.apache.shiro:shiro-web][1] is a powerful and easy-to-use Java
    security framework that performs authentication, authorization,
    cryptography, and session management.

    Affected versions of this package are vulnerable to Directory Traversal.
    The `requestURI : /resource/menus` and `resource/menus/` can both access
    the server resource, but the `pathPattern` match `/resource/menus` can
    not match `resource/menus/`. A user can use `requestURI + "/"` to simply
    bypass the chain filter, thereby bypassing shiro protect and gaining
    access to the server resources.



    [1]: https://mvnrepository.com/artifact/org.apache.shiro/shiro-web
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
  affected_package: org.apache.shiro:shiro-web
  vulnerable_versions:
  - "< 1.5.0"
  severity: medium
  package_manager: maven
  cwe:
  - CWE-22
  disclosed_date: 2019-03-25
  created_date: 2019-04-01
  last_modified_date: 2019-04-01
  credit:
  - tomsun28
  references:
  - https://github.com/apache/shiro/pull/127
  - https://github.com/apache/shiro/pull/127/commits/81291c161dfb87df45dc9bf42d069fe659c58022
  - https://issues.apache.org/jira/browse/SHIRO-682
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHESHIRO-174083
- id: snykio:maven:org.apache.shiro:shiro-web:30725
  title: Directory Traversal
  description: |
    [`org.apache.shiro:shiro-web`][1] Apache Shiro before 1.1.0, and
    JSecurity 0.9.x, does not canonicalize URI paths before comparing them
    to entries in the shiro.ini file, which allows remote attackers to
    bypass intended access restrictions via a crafted request, as
    demonstrated by the /./account/index.jsp URI.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22shiro-web%22
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
  affected_package: org.apache.shiro:shiro-web
  vulnerable_versions:
  - "< 1.1.0"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2010-3863
  cwe:
  - CWE-22
  disclosed_date: 2010-11-05
  created_date: 2014-01-10
  last_modified_date: 2014-01-10
  credit:
  - Unknown
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2010-3863
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHESHIRO-30725
- id: snykio:maven:org.apache.shiro:shiro-web:30726
  title: Improper Access Control
  description: |
    [`org.apache.shiro:shiro-web`][1] Apache Shiro before 1.3.2 allows
    attackers to bypass intended servlet filters and gain access by
    leveraging use of a non-root servlet context path.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22shiro-web%22
  affected_package: org.apache.shiro:shiro-web
  vulnerable_versions:
  - "< 1.3.2"
  severity: high
  package_manager: maven
  cve:
  - CVE-2016-6802
  cwe:
  - CWE-284
  disclosed_date: 2016-09-14
  created_date: 2016-09-14
  last_modified_date: 2016-09-14
  credit:
  - Unknown
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-6802
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHESHIRO-30726
