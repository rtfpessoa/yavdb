---
- id: snykio:maven:org.apache.geode:geode-core:30616
  title: Authentication Bypass
  description: |
    Affected versions of [`org.apache.geode:geode-core`][1] are vulnerable
    to Authentication Bypass due to insufficient privilege restriction. A
    malicious user can write a function to change the `securityManager`,
    giving them access to the system.



    [1]: https://geode.apache.org
  affected_package: org.apache.geode:geode-core
  vulnerable_versions:
  - "< 1.1.0"
  severity: medium
  package_manager: maven
  cwe:
  - CWE-592
  disclosed_date: 2016-12-05
  created_date: 2016-12-05
  last_modified_date: 2016-12-05
  credit:
  - Unknown
  references:
  - https://issues.apache.org/jira/browse/GEODE-2146
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHEGEODE-30616
- id: snykio:maven:org.apache.geode:geode-core:30642
  title: Information Exposure
  description: |
    Affected versions of [`org.apache.geode:geode-core`][1] are vulnerable
    to Information Exposure. When a cluster is operating in secure mode, a
    user with read privileges for specific data regions can use the gfsh
    command line utility to execute queries. In Apache Geode before 1.2.1,
    the query results may contain data from another user\'s concurrently
    executing gfsh query, potentially revealing data that the user is not
    authorized to view.



    [1]: https://geode.apache.org
  affected_package: org.apache.geode:geode-core
  vulnerable_versions:
  - "< 1.2.1"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2017-9794
  cwe:
  - CWE-300
  disclosed_date: 2016-12-27
  created_date: 2017-10-30
  last_modified_date: 2017-10-30
  credit:
  - Jared Stewart
  references:
  - http://mail-archives.apache.org/mod_mbox/geode-user/201709.mbox/%3CCAEwge-FqzrT+deCkNkM-EQZuKfg-XuqY4cGjFiqxoKBVduY1Zw@mail.gmail.com%3E
  - https://cwiki.apache.org/confluence/display/GEODE/Release+Notes
  - https://issues.apache.org/jira/browse/GEODE-3217
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHEGEODE-30642
- id: snykio:maven:org.apache.geode:geode-core:30643
  title: Information Exposure
  description: |
    Affected versions of [`org.apache.geode:geode-core`][1] are vulnerable
    to Information Exposure. When an Apache Geode cluster before v1.2.1 is
    operating in secure mode, an unauthenticated client can enter multi-user
    authentication mode and send metadata messages. These metadata
    operations could leak information about application data types. In
    addition, an attacker could perform a denial of service attack on the
    cluster.



    [1]: https://geode.apache.org
  affected_package: org.apache.geode:geode-core
  vulnerable_versions:
  - "< 1.2.1"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2017-9797
  cwe:
  - CWE-300
  disclosed_date: 2017-07-17
  created_date: 2017-10-30
  last_modified_date: 2017-10-30
  credit:
  - Dan Smith
  references:
  - http://mail-archives.apache.org/mod_mbox/geode-user/201709.mbox/%3CCAEwge-Hrbb7JS8Nygrh7geyFvW4bMZ3AdCmPOzMfvbniipz0bA@mail.gmail.com%3E
  - https://cwiki.apache.org/confluence/display/GEODE/Release+Notes
  - https://issues.apache.org/jira/browse/GEODE-3249
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHEGEODE-30643
- id: snykio:maven:org.apache.geode:geode-core:31640
  title: Authentication Bypass
  description: |
    [`org.apache.geode:geode-core`][1] is a data management platform that
    provides real-time, consistent access to data-intensive applications
    throughout widely distributed cloud architectures.

    Affected versions of this package are vulnerable to Authentication
    Bypass. The `CacheClientProxy` could be asked to authorize a message
    prior to receiving its security subject.



    [1]: https://geode.apache.org
  affected_package: org.apache.geode:geode-core
  vulnerable_versions:
  - "< 1.4.0"
  severity: medium
  package_manager: maven
  cwe:
  - CWE-592
  disclosed_date: 2018-02-01
  created_date: 2018-03-06
  last_modified_date: 2018-03-06
  credit:
  - Unknown
  references:
  - https://github.com/apache/geode/commit/80ad2d70435fb255a8a2d08c8866fbb30a7bedd3
  - https://github.com/apache/geode/pull/1378
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHEGEODE-31640
- id: snykio:maven:org.apache.geode:geode-core:32029
  title: Arbitrary Code Execution
  description: |
    [`org.apache.geode:geode-core`][1] is a data management platform that
    provides real-time, consistent access to data-intensive applications
    throughout widely distributed cloud architectures.

    When an Apache Geode cluster before v1.3.0 is operating in secure mode,
    a user with read access to specific regions within a Geode cluster may
    execute OQL queries that allow read and write access to objects within
    unauthorized regions. In addition a user could invoke methods that allow
    remote code execution.

    A malicious user with read access to specific regions within a Geode
    cluster may execute OQL queries that allow read and write access to
    objects within unauthorized regions. In addition a user could invoke
    methods that allow remote code execution.



    [1]: https://geode.apache.org
  affected_package: org.apache.geode:geode-core
  vulnerable_versions:
  - "< 1.3.0"
  severity: high
  package_manager: maven
  cve:
  - CVE-2017-9795
  cwe:
  - CWE-269
  disclosed_date: 2017-07-19
  created_date: 2018-01-19
  last_modified_date: 2018-01-19
  credit:
  - Dan Smith
  references:
  - https://cwiki.apache.org/confluence/display/GEODE/Release+Notes#ReleaseNotes-SecurityVulnerabilities
  - https://github.com/apache/geode/pull/837
  - https://issues.apache.org/jira/browse/GEODE-3247
  - https://lists.apache.org/thread.html/0fc5ea3c1ea06fe7058a0ab56d593914b05f728a6c93c5a6755956c7@%3Cuser.geode.apache.org%3E
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHEGEODE-32029
- id: snykio:maven:org.apache.geode:geode-core:32033
  title: Information Exposure
  description: |
    [`org.apache.geode:geode-core`][1] is a data management platform that
    provides real-time, consistent access to data-intensive applications
    throughout widely distributed cloud architectures.

    When an Apache Geode cluster before v1.3.0 is operating in secure mode
    and an authenticated user connects to a Geode cluster using the gfsh
    tool with HTTP, the user is able to obtain status information and
    control cluster members even without CLUSTER:MANAGE privileges.



    [1]: https://geode.apache.org
  affected_package: org.apache.geode:geode-core
  vulnerable_versions:
  - "< 1.3.0"
  severity: high
  package_manager: maven
  cve:
  - CVE-2017-12622
  cwe:
  - CWE-200
  disclosed_date: 2018-01-10
  created_date: 2018-01-19
  last_modified_date: 2018-01-19
  credit:
  - Patrick Rhomberg
  references:
  - https://cwiki.apache.org/confluence/display/GEODE/Release+Notes#ReleaseNotes-SecurityVulnerabilities
  - https://github.com/apache/geode/commit/db4a493efc09600bf0a9778d5274c09b23b16644
  - https://github.com/apache/geode/pull/838
  - https://issues.apache.org/jira/browse/GEODE-3685
  - https://lists.apache.org/thread.html/560578479dabbdc93d0ee8746b7c857549202ef82f43aa22496aa589@%3Cuser.geode.apache.org%3E
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHEGEODE-32033
- id: snykio:maven:org.apache.geode:geode-core:32034
  title: Arbitrary OQL Query Execution
  description: |
    [`org.apache.geode:geode-core`][1] is a data management platform that
    provides real-time, consistent access to data-intensive applications
    throughout widely distributed cloud architectures.

    When an Apache Geode cluster before v1.3.0 is operating in secure mode,
    a user with read access to specific regions within a Geode cluster may
    execute OQL queries containing a region name as a bind parameter that
    allow read access to objects within unauthorized regions.

    A malicious user with read access to specific regions within a Geode
    cluster may execute OQL queries containing a region name as a bind
    parameter that allow read access to objects within unauthorized regions.



    [1]: https://geode.apache.org
  affected_package: org.apache.geode:geode-core
  vulnerable_versions:
  - "< 1.3.0"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2017-9796
  cwe:
  - CWE-269
  disclosed_date: 2017-07-19
  created_date: 2018-01-19
  last_modified_date: 2018-01-19
  credit:
  - Dan Smith
  references:
  - https://cwiki.apache.org/confluence/display/GEODE/Release+Notes#ReleaseNotes-SecurityVulnerabilities
  - https://github.com/apache/geode/commit/02b9646618e074f80b3d5fed0e5b512a34b5897a
  - https://github.com/apache/geode/pull/837
  - https://issues.apache.org/jira/browse/GEODE-3248
  - https://lists.apache.org/thread.html/e580d22195b6b61ff9cf866ac6dd6fe16e790ff0e14a3b1a22cd20b1@%3Cuser.geode.apache.org%3E
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHEGEODE-32034
- id: snykio:maven:org.apache.geode:geode-core:32112
  title: Authentication Bypass
  description: |
    [org.apache.geode:geode-core][1] is a data management platform that
    provides real-time, consistent access to data-intensive applications
    throughout widely distributed cloud architectures.

    Affected versions of this package are vulnerable to Authentication
    Bypass. The Geode configuration service does not properly authorize
    configuration requests. This allows an unprivileged user who gains
    access to the Geode locator to extract configuration data and previously
    deployed application code.



    [1]: https://github.com/apache/geode
  affected_package: org.apache.geode:geode-core
  vulnerable_versions:
  - ">= 1.0.0 < 1.4.0"
  severity: high
  package_manager: maven
  cve:
  - CVE-2017-15696
  cwe:
  - CWE-287
  disclosed_date: 2018-02-22
  created_date: 2018-02-26
  last_modified_date: 2018-02-26
  credit:
  - Unknown
  references:
  - https://lists.apache.org/thread.html/28989e6ed0d3c29e46a489ae508302a50407a40691d5dc968f78cd3f@%3Cdev.geode.apache.org%3E
  - https://nvd.nist.gov/vuln/detail/CVE-2017-15696
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHEGEODE-32112
- id: snykio:maven:org.apache.geode:geode-core:32113
  title: Deserialization of Untrusted Data
  description: |
    [org.apache.geode:geode-core][1] is a data management platform that
    provides real-time, consistent access to data-intensive applications
    throughout widely distributed cloud architectures.

    Affected versions of this package are vulnerable to Deserialization of
    Untrusted Data. The TcpServer within the Geode locator opens a network
    port that deserializes data. If an unprivileged user gains access to the
    Geode locator, they may be able to cause remote code execution if
    certain classes are present on the classpath.



    [1]: https://github.com/apache/geode
    \nSerialization is a process of converting an object into a sequence of
    bytes which can be persisted to a disk or database or can be sent
    through streams. The reverse process of creating object from sequence of
    bytes is called deserialization. Serialization is commonly used for
    communication (sharing objects between multiple hosts) and persistence
    (store the object state in a file or a database). It is an integral part
    of popular protocols like *Remote Method Invocation (RMI)*, *Java
    Management Extension (JMX)*, *Java Messaging System (JMS)*, *Action
    Message Format (AMF)*, *Java Server Faces (JSF) ViewState*, etc.

    *Deserialization of untrusted data* ([CWE-502][1]), is when the
    application deserializes untrusted data without sufficiently verifying
    that the resulting data will be valid, letting the attacker to control
    the state or the flow of the execution.

    Java deserialization issues have been known for years. However, interest
    in the issue intensified greatly in 2015, when classes that could be
    abused to achieve remote code execution were found in a [popular library
    (Apache Commons Collection)][2]. These classes were used in zero-days
    affecting IBM WebSphere, Oracle WebLogic and many other products.

    An attacker just needs to identify a piece of software that has both a
    vulnerable class on its path, and performs deserialization on untrusted
    data. Then all they need to do is send the payload into the
    deserializer, getting the command executed.

    > Developers put too much trust in Java Object Serialization. Some even
    > de-serialize objects pre-authentication. When deserializing an Object
    > in Java you typically cast it to an expected type, and therefore
    > Java\'s strict type system will ensure you only get valid object
    > trees. Unfortunately, by the time the type checking happens, platform
    > code has already created and executed significant logic. So, before
    > the final type is checked a lot of code is executed from the
    > readObject() methods of various objects, all of which is out of the
    > developer\'s control. By combining the readObject() methods of various
    > classes which are available on the classpath of the vulnerable
    > application an attacker can execute functions (including calling
    > Runtime.exec() to execute local OS commands).

    * Apache Blog

    The vulnerability, also know as *Mad Gadget*

    > Mad Gadget is one of the most pernicious vulnerabilities we’ve seen.
    > By merely existing on the Java classpath, seven “gadget” classes in
    > Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0)
    > make object deserialization for the entire JVM process Turing complete
    > with an exec function. Since many business applications use object
    > deserialization to send messages across the network, it would be like
    > hiring a bank teller who was trained to hand over all the money in the
    > vault if asked to do so politely, and then entrusting that teller with
    > the key. The only thing that would keep a bank safe in such a
    > circumstance is that most people wouldn’t consider asking such a
    > question.

    * Google



    [1]: https://cwe.mitre.org/data/definitions/502.html
    [2]: https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078
  affected_package: org.apache.geode:geode-core
  vulnerable_versions:
  - "< 1.4.0"
  severity: high
  package_manager: maven
  cve:
  - CVE-2017-15692
  cwe:
  - CWE-502
  disclosed_date: 2018-02-27
  created_date: 2018-02-28
  last_modified_date: 2018-02-28
  credit:
  - Man Yue Mo
  references:
  - https://cwiki.apache.org/confluence/display/GEODE/Release+Notes#ReleaseNotes-SecurityVulnerabilities
  - https://issues.apache.org/jira/browse/GEODE-3923
  - https://lists.apache.org/thread.html/5a453c1543e66704d39c233aef0023a492860e579eb9d6b6ffb0c5c2@%3Cdev.geode.apache.org%3E
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHEGEODE-32113
- id: snykio:maven:org.apache.geode:geode-core:32114
  title: Deserialization of Untrusted Data
  description: |
    [org.apache.geode:geode-core][1] is a data management platform that
    provides real-time, consistent access to data-intensive applications
    throughout widely distributed cloud architectures.

    Affected versions of this package are vulnerable to Deserialization of
    Untrusted Data. The Geode server stores application objects in
    serialized form. Certain cluster operations and API invocations cause
    these objects to be deserialized. A user with DATA:WRITE access to the
    cluster may be able to cause remote code execution if certain classes
    are present on the classpath.



    [1]: https://github.com/apache/geode
    \nSerialization is a process of converting an object into a sequence of
    bytes which can be persisted to a disk or database or can be sent
    through streams. The reverse process of creating object from sequence of
    bytes is called deserialization. Serialization is commonly used for
    communication (sharing objects between multiple hosts) and persistence
    (store the object state in a file or a database). It is an integral part
    of popular protocols like *Remote Method Invocation (RMI)*, *Java
    Management Extension (JMX)*, *Java Messaging System (JMS)*, *Action
    Message Format (AMF)*, *Java Server Faces (JSF) ViewState*, etc.

    *Deserialization of untrusted data* ([CWE-502][1]), is when the
    application deserializes untrusted data without sufficiently verifying
    that the resulting data will be valid, letting the attacker to control
    the state or the flow of the execution.

    Java deserialization issues have been known for years. However, interest
    in the issue intensified greatly in 2015, when classes that could be
    abused to achieve remote code execution were found in a [popular library
    (Apache Commons Collection)][2]. These classes were used in zero-days
    affecting IBM WebSphere, Oracle WebLogic and many other products.

    An attacker just needs to identify a piece of software that has both a
    vulnerable class on its path, and performs deserialization on untrusted
    data. Then all they need to do is send the payload into the
    deserializer, getting the command executed.

    > Developers put too much trust in Java Object Serialization. Some even
    > de-serialize objects pre-authentication. When deserializing an Object
    > in Java you typically cast it to an expected type, and therefore
    > Java\'s strict type system will ensure you only get valid object
    > trees. Unfortunately, by the time the type checking happens, platform
    > code has already created and executed significant logic. So, before
    > the final type is checked a lot of code is executed from the
    > readObject() methods of various objects, all of which is out of the
    > developer\'s control. By combining the readObject() methods of various
    > classes which are available on the classpath of the vulnerable
    > application an attacker can execute functions (including calling
    > Runtime.exec() to execute local OS commands).

    * Apache Blog

    The vulnerability, also know as *Mad Gadget*

    > Mad Gadget is one of the most pernicious vulnerabilities we’ve seen.
    > By merely existing on the Java classpath, seven “gadget” classes in
    > Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0)
    > make object deserialization for the entire JVM process Turing complete
    > with an exec function. Since many business applications use object
    > deserialization to send messages across the network, it would be like
    > hiring a bank teller who was trained to hand over all the money in the
    > vault if asked to do so politely, and then entrusting that teller with
    > the key. The only thing that would keep a bank safe in such a
    > circumstance is that most people wouldn’t consider asking such a
    > question.

    * Google



    [1]: https://cwe.mitre.org/data/definitions/502.html
    [2]: https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078
  affected_package: org.apache.geode:geode-core
  vulnerable_versions:
  - "< 1.4.0"
  severity: high
  package_manager: maven
  cve:
  - CVE-2017-15693
  cwe:
  - CWE-502
  disclosed_date: 2018-02-27
  created_date: 2018-02-28
  last_modified_date: 2018-02-28
  credit:
  - Man Yue Mo
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHEGEODE-32114
- id: snykio:maven:org.apache.geode:geode-core:32373
  title: Arbitrary Code Execution
  description: |
    [org.apache.geode:geode-core][1] is a data management platform that
    provides real-time, consistent access to data-intensive applications
    throughout widely distributed cloud architectures.

    Affected versions of this package are vulnerable to Arbitrary Code
    Execution. When a Geode server is configured with a security manager, a
    user with `DATA:WRITE` privileges is allowed to deploy code by invoking
    an internal Geode function.



    [1]: https://github.com/apache/geode
  affected_package: org.apache.geode:geode-core
  vulnerable_versions:
  - ">= 1.0.0 < 1.5.0"
  severity: high
  package_manager: maven
  cve:
  - CVE-2017-15695
  cwe:
  - CWE-94
  disclosed_date: 2018-06-13
  created_date: 2018-06-13
  last_modified_date: 2018-06-13
  credit:
  - Unknown
  references:
  - https://issues.apache.org/jira/browse/GEODE-3974
  - https://lists.apache.org/thread.html/dc8875c0b924885a884eba6d5bd7dc3f123411b2d33cffd00e351c99@%3Cuser.geode.apache.org%3E
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHEGEODE-32373
- id: snykio:maven:org.apache.geode:geode-core:450883
  title: Missing Permission Check
  description: |
    [org.apache.geode:geode-core][1] is a data management platform for cloud
    architectures.

    Affected versions of this package are vulnerable to Missing Permission
    Check. When an Apache Geode server is operating in secure mode, a user
    with write permissions for specific data regions can modify internal
    cluster metadata. A malicious user could modify this data in a way that
    affects the operation of the cluster.



    [1]: https://geode.apache.org
  affected_package: org.apache.geode:geode-core
  vulnerable_versions:
  - ">= 1.0.0 < 1.9.0"
  severity: high
  package_manager: maven
  cve:
  - CVE-2017-15694
  cwe:
  - CWE-275
  disclosed_date: 2019-06-21
  created_date: 2019-06-21
  last_modified_date: 2019-06-21
  credit:
  - Jason Huynh
  references:
  - https://issues.apache.org/jira/browse/GEODE-3981
  - https://lists.apache.org/thread.html/311505e7b7a045aaa246f0a1935703acacf41b954621b1363c40bf6f@%3Cuser.geode.apache.org%3E
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHEGEODE-450883
- id: snykio:maven:org.apache.geode:geode-core:560362
  title: Man-in-the-Middle (MitM)
  description: |
    [org.apache.geode:geode-core][1] is a data management platform for cloud
    architectures.

    Affected versions of this package are vulnerable to Man-in-the-Middle
    (MitM). When TLS is enabled with ssl-endpoint-identification-enabled set
    to true, Apache Geode fails to perform hostname verification of the
    entries in the certificate SAN during the SSL handshake. This could
    compromise intra-cluster communication using a man-in-the-middle attack.



    [1]: https://geode.apache.org
  affected_package: org.apache.geode:geode-core
  vulnerable_versions:
  - "< 1.10.0"
  severity: high
  package_manager: maven
  cve:
  - CVE-2019-10091
  cwe:
  - CWE-347
  disclosed_date: 2020-03-16
  created_date: 2020-03-16
  last_modified_date: 2020-03-16
  credit:
  - Unknown
  references:
  - https://github.com/apache/geode/pull/3849/files
  - https://issues.apache.org/jira/browse/GEODE-7018
  - https://lists.apache.org/thread.html/r3342077ac4798631300366be86e545d0c08753cca8fd2663867fe200%40%3Cdev.geode.apache.org%3E
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHEGEODE-560362
