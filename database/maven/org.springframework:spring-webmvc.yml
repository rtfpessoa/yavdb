---
- id: ossindex:maven:org.springframework:spring-webmvc:359720
  title: "[CVE-2014-0054]  Cross-Site Request Forgery (CSRF)"
  description: 'The Jaxb2RootElementHttpMessageConverter in Spring MVC in Spring Framework
    before 3.2.8 and 4.0.0 before 4.0.2 does not disable external entity resolution,
    which allows remote attackers to read arbitrary files, cause a denial of service,
    and conduct CSRF attacks via crafted XML, aka an XML External Entity (XXE) issue.  NOTE:
    this vulnerability exists because of an incomplete fix for CVE-2013-4152, CVE-2013-7315,
    and CVE-2013-6429.'
  affected_package: org.springframework:spring-webmvc
  vulnerable_versions:
  - "> >=3.2.0 <=3.2.7"
  - "> >=4.0.0 <=4.0.1"
  package_manager: maven
  cve:
  - CVE-2014-0054
  disclosed_date: 2014-04-17
  created_date: 2014-04-17
  last_modified_date: 2017-06-02
  credit:
  - OSSIndex
  references:
  - http://rhn.redhat.com/errata/RHSA-2014-0400.html
  - http://secunia.com/advisories/57915
  - http://www.securityfocus.com/bid/66148
  - https://jira.spring.io/browse/SPR-11376
  source_url: https://ossindex.net/resource/package/7015204537/vulnerabilities
- id: ossindex:maven:org.springframework:spring-webmvc:361150
  title: '[CVE-2014-1904]  Improper Neutralization of Input During Web Page Generation
    ("Cross-site Scripting")'
  description: Cross-site scripting (XSS) vulnerability in web/servlet/tags/form/FormTag.java
    in Spring MVC in Spring Framework 3.0.0 before 3.2.8 and 4.0.0 before 4.0.2 allows
    remote attackers to inject arbitrary web script or HTML via the requested URI
    in a default action.
  affected_package: org.springframework:spring-webmvc
  vulnerable_versions:
  - "> >=3.0.0 <=3.2.7"
  - "> >=4.0.0 <=4.0.1"
  package_manager: maven
  cve:
  - CVE-2014-1904
  disclosed_date: 2014-03-20
  created_date: 2014-03-20
  last_modified_date: 2017-06-02
  credit:
  - OSSIndex
  references:
  - http://docs.spring.io/spring/docs/3.2.8.RELEASE/changelog.txt
  - http://rhn.redhat.com/errata/RHSA-2014-0400.html
  - http://seclists.org/fulldisclosure/2014/Mar/101
  - http://secunia.com/advisories/57915
  - http://www.gopivotal.com/security/cve-2014-1904
  - http://www.securityfocus.com/archive/1/archive/1/531422/100/0/threaded
  - http://www.securityfocus.com/bid/66137
  - https://github.com/spring-projects/spring-framework/commit/741b4b229ae032bd17175b46f98673ce0bd2d485
  - https://jira.springsource.org/browse/SPR-11426
  source_url: https://ossindex.net/resource/package/7015204537/vulnerabilities
- id: ossindex:maven:org.springframework:spring-webmvc:362453
  title: '[CVE-2014-3578]  Improper Limitation of a Pathname to a Restricted Directory
    ("Path Traversal")'
  description: Directory traversal vulnerability in Pivotal Spring Framework 3.x before
    3.2.9 and 4.0 before 4.0.5 allows remote attackers to read arbitrary files via
    a crafted URL.
  affected_package: org.springframework:spring-webmvc
  vulnerable_versions:
  - "> >=3.2.0 <=3.2.8"
  - "> >=4.0.0 <=4.0.4"
  package_manager: maven
  cve:
  - CVE-2014-3578
  disclosed_date: 2015-02-19
  created_date: 2015-02-19
  last_modified_date: 2017-06-02
  credit:
  - OSSIndex
  references:
  - http://jvn.jp/en/jp/JVN49154900/index.html
  - http://jvndb.jvn.jp/jvndb/JVNDB-2014-000054
  - http://pivotal.io/security/cve-2014-3578
  - http://rhn.redhat.com/errata/RHSA-2015-0720.html
  - http://www.securityfocus.com/bid/68042
  - https://bugzilla.redhat.com/show_bug.cgi?id=1131882
  - https://rhn.redhat.com/errata/RHSA-2015-0234.html
  - https://rhn.redhat.com/errata/RHSA-2015-0235.html
  source_url: https://ossindex.net/resource/package/7015204537/vulnerabilities
- id: ossindex:maven:org.springframework:spring-webmvc:362483
  title: '[CVE-2014-3625]  Improper Limitation of a Pathname to a Restricted Directory
    ("Path Traversal")'
  description: Directory traversal vulnerability in Pivotal Spring Framework 3.0.4
    through 3.2.x before 3.2.12, 4.0.x before 4.0.8, and 4.1.x before 4.1.2 allows
    remote attackers to read arbitrary files via unspecified vectors, related to static
    resource handling.
  affected_package: org.springframework:spring-webmvc
  vulnerable_versions:
  - "> (>=4.0.0 <=4.0.7"
  - "> >=3.2.0 <=3.2.11"
  - "> >=4.1.0 <=4.1.1"
  package_manager: maven
  cve:
  - CVE-2014-3625
  disclosed_date: 2014-11-20
  created_date: 2014-11-20
  last_modified_date: 2017-06-02
  credit:
  - OSSIndex
  references:
  - http://rhn.redhat.com/errata/RHSA-2015-0236.html
  - http://rhn.redhat.com/errata/RHSA-2015-0720.html
  - http://www.pivotal.io/security/cve-2014-3625
  - https://jira.spring.io/browse/SPR-12354
  source_url: https://ossindex.net/resource/package/7015204537/vulnerabilities
- id: ossindex:maven:org.springframework:spring-webmvc:8402280560
  title: '[CVE-2016-9878]  Improper Limitation of a Pathname to a Restricted Directory
    ("Path Traversal")'
  description: An issue was discovered in Pivotal Spring Framework before 3.2.18,
    4.2.x before 4.2.9, and 4.3.x before 4.3.5. Paths provided to the ResourceServlet
    were not properly sanitized and as a result exposed to directory traversal attacks.
  affected_package: org.springframework:spring-webmvc
  vulnerable_versions:
  - "> (>=3.2.0 <3.2.18"
  - "> (>=4.2.0 <4.2.9"
  - "> >=1.2.1 <=3.1.4"
  - "> >=4.3.0 <4.3.5"
  package_manager: maven
  cve:
  - CVE-2016-9878
  disclosed_date: 2016-12-29
  created_date: 2016-12-29
  last_modified_date: 2017-06-02
  credit:
  - OSSIndex
  references:
  - http://www.securityfocus.com/bid/95072
  - https://access.redhat.com/errata/RHSA-2017:3115
  - https://pivotal.io/security/cve-2016-9878
  source_url: https://ossindex.net/resource/package/7015204537/vulnerabilities
- id: ossindex:maven:org.springframework:spring-webmvc:8404580684
  title: "[CVE-2015-5211]  Improper Input Validation"
  description: Under some situations, the Spring Framework 4.2.0 to 4.2.1, 4.0.0 to
    4.1.7, 3.2.0 to 3.2.14 and older unsupported versions is vulnerable to a Reflected
    File Download (RFD) attack. The attack involves a malicious user crafting a URL
    with a batch script extension that results in the response being downloaded rather
    than rendered and also includes some input reflected in the response.
  affected_package: org.springframework:spring-webmvc
  vulnerable_versions:
  - "> ((>=3.2.0 <=3.2.14"
  - "> >=4.0.0 <=4.0.9"
  - "> >=4.1.0 <=4.1.7"
  - "> >=4.2.0 <=4.2.1"
  package_manager: maven
  cve:
  - CVE-2015-5211
  disclosed_date: 2017-05-25
  created_date: 2017-05-25
  last_modified_date: 2017-06-08
  credit:
  - OSSIndex
  references:
  - https://pivotal.io/security/cve-2015-5211
  - https://www.trustwave.com/Resources/SpiderLabs-Blog/Reflected-File-Download---A-New-Web-Attack-Vector/
  source_url: https://ossindex.net/resource/package/7015204537/vulnerabilities
- id: snykio:maven:org.springframework:spring-webmvc:30166
  title: Cross-site Request Forgery (CSRF)
  description: |
    [`org.springframework:spring-webmvc`][1] Affected versions of this
    package do not disable external entity resolution, which allows remote
    attackers to read arbitrary files, cause a denial of service, and
    conduct CSRF attacks via crafted XML, aka an XML External Entity (XXE)
    issue.

    **NOTE:** this vulnerability exists because of an incomplete fix for
    [CVE-2013-4152][2], [CVE-2013-7315][3], and [CVE-2013-6429][4].



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22spring-webmvc%22
    [2]: https://snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORK-31330
    [3]: https://snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORK-30162
    [4]: https://snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORK-30160
  affected_package: org.springframework:spring-webmvc
  vulnerable_versions:
  - ">= 3.0.0.RELEASE < 3.2.8.RELEASE"
  - ">= 4.0.0.RELEASE < 4.0.2.RELEASE"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2014-0054
  cwe:
  - CWE-352
  disclosed_date: 2016-12-25
  created_date: 2016-12-25
  last_modified_date: 2016-12-25
  credit:
  - Spase Markovski
  references:
  - http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-0054
  - http://www.pivotal.io/security/cve-2014-0054
  - https://github.com/spring-projects/spring-framework/commit/edba32b3093703d5e9ed42b5b8ec23ecc1998398%23diff-1f3f1d5cdab9ac92d1ca5ec7def8f131
  - https://github.com/spring-projects/spring-framework/commit/fb0683c066e74e9667d6cd8c5fa01f674c68c3be%23diff-1f3f1d5cdab9ac92d1ca5ec7def8f131
  - https://jira.spring.io/browse/SPR-11376
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORK-30166
- id: snykio:maven:org.springframework:spring-webmvc:30167
  title: Cross-site Scripting (XSS)
  description: |+
    [org.springframework:spring-webmvc][1] is a package that provides
    Model-View-Controller (MVC) architecture and ready components that can
    be used to develop flexible and loosely coupled web applications.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). The `web/servlet/tags/form/FormTag.java` method allows remote
    attackers to inject arbitrary web script or HTML via the requested URI
    in a default action.



    [1]: https://mvnrepository.com/artifact/org.springframework/spring-webmvc
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: org.springframework:spring-webmvc
  vulnerable_versions:
  - ">= 3.0.0.RELEASE < 3.2.8.RELEASE"
  - ">= 4.0.0.RELEASE < 4.0.2.RELEASE"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2014-1904
  cwe:
  - CWE-79
  disclosed_date: 2014-03-20
  created_date: 2016-12-25
  last_modified_date: 2016-12-25
  credit:
  - Paul Wowk
  references:
  - http://www.gopivotal.com/security/cve-2014-1904
  - https://bugzilla.redhat.com/CVE-2014-1904
  - https://github.com/spring-projects/spring-framework/commit/741b4b229ae032bd17175b46f98673ce0bd2d485
  - https://github.com/spring-projects/spring-framework/commit/75e08695a04980dbceae6789364717e9d8764d58#diff-5c29d6685335045274d9908c5cd45e45
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORK-30167
- id: snykio:maven:org.springframework:spring-webmvc:30168
  title: Directory Traversal
  description: |
    [`org.springframework:spring-webmvc`][1] Affected versions of this
    package are vulnerable to Directory traversal attack which allows remote
    attackers to read arbitrary files via a crafted URL.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22spring-webmvc%22
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
  affected_package: org.springframework:spring-webmvc
  vulnerable_versions:
  - ">= 3.2 <= 3.2.8.RELEASE"
  - ">= 4.0 <= 4.0.4.RELEASE"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2014-3578
  cwe:
  - CWE-22
  disclosed_date: 2015-09-05
  created_date: 2015-09-05
  last_modified_date: 2015-09-05
  credit:
  - Takeshi Terada
  references:
  - http://jvndb.jvn.jp/en/contents/2014/JVNDB-2014-000054.html
  - http://www.pivotal.io/security/cve-2014-3578
  - https://bugzilla.redhat.com/show_bug.cgi?id=1131882
  - https://jira.spring.io/browse/SPR-12354
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORK-30168
- id: snykio:maven:org.springframework:spring-webmvc:30169
  title: Directory Traversal
  description: |
    [org.springframework:spring-webmvc][1] is a package that provides
    Model-View-Controller (MVC) architecture and ready components that can
    be used to develop flexible and loosely coupled web applications.

    Affected versions of this package are vulnerable to Directory Traversal.
    Allows remote attackers to read arbitrary files via unspecified vectors,
    related to static resource handling.



    [1]: https://mvnrepository.com/artifact/org.springframework/spring-webmvc
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
  affected_package: org.springframework:spring-webmvc
  vulnerable_versions:
  - ">= 3.2.0.RELEASE < 3.2.12.RELEASE"
  - ">= 4.0.0.RELEASE < 4.0.8.RELEASE"
  - ">= 4.1.0.RELEASE < 4.1.2.RELEASE"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2014-3625
  cwe:
  - CWE-22
  disclosed_date: 2014-11-11
  created_date: 2016-12-25
  last_modified_date: 2016-12-25
  credit:
  - Toshiaki Maki
  references:
  - http://www.pivotal.io/security/cve-2014-3625
  - https://bugzilla.redhat.com/CVE-2014-3625
  - https://github.com/spring-projects/spring-framework/commit/3f68cd633f03370d33c2603a6496e81273782601
  - https://github.com/spring-projects/spring-framework/commit/9beae9ae4226c45cd428035dae81214439324676
  - https://github.com/spring-projects/spring-framework/commit/9cef8e3001ddd61c734281a7556efd84b6cc2755
  - https://jira.spring.io/browse/SPR-12354
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORK-30169
- id: snykio:maven:org.springframework:spring-webmvc:30170
  title: Reflected File Download
  description: |
    [org.springframework:spring-webmvc][1] package that provides
    Model-View-Controller (MVC) architecture and ready components that can
    be used to develop flexible and loosely coupled web applications.

    Affected versions of this package are vulnerable to Reflected File
    Download via a crafted URL with a batch script extension, resulting in
    the response being downloaded rather than rendered.



    [1]: https://mvnrepository.com/artifact/org.springframework/spring-webmvc
  affected_package: org.springframework:spring-webmvc
  vulnerable_versions:
  - ">= 3.2.0.RELEASE < 3.2.15.RELEASE"
  - ">= 4.0.0.RELEASE < 4.1.8.RELEASE"
  - ">= 4.2.0.RELEASE < 4.2.2.RELEASE"
  severity: high
  package_manager: maven
  cve:
  - CVE-2015-5211
  cwe:
  - CWE-494
  disclosed_date: 2015-10-15
  created_date: 2016-12-25
  last_modified_date: 2016-12-25
  credit:
  - Alvaro Muñoz
  references:
  - http://pivotal.io/security/cve-2015-5211
  - https://access.redhat.com/security/cve/cve-2015-5211
  - https://github.com/spring-projects/spring-framework/commit/03f547eb9868f48f44d59b56067d4ac4740672c3
  - https://github.com/spring-projects/spring-framework/commit/2bd1daa75ee0b8ec33608ca6ab065ef3e1815543
  - https://github.com/spring-projects/spring-framework/commit/a95c3d820dbc4c3ae752f1b3ee22ee860b162402
  - https://github.com/spring-projects/spring-framework/issues/18124
  - https://www.trustwave.com/Resources/SpiderLabs-Blog/Reflected-File-Download---A-New-Web-Attack-Vector/
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORK-30170
- id: snykio:maven:org.springframework:spring-webmvc:31332
  title: Directory Traversal
  description: |
    [org.springframework:spring-webmvc][1] is a package that provides
    Model-View-Controller (MVC) architecture and ready components that can
    be used to develop flexible and loosely coupled web applications.

    Affected versions of this package are vulnerable to Directory Traversal.
    Paths provided to the `ResourceServlet` were not properly sanitized and
    as a result exposed to directory traversal attacks.



    [1]: https://mvnrepository.com/artifact/org.springframework/spring-webmvc
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
  affected_package: org.springframework:spring-webmvc
  vulnerable_versions:
  - ">= 1.2.1 < 3.2.18.RELEASE"
  - ">= 4.2.0.RELEASE < 4.2.9.RELEASE"
  - ">= 4.3.0.RELEASE < 4.3.5.RELEASE"
  severity: high
  package_manager: maven
  cve:
  - CVE-2016-9878
  cwe:
  - CWE-22
  disclosed_date: 2016-12-21
  created_date: 2016-12-28
  last_modified_date: 2016-12-28
  credit:
  - Shumpei Asahara
  - Yuji Ito
  references:
  - https://bugzilla.redhat.com/show_bug.cgi?id=1408164
  - https://github.com/spring-projects/spring-framework/commit/e2d6e709c3c65a4951eb096843ee75d5200cfcad
  - https://jira.spring.io/browse/SPR-14946
  - https://pivotal.io/security/cve-2016-9878
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORK-31332
- id: snykio:maven:org.springframework:spring-webmvc:31512
  title: Cross-site Scripting (XSS)
  description: |+
    Affected versions of [`org.springframework:spring-webmvc`][1] are
    vulnerable to Cross-site Scripting (XSS) attacks. The
    `LocaleChangeInterceptor` does not escape user input values from an HTTP
    request.



    [1]: https://springframework.org
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: org.springframework:spring-webmvc
  vulnerable_versions:
  - "< 3.0.6.RELEASE"
  severity: medium
  package_manager: maven
  cwe:
  - CWE-79
  disclosed_date: 2010-11-30
  created_date: 2017-09-20
  last_modified_date: 2017-09-20
  credit:
  - Juergen Hoeller
  references:
  - https://docs.spring.io/spring/docs/3.0.6.RELEASE/changelog.txt
  - https://jira.spring.io/browse/SPR-7779
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORK-31512
- id: snykio:maven:org.springframework:spring-webmvc:31690
  title: Cross-Site Tracing (XST)
  description: |
    [`org.springframework:spring-webmvc`][1] provides a comprehensive
    programming and configuration model for modern Java-based enterprise
    applications - on any kind of deployment platform.

    Affected versions of this package are vulnerable to Cross-site Tracing
    (XST) attcks. It allows web applications to change the HTTP request
    method to any HTTP method (including TRACE) using the
    `HiddenHttpMethodFilter` in Spring MVC. If an application has a
    pre-existing XSS vulnerability, a malicious user (or attacker) can use
    this filter to escalate to an XST attack.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22spring-webmvc%22
  affected_package: org.springframework:spring-webmvc
  vulnerable_versions:
  - ">= 4.3 < 4.3.18"
  - ">= 5.0 < 5.0.7"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2018-11039
  cwe:
  - CWE-284
  disclosed_date: 2018-06-08
  created_date: 2016-12-25
  last_modified_date: 2016-12-25
  credit:
  - Mariusz Luciow
  references:
  - https://pivotal.io/security/cve-2018-11039
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORK-31690
- id: snykio:maven:org.springframework:spring-webmvc:32199
  title: Multipart Content Pollution
  description: |
    [org.springframework:spring-webmvc][1] is a package that provides
    Model-View-Controller (MVC) architecture and ready components that can
    be used to develop flexible and loosely coupled web applications.

    Affected versions of this package are vulnerable to Multipart Content
    Pollution. It provides client-side support for multipart requests. When
    the server application (server A) receives input from a remote client,
    and then uses that input to make a multipart request to another server
    (server B), it can be exposed to an attack, where an extra multipart is
    inserted in the content of the request from server A, causing server B
    to use the wrong value for a part it expects. This could to lead
    privilege escalation, for example, if the part content represents a
    username or user roles.



    [1]: https://mvnrepository.com/artifact/org.springframework/spring-webmvc
  affected_package: org.springframework:spring-webmvc
  vulnerable_versions:
  - ">= 4.3.0.RELEASE < 4.3.14.RELEASE"
  - ">= 5.0.0.RELEASE < 5.0.5.RELEASE"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2018-1272
  cwe:
  - CWE-94
  disclosed_date: 2018-04-06
  created_date: 2018-04-09
  last_modified_date: 2018-04-09
  credit:
  - Unknown
  references:
  - https://github.com/spring-projects/spring-framework/commit/ab2410c754b67902f002bfcc0c3895bd7772d39
  - https://github.com/spring-projects/spring-framework/commit/e02ff3a0da50744b0980d5d665fd242eedea767
  - https://nvd.nist.gov/vuln/detail/CVE-2018-1272
  - https://pivotal.io/security/cve-2018-1272
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORK-32199
- id: snykio:maven:org.springframework:spring-webmvc:32202
  title: Directory Traversal
  description: |
    [org.springframework:spring-webmvc][1] Spring provides everything you
    need beyond the Java language to create enterprise applications in a
    wide range of scenarios and architectures.

    Affected versions of this package are vulnerable to Directory Traversal.
    When static resources are served from a file system on Windows (as
    opposed to the classpath, or the ServletContext), a malicious user can
    send a request using a specially crafted URL that can lead a directory
    traversal attack.



    [1]: https://mvnrepository.com/artifact/org.springframework/spring-webmvc
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
  affected_package: org.springframework:spring-webmvc
  vulnerable_versions:
  - "< 4.3.15.RELEASE"
  - ">= 5.0.0.RELEASE < 5.0.5.RELEASE"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2018-1271
  cwe:
  - CWE-23
  disclosed_date: 2018-04-06
  created_date: 2018-04-09
  last_modified_date: 2018-04-09
  credit:
  - Orange Tsai
  references:
  - https://nvd.nist.gov/vuln/detail/CVE-2018-1271
  - https://pivotal.io/security/cve-2018-1271
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORK-32202
- id: snykio:maven:org.springframework:spring-webmvc:460108
  title: Directory Traversal
  description: |
    [org.springframework:spring-webmvc][1] is a package that provides
    Model-View-Controller (MVC) architecture and ready components that can
    be used to develop flexible and loosely coupled web applications.

    Affected versions of this package are vulnerable to Directory Traversal.



    [1]: https://mvnrepository.com/artifact/org.springframework/spring-webmvc
    \n[`org.springframework:spring`][1] An issue was discovered in Pivotal
    Spring Framework before 3.2.18, 4.2.x before 4.2.9, and 4.3.x before
    4.3.5. Paths provided to the `ResourceServlet` were not properly
    sanitized and as a result exposed to directory traversal attacks.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22spring-webmvc%22
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
  affected_package: org.springframework:spring-webmvc
  vulnerable_versions:
  - ">= 1.2.1 < 3.2.18.RELEASE"
  - ">= 4.2.0.RELEASE < 4.2.9.RELEASE"
  - ">= 4.3.0.RELEASE < 4.3.5.RELEASE"
  severity: high
  package_manager: maven
  cve:
  - CVE-2016-9878
  cwe:
  - CWE-22
  disclosed_date: 2016-12-28
  created_date: 2016-12-28
  last_modified_date: 2016-12-28
  credit:
  - Shumpei Asahara
  - Yuji Ito
  references:
  - https://github.com/spring-projects/spring-framework/commit/43bf008fbcd0d7945e2fcd5e30039bc4d74c7a98
  - https://github.com/spring-projects/spring-framework/commit/a7dc48534ea501525f11369d369178a60c2f47d0
  - https://github.com/spring-projects/spring-framework/commit/e2d6e709c3c65a4951eb096843ee75d5200cfcad
  - https://pivotal.io/security/cve-2016-9878
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORK-460108
- id: snykio:maven:org.springframework:spring-webmvc:467268
  title: Information Exposure
  description: |
    [org.springframework:spring-webmvc][1] is a package that provides
    Model-View-Controller (MVC) architecture and ready components that can
    be used to develop flexible and loosely coupled web applications.

    Affected versions of this package are vulnerable to Information
    Exposure. It allows web applications to enable cross-domain requests via
    JSONP (JSON with Padding) through `AbstractJsonpResponseBodyAdvice` for
    REST controllers, and `MappingJackson2JsonView` for browser requests.
    When `MappingJackson2JsonView` is configured in an application, JSONP
    support is automatically ready to use through the `jsonp` and `callback`
    JSONP parameters, enabling cross-domain requests. Allowing cross-domain
    requests from untrusted origins may expose user information to 3rd party
    browser scripts.



    [1]: https://mvnrepository.com/artifact/org.springframework/spring-webmvc
  affected_package: org.springframework:spring-webmvc
  vulnerable_versions:
  - ">= 4.3.0.RELEASE < 4.3.18.RELEASE"
  - ">= 5.0.0.RELEASE < 5.0.7.RELEASE"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2018-11040
  cwe:
  - CWE-200
  disclosed_date: 2016-12-25
  created_date: 2016-12-25
  last_modified_date: 2016-12-25
  credit:
  - Mariusz Luciow
  references:
  - https://github.com/spring-projects/spring-framework/commit/b80c13b722bb207ddf43f53a007ee3ddc1dd2e26
  - https://github.com/spring-projects/spring-framework/issues/21338
  - https://pivotal.io/security/cve-2018-11040
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORK-467268
- id: snykio:maven:org.springframework:spring-webmvc:536316
  title: Authentication Bypass
  description: |
    [org.springframework:spring-webmvc][1] is a package that provides
    Model-View-Controller (MVC) architecture and ready components that can
    be used to develop flexible and loosely coupled web applications.

    Affected versions of this package are vulnerable to Authentication
    Bypass. The strictness of the Spring Security and the Spring Framework
    request mapping may differ, which could lead to resources not being
    secured.



    [1]: https://mvnrepository.com/artifact/org.springframework/spring-webmvc
  affected_package: org.springframework:spring-webmvc
  vulnerable_versions:
  - ">= 3.2.0.RELEASE < 4.3.1.RELEASE"
  severity: high
  package_manager: maven
  cve:
  - CVE-2016-5007
  cwe:
  - CWE-41
  disclosed_date: 2016-07-11
  created_date: 2016-07-11
  last_modified_date: 2016-07-11
  credit:
  - Clément Notin
  references:
  - https://github.com/spring-projects/spring-framework/commit/a30ab30e4e9ae021fdda04e9abfc228476b846b5
  - https://github.com/spring-projects/spring-security/commit/e4c13e
  - https://github.com/spring-projects/spring-security/issues/3964
  - https://pivotal.io/security/cve-2016-5007
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORK-536316
- id: snykio:maven:org.springframework:spring-webmvc:542933
  title: Cross-Site Request Forgery (CSRF)
  description: |
    [org.springframework:spring-webmvc][1] is a package that provides
    Model-View-Controller (MVC) architecture and ready components that can
    be used to develop flexible and loosely coupled web applications.

    Affected versions of this package are vulnerable to Cross-Site Request
    Forgery (CSRF) through CORS preflight requests that target Spring MVC
    (`spring-webmvc` module) or Spring WebFlux (`spring-webflux` module)
    endpoints. Only non-authenticated endpoints are vulnerable because
    preflight requests should not include credentials and therefore requests
    should fail authentication. However a notable exception to this are
    Chrome based browsers when using client certificates for authentication
    since Chrome sends TLS client certificates in CORS preflight requests in
    violation of spec requirements. No HTTP body can be sent or received as
    a result of this attack.



    [1]: https://mvnrepository.com/artifact/org.springframework/spring-webmvc
  affected_package: org.springframework:spring-webmvc
  vulnerable_versions:
  - ">= 5.2.0 < 5.2.3"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2020-5397
  cwe:
  - CWE-352
  disclosed_date: 2020-01-16
  created_date: 2020-01-22
  last_modified_date: 2020-01-22
  credit:
  - Eric Zimanyi
  references:
  - https://pivotal.io/security/cve-2020-5397
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORK-542933
- id: snykio:maven:org.springframework:spring-webmvc:542935
  title: Reflected File Download (RFD)
  description: |
    [org.springframework:spring-webmvc][1] is a package that provides
    Model-View-Controller (MVC) architecture and ready components that can
    be used to develop flexible and loosely coupled web applications.

    Affected versions of this package are vulnerable to Reflected File
    Download (RFD). A reflected file download attack is possible when the
    filename attribute of the `Content-Disposition` header is derived from
    user-supplied input.



    [1]: https://mvnrepository.com/artifact/org.springframework/spring-webmvc
  affected_package: org.springframework:spring-webmvc
  vulnerable_versions:
  - ">= 5.0.0 < 5.0.16"
  - ">= 5.1.0 < 5.1.13"
  - ">= 5.2.0 < 5.2.3"
  severity: high
  package_manager: maven
  cve:
  - CVE-2020-5398
  cwe:
  - CWE-494
  disclosed_date: 2020-01-16
  created_date: 2020-01-22
  last_modified_date: 2020-01-22
  credit:
  - Roman Shalymov
  references:
  - https://github.com/spring-projects/spring-framework/issues/24220
  - https://pivotal.io/security/cve-2020-5398
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORK-542935
- id: victims:maven:org.springframework:spring-webmvc:2014-0054
  title: 'Spring MVC: XML External Entities'
  description: 'Spring MVC''s Jaxb2RootElementHttpMessageConverter also processed
    user provided XML and  neither disabled XML external entities nor provided an
    option to disable them. Jaxb2RootElementHttpMessageConverter has been modified
    to provide an option to control  the processing of XML external entities and that
    processing is now disabled by default.

'
  affected_package: org.springframework:spring-webmvc
  vulnerable_versions:
  - '3.2'
  - '4.0'
  - "<=3.2.7.RELEASE"
  - "<=4.0.1.RELEASE"
  patched_versions:
  - '3.2'
  - '4.0'
  - ">=3.2.8.RELEASE"
  - ">=4.0.2.RELEASE"
  severity: high
  package_manager: maven
  cve:
  - CVE-2014-0054
  cvss_v2_score: 6.8
  credit:
  - Victims CVE Database
  references:
  - http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-0054
  - http://www.pivotal.io/security/cve-2014-0054
  - https://jira.spring.io/browse/SPR-11376
  source_url: https://github.com/victims/victims-cve-db/blob/master/database/java/2014/0054.yaml
- id: victims:maven:org.springframework:spring-webmvc:2014-1904
  title: Cross-site scripting flaw when using Spring MVC
  affected_package: org.springframework:spring-webmvc
  vulnerable_versions:
  - '3'
  - '4'
  - "<=3.2.7.RELEASE"
  - "<=4.0.1.RELEASE"
  patched_versions:
  - '3'
  - '4'
  - ">=3.2.8.RELEASE"
  - ">=4.0.2.RELEASE"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2014-1904
  cvss_v2_score: 5.0
  credit:
  - Victims CVE Database
  references:
  - http://www.gopivotal.com/security/cve-2014-1904
  - https://bugzilla.redhat.com/CVE-2014-1904
  source_url: https://github.com/victims/victims-cve-db/blob/master/database/java/2014/1904.yaml
- id: victims:maven:org.springframework:spring-webmvc:2014-3578
  title: 'Spring MVC: Directory traversal flaw'
  description: 'Some URLs were not sanitized correctly before use allowing an attacker
    to obtain any file on the file system that was also accessible to process in which
    the Spring web application was running.

'
  affected_package: org.springframework:spring-webmvc
  vulnerable_versions:
  - '3.2'
  - '4.0'
  - "<=3.2.8.RELEASE"
  - "<=4.0.4.RELEASE"
  patched_versions:
  - '3.2'
  - '4.0'
  - ">=3.2.9.RELEASE"
  - ">=4.0.5.RELEASE"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2014-3578
  cvss_v2_score: 5.0
  credit:
  - Victims CVE Database
  references:
  - http://jvndb.jvn.jp/en/contents/2014/JVNDB-2014-000054.html
  - http://www.pivotal.io/security/cve-2014-3578
  - https://bugzilla.redhat.com/show_bug.cgi?id=1131882
  - https://jira.spring.io/browse/SPR-12354
  source_url: https://github.com/victims/victims-cve-db/blob/master/database/java/2014/3578.yaml
- id: victims:maven:org.springframework:spring-webmvc:2014-3625
  title: 'Spring Framework: directory traversal flaw'
  description: 'Some URLs were not sanitized correctly before use allowing an attacker
    to obtain any file on the file system that was also accessible to process in which
    the Spring web application was running.

'
  affected_package: org.springframework:spring-webmvc
  vulnerable_versions:
  - '3.2'
  - '4.0'
  - '4.1'
  - "<=3.2.11.RELEASE"
  - "<=4.0.7.RELEASE"
  - "<=4.1.1.RELEASE"
  patched_versions:
  - '3.2'
  - '4.0'
  - '4.1'
  - ">=3.2.12.RELEASE"
  - ">=4.0.8.RELEASE"
  - ">=4.1.2.RELEASE"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2014-3625
  cvss_v2_score: 5.0
  credit:
  - Victims CVE Database
  references:
  - http://www.pivotal.io/security/cve-2014-3625
  - https://bugzilla.redhat.com/CVE-2014-3625
  - https://jira.spring.io/browse/SPR-12354
  source_url: https://github.com/victims/victims-cve-db/blob/master/database/java/2014/3625.yaml
- id: victims:maven:org.springframework:spring-webmvc:2015-5211
  title: 'Spring Framework: reflected file download vulnerability'
  description: 'Under some situations, the Spring Framework is vulnerable to a Reflected
    File Download (RFD) attack. The attack involves a malicious user crafting a URL
    with a batch script extension that results in the response being downloaded rather
    than rendered and also includes some input reflected in the response.

'
  affected_package: org.springframework:spring-webmvc
  vulnerable_versions:
  - '3.2'
  - '4.0'
  - '4.1'
  - '4.2'
  - "<=3.2.14.RELEASE"
  - "<=4.0.9.RELEASE"
  - "<=4.1.7.RELEASE"
  - "<=4.2.1.RELEASE"
  patched_versions:
  - '3.2'
  - '4.1'
  - '4.2'
  - ">=3.2.15.RELEASE"
  - ">=4.1.8.RELEASE"
  - ">=4.2.2.RELEASE"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2015-5211
  cvss_v2_score: 4.0
  credit:
  - Victims CVE Database
  references:
  - http://pivotal.io/security/cve-2015-5211
  - https://access.redhat.com/security/cve/cve-2015-5211
  source_url: https://github.com/victims/victims-cve-db/blob/master/database/java/2015/5211.yaml
