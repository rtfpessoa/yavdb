---
- id: snykio:maven:xerces:xercesimpl:30182
  title: XML Parsing Infinite Loop
  description: |
    [`xerces:xercesImpl`][1] XML parsing infinite loop Unspecified
    vulnerability in the Java Runtime Environment (JRE) component in Oracle
    Java SE 7 update 4 and earlier, and 6 update 32 and earlier, allows
    remote attackers to affect availability, related to JAXP.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22xercesImpl%22
  affected_package: xerces:xercesimpl
  vulnerable_versions:
  - "< 2.3.0"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2012-1724
  cwe:
  - CWE-94
  disclosed_date: 2012-06-06
  created_date: 2012-06-06
  last_modified_date: 2012-06-06
  credit:
  - Adam Gowdiak
  - Andrei Costin
  - Chris Ries
  - Clayton Smith
  references:
  - http://svn.apache.org/viewvc?view=revision&revision=319059
  - http://www.oracle.com/technetwork/topics/security/javacpujun2012-1515912.html
  - https://bugzilla.redhat.com/CVE-2012-1724
  source_url: https://snyk.io/vuln/SNYK-JAVA-XERCES-30182
- id: snykio:maven:xerces:xercesimpl:30183
  title: Denial of Service (DoS)
  description: |+
    [xerces:xercesimpl][1] is a that is used for high performance, fully
    compliant XML parsers in the Apache Xerces family.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS) which is caused by the way the JRE processes XML files. A remote
    attacker could use this flaw to supply crafted XML that would lead to a
    denial of service.



    [1]: http://xerces.apache.org
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: xerces:xercesimpl
  vulnerable_versions:
  - "< 2.11.0.SP5"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2013-4002
  cwe:
  - CWE-94
  disclosed_date: 2013-07-23
  created_date: 2013-10-15
  last_modified_date: 2013-10-15
  credit:
  - Unknown
  references:
  - http://svn.apache.org/viewvc?view=revision&revision=1499506
  - https://bugzilla.redhat.com/CVE-2013-4002
  source_url: https://snyk.io/vuln/SNYK-JAVA-XERCES-30183
- id: snykio:maven:xerces:xercesimpl:31497
  title: Denial of Service (DoS)
  description: "[xerces:xercesimpl][1] is a that is used for high performance, fully\ncompliant
    XML parsers in the Apache Xerces family.\n\nAffected versions of this package
    are vulnerable to Denial of Service\n(DoS). An attacker may be able to force the
    target server to parse an\nFTP URL, which points to an FTP server controller by
    the attacker. When\nthe target server is mid way through fetching the FTP resources,
    the\nattackers malicious FTP server will exit the process and will leave the\nthread
    hanging in the target server.\n\nIt is possible to conduct this attack only if
    the following conditions\nare met:\n\n* An attacker can pass an URL parameter
    that points to a controlled FTP\n  server to the target.\n* Target server uses
    vulnerable component(s) to fetch the resource\n  specified by the attacker.\n*
    Target server does not prevent fetching of FTP URI resources.\n\n\n\n[1]: http://xerces.apache.org\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n{: .language-js}\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n{: .language-bash}\n\nThe entire
    process of testing it against a 30 characters long string\ntakes around ~52ms.
    But when given an invalid string, it takes nearly\ntwo seconds to complete the
    test, over ten times as long as it took to\ntest a valid string. The dramatic
    difference is due to the way regular\nexpressions get evaluated.\n\nMost Regex
    engines will work very similarly (with minor differences).\nThe engine will match
    the first possible way to accept the current\ncharacter and proceed to the next
    one. If it then fails to match the\nnext one, it will backtrack and see if there
    was another way to digest\nthe previous character. If it goes too far down the
    rabbit hole only to\nfind out the string doesn’t match in the end, and if many
    characters\nhave multiple valid regex paths, the number of backtracking steps
    can\nbecome very large, resulting in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s
    look at how our expression runs into this problem, using a\nshorter string: \\\"ACCCX\\\".
    While it seems fairly straightforward, there\nare still four different ways that
    the engine could match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.
    \ C+C+C.\n\nThe engine has to try each of those combinations to see if any of
    them\npotentially match against the expression. When you combine that with the\nother
    steps the engine must take, we can use [RegEx 101 debugger][1] to\nsee the engine
    has to take a total of 38 steps before it can determine\nthe string doesn\\'t
    match.\n\nFrom there, the number of steps the engine must use to validate a string\njust
    continues to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n|
    ACCCX | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX
    | 14 | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to
    take over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n"
  affected_package: xerces:xercesimpl
  vulnerable_versions:
  - "< 2.11.0"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2017-10355
  cwe:
  - CWE-400
  disclosed_date: 2017-08-29
  created_date: 2017-09-08
  last_modified_date: 2017-09-08
  credit:
  - Unknown
  references:
  - https://blogs.securiteam.com/index.php/archives/3271
  - https://nvd.nist.gov/vuln/detail/CVE-2017-10355
  - https://www.exploit-db.com/exploits/44057
  source_url: https://snyk.io/vuln/SNYK-JAVA-XERCES-31497
- id: snykio:maven:xerces:xercesimpl:31585
  title: Denial of Service (DoS)
  description: |+
    [xerces:xercesImpl][1] is a fully compliant XML parsers in the Apache
    Xerces family

    Affected versions of this package are vulnerable to Denial of Service
    (DoS). Apache Xerces2 Java allows remote attackers to cause a denial of
    service (CPU consumption) via a crafted message to an XML service, which
    triggers hash table collisions.



    [1]: https://mvnrepository.com/artifact/xerces/xercesImpl
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: xerces:xercesimpl
  vulnerable_versions:
  - ">= 0 < 2.12.0"
  severity: high
  package_manager: maven
  cve:
  - CVE-2012-0881
  cwe:
  - CWE-400
  disclosed_date: 2012-02-02
  created_date: 2017-11-16
  last_modified_date: 2017-11-16
  credit:
  - Juraj Somorovsky
  references:
  - https://bugzilla.redhat.com/show_bug.cgi?id=787104
  - https://github.com/apache/xerces2-j/commit/992b5d9c24102ad20330d36c0a71162753a37449
  - https://issues.apache.org/jira/browse/XERCESJ-1685?jql=project%20%3D%20XERCESJ
  - https://nvd.nist.gov/vuln/detail/CVE-2012-0881
  source_url: https://snyk.io/vuln/SNYK-JAVA-XERCES-31585
- id: snykio:maven:xerces:xercesimpl:32014
  title: Denial of Service (DoS)
  description: |+
    [xerces:xercesimpl][1] is an that is used for high performance, fully
    compliant XML parsers in the Apache Xerces family.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS). `XMLScanner.java` in Apache Xerces2 Java, as used in Sun Java
    Runtime Environment (JRE) in JDK and JRE 6 before Update 15 and JDK and
    JRE 5.0 before Update 20, and in other products, allows remote attackers
    to cause a denial of service (infinite loop and application hang) via
    malformed XML input, as demonstrated by the Codenomicon XML fuzzing
    framework.



    [1]: http://xerces.apache.org
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: xerces:xercesimpl
  vulnerable_versions:
  - "< 2.10.0"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2009-2625
  cwe:
  - CWE-400
  disclosed_date: 2009-08-03
  created_date: 2017-12-04
  last_modified_date: 2017-12-04
  credit:
  - Jukka Taimisto
  - Rauli Kaksonen
  - Tero Rontti
  references:
  - https://github.com/apache/xerces2-j/commit/0bdf77af1d4fd26ec2e630fb6d12e2dfa77bc12b
  - https://nvd.nist.gov/vuln/detail/CVE-2009-2625
  source_url: https://snyk.io/vuln/SNYK-JAVA-XERCES-32014
