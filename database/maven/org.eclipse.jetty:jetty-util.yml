---
- id: ossindex:maven:org.eclipse.jetty:jetty-util:348153
  title: "[CVE-2011-4461]  Cryptographic Issues"
  description: Jetty 8.1.0.RC2 and earlier computes hash values for form parameters
    without restricting the ability to trigger hash collisions predictably, which
    allows remote attackers to cause a denial of service (CPU consumption) by sending
    many crafted parameters.
  affected_package: org.eclipse.jetty:jetty-util
  vulnerable_versions:
  - "<=8.1.0-RC2"
  package_manager: maven
  cve:
  - CVE-2011-4461
  disclosed_date: 2011-12-30
  created_date: 2011-12-30
  last_modified_date: 2017-06-02
  credit:
  - OSSIndex
  references:
  - http://archives.neohapsis.com/archives/bugtraq/2011-12/0181.html
  - http://marc.info/?l=bugtraq&m=143387688830075&w=2
  - http://packetstormsecurity.com/files/131271/VMware-Security-Advisory-2015-0003.html
  - http://seclists.org/fulldisclosure/2015/Apr/5
  - http://secunia.com/advisories/47408
  - http://secunia.com/advisories/48981
  - http://www.kb.cert.org/vuls/id/903934
  - http://www.nruns.com/_downloads/advisory28122011.pdf
  - http://www.ocert.org/advisories/ocert-2011-003.html
  - http://www.oracle.com/technetwork/security-advisory/cpuapr2016v3-2985753.html
  - http://www.oracle.com/technetwork/topics/security/cpujan2015-1972971.html
  - http://www.securityfocus.com/archive/1/archive/1/535181/100/0/threaded
  - http://www.securitytracker.com/id?1026475
  - http://www.ubuntu.com/usn/USN-1429-1
  - http://xforce.iss.net/xforce/xfdb/72017
  - https://exchange.xforce.ibmcloud.com/vulnerabilities/72017
  source_url: https://ossindex.net/resource/package/7015304858/vulnerabilities
- id: ossindex:maven:org.eclipse.jetty:jetty-util:8402792102
  title: "[CVE-2016-4800]  Improper Access Control"
  description: The path normalization mechanism in PathResource class in Eclipse Jetty
    9.3.x before 9.3.9 on Windows allows remote attackers to bypass protected resource
    restrictions and other security constraints via a URL with certain escaped characters,
    related to backslashes.
  affected_package: org.eclipse.jetty:jetty-util
  vulnerable_versions:
  - ">=9.3.0 <9.3.9"
  package_manager: maven
  cve:
  - CVE-2016-4800
  disclosed_date: 2017-04-13
  created_date: 2017-04-13
  last_modified_date: 2017-06-02
  credit:
  - OSSIndex
  references:
  - http://dev.eclipse.org/mhonarc/lists/jetty-announce/msg00092.html
  - http://www.ocert.org/advisories/ocert-2016-001.html
  - http://www.securityfocus.com/bid/90945
  - http://www.zerodayinitiative.com/advisories/ZDI-16-362
  source_url: https://ossindex.net/resource/package/7015304858/vulnerabilities
- id: snykio:maven:org.eclipse.jetty:jetty-util:174471
  title: Information Exposure
  description: |
    [org.eclipse.jetty:jetty-util][1] is a Web Container &amp; Clients -
    supports HTTP/2, HTTP/1.1, HTTP/1.0, websocket, servlets, and more.

    Affected versions of this package are vulnerable to Information
    Exposure. The server running on Windows exposes its qualified base
    resource directory name to a remote client when it is configured for
    directory contents listing. However, the information revealed is only
    restricted to the content in the configured base resource directories.



    [1]: https://www.eclipse.org/jetty
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
  affected_package: org.eclipse.jetty:jetty-util
  vulnerable_versions:
  - ">= 9.2.27.v20190403 < 9.2.28.v20190418"
  - ">= 9.3.26.v20190403 < 9.3.27.v20190418"
  - ">= 9.4.16.v20190411 < 9.4.17.v20190418"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2019-10246
  cwe:
  - CWE-22
  disclosed_date: 2019-04-22
  created_date: 2019-04-22
  last_modified_date: 2019-04-22
  credit:
  - Unknown
  references:
  - https://bugs.eclipse.org/bugs/show_bug.cgi?id=546576
  - https://github.com/eclipse/jetty.project/commit/65de2c6690103212a933e5491fbe94d35fcdd498
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGECLIPSEJETTY-174471
- id: snykio:maven:org.eclipse.jetty:jetty-util:174479
  title: Cross-site Scripting (XSS)
  description: |+
    [org.eclipse.jetty:jetty-util][1] is a Web Container &amp; Clients -
    supports HTTP/2, HTTP/1.1, HTTP/1.0, websocket, servlets, and more.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) when a remote client uses a specially formatted URL against the
    `DefaultServlet` or `ResourceHandler` that is configured for showing a
    listing of directory contents.



    [1]: https://www.eclipse.org/jetty
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: org.eclipse.jetty:jetty-util
  vulnerable_versions:
  - ">= 9.2.0.M0 < 9.2.27.v20190403"
  - ">= 9.3.0.M0 < 9.3.26.v20190403"
  - ">= 9.4.15.v20190215 < 9.4.16.v20190411"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2019-10241
  cwe:
  - CWE-79
  disclosed_date: 2019-04-22
  created_date: 2019-04-22
  last_modified_date: 2019-04-22
  credit:
  - Unknown
  references:
  - https://bugs.eclipse.org/bugs/show_bug.cgi?id=546121
  - https://github.com/eclipse/jetty.project/commit/ca77bd384a2970cabbbdab25cf6251c6fb76cd21
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGECLIPSEJETTY-174479
- id: snykio:maven:org.eclipse.jetty:jetty-util:174480
  title: Information Exposure
  description: |
    [org.eclipse.jetty:jetty-util][1] is a Web Container &amp; Clients -
    supports HTTP/2, HTTP/1.1, HTTP/1.0, websocket, servlets, and more.

    Affected versions of this package are vulnerable to Information
    Exposure. The configuration of a Jetty server may be leaked as part of a
    HTTP 404 response. This is due to the `DefaultHandler` class producing
    an error page during an exception.



    [1]: https://www.eclipse.org/jetty
  affected_package: org.eclipse.jetty:jetty-util
  vulnerable_versions:
  - ">= 7.0.0.M0 < 9.2.28.v20190418"
  - ">= 9.3.0.M0 < 9.3.27.v20190418"
  - ">= 9.4.0.M0 < 9.4.17.v20190418"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2019-10247
  cwe:
  - CWE-213
  disclosed_date: 2019-04-22
  created_date: 2019-04-22
  last_modified_date: 2019-04-22
  credit:
  - Unknown
  references:
  - https://bugs.eclipse.org/bugs/show_bug.cgi?id=546577
  - https://github.com/eclipse/jetty.project/issues/3555
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGECLIPSEJETTY-174480
- id: snykio:maven:org.eclipse.jetty:jetty-util:31116
  title: Cryptographic Issues
  description: |
    [`org.eclipse.jetty:jetty-util`][1] Jetty 8.1.0.RC2 and earlier computes
    hash values for form parameters without restricting the ability to
    trigger hash collisions predictably, which allows remote attackers to
    cause a denial of service (CPU consumption) by sending many crafted
    parameters.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22jetty-util%22
  affected_package: org.eclipse.jetty:jetty-util
  vulnerable_versions:
  - "<= 8.1.0.RC2"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2011-4461
  cwe:
  - CWE-310
  disclosed_date: 2015-05-13
  created_date: 2015-05-13
  last_modified_date: 2015-05-13
  credit:
  - Unknown
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2011-4461
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGECLIPSEJETTY-31116
- id: snykio:maven:org.eclipse.jetty:jetty-util:31117
  title: Information Exposure
  description: |
    [`org.eclipse.jetty:jetty-util`][1] Affected versions of the package are
    vulnerable to Information Exposure. The path normalization mechanism in
    PathResource class in Eclipse Jetty 9.3.x before 9.3.9 on Windows allows
    remote attackers to bypass protected resource restrictions and other
    security constraints via a URL with certain escaped characters, related
    to backslashes.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22jetty-util%22
  affected_package: org.eclipse.jetty:jetty-util
  vulnerable_versions:
  - ">= 9.3.0.M0 < 9.3.9.v20160517"
  severity: high
  package_manager: maven
  cve:
  - CVE-2016-4800
  cwe:
  - CWE-200
  disclosed_date: 2016-05-31
  created_date: 2016-05-31
  last_modified_date: 2016-05-31
  credit:
  - Simon Zuckerbraun
  references:
  - http://www.ocert.org/advisories/ocert-2016-001.html
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGECLIPSEJETTY-31117
- id: snykio:maven:org.eclipse.jetty:jetty-util:32151
  title: Timing Attack
  description: |
    [org.eclipse.jetty:jetty-util][1] is a lightweight highly scalable java
    based web server and servlet engine.

    Affected versions of this package are vulnerable to Timing Attacks. A
    flaw in the `util/security/Password.java` class makes it easier for
    remote attackers to obtain access by observing elapsed times before
    rejection of incorrect passwords.



    [1]: https://github.com/eclipse/jetty.project
  affected_package: org.eclipse.jetty:jetty-util
  vulnerable_versions:
  - "< 9.2.22.v20170606"
  - ">= 9.3.0.M0 < 9.3.20.v20170531"
  - ">= 9.4.0.M0 < 9.4.6.v20170531"
  severity: high
  package_manager: maven
  cve:
  - CVE-2017-9735
  cwe:
  - CWE-200
  disclosed_date: 2017-06-16
  created_date: 2018-04-03
  last_modified_date: 2018-04-03
  credit:
  - Unknown
  references:
  - https://github.com/eclipse/jetty.project/issues/1556
  - https://nvd.nist.gov/vuln/detail/CVE-2017-9735
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGECLIPSEJETTY-32151
- id: snykio:maven:org.eclipse.jetty:jetty-util:461008
  title: Information Exposure
  description: |
    [org.eclipse.jetty:jetty-util][1] is a Web Container &amp; Clients -
    supports HTTP/2, HTTP/1.1, HTTP/1.0, websocket, servlets, and more.

    Affected versions of this package are vulnerable to Information
    Exposure. When an intentionally bad query arrives that doesn\'t match a
    dynamic url-pattern, and is eventually handled by the DefaultServlet\'s
    static file serving, the bad characters can trigger a
    `java.nio.file.InvalidPathException` which includes the full path to the
    base resource directory that the `DefaultServlet and/or` webapp is
    using. If this `InvalidPathException` is then handled by the default
    Error Handler, the `InvalidPathException` message is included in the
    error response, revealing the full server path to the requesting system.



    [1]: https://www.eclipse.org/jetty
  affected_package: org.eclipse.jetty:jetty-util
  vulnerable_versions:
  - ">= 9.3.0.RC0 < 9.3.24.v20180605"
  - ">= 9.4.0.M0 < 9.4.11.v20180605"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2018-12536
  cwe:
  - CWE-200
  disclosed_date: 2018-06-07
  created_date: 2018-06-28
  last_modified_date: 2018-06-28
  credit:
  - Unknown
  references:
  - https://bugs.eclipse.org/bugs/show_bug.cgi?id=535670
  - https://github.com/eclipse/jetty.project/commit/53e8bc2a636707e896fd106fbee3596823c2cdc
  - https://github.com/eclipse/jetty.project/commit/a51920d650d924cc2cea011995624b394437c6e
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGECLIPSEJETTY-461008
