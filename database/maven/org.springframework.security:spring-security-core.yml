---
- id: ossindex:maven:org.springframework.security:spring-security-core:8402289545
  title: "[CVE-2016-9879] An issue was discovered in Pivotal Spring Security before
    3.2.10, 4.1.x before 4..."
  description: An issue was discovered in Pivotal Spring Security before 3.2.10, 4.1.x
    before 4.1.4, and 4.2.x before 4.2.1. Spring Security does not consider URL path
    parameters when processing security constraints. By adding a URL path parameter
    with an encoded "/" to a request, an attacker may be able to bypass a security
    constraint. The root cause of this issue is a lack of clarity regarding the handling
    of path parameters in the Servlet Specification. Some Servlet containers include
    path parameters in the value returned for getPathInfo() and some do not. Spring
    Security uses the value returned by getPathInfo() as part of the process of mapping
    requests to security constraints. The unexpected presence of path parameters can
    cause a constraint to be bypassed. Users of Apache Tomcat (all current versions)
    are not affected by this vulnerability since Tomcat follows the guidance previously
    provided by the Servlet Expert group and strips path parameters from the value
    returned by getContextPath(), getServletPath(), and getPathInfo(). Users of other
    Servlet containers based on Apache Tomcat may or may not be affected depending
    on whether or not the handling of path parameters has been modified. Users of
    IBM WebSphere Application Server 8.5.x are known to be affected. Users of other
    containers that implement the Servlet specification may be affected.
  affected_package: org.springframework.security:spring-security-core
  vulnerable_versions:
  - 3.2.0
  - 3.2.1
  - 3.2.2
  - 3.2.3
  - 3.2.4
  - 3.2.5
  - 3.2.6
  - 3.2.7
  - 3.2.8
  - 3.2.9
  - 4.1.0
  - 4.1.1
  - 4.1.2
  - 4.1.3
  - 4.2.0
  package_manager: maven
  cve:
  - CVE-2016-9879
  disclosed_date: 2017-01-06
  created_date: 2017-01-06
  last_modified_date: 2017-06-02
  credit:
  - OSSIndex
  references:
  - http://www.securityfocus.com/bid/95142
  - https://access.redhat.com/errata/RHSA-2017:1832
  - https://pivotal.io/security/cve-2016-9879
  source_url: https://ossindex.net/resource/package/7015205374/vulnerabilities
- id: ossindex:maven:org.springframework.security:spring-security-core:8402382258
  title: Cross Site Scripting in sample apps
  description: There is an exploitable XSS in some provided sample applications.
  affected_package: org.springframework.security:spring-security-core
  vulnerable_versions:
  - "<1.0.4"
  package_manager: maven
  disclosed_date: 2017-01-30
  created_date: 2017-01-30
  last_modified_date: 2017-02-02
  credit:
  - OSSIndex
  references:
  - https://cwe.mitre.org/data/definitions/79.html
  - https://github.com/SpringSource/spring-security/issues/709
  source_url: https://ossindex.net/resource/package/7015205374/vulnerabilities
- id: ossindex:maven:org.springframework.security:spring-security-core:8402382259
  title: "[Unconfirmed] Possible Cross-site request forgery (CSRF) in SwitchUserFilter"
  description: "> It seems the `SwitchUserFilter` responds to all HTTP methods, making
    it vulnerable to CSRF attacks. \n> \n> -- [github.com](https://github.com/spring-projects/spring-security/issues/4183)"
  affected_package: org.springframework.security:spring-security-core
  vulnerable_versions:
  - ">=3.2"
  package_manager: maven
  disclosed_date: 2017-01-30
  created_date: 2017-01-30
  last_modified_date: 2017-02-02
  credit:
  - OSSIndex
  references:
  - https://github.com/spring-projects/spring-security/issues/4183
  source_url: https://ossindex.net/resource/package/7015205374/vulnerabilities
- id: ossindex:maven:org.springframework.security:spring-security-core:8402382261
  title: BREACH attack possible in CSRF tokens
  description: "> The CSRF tokens generated by Spring are vulnerable to a BREACH attack.\n>
    \n> ...\n> \n> This only occurs when you turn on CSRF protection in Spring and
    also have HTTP compression enabled somewhere in your web server stack.\n> \n>
    -- [github.com](https://github.com/spring-projects/spring-security/issues/4001)"
  affected_package: org.springframework.security:spring-security-core
  vulnerable_versions:
  - "<5.0.0"
  package_manager: maven
  disclosed_date: 2017-01-30
  created_date: 2017-01-30
  last_modified_date: 2017-02-02
  credit:
  - OSSIndex
  references:
  - http://breachattack.com
  - https://github.com/spring-projects/spring-security/issues/4001
  - https://github.com/spring-projects/spring-security/pull/4042
  source_url: https://ossindex.net/resource/package/7015205374/vulnerabilities
- id: ossindex:maven:org.springframework.security:spring-security-core:8402398000
  title: "[CVE-2012-5055] DaoAuthenticationProvider can reveal which usernames are
    valid"
  description: "> Spring Security's DaoAuthenticationProvider authenticates users
    by utilizing the PasswordEncoder interface to compare the submitted password with
    the actual password. If a user is not found, the comparison is skipped which,
    depending on the PasswordEncoder implementation, can result in a significant difference
    in the amount of time required to attempt to authenticate an actual user versus
    a user that does not exist. This opens up the possibility of a side channel attack
    that would enable a malicious user to determine if a username is valid.\n> \n>
    -- [jira.spring.io](https://jira.spring.io/browse/SEC-2056)"
  affected_package: org.springframework.security:spring-security-core
  vulnerable_versions:
  - ">=2.0.0 <2.0.8"
  - ">=3.0.0.RELEASE <3.0.8"
  - ">=3.1.0.RELEASE <3.1.3"
  package_manager: maven
  disclosed_date: 2017-02-12
  created_date: 2017-02-12
  last_modified_date: 2017-04-17
  credit:
  - OSSIndex
  references:
  - https://github.com/spring-projects/spring-security/issues/2280
  - https://github.com/victims/victims-cve-db/blob/master/database/java/2012/5055.yaml
  - https://jira.spring.io/browse/SEC-2056
  source_url: https://ossindex.net/resource/package/7015205374/vulnerabilities
- id: ossindex:maven:org.springframework.security:spring-security-core:8404580677
  title: "[CVE-2014-0097]  Improper Authentication"
  description: The ActiveDirectoryLdapAuthenticator in Spring Security 3.2.0 to 3.2.1
    and 3.1.0 to 3.1.5 does not check the password length. If the directory allows
    anonymous binds then it may incorrectly authenticate a user who supplies an empty
    password.
  affected_package: org.springframework.security:spring-security-core
  vulnerable_versions:
  - 3.1.0
  - 3.1.1
  - 3.1.2
  - 3.1.3
  - 3.1.4
  - 3.1.5
  - 3.2.0
  - 3.2.1
  package_manager: maven
  cve:
  - CVE-2014-0097
  disclosed_date: 2017-05-25
  created_date: 2017-05-25
  last_modified_date: 2017-06-07
  credit:
  - OSSIndex
  references:
  - https://pivotal.io/security/cve-2014-0097
  source_url: https://ossindex.net/resource/package/7015205374/vulnerabilities
- id: ossindex:maven:org.springframework.security:spring-security-core:8404580679
  title: "[CVE-2014-3527]  Improper Authentication"
  description: When using the CAS Proxy ticket authentication from Spring Security
    3.1 to 3.2.4 a malicious CAS Service could trick another CAS Service into authenticating
    a proxy ticket that was not associated. This is due to the fact that the proxy
    ticket authentication uses the information from the HttpServletRequest which is
    populated based upon untrusted information within the HTTP request. This means
    if there are access control restrictions on which CAS services can authenticate
    to one another, those restrictions can be bypassed. If users are not using CAS
    Proxy tickets and not basing access control decisions based upon the CAS Service,
    then there is no impact to users.
  affected_package: org.springframework.security:spring-security-core
  vulnerable_versions:
  - 3.1.0
  - 3.1.1
  - 3.1.2
  - 3.1.3
  - 3.1.4
  - 3.2.0
  - 3.2.1
  - 3.2.2
  - 3.2.3
  - 3.2.4
  package_manager: maven
  cve:
  - CVE-2014-3527
  disclosed_date: 2017-05-25
  created_date: 2017-05-25
  last_modified_date: 2017-06-08
  credit:
  - OSSIndex
  references:
  - https://pivotal.io/security/cve-2014-3527
  source_url: https://ossindex.net/resource/package/7015205374/vulnerabilities
- id: ossindex:maven:org.springframework.security:spring-security-core:8404580692
  title: "[CVE-2016-5007]  Permissions, Privileges, and Access Controls"
  description: Both Spring Security 3.2.x, 4.0.x, 4.1.0 and the Spring Framework 3.2.x,
    4.0.x, 4.1.x, 4.2.x rely on URL pattern mappings for authorization and for mapping
    requests to controllers respectively. Differences in the strictness of the pattern
    matching mechanisms, for example with regards to space trimming in path segments,
    can lead Spring Security to not recognize certain paths as not protected that
    are in fact mapped to Spring MVC controllers that should be protected. The problem
    is compounded by the fact that the Spring Framework provides richer features with
    regards to pattern matching as well as by the fact that pattern matching in each
    Spring Security and the Spring Framework can easily be customized creating additional
    differences.
  affected_package: org.springframework.security:spring-security-core
  vulnerable_versions:
  - 3.2.0
  - 3.2.1
  - 3.2.10
  - 3.2.2
  - 3.2.3
  - 3.2.4
  - 3.2.5
  - 3.2.6
  - 3.2.7
  - 3.2.8
  - 3.2.9
  - 4.0.0
  - 4.0.1
  - 4.0.2
  - 4.0.3
  - 4.0.4
  - 4.1.0
  package_manager: maven
  cve:
  - CVE-2016-5007
  disclosed_date: 2017-05-25
  created_date: 2017-05-25
  last_modified_date: 2017-06-13
  credit:
  - OSSIndex
  references:
  - http://www.securityfocus.com/bid/91687
  - https://pivotal.io/security/cve-2016-5007
  source_url: https://ossindex.net/resource/package/7015205374/vulnerabilities
- id: snykio:maven:org.springframework.security:spring-security-core:174111
  title: Insecure Randomness
  description: |
    [org.springframework.security:spring-security-core][1] is a package that
    provides security services for the Spring IO Platform.

    Affected versions of this package are vulnerable to Insecure Randomness
    due to the usage of `SecureRandomFactoryBean#setSeed` function to
    configure a `SecureRandom` instance. In order for exploitation, an
    attacker will need to obtain the content generated from an
    application\'s seed value.



    [1]: http://spring.io/spring-security
  affected_package: org.springframework.security:spring-security-core
  vulnerable_versions:
  - ">= 4.2.0.RELEASE < 4.2.12.RELEASE"
  - ">= 5.0.0.RELEASE < 5.0.12.RELEASE"
  - ">= 5.1.0.RELEASE < 5.1.5.RELEASE"
  severity: low
  package_manager: maven
  cve:
  - CVE-2019-3795
  cwe:
  - CWE-330
  disclosed_date: 2019-04-02
  created_date: 2019-04-05
  last_modified_date: 2019-04-05
  credit:
  - Thijs Alkemade
  references:
  - https://bugzilla.redhat.com/show_bug.cgi?id=1696616
  - https://pivotal.io/security/cve-2019-3795
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORKSECURITY-174111
- id: snykio:maven:org.springframework.security:spring-security-core:30174
  title: Information Exposure
  description: |
    [org.springframework.security:spring-security-core][1] is a package that
    provides security services for the Spring IO Platform.

    Affected versions of this package are vulnerable to Information
    Exposure. `DaoAuthenticationProvider` in VMware SpringSource Spring
    Security does not check the password if the user is not found, which
    makes the response delay shorter and might allow remote attackers to
    enumerate valid usernames via a series of login requests.



    [1]: http://spring.io/spring-security
  affected_package: org.springframework.security:spring-security-core
  vulnerable_versions:
  - "< 2.0.8.RELEASE"
  - ">= 3.0.0.RELEASE < 3.0.8.RELEASE"
  - ">= 3.1.0.RELEASE < 3.1.3.RELEASE"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2012-5055
  cwe:
  - CWE-200
  disclosed_date: 2012-12-05
  created_date: 2016-12-25
  last_modified_date: 2016-12-25
  credit:
  - Nicholas Goodwin
  references:
  - https://github.com/spring-projects/spring-security/commit/c076f0f2e190c73a17379d05935c2c81657adee9
  - https://github.com/spring-projects/spring-security/issues/2280
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORKSECURITY-30174
- id: snykio:maven:org.springframework.security:spring-security-core:30175
  title: Authentication Bypass
  description: |
    [org.springframework.security:spring-security-core][1] package that
    provides security services for the Spring IO Platform.

    Affected versions of this package are vulnerable to Authentication
    Bypass. The ActiveDirectoryLdapAuthenticator does not check the password
    length. If the directory allows anonymous binds then it may incorrectly
    authenticate a user who supplies an empty password.



    [1]: http://spring.io/spring-security
  affected_package: org.springframework.security:spring-security-core
  vulnerable_versions:
  - ">= 3.1.0.RELEASE < 3.1.6.RELEASE"
  - ">= 3.2.0.RELEASE < 3.2.2.RELEASE"
  severity: high
  package_manager: maven
  cve:
  - CVE-2014-0097
  cwe:
  - CWE-592
  disclosed_date: 2016-12-25
  created_date: 2016-12-25
  last_modified_date: 2016-12-25
  credit:
  - Spring Development team
  references:
  - http://www.gopivotal.com/security/cve-2014-0097
  - https://bugzilla.redhat.com/CVE-2014-0097
  - https://github.com/spring-projects/spring-security/commit/7dbb8e777ece8675f3333a1ef1cb4d6b9be80395
  - https://github.com/spring-projects/spring-security/commit/88559882e967085c47a7e1dcbc4dc32c2c796868
  - https://github.com/spring-projects/spring-security/commit/a7005bd74241ac8e2e7b38ae31bc4b0f641ef973
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORKSECURITY-30175
- id: snykio:maven:org.springframework.security:spring-security-core:31337
  title: Access Restriction Bypass
  description: |
    [org.springframework.security:spring-security-core][1] is a package that
    provides security services for the Spring IO Platform.

    Affected versions of this package are vulnerable to Access Restriction
    Bypass. Spring Security allows remote attackers to bypass security
    constraints via a path parameter.



    [1]: http://spring.io/spring-security
  affected_package: org.springframework.security:spring-security-core
  vulnerable_versions:
  - ">= 2.0.0.RELEASE < 2.0.6.RELEASE"
  - ">= 3.0.0..RELEASE < 3.0.4.RELEASE"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2010-3700
  cwe:
  - CWE-264
  disclosed_date: 2010-10-29
  created_date: 2015-06-10
  last_modified_date: 2015-06-10
  credit:
  - Unknown
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2010-3700
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORKSECURITY-31337
- id: snykio:maven:org.springframework.security:spring-security-core:31338
  title: Improper Authentication
  description: |
    [`org.springframework.security:spring-security-core`][1] Race condition
    in the RunAsManager mechanism in VMware SpringSource Spring Security
    before 2.0.7 and 3.0.x before 3.0.6 stores the Authentication object in
    the shared security context, which allows attackers to gain privileges
    via a crafted thread.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22spring-security-core%22
  affected_package: org.springframework.security:spring-security-core
  vulnerable_versions:
  - "< 2.0.7.RELEASE"
  - ">= 3.0.0.RELEASE < 3.0.6.RELEASE"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2011-2731
  cwe:
  - CWE-362
  disclosed_date: 2012-12-05
  created_date: 2014-09-08
  last_modified_date: 2014-09-08
  credit:
  - Unknown
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2011-2731
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORKSECURITY-31338
- id: snykio:maven:org.springframework.security:spring-security-core:31339
  title: Arbitrary Code Execution
  description: |
    [org.springframework.security:spring-security-core][1] is a package that
    provides security services for the Spring IO Platform.

    Affected versions of this package are vulnerable to Arbitrary Code
    Execution. CRLF injection vulnerability in the logout functionality in
    Spring Security allows remote attackers to inject arbitrary HTTP headers
    and conduct HTTP response splitting attacks via the
    spring-security-redirect parameter.



    [1]: http://spring.io/spring-security
  affected_package: org.springframework.security:spring-security-core
  vulnerable_versions:
  - ">= 2.0.0 < 2.0.7.RELEASE"
  - ">= 3.0.0.RELEASE < 3.0.6.RELEASE"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2011-2732
  cwe:
  - CWE-94
  disclosed_date: 2012-12-05
  created_date: 2014-09-08
  last_modified_date: 2014-09-08
  credit:
  - David Mas
  references:
  - https://jira.spring.io/browse/SEC-1790
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2011-2732
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORKSECURITY-31339
- id: snykio:maven:org.springframework.security:spring-security-core:31340
  title: Access Restriction Bypass
  description: |
    [org.springframework.security:spring-security-core][1] is a package that
    provides security services for the Spring IO Platform.

    Affected versions of this package are vulnerable to Access Restriction
    Bypass. Remote attackers can bypass intended security restrictions and
    execute untrusted code by (1) serializing a java.lang.Proxy instance and
    using InvocationHandler, or (2) accessing internal AOP interfaces, as
    demonstrated using deserialization of a DefaultListableBeanFactory
    instance to execute arbitrary commands via the java.lang.Runtime class.



    [1]: http://spring.io/spring-security
  affected_package: org.springframework.security:spring-security-core
  vulnerable_versions:
  - ">= 2.0.0.RELEASE < 2.0.7.RELEASE"
  - ">= 3.0.0.RELEASE < 3.0.6.RELEASE"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2011-2894
  cwe:
  - CWE-264
  disclosed_date: 2011-10-04
  created_date: 2014-09-08
  last_modified_date: 2014-09-08
  credit:
  - Wouter Coekaerts
  references:
  - https://seclists.org/fulldisclosure/2011/Sep/80
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2011-2894
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORKSECURITY-31340
- id: snykio:maven:org.springframework.security:spring-security-core:31509
  title: Deserialization of Untrusted Data
  description: |
    [org.springframework.security:spring-security-core][1] is a package that
    provides security services for the Spring IO Platform.

    Affected versions of this package are vulnerable to Deserialization of
    Untrusted Data. `spring-security-core` configures `Jackson` with the
    global `default typing` enabled. Although `Jackson` blacklisted known
    `deserialization gadgets`, it is still possible for a malicious user to
    execute arbitrary code on the following conditions:

    1.  Spring Security’s Jackson support is being leveraged by invoking
        SecurityJackson2Modules.getModules(ClassLoader) or
        SecurityJackson2Modules.enableDefaultTyping(ObjectMapper)
    2.  Jackson is used to deserialize data that is not trusted. Spring
        Security does not perform deserialization using Jackson, so this is
        an explicit choice of the user.
    3.  There is an unknown (Jackson is not blacklisting it already)
        “deserialization gadget” that allows code execution present on the
        classpath

    This is related to [SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507][2].



    [1]: http://spring.io/spring-security
    [2]: https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507
    \nSerialization is a process of converting an object into a sequence of
    bytes which can be persisted to a disk or database or can be sent
    through streams. The reverse process of creating object from sequence of
    bytes is called deserialization. Serialization is commonly used for
    communication (sharing objects between multiple hosts) and persistence
    (store the object state in a file or a database). It is an integral part
    of popular protocols like *Remote Method Invocation (RMI)*, *Java
    Management Extension (JMX)*, *Java Messaging System (JMS)*, *Action
    Message Format (AMF)*, *Java Server Faces (JSF) ViewState*, etc.

    *Deserialization of untrusted data* ([CWE-502][1]), is when the
    application deserializes untrusted data without sufficiently verifying
    that the resulting data will be valid, letting the attacker to control
    the state or the flow of the execution.

    Java deserialization issues have been known for years. However, interest
    in the issue intensified greatly in 2015, when classes that could be
    abused to achieve remote code execution were found in a [popular library
    (Apache Commons Collection)][2]. These classes were used in zero-days
    affecting IBM WebSphere, Oracle WebLogic and many other products.

    An attacker just needs to identify a piece of software that has both a
    vulnerable class on its path, and performs deserialization on untrusted
    data. Then all they need to do is send the payload into the
    deserializer, getting the command executed.

    > Developers put too much trust in Java Object Serialization. Some even
    > de-serialize objects pre-authentication. When deserializing an Object
    > in Java you typically cast it to an expected type, and therefore
    > Java\'s strict type system will ensure you only get valid object
    > trees. Unfortunately, by the time the type checking happens, platform
    > code has already created and executed significant logic. So, before
    > the final type is checked a lot of code is executed from the
    > readObject() methods of various objects, all of which is out of the
    > developer\'s control. By combining the readObject() methods of various
    > classes which are available on the classpath of the vulnerable
    > application an attacker can execute functions (including calling
    > Runtime.exec() to execute local OS commands).

    * Apache Blog

    The vulnerability, also know as *Mad Gadget*

    > Mad Gadget is one of the most pernicious vulnerabilities we’ve seen.
    > By merely existing on the Java classpath, seven “gadget” classes in
    > Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0)
    > make object deserialization for the entire JVM process Turing complete
    > with an exec function. Since many business applications use object
    > deserialization to send messages across the network, it would be like
    > hiring a bank teller who was trained to hand over all the money in the
    > vault if asked to do so politely, and then entrusting that teller with
    > the key. The only thing that would keep a bank safe in such a
    > circumstance is that most people wouldn’t consider asking such a
    > question.

    * Google



    [1]: https://cwe.mitre.org/data/definitions/502.html
    [2]: https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078
  affected_package: org.springframework.security:spring-security-core
  vulnerable_versions:
  - ">= 4.2.0.RELEASE < 4.2.3.RELEASE"
  severity: high
  package_manager: maven
  cve:
  - CVE-2017-4995
  cwe:
  - CWE-502
  disclosed_date: 2017-06-08
  created_date: 2017-09-20
  last_modified_date: 2017-09-20
  credit:
  - Unknown
  references:
  - https://github.com/spring-projects/spring-security/commit/5dee8534cd1b92952d10cc56335b5d5856f48f3b
  - https://github.com/spring-projects/spring-security/commit/947d11f433b78294942cb5ea56e8aa5c3a0ca439
  - https://github.com/spring-projects/spring-security/issues/4370
  - https://pivotal.io/security/cve-2017-4995
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORKSECURITY-31509
- id: snykio:maven:org.springframework.security:spring-security-core:31612
  title: Security Bypass
  description: |+
    It was found that Spring Security does not consider URL path parameters
    when processing security constraints. By adding a URL path parameter
    with an encoded / to a request an attacker may be able to bypass a
    security constraint.

  affected_package: org.springframework.security:spring-security-core
  vulnerable_versions:
  - ">= 3.2.0.RELEASE < 3.2.10.RELEASE"
  - ">= 4.0.0.RELEASE < 4.1.4.RELEASE"
  - ">= 4.2.0.RELEASE < 4.2.1.RELEASE"
  severity: high
  package_manager: maven
  cve:
  - CVE-2016-9879
  cwe:
  - CWE-417
  disclosed_date: 2016-12-28
  created_date: 2016-12-28
  last_modified_date: 2016-12-28
  credit:
  - Shumpei Asahara
  - Yuji Ito
  references:
  - https://github.com/spring-projects/spring-security/commit/666e356ebc479194ba51e43bb99fc42f849b6175
  - https://github.com/spring-projects/spring-security/issues/4169
  - https://pivotal.io/security/cve-2016-9879
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-9879
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORKSECURITY-31612
- id: snykio:maven:org.springframework.security:spring-security-core:32123
  title: Access Restriction Bypass
  description: |
    [org.springframework.security:spring-security-core][1] provides a
    comprehensive programming and configuration model for modern Java-based
    enterprise applications - on any kind of deployment platform.

    Affected versions of this package are vulnerable to Access Restriction
    Bypass. It does not consider URL path parameters when processing
    security constraints. By adding a URL path parameter with special
    encodings, an attacker may be able to bypass a security constraint.



    [1]: http://projects.spring.io/spring-framework/
  affected_package: org.springframework.security:spring-security-core
  vulnerable_versions:
  - ">= 4.1.0 < 4.1.5"
  - ">= 4.2.0 < 4.2.4"
  - ">= 5.0 < 5.0.3"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2018-1199
  cwe:
  - CWE-264
  disclosed_date: 2018-03-18
  created_date: 2018-03-18
  last_modified_date: 2018-03-18
  credit:
  - Macchinetta Framework Development Team
  references:
  - https://pivotal.io/security/cve-2018-1199
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORKSECURITY-32123
- id: snykio:maven:org.springframework.security:spring-security-core:450242
  title: Improper Authentication
  description: |
    [org.springframework.security:spring-security-core][1] is a package that
    provides security services for the Spring IO Platform.

    Affected versions of this package are vulnerable to Improper
    Authentication. The affected versions support plain text passwords using
    `PlaintextPasswordEncoder`. If an application using an affected version
    of Spring Security is leveraging `PlaintextPasswordEncoder` and a user
    has a null encoded password, a malicious user (or attacker) can
    authenticate using a password of `null`.



    [1]: http://spring.io/spring-security
  affected_package: org.springframework.security:spring-security-core
  vulnerable_versions:
  - ">= 4.2.0.RELEASE < 4.2.13.RELEASE"
  severity: high
  package_manager: maven
  cve:
  - CVE-2019-11272
  cwe:
  - CWE-287
  disclosed_date: 2019-06-19
  created_date: 2019-06-21
  last_modified_date: 2019-06-21
  credit:
  - Daniel Neagaru
  - Tim Buthe
  references:
  - https://github.com/spring-projects/spring-security/commit/b2d4fec3617c497c5a8eb9c7e5270e0c7db293ee
  - https://pivotal.io/security/cve-2019-11272
  - https://spring.io/blog/2019/06/19/cve-2019-11272-spring-security-4-2-13-released
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORKSECURITY-450242
- id: snykio:maven:org.springframework.security:spring-security-core:570204
  title: Cryptographic Weakness
  description: |
    [org.springframework.security:spring-security-core][1] is a package that
    provides security services for the Spring IO Platform.

    Affected versions of this package are vulnerable to Cryptographic
    Weakness. Spring Security was found to be a fixed null initialization
    vector with CBC Mode in the implementation of the queryable text
    encryptor. A malicious user with access to the data that has been
    encrypted using such an encryptor may be able to derive the unencrypted
    values using a dictionary attack.



    [1]: http://spring.io/spring-security
  affected_package: org.springframework.security:spring-security-core
  vulnerable_versions:
  - ">= 4.2.0.RELEASE < 4.2.16.RELEASE"
  - ">= 5.0.0.RELEASE < 5.0.16.RELEASE"
  - ">= 5.1.0.RELEASE < 5.1.10.RELEASE"
  - ">= 5.2.0.RELEASE < 5.2.4.RELEASE"
  - ">= 5.3.0.RELEASE < 5.3.2.RELEASE"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2020-5408
  cwe:
  - CWE-521
  disclosed_date: 2020-05-14
  created_date: 2020-05-22
  last_modified_date: 2020-05-22
  credit:
  - Unknown
  references:
  - https://github.com/spring-projects/spring-security/commit/d1909ec9c8844cfa6b63bab5c2591f14d714ef6b
  - https://github.com/spring-projects/spring-security/issues/8317
  - https://tanzu.vmware.com/security/cve-2020-5408
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORKSECURITY-570204
- id: victims:maven:org.springframework.security:spring-security-core:2012-5055
  title: Spring Security's DaoAuthenticationProvider can reveal if a username is valid
  affected_package: org.springframework.security:spring-security-core
  vulnerable_versions:
  - '2'
  - '3.0'
  - '3.1'
  - ">=2.0.0"
  - ">=3.0.0.RELEASE"
  - ">=3.1.0.RELEASE"
  patched_versions:
  - '2'
  - '3.0'
  - '3.1'
  - ">=2.0.8.RELEASE"
  - ">=3.0.8.RELEASE"
  - ">=3.1.3.RELEASE"
  severity: low
  package_manager: maven
  cve:
  - CVE-2012-5055
  cvss_v2_score: 2.6
  credit:
  - Victims CVE Database
  references:
  - http://support.springsource.com/security/cve-2012-5055
  source_url: https://github.com/victims/victims-cve-db/blob/master/database/java/2012/5055.yaml
- id: victims:maven:org.springframework.security:spring-security-core:2014-0097
  title: Empty passwords may bypass authentication
  affected_package: org.springframework.security:spring-security-core
  vulnerable_versions:
  - '3.1'
  - '3.2'
  - "<=3.1.5.RELEASE"
  - "<=3.2.1.RELEASE"
  patched_versions:
  - '3.1'
  - '3.2'
  - ">=3.1.6.RELEASE"
  - ">=3.2.2.RELEASE"
  severity: high
  package_manager: maven
  cve:
  - CVE-2014-0097
  cvss_v2_score: 7.5
  credit:
  - Victims CVE Database
  references:
  - http://www.gopivotal.com/security/cve-2014-0097
  - https://bugzilla.redhat.com/CVE-2014-0097
  source_url: https://github.com/victims/victims-cve-db/blob/master/database/java/2014/0097.yaml
- id: victims:maven:org.springframework.security:spring-security-core:2016-5007
  title: Spring Security / MVC Path Matching Inconsistency
  description: 'Both Spring Security and the Spring Framework rely on URL pattern
    mappings for authorization and for mapping requests to controllers respectively.

'
  affected_package: org.springframework.security:spring-security-core
  vulnerable_versions:
  - "<=4.1.0.RELEASE"
  patched_versions:
  - ">=4.1.1.RELEASE"
  severity: high
  package_manager: maven
  cve:
  - CVE-2016-5007
  credit:
  - Victims CVE Database
  references:
  - https://pivotal.io/security/cve-2016-5007
  source_url: https://github.com/victims/victims-cve-db/blob/master/database/java/2016/5007.yaml
- id: victims:maven:org.springframework.security:spring-security-core:2016-9879
  title: Encoded "/" in path variables
  description: 'Spring Security does not consider URL path parameters when processing
    security constraints. By adding a URL path parameter with an encoded "/" to a
    request, an attacker may be able to bypass a security constraint[refer to link
    for full details]

'
  affected_package: org.springframework.security:spring-security-core
  vulnerable_versions:
  - '4.1'
  - '4.2'
  - "<=3.2.9.RELEASE"
  - "<=4.1.3.RELEASE"
  - "<=4.2.0.RELEASE"
  patched_versions:
  - '3.2'
  - '4.1'
  - '4.2'
  - ">=3.2.10.RELEASE"
  - ">=4.1.4.RELEASE"
  - ">=4.2.1.RELEASE"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2016-9879
  cvss_v2_score: 5.0
  credit:
  - Victims CVE Database
  references:
  - https://pivotal.io/security/cve-2016-9879
  source_url: https://github.com/victims/victims-cve-db/blob/master/database/java/2016/9879.yaml
- id: victims:maven:org.springframework.security:spring-security-core:2017-4995
  title: Jackson Configuration Allows Code Execution with Unknown Serialization Gadgets
  description: 'When configured to enable default typing, Jackson contained a deserialization
    vulnerability that could lead to arbitrary code execution. Jackson fixed this
    vulnerability by blacklisting known "deserialization gadgets".

'
  affected_package: org.springframework.security:spring-security-core
  vulnerable_versions:
  - '4.2'
  - "<=4.2.2"
  - "==5.0.0.M1"
  patched_versions:
  - '4.2'
  - "==5.0.0.M2"
  - ">=4.2.3"
  severity: high
  package_manager: maven
  cve:
  - CVE-2017-4995
  credit:
  - Victims CVE Database
  references:
  - http://www.cve.mitre.org/cgi-bin/cvename.cgi?name=2017-4995
  - https://nvd.nist.gov/vuln/detail/CVE-2017-4995
  - https://pivotal.io/security/cve-2017-4995
  source_url: https://github.com/victims/victims-cve-db/blob/master/database/java/2017/4995.yaml
