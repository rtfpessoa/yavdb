---
- id: ossindex:maven:org.apache.hive:hive-service:359860
  title: "[CVE-2014-0228]  Improper Access Control"
  description: Apache Hive before 0.13.1, when in SQL standards based authorization
    mode, does not properly check the file permissions for (1) import and (2) export
    statements, which allows remote authenticated users to obtain sensitive information
    via a crafted URI.
  affected_package: org.apache.hive:hive-service
  vulnerable_versions:
  - 0.13.0
  package_manager: maven
  cve:
  - CVE-2014-0228
  disclosed_date: 2014-11-16
  created_date: 2014-11-16
  last_modified_date: 2017-06-02
  credit:
  - OSSIndex
  references:
  - http://mail-archives.apache.org/mod_mbox/hive-user/201406.mbox/%3CCABgNGzeN7E%209d=YV5yvnKA7wmSx1op_avtUjPcPtDaR6DLJM6g@mail.gmail.com%3E
  - http://mail-archives.apache.org/mod_mbox/hive-user/201406.mbox/%3CCABgNGzeN7E+9d=YV5yvnKA7wmSx1op_avtUjPcPtDaR6DLJM6g@mail.gmail.com%3E
  - http://packetstormsecurity.com/files/127091/Apache-Hive-0.13.0-Authorization-Failure.html
  - http://www.securityfocus.com/archive/1/archive/1/532418/100/0/threaded
  source_url: https://ossindex.net/resource/package/7015478042/vulnerabilities
- id: ossindex:maven:org.apache.hive:hive-service:8396831054
  title: "[CVE-2015-1772]  Improper Authentication"
  description: The LDAP implementation in HiveServer2 in Apache Hive before 1.0.1
    and 1.1.x before 1.1.1, as used in IBM InfoSphere BigInsights 3.0, 3.0.0.1, and
    3.0.0.2 and other products, mishandles simple unauthenticated and anonymous bind
    configurations, which allows remote attackers to bypass authentication via a crafted
    LDAP request.
  affected_package: org.apache.hive:hive-service
  vulnerable_versions:
  - 1.0.0
  - 1.1.0
  package_manager: maven
  cve:
  - CVE-2015-1772
  disclosed_date: 2015-12-21
  created_date: 2015-12-21
  last_modified_date: 2017-04-19
  credit:
  - OSSIndex
  references:
  - http://mail-archives.apache.org/mod_mbox/www-announce/201505.mbox/%3CCAOpgucy52yzNN1FaRcxwhZmx8ZtNRjmK6V0Bxk4svAD-R1q70Q@mail.gmail.com%3E
  - http://www-01.ibm.com/support/docview.wss?uid=swg21969546
  - http://www.securitytracker.com/id/1034365
  - https://www.cloudera.com/documentation/other/security-bulletins/topics/csb_topic_1.html
  source_url: https://ossindex.net/resource/package/7015478042/vulnerabilities
- id: ossindex:maven:org.apache.hive:hive-service:8397163649
  title: "[CVE-2015-7521]  Improper Authentication"
  description: The authorization framework in Apache Hive 1.0.0, 1.0.1, 1.1.0, 1.1.1,
    1.2.0 and 1.2.1, on clusters protected by Ranger and SqlStdHiveAuthorization,
    allows attackers to bypass intended parent table access restrictions via unspecified
    partition-level operations.
  affected_package: org.apache.hive:hive-service
  vulnerable_versions:
  - 1.0.0
  - 1.0.1
  - 1.1.0
  - 1.2.0
  - 1.2.1
  package_manager: maven
  cve:
  - CVE-2015-7521
  disclosed_date: 2016-01-29
  created_date: 2016-01-29
  last_modified_date: 2017-04-19
  credit:
  - OSSIndex
  references:
  - http://mail-archives.apache.org/mod_mbox/hive-user/201601.mbox/%3C20160128205008.2154F185EB%40minotaur.apache.org%3E
  - http://packetstormsecurity.com/files/135836/Apache-Hive-Authorization-Bypass.html
  - http://www.openwall.com/lists/oss-security/2016/01/28/12
  - http://www.securityfocus.com/archive/1/archive/1/537549/100/0/threaded
  source_url: https://ossindex.net/resource/package/7015478042/vulnerabilities
- id: ossindex:maven:org.apache.hive:hive-service:8404585826
  title: "[CVE-2016-3083] Apache Hive (JDBC + HiveServer2) implements SSL for plain
    TCP and HTTP connectio..."
  description: Apache Hive (JDBC + HiveServer2) implements SSL for plain TCP and HTTP
    connections (it supports both transport modes). While validating the server's
    certificate during the connection setup, the client in Apache Hive before 1.2.2
    and 2.0.x before 2.0.1 doesn't seem to be verifying the common name attribute
    of the certificate. In this way, if a JDBC client sends an SSL request to server
    abc.com, and the server responds with a valid certificate (certified by CA) but
    issued to xyz.com, the client will accept that as a valid certificate and the
    SSL handshake will go through.
  affected_package: org.apache.hive:hive-service
  vulnerable_versions:
  - 0.13.0
  - 0.13.1
  - 0.14.0
  - 1.0.0
  - 1.0.1
  - 1.1.0
  - 1.1.1
  - 1.2.0
  - 1.2.1
  package_manager: maven
  cve:
  - CVE-2016-3083
  disclosed_date: 2017-05-30
  created_date: 2017-05-30
  last_modified_date: 2017-06-01
  credit:
  - OSSIndex
  references:
  - http://www.securityfocus.com/bid/98669
  - https://lists.apache.org/thread.html/0851bcf85635385f94cdaa008053802d92b4aab0a3075e30ed171192@%3Cdev.hive.apache.org%3E
  source_url: https://ossindex.net/resource/package/7015478042/vulnerabilities
- id: snykio:maven:org.apache.hive:hive-service:1018708
  title: Cross-site Scripting (XSS)
  description: |+
    [org.apache.hive:hive-service][1] is a package for reading, writing, and
    managing large datasets residing in distributed storage using SQL.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) via `loggerName`.



    [1]: https://hive.apache.org
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: org.apache.hive:hive-service
  vulnerable_versions:
  - ">= 0 < release-2.3.8-rc2"
  severity: medium
  package_manager: maven
  cwe:
  - CWE-79
  disclosed_date: 2020-10-15
  created_date: 2021-01-03
  last_modified_date: 2021-01-03
  credit:
  - Unknown
  references:
  - https://github.com/apache/hive/pull/1581
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHEHIVE-1018708
- id: snykio:maven:org.apache.hive:hive-service:30640
  title: Improper Authentication
  description: |
    [org.apache.hive:hive-service][1] is a package for reading, writing, and
    managing large datasets residing in distributed storage using SQL.

    Affected versions of this package are vulnerable to Improper
    Authentication. The LDAP implementation in HiveServer2 mishandles simple
    unauthenticated and anonymous bind configurations, which allows remote
    attackers to bypass authentication via a crafted LDAP request.



    [1]: https://hive.apache.org
  affected_package: org.apache.hive:hive-service
  vulnerable_versions:
  - ">= 0.11.0 < 1.0.1"
  - ">= 1.1.0 < 1.1.1"
  severity: high
  package_manager: maven
  cve:
  - CVE-2015-1772
  cwe:
  - CWE-287
  disclosed_date: 2015-05-22
  created_date: 2015-05-22
  last_modified_date: 2015-05-22
  credit:
  - Thomas Rega
  references:
  - https://github.com/apache/hive/commit/6929846a8120eaf094b914b4ca8af80b65f891c8
  - https://issues.apache.org/jira/browse/HIVE-9934
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHEHIVE-30640
- id: snykio:maven:org.apache.hive:hive-service:31513
  title: Access Restriction Bypass
  description: |
    Affected versions [`org.apache.hive:hive-service`][1] package are
    vulnerable to Access Restriction Bypass. Apache Hive (JDBC +
    HiveServer2) implements SSL for plain TCP and HTTP connections (it
    supports both transport modes). While validating the server\'s
    certificate during the connection setup, the client in Apache Hive
    before 1.2.2 and 2.0.x before 2.0.1 doesn\'t seem to be verifying the
    common name attribute of the certificate. In this way, if a JDBC client
    sends an SSL request to server abc.com, and the server responds with a
    valid certificate (certified by CA) but issued to xyz.com, the client
    will accept that as a valid certificate and the SSL handshake will go
    through.



    [1]: https://hive.apache.org
  affected_package: org.apache.hive:hive-service
  vulnerable_versions:
  - "< 1.2.2"
  - ">= 2.0.0 < 2.0.1"
  severity: high
  package_manager: maven
  cve:
  - CVE-2016-3083
  cwe:
  - CWE-284
  disclosed_date: 2017-05-23
  created_date: 2017-10-15
  last_modified_date: 2017-10-15
  credit:
  - Branden Crawford
  references:
  - http://www.openwall.com/lists/oss-security/2017/05/24/1
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHEHIVE-31513
