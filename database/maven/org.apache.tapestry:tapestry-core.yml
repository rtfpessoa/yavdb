---
- id: ossindex:maven:org.apache.tapestry:tapestry-core:7186884510
  title: "[CVE-2014-1972]  Resource Management Errors"
  description: Apache Tapestry before 5.3.6 relies on client-side object storage without
    checking whether a client has modified an object, which allows remote attackers
    to cause a denial of service (resource consumption) or execute arbitrary code
    via crafted serialized data.
  affected_package: org.apache.tapestry:tapestry-core
  vulnerable_versions:
  - 5.3.5
  package_manager: maven
  cve:
  - CVE-2014-1972
  disclosed_date: 2015-08-22
  created_date: 2015-08-22
  last_modified_date: 2017-04-19
  credit:
  - OSSIndex
  references:
  - http://jvn.jp/en/jp/JVN17611367/index.html
  - http://jvndb.jvn.jp/jvndb/JVNDB-2015-000118
  - https://issues.apache.org/jira/browse/TAP5-2008
  - https://tapestry.apache.org/release-notes-536.html
  source_url: https://ossindex.net/resource/package/7015343003/vulnerabilities
- id: snykio:maven:org.apache.tapestry:tapestry-core:1014655
  title: Arbitrary File Read
  description: |
    [org.apache.tapestry:tapestry-core][1] is a Tapestry Core package for
    Apache Tapestry.

    Affected versions of this package are vulnerable to Arbitrary File Read.
    By crafting specific URLs, an attacker can download files inside the
    WEB-INF folder of the WAR being run.



    [1]: https://mvnrepository.com/artifact/org.apache.tapestry/tapestry-core
  affected_package: org.apache.tapestry:tapestry-core
  vulnerable_versions:
  - ">= 5.4.0 < 5.6.0"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2020-13953
  cwe:
  - CWE-22
  disclosed_date: 2020-10-01
  created_date: 2020-10-01
  last_modified_date: 2020-10-01
  credit:
  - Unknown
  references:
  - https://lists.apache.org/thread.html/r50eb12e8a12074a9b7ed63cbab91d180d19cc23dc1da3ed5b6e1280f%40%3Cusers.tapestry.apache.org%3E
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHETAPESTRY-1014655
- id: snykio:maven:org.apache.tapestry:tapestry-core:30808
  title: Denial of Service (DoS)
  description: |+
    [`org.apache.tapestry:tapestry-core`][1] Apache Tapestry before 5.3.6
    relies on client-side object storage without checking whether a client
    has modified an object, which allows remote attackers to cause a denial
    of service (resource consumption) or execute arbitrary code via crafted
    serialized data.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22tapestry-core%22
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: org.apache.tapestry:tapestry-core
  vulnerable_versions:
  - "< 5.3.6"
  severity: high
  package_manager: maven
  cve:
  - CVE-2014-1972
  cwe:
  - CWE-399
  disclosed_date: 2015-08-22
  created_date: 2015-08-24
  last_modified_date: 2015-08-24
  credit:
  - Unknown
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-1972
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHETAPESTRY-30808
- id: snykio:maven:org.apache.tapestry:tapestry-core:467117
  title: Side-channel Attack
  description: |
    [org.apache.tapestry:tapestry-core][1] is a Tapestry Core package for
    Apache Tapestry.

    Affected versions of this package are vulnerable to Side-channel Attack.
    It is possible to conduct a side channel timing attack during the
    comparison of HMAC signatures by package due to the usage of
    `String.equals()` This could lead to remote code execution if an
    attacker is able to determine the correct signature for their payload.
    The comparison should be done with a constant time algorithm instead.



    [1]: https://mvnrepository.com/artifact/org.apache.tapestry/tapestry-core
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
  affected_package: org.apache.tapestry:tapestry-core
  vulnerable_versions:
  - ">= 5.4.0 < 5.4.5"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2019-10071
  cwe:
  - CWE-310
  disclosed_date: 2019-04-21
  created_date: 2019-09-16
  last_modified_date: 2019-09-16
  credit:
  - David Tomaschik
  references:
  - https://github.com/apache/tapestry-5/commit/cdcf49c0a2b36ffc7a004d54405bb4357870c4b2
  - https://lists.apache.org/thread.html/6e8f42c88da7be3c60aafe3f6a85eb00b4f8b444de26b38d36233a43@%3Cusers.tapestry.apache.org%3E
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHETAPESTRY-467117
- id: snykio:maven:org.apache.tapestry:tapestry-core:467173
  title: Deserialization of Untrusted Data
  description: |
    [org.apache.tapestry:tapestry-core][1] is a Tapestry Core package for
    Apache Tapestry.

    Affected versions of this package are vulnerable to Deserialization of
    Untrusted Data. An attacker could guess the path to a known file in the
    classpath and have it downloaded. If the file has a value of the
    `tapestry.hmac-passphrase` configuration symbol, is can be used to craft
    a Java deserialization attack. The vector would be the `t:formdata`
    parameter from the Form component.



    [1]: https://mvnrepository.com/artifact/org.apache.tapestry/tapestry-core
    \nSerialization is a process of converting an object into a sequence of
    bytes which can be persisted to a disk or database or can be sent
    through streams. The reverse process of creating object from sequence of
    bytes is called deserialization. Serialization is commonly used for
    communication (sharing objects between multiple hosts) and persistence
    (store the object state in a file or a database). It is an integral part
    of popular protocols like *Remote Method Invocation (RMI)*, *Java
    Management Extension (JMX)*, *Java Messaging System (JMS)*, *Action
    Message Format (AMF)*, *Java Server Faces (JSF) ViewState*, etc.

    *Deserialization of untrusted data* ([CWE-502][1]), is when the
    application deserializes untrusted data without sufficiently verifying
    that the resulting data will be valid, letting the attacker to control
    the state or the flow of the execution.

    Java deserialization issues have been known for years. However, interest
    in the issue intensified greatly in 2015, when classes that could be
    abused to achieve remote code execution were found in a [popular library
    (Apache Commons Collection)][2]. These classes were used in zero-days
    affecting IBM WebSphere, Oracle WebLogic and many other products.

    An attacker just needs to identify a piece of software that has both a
    vulnerable class on its path, and performs deserialization on untrusted
    data. Then all they need to do is send the payload into the
    deserializer, getting the command executed.

    > Developers put too much trust in Java Object Serialization. Some even
    > de-serialize objects pre-authentication. When deserializing an Object
    > in Java you typically cast it to an expected type, and therefore
    > Java\'s strict type system will ensure you only get valid object
    > trees. Unfortunately, by the time the type checking happens, platform
    > code has already created and executed significant logic. So, before
    > the final type is checked a lot of code is executed from the
    > readObject() methods of various objects, all of which is out of the
    > developer\'s control. By combining the readObject() methods of various
    > classes which are available on the classpath of the vulnerable
    > application an attacker can execute functions (including calling
    > Runtime.exec() to execute local OS commands).

    * Apache Blog



    [1]: https://cwe.mitre.org/data/definitions/502.html
    [2]: https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078
  affected_package: org.apache.tapestry:tapestry-core
  vulnerable_versions:
  - ">= 5.4.0 < 5.4.5"
  severity: high
  package_manager: maven
  cve:
  - CVE-2019-0195
  cwe:
  - CWE-502
  disclosed_date: 2019-09-13
  created_date: 2019-09-16
  last_modified_date: 2019-09-16
  credit:
  - Ricter Zheng
  references:
  - https://git-wip-us.apache.org/repos/asf?p=tapestry-5.git;a=commitdiff;h=d2d9247
  - https://issues.apache.org/jira/browse/TAP5-2601?src=confmacro
  - https://lists.apache.org/thread.html/5173c4eed06e2fca6fd5576ed723ff6bb1711738ec515cb51a04ab24@%3Cusers.tapestry.apache.org%3E
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHETAPESTRY-467173
