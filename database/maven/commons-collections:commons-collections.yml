---
- id: ossindex:maven:commons-collections:commons-collections:8396812951
  title: "[CVE-2015-6420]  Deserialization of Untrusted Data"
  description: Serialized-object interfaces in certain Cisco Collaboration and Social
    Media; Endpoint Clients and Client Software; Network Application, Service, and
    Acceleration; Network and Content Security Devices; Network Management and Provisioning;
    Routing and Switching - Enterprise and Service Provider; Unified Computing; Voice
    and Unified Communications Devices; Video, Streaming, TelePresence, and Transcoding
    Devices; Wireless; and Cisco Hosted Services products allow remote attackers to
    execute arbitrary commands via a crafted serialized Java object, related to the
    Apache Commons Collections (ACC) library.
  affected_package: commons-collections:commons-collections
  vulnerable_versions:
  - '4.0'
  - "<=3.2.1"
  package_manager: maven
  cve:
  - CVE-2015-6420
  disclosed_date: 2015-12-15
  created_date: 2015-12-15
  last_modified_date: 2017-08-01
  credit:
  - OSSIndex
  references:
  - http://tools.cisco.com/security/center/content/CiscoSecurityAdvisory/cisco-sa-20151209-java-deserialization
  - http://www.securityfocus.com/bid/78872
  - https://h20566.www2.hpe.com/portal/site/hpsc/public/kb/docDisplay?docId=emr_na-c05376917
  - https://h20566.www2.hpe.com/portal/site/hpsc/public/kb/docDisplay?docId=emr_na-c05390722
  - https://www.kb.cert.org/vuls/id/576313
  - https://www.tenable.com/security/research/tra-2017-14
  - https://www.tenable.com/security/research/tra-2017-23
  source_url: https://ossindex.net/resource/package/7015420133/vulnerabilities
- id: ossindex:maven:commons-collections:commons-collections:8405007862
  title: Remote code execution
  description: "> It was found that a flaw in commons-collection library allowed remote
    code execution wherever deserialization occurs. While JBoss doesnt expose the
    JMXInvokerServlet by default, other interfaces where deserialization occur might
    be vulnerable.\n> \n> -- [redhat.com](https://bugzilla.redhat.com/show_bug.cgi?id=1279330)"
  affected_package: commons-collections:commons-collections
  vulnerable_versions:
  - "<3.2.2"
  - ">=4.0 <4.1"
  package_manager: maven
  disclosed_date: 2017-08-01
  created_date: 2017-08-01
  last_modified_date: 2017-08-01
  credit:
  - OSSIndex
  references:
  - https://bugzilla.redhat.com/show_bug.cgi?id=1279330
  source_url: https://ossindex.net/resource/package/7015420133/vulnerabilities
- id: snykio:maven:commons-collections:commons-collections:30078
  title: Deserialization of Untrusted Data
  description: |
    [commons-collections:commons-collections][1] is a library which contains
    types that extend and augment the Java Collections Framework.

    Affected versions of this package are vulnerable to Deserialization of
    Untrusted Data. It is possible to execute arbitrary Java code with the
    `InvokerTransformer` serializable collections . The
    `sun.reflect.annotation.AnnotationInvocationHandler#readObject` method
    invokes `#entrySet` and `#get` on a deserialized collection. If an
    attacker has to ability to send serialized data (JMX, RMI, EJB) to an
    application using the `common-collections` library, it is possible to
    combine the aforementioned methods to execute arbitrary code on the
    application.



    [1]: https://mvnrepository.com/artifact/commons-collections/commons-collections
    \nSerialization is a process of converting an object into a sequence of
    bytes which can be persisted to a disk or database or can be sent
    through streams. The reverse process of creating object from sequence of
    bytes is called deserialization. Serialization is commonly used for
    communication (sharing objects between multiple hosts) and persistence
    (store the object state in a file or a database). It is an integral part
    of popular protocols like *Remote Method Invocation (RMI)*, *Java
    Management Extension (JMX)*, *Java Messaging System (JMS)*, *Action
    Message Format (AMF)*, *Java Server Faces (JSF) ViewState*, etc.

    *Deserialization of untrusted data* ([CWE-502][1]), is when the
    application deserializes untrusted data without sufficiently verifying
    that the resulting data will be valid, letting the attacker to control
    the state or the flow of the execution.

    Java deserialization issues have been known for years. However, interest
    in the issue intensified greatly in 2015, when classes that could be
    abused to achieve remote code execution were found in a [popular library
    (Apache Commons Collection)][2]. These classes were used in zero-days
    affecting IBM WebSphere, Oracle WebLogic and many other products.

    An attacker just needs to identify a piece of software that has both a
    vulnerable class on its path, and performs deserialization on untrusted
    data. Then all they need to do is send the payload into the
    deserializer, getting the command executed.

    > Developers put too much trust in Java Object Serialization. Some even
    > de-serialize objects pre-authentication. When deserializing an Object
    > in Java you typically cast it to an expected type, and therefore
    > Java\'s strict type system will ensure you only get valid object
    > trees. Unfortunately, by the time the type checking happens, platform
    > code has already created and executed significant logic. So, before
    > the final type is checked a lot of code is executed from the
    > readObject() methods of various objects, all of which is out of the
    > developer\'s control. By combining the readObject() methods of various
    > classes which are available on the classpath of the vulnerable
    > application an attacker can execute functions (including calling
    > Runtime.exec() to execute local OS commands).

    * Apache Blog

    The vulnerability, also know as *Mad Gadget*

    > Mad Gadget is one of the most pernicious vulnerabilities we’ve seen.
    > By merely existing on the Java classpath, seven “gadget” classes in
    > Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0)
    > make object deserialization for the entire JVM process Turing complete
    > with an exec function. Since many business applications use object
    > deserialization to send messages across the network, it would be like
    > hiring a bank teller who was trained to hand over all the money in the
    > vault if asked to do so politely, and then entrusting that teller with
    > the key. The only thing that would keep a bank safe in such a
    > circumstance is that most people wouldn’t consider asking such a
    > question.

    * Google



    [1]: https://cwe.mitre.org/data/definitions/502.html
    [2]: https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078
  affected_package: commons-collections:commons-collections
  vulnerable_versions:
  - ">= 3.0 < 3.2.2"
  severity: high
  package_manager: maven
  cve:
  - CVE-2015-4852
  - CVE-2015-7501
  cwe:
  - CWE-502
  disclosed_date: 2015-11-06
  created_date: 2015-11-06
  last_modified_date: 2015-11-06
  credit:
  - Unknown
  references:
  - http://foxglovesecurity.com/2015/11/06/what-do-weblogic-websphere-jboss-jenkins-opennms-and-your-application-have-in-common-this-vulnerability/
  - https://github.com/apache/commons-collections/commit/e585cd0433ae4cfbc56e58572b9869bd0c86b611
  - https://issues.apache.org/jira/browse/COLLECTIONS-580
  source_url: https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078
- id: snykio:maven:commons-collections:commons-collections:472711
  title: Deserialization of Untrusted Data
  description: |
    [commons-collections:commons-collections][1] is a library which contains
    types that extend and augment the Java Collections Framework.

    Affected versions of this package are vulnerable to Deserialization of
    Untrusted Data. Versions of commons-collections prior to `3.2.2` do not
    prevent deserialization of the class
    `org.apache.commons.collections.functors.InvokerTransformer`. This could
    be leveraged by an attacker as a gadget within a vulnerable application
    which deserializes user input to execute arbitrary code.

    Versions of commons-collections from 3.2.2 onwards will throw an
    `UnsupportedOperationException` error when attempts are made to
    deserialize InvokerTransformer instances to prevent potential remote
    code execution exploits.



    [1]: https://mvnrepository.com/artifact/commons-collections/commons-collections
    \nSerialization is a process of converting an object into a sequence of
    bytes which can be persisted to a disk or database or can be sent
    through streams. The reverse process of creating object from sequence of
    bytes is called deserialization. Serialization is commonly used for
    communication (sharing objects between multiple hosts) and persistence
    (store the object state in a file or a database). It is an integral part
    of popular protocols like *Remote Method Invocation (RMI)*, *Java
    Management Extension (JMX)*, *Java Messaging System (JMS)*, *Action
    Message Format (AMF)*, *Java Server Faces (JSF) ViewState*, etc.

    *Deserialization of untrusted data* ([CWE-502][1]), is when the
    application deserializes untrusted data without sufficiently verifying
    that the resulting data will be valid, letting the attacker to control
    the state or the flow of the execution.

    Java deserialization issues have been known for years. However, interest
    in the issue intensified greatly in 2015, when classes that could be
    abused to achieve remote code execution were found in a [popular library
    (Apache Commons Collection)][2]. These classes were used in zero-days
    affecting IBM WebSphere, Oracle WebLogic and many other products.

    An attacker just needs to identify a piece of software that has both a
    vulnerable class on its path, and performs deserialization on untrusted
    data. Then all they need to do is send the payload into the
    deserializer, getting the command executed.

    > Developers put too much trust in Java Object Serialization. Some even
    > de-serialize objects pre-authentication. When deserializing an Object
    > in Java you typically cast it to an expected type, and therefore
    > Java\'s strict type system will ensure you only get valid object
    > trees. Unfortunately, by the time the type checking happens, platform
    > code has already created and executed significant logic. So, before
    > the final type is checked a lot of code is executed from the
    > readObject() methods of various objects, all of which is out of the
    > developer\'s control. By combining the readObject() methods of various
    > classes which are available on the classpath of the vulnerable
    > application an attacker can execute functions (including calling
    > Runtime.exec() to execute local OS commands).

    * Apache Blog

    The vulnerability, also know as *Mad Gadget*

    > Mad Gadget is one of the most pernicious vulnerabilities we’ve seen.
    > By merely existing on the Java classpath, seven “gadget” classes in
    > Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0)
    > make object deserialization for the entire JVM process Turing complete
    > with an exec function. Since many business applications use object
    > deserialization to send messages across the network, it would be like
    > hiring a bank teller who was trained to hand over all the money in the
    > vault if asked to do so politely, and then entrusting that teller with
    > the key. The only thing that would keep a bank safe in such a
    > circumstance is that most people wouldn’t consider asking such a
    > question.

    * Google



    [1]: https://cwe.mitre.org/data/definitions/502.html
    [2]: https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078
  affected_package: commons-collections:commons-collections
  vulnerable_versions:
  - "< 3.2.2"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2015-6420
  cwe:
  - CWE-502
  disclosed_date: 2019-10-10
  created_date: 2020-02-24
  last_modified_date: 2020-02-24
  credit:
  - Unknown
  references:
  - https://github.com/apache/commons-collections/commit/5ec476b0b756852db865b2e442180f091f8209ee
  - https://github.com/apache/commons-collections/pull/18
  - https://issues.apache.org/jira/browse/COLLECTIONS-580
  source_url: https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-472711
- id: victims:maven:commons-collections:commons-collections:2015-7501
  title: 'apache-commons-collections: InvokerTransformer code execution during deserialization'
  description: 'It was found that the Apache commons-collections library permitted
    code execution when deserializing objects involving a specially constructed chain
    of classes. A remote attacker could use this flaw to execute arbitrary code with
    the permissions of the application using the commons-collections library.

'
  affected_package: commons-collections:commons-collections
  vulnerable_versions:
  - '3'
  - "<=3.2.1"
  patched_versions:
  - ">=3.2.2"
  severity: high
  package_manager: maven
  cve:
  - CVE-2015-7501
  cvss_v2_score: 7.5
  credit:
  - Victims CVE Database
  references:
  - http://foxglovesecurity.com/2015/11/06/what-do-weblogic-websphere-jboss-jenkins-opennms-and-your-application-have-in-common-this-vulnerability/
  source_url: https://github.com/victims/victims-cve-db/blob/master/database/java/2015/7501.yaml
