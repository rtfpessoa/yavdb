---
- id: ossindex:maven:org.webjars.bower:swagger-ui:8399946929
  title: Cross Site Scripting (XSS)
  description: A malicious swagger JSON document can be loaded via the `url` parameter
    in a query, taking advantage of an XSS vulnerability.
  affected_package: org.webjars.bower:swagger-ui
  vulnerable_versions:
  - 2.1.4
  package_manager: maven
  disclosed_date: 2016-07-22
  created_date: 2016-07-22
  last_modified_date: 2017-03-13
  credit:
  - OSSIndex
  references:
  - https://cwe.mitre.org/data/definitions/79.html
  - https://github.com/swagger-api/swagger-ui/issues/1866
  - https://github.com/swagger-api/swagger-ui/pull/1867
  - https://nodesecurity.io/advisories/123
  source_url: https://ossindex.net/resource/package/7104490029/vulnerabilities
- id: ossindex:maven:org.webjars.bower:swagger-ui:8399946983
  title: Cross Site Scripting (XSS)
  description: Property names are not escaped and allow XSS, by providing a schema
    file with a malicious property.
  affected_package: org.webjars.bower:swagger-ui
  vulnerable_versions:
  - "<=2.2.0"
  package_manager: maven
  disclosed_date: 2016-07-22
  created_date: 2016-07-22
  last_modified_date: 2017-03-13
  credit:
  - OSSIndex
  references:
  - https://cwe.mitre.org/data/definitions/79.html
  - https://en.wikipedia.org/wiki/Content_Security_Policy
  - https://github.com/swagger-api/swagger-ui/issues/1865
  - https://nodesecurity.io/advisories/126
  source_url: https://ossindex.net/resource/package/7104490029/vulnerabilities
- id: ossindex:maven:org.webjars.bower:swagger-ui:8402377071
  title: XSS via Content-type header
  description: "> By using a malicious server which returns script as the value of
    the Content-Type header, it is possible to execute arbitrary code using the demonstration
    capabilities of Swagger-UI.\n> \n> -- [nodesecurity.io](https://nodesecurity.io/advisories/131)"
  affected_package: org.webjars.bower:swagger-ui
  vulnerable_versions:
  - 2.1.4
  package_manager: maven
  disclosed_date: 2017-01-25
  created_date: 2017-01-25
  last_modified_date: 2017-03-13
  credit:
  - OSSIndex
  references:
  - https://github.com/swagger-api/swagger-ui/issues/1863
  - https://nodesecurity.io/advisories/131
  source_url: https://ossindex.net/resource/package/7104490029/vulnerabilities
- id: ossindex:maven:org.webjars.bower:swagger-ui:8402397873
  title: "[Unconfirmed] Cross Site Scripting (XSS)"
  description: HTML is not escaped when the API responds with `text/html`, allowing
    for possible XSS attacks.
  affected_package: org.webjars.bower:swagger-ui
  vulnerable_versions:
  - "<=2.0.21"
  package_manager: maven
  disclosed_date: 2017-02-11
  created_date: 2017-02-11
  last_modified_date: 2017-03-13
  credit:
  - OSSIndex
  references:
  - https://github.com/wordnik/swagger-ui/issues/1154
  source_url: https://ossindex.net/resource/package/7104490029/vulnerabilities
- id: ossindex:maven:org.webjars.bower:swagger-ui:8402397897
  title: Fix self XSS in request url.
  description: "> A user who has copy/pasted data from another or has been tricked
    into pasting into the accessToken box could XSS him/herself.\n> \n> -- [github.com](https://github.com/swagger-api/swagger-ui/pull/541)"
  affected_package: org.webjars.bower:swagger-ui
  vulnerable_versions:
  - "<2.0.24"
  package_manager: maven
  disclosed_date: 2017-02-11
  created_date: 2017-02-11
  last_modified_date: 2017-03-13
  credit:
  - OSSIndex
  references:
  - https://cwe.mitre.org/data/definitions/79.html
  - https://github.com/swagger-api/swagger-ui/commit/3a7b66d34565c104e85650439fbc17f89b294e10
  - https://github.com/swagger-api/swagger-ui/issues/541
  source_url: https://ossindex.net/resource/package/7104490029/vulnerabilities
- id: ossindex:maven:org.webjars.bower:swagger-ui:8402397918
  title: Cross Site Scripting (XSS) in url parameter
  description: The `url` query parameter can be used for Cross Site Scripting where
    showMessage and onFailure both injected strings straight into the DOM, without
    escaping html entities.
  affected_package: org.webjars.bower:swagger-ui
  vulnerable_versions:
  - 2.1.0-M1
  - 2.1.0-M2
  package_manager: maven
  disclosed_date: 2017-02-11
  created_date: 2017-02-11
  last_modified_date: 2017-07-30
  credit:
  - OSSIndex
  references:
  - https://github.com/swagger-api/swagger-ui/issues/1262
  source_url: https://ossindex.net/resource/package/7104490029/vulnerabilities
- id: ossindex:maven:org.webjars.bower:swagger-ui:8402397919
  title: Cross Site Scripting (XSS)
  description: 'A regression in URL parameter escaping. '
  affected_package: org.webjars.bower:swagger-ui
  vulnerable_versions:
  - ">2.1.0 <2.2.1"
  package_manager: maven
  disclosed_date: 2017-02-11
  created_date: 2017-02-11
  last_modified_date: 2017-03-13
  credit:
  - OSSIndex
  references:
  - https://github.com/swagger-api/swagger-ui/commit/a906cffea4550eaa5369e4933a50753213cf09df
  - https://github.com/swagger-api/swagger-ui/issues/1617
  - https://github.com/swagger-api/swagger-ui/pull/2334
  source_url: https://ossindex.net/resource/package/7104490029/vulnerabilities
- id: ossindex:maven:org.webjars.bower:swagger-ui:8402398056
  title: Cross Site Scripting (XSS) in message bar
  description: Unescaped HTML is rendered in the message bar, enabling possible cross
    site scripting attacks.
  affected_package: org.webjars.bower:swagger-ui
  vulnerable_versions:
  - ">=2.1.1 <2.1.4"
  package_manager: maven
  disclosed_date: 2017-02-12
  created_date: 2017-02-12
  last_modified_date: 2017-03-13
  credit:
  - OSSIndex
  references:
  - https://github.com/swagger-api/swagger-ui/commit/1945404efef053af688d872da806eec092fac7f0
  - https://github.com/swagger-api/swagger-ui/issues/1530
  source_url: https://ossindex.net/resource/package/7104490029/vulnerabilities
- id: ossindex:maven:org.webjars.bower:swagger-ui:8402398059
  title: Cross Site Scripting (XSS)
  description: 'Method description text is not properly escaped, enabling an XSS vulnerability.

'
  affected_package: org.webjars.bower:swagger-ui
  vulnerable_versions:
  - "<2.2.1"
  package_manager: maven
  disclosed_date: 2017-02-12
  created_date: 2017-02-12
  last_modified_date: 2017-03-13
  credit:
  - OSSIndex
  references:
  - https://github.com/swagger-api/swagger-ui/commit/a906cffea4550eaa5369e4933a50753213cf09df
  - https://github.com/swagger-api/swagger-ui/issues/1864
  source_url: https://ossindex.net/resource/package/7104490029/vulnerabilities
- id: snykio:maven:org.webjars.bower:swagger-ui:480236
  title: Cross-site Scripting (XSS)
  description: |+
    [org.webjars.bower:swagger-ui][1] is a library that allows interaction
    and visualisation of APIs.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). A key part of this generation is the use of a JSON schema, which
    can be read locally or by providing a `url` parameter to the Swagger
    server (e.g.
    `http://swagger-server/swagger-ui/index.html?url=<schema-url>`).

    The `produces` and `consumes` schema fields are written to the HTML
    without any HTML encoding, allowing an attacker to perform XSS by adding
    malicious scripts to their values.



    [1]: https://swagger.io/tools/swagger-ui/
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: org.webjars.bower:swagger-ui
  vulnerable_versions:
  - "< 2.2.1"
  severity: high
  package_manager: maven
  cwe:
  - CWE-79
  disclosed_date: 2016-07-20
  created_date: 2016-07-20
  last_modified_date: 2016-07-20
  credit:
  - Joe Vennix
  references:
  - https://github.com/swagger-api/swagger-ui/issues/1866
  - https://github.com/swagger-api/swagger-ui/pull/1867
  - https://github.com/swagger-api/swagger-ui/releases/tag/v2.2.1
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSBOWER-480236
- id: snykio:maven:org.webjars.bower:swagger-ui:480237
  title: Cross-site Scripting (XSS)
  description: |+
    [org.webjars.bower:swagger-ui][1] is a library that allows interaction
    and visualisation of APIs.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) due to a lack of sanitization of URLs used for OAuth auth flow.



    [1]: https://swagger.io/tools/swagger-ui/
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: org.webjars.bower:swagger-ui
  vulnerable_versions:
  - "< 3.20.9"
  severity: medium
  package_manager: maven
  cwe:
  - CWE-79
  disclosed_date: 2019-02-23
  created_date: 2019-06-14
  last_modified_date: 2019-06-14
  credit:
  - Unknown
  references:
  - https://github.com/swagger-api/swagger-ui/commit/1e184e8e218676278c83e60a45846c199ce3d15e
  - https://github.com/swagger-api/swagger-ui/pull/5190
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSBOWER-480237
- id: snykio:maven:org.webjars.bower:swagger-ui:480240
  title: Cross-site Scripting (XSS)
  description: |+
    [org.webjars.bower:swagger-ui][1] is a library that allows interaction
    and visualisation of APIs.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). `swagger-ui` supports receiving headers (e.g. Content-Type) from
    the Swagger-conforming API server, to be used when demonstrating use of
    the API using `curl`. Those headers are injected into the documentation
    as-is (not encoded), allowing a malicious API server to inject a script
    (XSS) into the swagger-ui front-end.



    [1]: https://swagger.io/tools/swagger-ui/
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: org.webjars.bower:swagger-ui
  vulnerable_versions:
  - "< 2.2.1"
  severity: high
  package_manager: maven
  cwe:
  - CWE-79
  disclosed_date: 2016-07-25
  created_date: 2016-07-25
  last_modified_date: 2016-07-25
  credit:
  - Joe Vennix
  references:
  - https://github.com/swagger-api/swagger-ui/issues/1863
  - https://github.com/swagger-api/swagger-ui/pull/1869
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSBOWER-480240
- id: snykio:maven:org.webjars.bower:swagger-ui:480241
  title: Cross-site Scripting (XSS)
  description: |+
    [org.webjars.bower:swagger-ui][1] is a library that allows interaction
    and visualisation of APIs.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). A key part of this generation is the use of a JSON schema, which
    can be read locally or by providing a `url` parameter to the Swagger
    server (e.g.
    `http://swagger-server/swagger-ui/index.html?url=<schema-url>`).

    The schema supports property fields, which are in turn included in the
    generated HTML without any HTML encoding, allowing an attacker to
    perform XSS by adding malicious scripts to their values.



    [1]: https://swagger.io/tools/swagger-ui/
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: org.webjars.bower:swagger-ui
  vulnerable_versions:
  - "< 2.2.1"
  severity: high
  package_manager: maven
  cve:
  - CVE-2016-1000229
  cwe:
  - CWE-79
  disclosed_date: 2016-07-21
  created_date: 2016-07-21
  last_modified_date: 2016-07-21
  credit:
  - Joe Vennix
  references:
  - https://community.rapid7.com/community/infosec/blog/2016/09/02/r7-2016-19-persistent-xss-via-unescaped-parameters-in-swagger-ui
  - https://github.com/swagger-api/swagger-ui/issues/1865
  - https://github.com/swagger-api/swagger-ui/releases/tag/v2.2.1
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSBOWER-480241
- id: snykio:maven:org.webjars.bower:swagger-ui:480242
  title: Cross-site Scripting (XSS)
  description: |+
    [org.webjars.bower:swagger-ui][1] is a library that allows interaction
    and visualisation of APIs.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) due to not escaping html script tags. `Swaggerui.utils.sanitize`
    function is used instead of sanitizeHTML\` which allows execution of
    JavaScript.



    [1]: https://swagger.io/tools/swagger-ui/
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: org.webjars.bower:swagger-ui
  vulnerable_versions:
  - "< 2.2.3"
  severity: medium
  package_manager: maven
  cwe:
  - CWE-79
  disclosed_date: 2016-08-31
  created_date: 2017-03-13
  last_modified_date: 2017-03-13
  credit:
  - bodnia
  references:
  - https://github.com/swagger-api/swagger-ui/commit/f87eaaa81073a61e30ff0cedee4fd9cd2dd1fca9
  - https://github.com/swagger-api/swagger-ui/pull/2374
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSBOWER-480242
- id: snykio:maven:org.webjars.bower:swagger-ui:480245
  title: Relative Path Overwrite (RPO)
  description: |
    [org.webjars.bower:swagger-ui][1] is a library that allows interaction
    and visualisation of APIs.

    Affected versions of this package are vulnerable to Relative Path
    Overwrite (RPO). Attackers are able to use the Relative Path Overwrite
    (RPO) technique to perform CSS-based input field value exfiltration,
    such as exfiltration of a CSRF token value i.e. allows the embedding of
    untrusted JSON data from remote servers, using `<style>@import` within
    the JSON data.



    [1]: https://swagger.io/tools/swagger-ui/
  affected_package: org.webjars.bower:swagger-ui
  vulnerable_versions:
  - "< 3.23.11"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2019-17495
  cwe:
  - CWE-94
  disclosed_date: 2019-10-10
  created_date: 2019-10-11
  last_modified_date: 2019-10-11
  credit:
  - crazykid95
  references:
  - https://github.com/swagger-api/swagger-ui/pull/5616
  - https://github.com/swagger-api/swagger-ui/releases/tag/v3.23.11
  - https://github.com/tarantula-team/CSS-injection-in-Swagger-UI
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSBOWER-480245
- id: snykio:maven:org.webjars.bower:swagger-ui:480246
  title: Cross-site Scripting (XSS)
  description: |+
    [org.webjars.bower:swagger-ui][1] is a library that allows interaction
    and visualisation of APIs.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) due to insertion of `javascript:` and `data:` URLs from
    user-influenced href fields in Swagger-UI.



    [1]: https://swagger.io/tools/swagger-ui/
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: org.webjars.bower:swagger-ui
  vulnerable_versions:
  - "< 3.4.2"
  severity: medium
  package_manager: maven
  cwe:
  - CWE-79
  disclosed_date: 2017-10-30
  created_date: 2017-12-25
  last_modified_date: 2017-12-25
  credit:
  - Unknown
  references:
  - https://github.com/swagger-api/swagger-ui/commit/afa615e01dc7f6724d20a11abfe1fcdf8f6ecd57
  - https://github.com/swagger-api/swagger-ui/issues/3847
  - https://github.com/swagger-api/swagger-ui/pull/3848
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSBOWER-480246
- id: snykio:maven:org.webjars.bower:swagger-ui:480248
  title: Cross-site Scripting (XSS)
  description: |+
    [org.webjars.bower:swagger-ui][1] is a library that allows interaction
    and visualisation of APIs.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). Versions prior of the 2.1.0 library contain a cross site
    scripting (XSS) vulnerability in the the `url` query string parameter.
    Values inserted into `showMessage` and `onFailure` elements both
    injected strings straight into the DOM, without escaping html entities.



    [1]: https://swagger.io/tools/swagger-ui/
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks-1}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments-1}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent-1}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: org.webjars.bower:swagger-ui
  vulnerable_versions:
  - "< 2.1.0"
  severity: high
  package_manager: maven
  cwe:
  - CWE-80
  disclosed_date: 2016-08-15
  created_date: 2016-08-15
  last_modified_date: 2016-08-15
  credit:
  - mehmetaydogdu
  references:
  - https://github.com/swagger-api/swagger-ui/commit/162cd536a1d4bcf883af6129806c1f6387c3e690
  - https://github.com/swagger-api/swagger-ui/issues/1262
  - https://github.com/swagger-api/swagger-ui/pull/1325
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSBOWER-480248
- id: snykio:maven:org.webjars.bower:swagger-ui:480249
  title: Reverse Tabnabbing
  description: |
    [org.webjars.bower:swagger-ui][1] is a library that allows interaction
    and visualisation of APIs.

    Affected versions of this package are vulnerable to Reverse Tabnabbing.
    Setting `target="_blank"` on anchor tags is unsafe unless used in
    conjunction with the `rel="noopener"` attribute. A link opened via
    target blank attribute can make changes to the original page,
    essentially bypassing same origin policy restrictions set by the
    browser.



    [1]: https://swagger.io/tools/swagger-ui/
  affected_package: org.webjars.bower:swagger-ui
  vulnerable_versions:
  - "< 3.18.0"
  severity: medium
  package_manager: maven
  cwe:
  - CWE-1022
  disclosed_date: 2018-08-04
  created_date: 2019-06-13
  last_modified_date: 2019-06-13
  credit:
  - Unknown
  references:
  - https://github.com/swagger-api/swagger-ui/pull/4789
  - https://github.com/swagger-api/swagger-ui/pull/4789/commits/3f4cae3334fdd492a373f4453bd03a9ebd87becf
  - https://github.com/swagger-api/swagger-ui/releases/tag/v3.18.0
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSBOWER-480249
- id: snykio:maven:org.webjars.bower:swagger-ui:480250
  title: Cross-site Scripting (XSS)
  description: |
    [org.webjars.bower:swagger-ui][1] is a library that allows interaction
    and visualisation of APIs.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). Multiple areas allowed reflecting of unsanitized JavaScript. This
    included

    * not converting values within `.html()` to `text()`
    * templates not sanitizing user inserted values
    * user input provided within content type JSON not being encoded
      correctly
    * injecting JavaScript through swagger documents
      ## Details   {#details}

    A cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.



    [1]: https://swagger.io/tools/swagger-ui/
  affected_package: org.webjars.bower:swagger-ui
  vulnerable_versions:
  - "< 2.2.1"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2016-1000226
  - CVE-2016-1000233
  - CVE-2016-5682
  cwe:
  - CWE-79
  disclosed_date: 2015-09-22
  created_date: 2019-06-16
  last_modified_date: 2019-06-16
  credit:
  - Scott Davis
  - Unknown
  references:
  - https://github.com/swagger-api/swagger-ui/issues/1154
  - https://github.com/swagger-api/swagger-ui/issues/1617
  - https://github.com/swagger-api/swagger-ui/issues/1863
  - https://github.com/swagger-api/swagger-ui/issues/1864
  - https://github.com/swagger-api/swagger-ui/issues/1865
  - https://github.com/swagger-api/swagger-ui/issues/1866
  - https://github.com/swagger-api/swagger-ui/issues/830
  - https://github.com/swagger-api/swagger-ui/pull/1867
  - https://github.com/swagger-api/swagger-ui/pull/2334
  - https://github.com/swagger-api/swagger-ui/releases/tag/v2.2.1
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSBOWER-480250
- id: snykio:maven:org.webjars.bower:swagger-ui:480251
  title: Cross-site Scripting (XSS)
  description: |+
    [org.webjars.bower:swagger-ui][1] is a library that allows interaction
    and visualisation of APIs.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). It is possible to execute JavaScript by providing a YAML file
    with a `description` field. Any YAML file can trigger the vulnerability,
    whether it\'s imported from url or copied and pasted directly in the
    editor.

    ### PoC   {#poc}

        swagger: '2.0'
        info:
          version: "0.0.1"
          title: Example Title
          description: <img src=x onerror="alert('XSS')">
        paths:
          /:
            get:
              responses:
                200:
                  description: Successful response



    [1]: https://swagger.io/tools/swagger-ui/
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: org.webjars.bower:swagger-ui
  vulnerable_versions:
  - ">= 3.0.0 < 3.0.13"
  severity: medium
  package_manager: maven
  cwe:
  - CWE-79
  disclosed_date: 2016-06-01
  created_date: 2019-06-16
  last_modified_date: 2019-06-16
  credit:
  - Unknown
  references:
  - https://github.com/swagger-api/swagger-ui/issues/3163
  - https://github.com/swagger-api/swagger-ui/pull/3165
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSBOWER-480251
- id: snykio:maven:org.webjars.bower:swagger-ui:575005
  title: Insecure Defaults
  description: |
    [org.webjars.bower:swagger-ui][1] is a library that allows interaction
    and visualisation of APIs.

    Affected versions of this package are vulnerable to Insecure Defaults.
    Markdown rendering allows `class`, `style` and `data` attributes in the
    result by default.



    [1]: https://swagger.io/tools/swagger-ui/
  affected_package: org.webjars.bower:swagger-ui
  vulnerable_versions:
  - "< 3.26.1"
  severity: medium
  package_manager: maven
  cwe:
  - CWE-453
  disclosed_date: 2020-06-11
  created_date: 2020-07-01
  last_modified_date: 2020-07-01
  credit:
  - Unknown
  references:
  - https://github.com/swagger-api/swagger-ui/commit/a616cb471d31f04a28d185aeb1bcb83637afc3cf
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSBOWER-575005
