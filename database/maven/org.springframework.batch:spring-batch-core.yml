---
- id: snykio:maven:org.springframework.batch:spring-batch-core:572008
  title: Insecure Defaults
  description: "[org.springframework.batch:spring-batch-core][1] is a framework for\nwriting
    offline and batch applications using Spring and Java.\n\nAffected versions of
    this package are vulnerable to Insecure Defaults.\nWhen configured to enable default
    typing, Jackson contained a\ndeserialization vulnerability\n([https://github.com/FasterXML/jackson-databind/issues/1599][2])
    that\ncould lead to arbitrary code execution. Jackson fixed this vulnerability\nby
    blacklisting known \\\"deserialization gadgets\\\".\n\nSpring Batch configures
    Jackson with global default typing enabled\n([https://github.com/FasterXML/jackson-docs/wiki/JacksonPolymorphicDeserialization#11-global-default-typing][3])\nwhich
    means that through the previous exploit, arbitrary code could be\nexecuted if
    all of the following is true:\n\n* Spring Batch’s Jackson support is being leveraged
    to serialize a job’s\n  ExecutionContext.\n* A malicious user gains write access
    to the data store used by the\n  JobRepository (where the data to be deserialized
    is stored).\n  ## Remediation   {#remediation}\n  \n  A fix was pushed into the
    `master` branch but not yet published.\n  ## References   {#references}\n\n* [GitHub
    Commit][4]\n* [GitHub Issue][5]\n* [Pivotal Security Advisory][6]\n\n\n\n[1]:
    http://projects.spring.io/spring-batch/\n[2]: https://github.com/FasterXML/jackson-databind/issues/1599\n[3]:
    https://github.com/FasterXML/jackson-docs/wiki/JacksonPolymorphicDeserialization#11-global-default-typing\n[4]:
    https://github.com/spring-projects/spring-batch/commit/9a79b4572d0aa4bec38fe90957c850920b7f9cea#diff-07cf6d4475ae662ecb8675743a20e20d\n[5]:
    https://github.com/spring-projects/spring-batch/issues/3729\n[6]: https://pivotal.io/security/cve-2020-5411\n"
  affected_package: org.springframework.batch:spring-batch-core
  vulnerable_versions:
  - ">= 4.0.0"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2020-5411
  cwe:
  - CWE-453
  disclosed_date: 2020-06-11
  created_date: 2020-06-11
  last_modified_date: 2020-06-11
  credit:
  - Unknown
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORKBATCH-572008
- id: snykio:maven:org.springframework.batch:spring-batch-core:73519
  title: XML External Entity (XXE) Injection
  description: |+
    [org.springframework.batch:spring-batch-core][1] is a framework for
    writing offline and batch applications using Spring and Java.

    Affected versions of this package are vulnerable to XML External Entity
    (XXE) Injection when receiving XML data from untrusted sources.



    [1]: http://projects.spring.io/spring-batch/
    \nXXE Injection is a type of attack against an application that parses XML
    input. XML is a markup language that defines a set of rules for encoding
    documents in a format that is both human-readable and machine-readable.
    By default, many XML processors allow specification of an external
    entity, a URI that is dereferenced and evaluated during XML processing.
    When an XML document is being parsed, the parser can make a request and
    include the content at the specified URI inside of the XML document.

    Attacks can include disclosing local files, which may contain sensitive
    data such as passwords or private user data, using file: schemes or
    relative paths in the system identifier.

    For example, below is a sample XML document, containing an XML element-
    username.

        <?xml version="1.0" encoding="ISO-8859-1"?>
           <username>John</username>
        </xml>
    {: .language-xml}

    An external XML entity - `xxe`, is defined using a system identifier and
    present within a DOCTYPE header. These entities can access local or
    remote content. For example the below code contains an external XML
    entity that would fetch the content of `/etc/passwd` and display it to
    the user rendered by `username`.

        <?xml version="1.0" encoding="ISO-8859-1"?>
        <!DOCTYPE foo [
           <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
           <username>&xxe;</username>
        </xml>
    {: .language-xml}

    Other XXE Injection attacks can access local resources that may not stop
    returning data, possibly impacting application availability and leading
    to Denial of Service.

  affected_package: org.springframework.batch:spring-batch-core
  vulnerable_versions:
  - ">= 3.0.9.RELEASE < 3.0.10.RELEASE"
  - ">= 4.0.0.RELEASE < 4.0.2.RELEASE"
  - ">= 4.1.0.RELEASE < 4.1.1.RELEASE"
  severity: high
  package_manager: maven
  cve:
  - CVE-2019-3774
  cwe:
  - CWE-611
  disclosed_date: 2019-01-14
  created_date: 2019-01-16
  last_modified_date: 2019-01-16
  credit:
  - Unknown
  references:
  - https://github.com/spring-projects/spring-batch/commit/50d141d0d3c1256c997e390d9f510eadc5cc91e4#diff-a12071afda5a20e7adb2746628bc76b2
  - https://pivotal.io/security/cve-2019-3774
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORKBATCH-73519
