---
- id: ossindex:maven:org.apache.wicket:wicket:346714
  title: '[CVE-2011-2712]  Improper Neutralization of Input During Web Page Generation
    ("Cross-site Scripting")'
  description: Cross-site scripting (XSS) vulnerability in Apache Wicket 1.4.x before
    1.4.18, when setAutomaticMultiWindowSupport is enabled, allows remote attackers
    to inject arbitrary web script or HTML via unspecified parameters.
  affected_package: org.apache.wicket:wicket
  vulnerable_versions:
  - 1.4.0
  - 1.4.1
  - 1.4.10
  - 1.4.11
  - 1.4.12
  - 1.4.13
  - 1.4.14
  - 1.4.15
  - 1.4.16
  - 1.4.17
  - 1.4.2
  - 1.4.3
  - 1.4.4
  - 1.4.5
  - 1.4.6
  - 1.4.7
  - 1.4.8
  - 1.4.9
  package_manager: maven
  cve:
  - CVE-2011-2712
  disclosed_date: 2011-08-29
  created_date: 2011-08-29
  last_modified_date: 2017-05-03
  credit:
  - OSSIndex
  references:
  - http://secunia.com/advisories/45727
  - http://securityreason.com/securityalert/8357
  - http://wicket.apache.org/2011/08/23/cve-2011-2712.html
  - http://www.securityfocus.com/archive/1/archive/1/519398/100/0/threaded
  - http://www.securityfocus.com/bid/49290
  - http://www.securitytracker.com/id?1025976
  - http://xforce.iss.net/xforce/xfdb/69394
  - https://exchange.xforce.ibmcloud.com/vulnerabilities/69394
  source_url: https://ossindex.net/resource/package/7015339175/vulnerabilities
- id: ossindex:maven:org.apache.wicket:wicket:348885
  title: '[CVE-2012-0047]  Improper Neutralization of Input During Web Page Generation
    ("Cross-site Scripting")'
  description: Cross-site scripting (XSS) vulnerability in Apache Wicket 1.4.x before
    1.4.20 allows remote attackers to inject arbitrary web script or HTML via the
    wicket:pageMapName parameter.
  affected_package: org.apache.wicket:wicket
  vulnerable_versions:
  - 1.4.0
  - 1.4.1
  - 1.4.10
  - 1.4.11
  - 1.4.12
  - 1.4.13
  - 1.4.14
  - 1.4.15
  - 1.4.16
  - 1.4.17
  - 1.4.18
  - 1.4.19
  - 1.4.2
  - 1.4.3
  - 1.4.4
  - 1.4.5
  - 1.4.6
  - 1.4.7
  - 1.4.8
  - 1.4.9
  package_manager: maven
  cve:
  - CVE-2012-0047
  disclosed_date: 2012-03-23
  created_date: 2012-03-23
  last_modified_date: 2017-05-03
  credit:
  - OSSIndex
  references:
  - http://archives.neohapsis.com/archives/bugtraq/2012-03/0112.html
  - http://osvdb.org/80300
  - http://wicket.apache.org/2012/03/22/wicket-cve-2012-0047.html
  - http://www.securitytracker.com/id?1026839
  - http://xforce.iss.net/xforce/xfdb/74273
  - https://exchange.xforce.ibmcloud.com/vulnerabilities/74273
  source_url: https://ossindex.net/resource/package/7015339175/vulnerabilities
- id: ossindex:maven:org.apache.wicket:wicket:349807
  title: '[CVE-2012-1089]  Improper Limitation of a Pathname to a Restricted Directory
    ("Path Traversal")'
  description: Directory traversal vulnerability in Apache Wicket 1.4.x before 1.4.20
    and 1.5.x before 1.5.5 allows remote attackers to read arbitrary web-application
    files via a relative pathname in a URL for a Wicket resource that corresponds
    to a null package.
  affected_package: org.apache.wicket:wicket
  vulnerable_versions:
  - 1.4.0
  - 1.4.1
  - 1.4.10
  - 1.4.11
  - 1.4.12
  - 1.4.13
  - 1.4.14
  - 1.4.15
  - 1.4.16
  - 1.4.17
  - 1.4.18
  - 1.4.19
  - 1.4.2
  - 1.4.3
  - 1.4.4
  - 1.4.5
  - 1.4.6
  - 1.4.7
  - 1.4.8
  - 1.4.9
  - 1.5.0
  - 1.5.1
  - 1.5.2
  - 1.5.3
  - 1.5.4
  package_manager: maven
  cve:
  - CVE-2012-1089
  disclosed_date: 2012-03-23
  created_date: 2012-03-23
  last_modified_date: 2017-05-03
  credit:
  - OSSIndex
  references:
  - http://osvdb.org/80301
  - http://wicket.apache.org/2012/03/22/wicket-cve-2012-1089.html
  - http://www.securityfocus.com/bid/52679
  - http://xforce.iss.net/xforce/xfdb/74276
  - https://exchange.xforce.ibmcloud.com/vulnerabilities/74276
  source_url: https://ossindex.net/resource/package/7015339175/vulnerabilities
- id: ossindex:maven:org.apache.wicket:wicket:351653
  title: '[CVE-2012-3373]  Improper Neutralization of Input During Web Page Generation
    ("Cross-site Scripting")'
  description: Cross-site scripting (XSS) vulnerability in Apache Wicket 1.4.x before
    1.4.21 and 1.5.x before 1.5.8 allows remote attackers to inject arbitrary web
    script or HTML via vectors involving a %00 sequence in an Ajax link URL associated
    with a Wicket app.
  affected_package: org.apache.wicket:wicket
  vulnerable_versions:
  - 1.4.1
  - 1.4.10
  - 1.4.11
  - 1.4.12
  - 1.4.13
  - 1.4.14
  - 1.4.15
  - 1.4.16
  - 1.4.17
  - 1.4.18
  - 1.4.19
  - 1.4.2
  - 1.4.20
  - 1.4.3
  - 1.4.4
  - 1.4.5
  - 1.4.6
  - 1.4.7
  - 1.4.8
  - 1.4.9
  - 1.5.0
  - 1.5.1
  - 1.5.2
  - 1.5.3
  - 1.5.4
  - 1.5.5
  - 1.5.6
  - 1.5.7
  package_manager: maven
  cve:
  - CVE-2012-3373
  disclosed_date: 2012-09-19
  created_date: 2012-09-19
  last_modified_date: 2017-06-02
  credit:
  - OSSIndex
  references:
  - http://osvdb.org/85249
  - http://secunia.com/advisories/50555
  - http://wicket.apache.org/2012/09/06/cve-2012-3373.html
  - http://www.securityfocus.com/bid/55445
  - http://www.securitytracker.com/id?1027508
  - http://xforce.iss.net/xforce/xfdb/78321
  - https://exchange.xforce.ibmcloud.com/vulnerabilities/78321
  source_url: https://ossindex.net/resource/package/7015339175/vulnerabilities
- id: ossindex:maven:org.apache.wicket:wicket:355745
  title: "[CVE-2013-2055] Unspecified vulnerability in Apache Wicket 1.4.x before
    1.4.23, 1.5.x before 1.5..."
  description: Unspecified vulnerability in Apache Wicket 1.4.x before 1.4.23, 1.5.x
    before 1.5.11, and 6.x before 6.8.0 allows remote attackers to obtain sensitive
    information via vectors that cause raw HTML templates to be rendered without being
    processed and reading the information that is outside of wicket:panel markup.
  affected_package: org.apache.wicket:wicket
  vulnerable_versions:
  - 1.4.0
  - 1.4.1
  - 1.4.10
  - 1.4.11
  - 1.4.12
  - 1.4.13
  - 1.4.14
  - 1.4.15
  - 1.4.16
  - 1.4.17
  - 1.4.18
  - 1.4.19
  - 1.4.20
  - 1.4.21
  - 1.4.22
  - 1.5.0
  - 1.5.1
  - 1.5.10
  - 1.5.2
  - 1.5.3
  - 1.5.4
  - 1.5.5
  - 1.5.6
  - 1.5.7
  - 1.5.8
  - 1.5.9
  - 6.1.0
  - 6.1.1
  - 6.2.0
  - 6.3.0
  - 6.4.0
  - 6.5.0
  - 6.6.0
  - 6.7.0
  - 6.8.0
  package_manager: maven
  cve:
  - CVE-2013-2055
  disclosed_date: 2014-02-10
  created_date: 2014-02-10
  last_modified_date: 2017-05-03
  credit:
  - OSSIndex
  references:
  - http://osvdb.org/102955
  - http://seclists.org/fulldisclosure/2014/Feb/38
  - http://www.securityfocus.com/bid/65431
  - https://wicket.apache.org/2013/05/17/wicket-6.8.0-released.html
  - https://wicket.apache.org/2014/02/06/cve-2013-2055.html
  source_url: https://ossindex.net/resource/package/7015339175/vulnerabilities
- id: ossindex:maven:org.apache.wicket:wicket:8402799745
  title: '[CVE-2015-5347]  Improper Neutralization of Input During Web Page Generation
    ("Cross-site Scripting")'
  description: Cross-site scripting (XSS) vulnerability in the getWindowOpenJavaScript
    function in org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow in
    Apache Wicket 1.5.x before 1.5.15, 6.x before 6.22.0, and 7.x before 7.2.0 might
    allow remote attackers to inject arbitrary web script or HTML via a ModalWindow
    title.
  affected_package: org.apache.wicket:wicket
  vulnerable_versions:
  - ">=1.5.0 <1.5.15"
  - ">=6.0.0 <6.22.0"
  - ">=7.0.0 <7.2.0"
  package_manager: maven
  cve:
  - CVE-2015-5347
  disclosed_date: 2016-04-12
  created_date: 2016-04-12
  last_modified_date: 2017-06-02
  credit:
  - OSSIndex
  references:
  - http://wicket.apache.org/news/2016/03/01/cve-2015-5347.html
  - http://www.securitytracker.com/id/1035165
  - https://issues.apache.org/jira/browse/WICKET-6037
  source_url: https://ossindex.net/resource/package/7015339175/vulnerabilities
- id: ossindex:maven:org.apache.wicket:wicket:8402799825
  title: '[CVE-2015-7520]  Improper Neutralization of Input During Web Page Generation
    ("Cross-site Scripting")'
  description: Multiple cross-site scripting (XSS) vulnerabilities in the (1) RadioGroup
    and (2) CheckBoxMultipleChoice classes in Apache Wicket 1.5.x before 1.5.15, 6.x
    before 6.22.0, and 7.x before 7.2.0 allow remote attackers to inject arbitrary
    web script or HTML via a crafted "value" attribute in a <input> element.
  affected_package: org.apache.wicket:wicket
  vulnerable_versions:
  - ">=1.5.0 <1.5.15"
  - ">=6.0.0 <6.22.0"
  - ">=7.0.0 <7.2.0"
  package_manager: maven
  cve:
  - CVE-2015-7520
  disclosed_date: 2016-04-12
  created_date: 2016-04-12
  last_modified_date: 2017-05-03
  credit:
  - OSSIndex
  references:
  - http://wicket.apache.org/news/2016/03/02/cve-2015-7520.html
  - http://www.securitytracker.com/id/1035166
  source_url: https://ossindex.net/resource/package/7015339175/vulnerabilities
- id: snykio:maven:org.apache.wicket:wicket:31007
  title: Cross-site Scripting (XSS)
  description: |+
    [`org.apache.wicket:wicket`][1] Cross-site Scripting (XSS) vulnerability
    in Apache Wicket 1.4.x before 1.4.18, when
    setAutomaticMultiWindowSupport is enabled, allows remote attackers to
    inject arbitrary web script or HTML via unspecified parameters.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22wicket%22
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: org.apache.wicket:wicket
  vulnerable_versions:
  - ">= 1.4.0 < 1.4.18"
  severity: low
  package_manager: maven
  cve:
  - CVE-2011-2712
  cwe:
  - CWE-79
  disclosed_date: 2011-08-29
  created_date: 2014-01-09
  last_modified_date: 2014-01-09
  credit:
  - Unknown
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2011-2712
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHEWICKET-31007
- id: snykio:maven:org.apache.wicket:wicket:31008
  title: Cross-site Scripting (XSS)
  description: |+
    [`org.apache.wicket:wicket`][1] Cross-site Scripting (XSS) vulnerability
    in Apache Wicket 1.4.x before 1.4.20 allows remote attackers to inject
    arbitrary web script or HTML via the wicket:pageMapName parameter.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22wicket%22
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: org.apache.wicket:wicket
  vulnerable_versions:
  - ">= 1.4.0 < 1.4.20"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2012-0047
  cwe:
  - CWE-79
  disclosed_date: 2012-03-23
  created_date: 2014-01-09
  last_modified_date: 2014-01-09
  credit:
  - Unknown
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2012-0047
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHEWICKET-31008
- id: snykio:maven:org.apache.wicket:wicket:31009
  title: Cross-site Scripting (XSS)
  description: |+
    [`org.apache.wicket:wicket`][1] Cross-site Scripting (XSS) vulnerability
    in Apache Wicket 1.4.x before 1.4.21 and 1.5.x before 1.5.8 allows
    remote attackers to inject arbitrary web script or HTML via vectors
    involving a %00 sequence in an Ajax link URL associated with a Wicket
    app.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22wicket%22
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: org.apache.wicket:wicket
  vulnerable_versions:
  - ">= 1.4.0 < 1.4.21"
  - ">= 1.5.0 < 1.5.8"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2012-3373
  cwe:
  - CWE-79
  disclosed_date: 2012-09-19
  created_date: 2014-06-17
  last_modified_date: 2014-06-17
  credit:
  - Unknown
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2012-3373
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHEWICKET-31009
- id: snykio:maven:org.apache.wicket:wicket:31010
  title: Cross-site Scripting (XSS)
  description: |+
    [`org.apache.wicket:wicket`][1] Affected versions of the package are
    vulnerable to Cross-site Scripting (XSS). It is possible for JavaScript
    statements to break out of a `<script>` tag in the rendered response.
    This might pose a security threat if the written JavaScript contains
    user provided data.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22wicket%22
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: org.apache.wicket:wicket
  vulnerable_versions:
  - ">= 1.4.0 < 1.4.22"
  - ">= 1.5.0 < 1.5.10"
  - ">= 1.6 < 6.4.0"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2012-5636
  cwe:
  - CWE-79
  disclosed_date: 2015-10-19
  created_date: 2015-10-19
  last_modified_date: 2015-10-19
  credit:
  - Michael Riedel
  references:
  - https://wicket.apache.org/news/2013/03/03/cve-2012-5636.html
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHEWICKET-31010
- id: snykio:maven:org.apache.wicket:wicket:31011
  title: Information Exposure
  description: |
    [`org.apache.wicket:wicket`][1] Unspecified vulnerability in Apache
    Wicket 1.4.x before 1.4.23, 1.5.x before 1.5.11, and 6.x before 6.8.0
    allows remote attackers to obtain sensitive information via vectors that
    cause raw HTML templates to be rendered without being processed and
    reading the information that is outside of wicket:panel markup.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22wicket%22
  affected_package: org.apache.wicket:wicket
  vulnerable_versions:
  - ">= 1.4.0 < 1.4.23"
  - ">= 1.5.0 < 1.5.11"
  - ">= 6.0.0 < 6.8.0"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2013-2055
  cwe:
  - CWE-200
  disclosed_date: 2014-02-10
  created_date: 2014-06-08
  last_modified_date: 2014-06-08
  credit:
  - Unknown
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2013-2055
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHEWICKET-31011
