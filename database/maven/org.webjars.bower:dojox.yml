---
- id: snykio:maven:org.webjars.bower:dojox:479616
  title: Arbitrary String Injection
  description: |
    [org.webjars.bower:dojox][1] is a meta-package of other packages that
    was historically a development area for the Dojo Toolkit.

    Affected versions of this package are vulnerable to Arbitrary String
    Injection.



    [1]: https://www.npmjs.com/package/dojox
  affected_package: org.webjars.bower:dojox
  vulnerable_versions:
  - ">= 0"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2018-15494
  cwe:
  - CWE-79
  disclosed_date: 2018-08-18
  created_date: 2018-08-19
  last_modified_date: 2018-08-19
  credit:
  - Moritz Bechler
  references:
  - https://dojotoolkit.org/blog/dojo-1-14-released
  - https://github.com/dojo/dojox/pull/283
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSBOWER-479616
- id: snykio:maven:org.webjars.bower:dojox:548878
  title: Cross-site Scripting (XSS)
  description: |+
    [org.webjars.bower:dojox][1] is a meta-package of other packages that
    was historically a development area for the Dojo Toolkit.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). `dojox.xmpp.util.xmlEncode` only encodes the first occurrence of
    each character, not all of them.



    [1]: https://www.npmjs.com/package/dojox
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: org.webjars.bower:dojox
  vulnerable_versions:
  - ">= 0"
  severity: high
  package_manager: maven
  cve:
  - CVE-2019-10785
  cwe:
  - CWE-119
  disclosed_date: 2020-02-07
  created_date: 2020-02-07
  last_modified_date: 2020-02-07
  credit:
  - Jonathan Leitschuh
  references:
  - https://github.com/dojo/dojox/pull/315
  - https://github.com/dojo/dojox/security/advisories/GHSA-pg97-ww7h-5mjr
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSBOWER-548878
- id: snykio:maven:org.webjars.bower:dojox:559769
  title: Prototype Pollution
  description: "[org.webjars.bower:dojox][1] is a meta-package of other packages that\nwas
    historically a development area for the Dojo Toolkit.\n\nAffected versions of
    this package are vulnerable to Prototype Pollution.\nThe Dojox jQuery wrapper
    `jqMix` `mixin` method is vulnerable to\nPrototype Pollution.\n\n\n\n[1]: https://www.npmjs.com/package/dojox\n\\nPrototype
    Pollution is a vulnerability affecting JavaScript. Prototype\nPollution refers
    to the ability to inject properties into existing\nJavaScript language construct
    prototypes, such as objects. JavaScript\nallows all Object attributes to be altered,
    including their magical\nattributes such as `_proto_`, `constructor` and `prototype`.
    An attacker\nmanipulates these attributes to overwrite, or pollute, a JavaScript\napplication
    object prototype of the base object by injecting other\nvalues. Properties on
    the `Object.prototype` are then inherited by all\nthe JavaScript objects through
    the prototype chain. When that happens,\nthis leads to either denial of service
    by triggering JavaScript\nexceptions, or it tampers with the application source
    code to force the\ncode path that the attacker injects, thereby leading to remote
    code\nexecution.\n\nThere are two main ways in which the pollution of prototypes
    occurs:\n\n* Unsafe `Object` recursive merge\n\n* Property definition by path\n\n###
    Unsafe Object recursive merge   {#unsafe-object-recursive-merge}\n\nThe logic
    of a vulnerable recursive merge function follows the following\nhigh-level model:\n\n
    \   merge (target, source)\n    \n      foreach property of source\n    \n        if
    property exists and is an object on both the target and the source\n    \n          merge(target[property],
    source[property])\n    \n        else\n    \n          target[property] = source[property]\n\n&lt;br&gt;\n\nWhen
    the source object contains a property named `_proto_` defined with\n`Object.defineProperty()`
    , the condition that checks if the property\nexists and is an object on both the
    target and the source passes and the\nmerge recurses with the target, being the
    prototype of `Object` and the\nsource of `Object` as defined by the attacker.
    Properties are then\ncopied on the `Object` prototype.\n\nClone operations are
    a special sub-class of unsafe recursive merges,\nwhich occur when a recursive
    merge is conducted on an empty object:\n`merge({},source)`.\n\n`lodash` and `Hoek`
    are examples of libraries susceptible to recursive\nmerge attacks.\n\n### Property
    definition by path   {#property-definition-by-path}\n\nThere are a few JavaScript
    libraries that use an API to define property\nvalues on an object based on a given
    path. The function that is\ngenerally affected contains this signature: `theFunction(object,
    path,\nvalue)`\n\nIf the attacker can control the value of “path”, they can set
    this value\nto `_proto_.myValue`. `myValue` is then assigned to the prototype
    of the\nclass of the object.\n\n"
  affected_package: org.webjars.bower:dojox
  vulnerable_versions:
  - ">= 0"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2020-5259
  cwe:
  - CWE-400
  disclosed_date: 2020-03-04
  created_date: 2020-03-11
  last_modified_date: 2020-03-11
  credit:
  - Snyk Security Team
  references:
  - https://github.com/dojo/dojox/security/advisories/GHSA-3hw5-q855-g6cw
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSBOWER-559769
