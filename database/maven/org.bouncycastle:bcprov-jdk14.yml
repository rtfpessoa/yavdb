---
- id: snykio:maven:org.bouncycastle:bcprov-jdk14:1035565
  title: Information Exposure
  description: |
    [org.bouncycastle:bcprov-jdk14][1] is a Java implementation of
    cryptographic algorithms.

    Affected versions of this package are vulnerable to Information
    Exposure. Attackers can obtain sensitive information about a private
    exponent because of Observable Differences in Behavior to Error Inputs.
    This occurs in `org.bouncycastle.crypto.encodings.OAEPEncoding`. Sending
    invalid `ciphertext` that decrypts to a short payload in the OAEP
    Decoder could result in the throwing of an early exception, potentially
    leaking some information about the private exponent of the RSA private
    key performing the encryption.



    [1]: https://mvnrepository.com/artifact/org.bouncycastle/bcprov-jdk14
  affected_package: org.bouncycastle:bcprov-jdk14
  vulnerable_versions:
  - "< 1.61"
  severity: high
  package_manager: maven
  cve:
  - CVE-2020-26939
  cwe:
  - CWE-200
  disclosed_date: 2020-11-03
  created_date: 2020-11-03
  last_modified_date: 2020-11-03
  credit:
  - Unknown
  references:
  - https://github.com/bcgit/bc-java/commit/930f8b274c4f1f3a46e68b5441f1e7fadb57e8c1
  - https://github.com/bcgit/bc-java/wiki/CVE-2020-26939
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGBOUNCYCASTLE-1035565
- id: snykio:maven:org.bouncycastle:bcprov-jdk14:31043
  title: Cryptographic Issues
  description: |
    [org.bouncycastle:bcprov-jdk14][1] is a Java implementation of
    cryptographic algorithms.

    Affected versions of this package are vulnerable to Cryptographic
    Issues. The TLS implementation does not properly consider timing
    side-channel attacks on a noncompliant MAC check operation during the
    processing of malformed CBC padding, which allows remote attackers to
    conduct distinguishing attacks and plaintext-recovery attacks via
    statistical analysis of timing data for crafted packets, a related issue
    to [CVE-2013-0169][2].



    [1]: https://mvnrepository.com/artifact/org.bouncycastle/bcprov-jdk14
    [2]: https://nvd.nist.gov/vuln/detail/CVE-2013-0169
  affected_package: org.bouncycastle:bcprov-jdk14
  vulnerable_versions:
  - "< 1.48"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2013-1624
  cwe:
  - CWE-310
  disclosed_date: 2013-02-08
  created_date: 2014-06-08
  last_modified_date: 2014-06-08
  credit:
  - Unknown
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2013-1624
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGBOUNCYCASTLE-31043
- id: snykio:maven:org.bouncycastle:bcprov-jdk14:31044
  title: Cryptographic Issues
  description: |
    [`org.bouncycastle:bcprov-jdk14`][1] The Bouncy Castle Java library
    before 1.51 does not validate a point is withing the elliptic curve,
    which makes it easier for remote attackers to obtain private keys via a
    series of crafted elliptic curve Diffie Hellman (ECDH) key exchanges,
    aka an \"invalid curve attack.\"



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22bcprov-jdk14%22
  affected_package: org.bouncycastle:bcprov-jdk14
  vulnerable_versions:
  - "< 1.51"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2015-7940
  cwe:
  - CWE-310
  disclosed_date: 2015-10-22
  created_date: 2015-10-22
  last_modified_date: 2015-10-22
  credit:
  - Unknown
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2015-7940
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGBOUNCYCASTLE-31044
- id: snykio:maven:org.bouncycastle:bcprov-jdk14:31656
  title: Hash Collision
  description: |
    [`org.bouncycastle:bcprov-jdk14`][1] is a collection of APIs used in
    cryptography.

    Affected versions of the package are vulnerable to Hash Collision due to
    an error in the BKS version 1 keystore files.

    BKS is a keystore format, designed to function similarly to a Sun/Oracle
    JKS keystore. BKS files can contain public keys, private keys and
    certificates, and they rely on a password-based encryption to provide
    confidentiality and integrity protections to the keystore contents.

    The first version of a BKS file (aka `BKS-V1`) contained a design flaw
    when determining the key size used to protect the keystore data. It used
    the `SHA-1` hash function, which is 160 bits in length. In a
    `RFC7292-compliant` cryptographic algorithm, the MAC key size should be
    the same size as the hash function being used, meaning that the MAC key
    size should be 160 bits long for BKS files.

    However, Bouncy Castle BKS-V1 files uses only 16 bits for the MAC key
    size. Regardless of the complexity of the password, ghe BKS-V1 file will
    have merely 65,536 different encryption keys. An attacker may bruteforce
    this password in a matter of seconds by testing all 65K values.



    [1]: https://bouncycastle.org
  affected_package: org.bouncycastle:bcprov-jdk14
  vulnerable_versions:
  - "< 1.47"
  severity: high
  package_manager: maven
  cve:
  - CVE-2018-5382
  cwe:
  - CWE-916
  disclosed_date: 2018-03-18
  created_date: 2018-04-02
  last_modified_date: 2018-04-02
  credit:
  - Will Dormann
  references:
  - https://insights.sei.cmu.edu/cert/2018/03/the-curious-case-of-the-bouncy-castle-bks-passwords.html
  - https://www.kb.cert.org/vuls/id/306792
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGBOUNCYCASTLE-31656
- id: snykio:maven:org.bouncycastle:bcprov-jdk14:450990
  title: Hash Collision
  description: |
    [org.bouncycastle:bcprov-jdk14][1] is a Java implementation of
    cryptographic algorithms.

    Affected versions of this package are vulnerable to Hash Collision. Hash
    Collision is possible within BKS due to an error in the BKS version 1
    keystore files.

    BKS is a keystore format, designed to function similarly to a Sun/Oracle
    JKS keystore. BKS files can contain public keys, private keys and
    certificates, and they rely on a password-based encryption to provide
    confidentiality and integrity protections to the keystore contents.

    The first version of a BKS file (aka `BKS-V1`) contained a design flaw
    when determining the key size used to protect the keystore data. It used
    the `SHA-1` hash function, which is 160 bits in length. In a
    `RFC7292-compliant` cryptographic algorithm, the MAC key size should be
    the same size as the hash function being used, meaning that the MAC key
    size should be 160 bits long for BKS files.

    However, Bouncy Castle BKS-V1 files uses only 16 bits for the MAC key
    size. Regardless of the complexity of the password, ghe BKS-V1 file will
    have merely 65,536 different encryption keys. An attacker may bruteforce
    this password in a matter of seconds by testing all 65K values.



    [1]: https://mvnrepository.com/artifact/org.bouncycastle/bcprov-jdk14
  affected_package: org.bouncycastle:bcprov-jdk14
  vulnerable_versions:
  - "< 1.47"
  severity: high
  package_manager: maven
  cve:
  - CVE-2018-5382
  cwe:
  - CWE-916
  disclosed_date: 2018-03-18
  created_date: 2018-04-02
  last_modified_date: 2018-04-02
  credit:
  - Will Dormann
  references:
  - https://github.com/bcgit/bc-java/commit/81b00861cd5711e85fe8dce2a0e119f684120255
  - https://insights.sei.cmu.edu/cert/2018/03/the-curious-case-of-the-bouncy-castle-bks-passwords.html
  - https://www.kb.cert.org/vuls/id/306792
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGBOUNCYCASTLE-450990
- id: snykio:maven:org.bouncycastle:bcprov-jdk14:450996
  title: Hash Collision
  description: |
    [org.bouncycastle:bcprov-jdk14][1] is a Java implementation of
    cryptographic algorithms.

    Affected versions of this package are vulnerable to Hash Collision. Hash
    Collision is possible due to an error in the BKS version 1 keystore
    files.

    BKS is a keystore format, designed to function similarly to a Sun/Oracle
    JKS keystore. BKS files can contain public keys, private keys and
    certificates, and they rely on a password-based encryption to provide
    confidentiality and integrity protections to the keystore contents.

    The first version of a BKS file (aka `BKS-V1`) contained a design flaw
    when determining the key size used to protect the keystore data. It used
    the `SHA-1` hash function, which is 160 bits in length. In a
    `RFC7292-compliant` cryptographic algorithm, the MAC key size should be
    the same size as the hash function being used, meaning that the MAC key
    size should be 160 bits long for BKS files.

    However, Bouncy Castle BKS-V1 files uses only 16 bits for the MAC key
    size. Regardless of the complexity of the password, ghe BKS-V1 file will
    have merely 65,536 different encryption keys. An attacker may bruteforce
    this password in a matter of seconds by testing all 65K values.



    [1]: https://mvnrepository.com/artifact/org.bouncycastle/bcprov-jdk14
  affected_package: org.bouncycastle:bcprov-jdk14
  vulnerable_versions:
  - "< 1.47"
  severity: high
  package_manager: maven
  cve:
  - CVE-2018-5382
  cwe:
  - CWE-916
  disclosed_date: 2018-03-18
  created_date: 2018-04-02
  last_modified_date: 2018-04-02
  credit:
  - Will Dormann
  references:
  - https://github.com/bcgit/bc-java/commit/81b00861cd5711e85fe8dce2a0e119f684120255
  - https://insights.sei.cmu.edu/cert/2018/03/the-curious-case-of-the-bouncy-castle-bks-passwords.html
  - https://www.kb.cert.org/vuls/id/306792
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGBOUNCYCASTLE-450996
