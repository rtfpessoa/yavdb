---
- id: ossindex:maven:com.thoughtworks.xstream:xstream:8398941604
  title: "[CVE-2016-3674]  Information Exposure"
  description: Multiple XML external entity (XXE) vulnerabilities in the (1) Dom4JDriver,
    (2) DomDriver, (3) JDomDriver, (4) JDom2Driver, (5) SjsxpDriver, (6) StandardStaxDriver,
    and (7) WstxDriver drivers in XStream before 1.4.9 allow remote attackers to read
    arbitrary files via a crafted XML document.
  affected_package: com.thoughtworks.xstream:xstream
  vulnerable_versions:
  - "<1.4.9"
  package_manager: maven
  cve:
  - CVE-2016-3674
  disclosed_date: 2016-05-17
  created_date: 2016-05-17
  last_modified_date: 2017-04-11
  credit:
  - OSSIndex
  references:
  - http://lists.fedoraproject.org/pipermail/package-announce/2016-April/183180.html
  - http://lists.fedoraproject.org/pipermail/package-announce/2016-April/183208.html
  - http://rhn.redhat.com/errata/RHSA-2016-2822.html
  - http://rhn.redhat.com/errata/RHSA-2016-2823.html
  - http://www.debian.org/security/2016/dsa-3575
  - http://www.openwall.com/lists/oss-security/2016/03/25/8
  - http://www.openwall.com/lists/oss-security/2016/03/28/1
  - http://www.securityfocus.com/bid/85381
  - http://www.securitytracker.com/id/1036419
  - http://x-stream.github.io/changes.html#1.4.9
  - https://github.com/x-stream/xstream/issues/25
  source_url: https://ossindex.net/resource/package/7015420651/vulnerabilities
- id: ossindex:maven:com.thoughtworks.xstream:xstream:8402545334
  title: Remote code execution due to insecure XML deserialization
  description: "> It was found that XStream would deserialize arbitrary user-supplied
    XML content, representing objects of any type. A remote attacker able to pass
    XML to XStream could use this flaw to perform a variety of attacks, including
    remote code execution in the context of the server running the XStream application.\n>
    \n> -- [redhat.com]()"
  affected_package: com.thoughtworks.xstream:xstream
  vulnerable_versions:
  - "<=1.2.2"
  package_manager: maven
  disclosed_date: 2017-03-10
  created_date: 2017-03-10
  last_modified_date: 2017-04-17
  credit:
  - OSSIndex
  references:
  - http://blog.diniscruz.com/2013/12/xstream-remote-code-execution-exploit.html
  - https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2013-7285
  - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-7285
  - https://github.com/victims/victims-cve-db/blob/master/database/java/2013/7285.yaml
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2013-7285
  source_url: https://ossindex.net/resource/package/7015420651/vulnerabilities
- id: snykio:maven:com.thoughtworks.xstream:xstream:30088
  title: Insecure XML deserialization
  description: |
    [`com.thoughtworks.xstream:xstream`][1] is a simple library to serialize
    objects to XML and back again. XStream could deserialize arbitrary
    user-supplied XML content, representing objects of any type. A remote
    attacker able to pass XML to XStream could use this flaw to perform a
    variety of attacks, including remote code execution in the context of
    the server running the XStream application



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22xstream%22
  affected_package: com.thoughtworks.xstream:xstream
  vulnerable_versions:
  - "< 1.4.6"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2013-7285
  cwe:
  - CWE-502
  disclosed_date: 2013-12-22
  created_date: 2013-12-22
  last_modified_date: 2013-12-22
  credit:
  - Dinis Cruz
  references:
  - http://blog.diniscruz.com/2013/12/xstream-remote-code-execution-exploit.html
  - https://bugzilla.redhat.com/CVE-2013-7285
  - https://fisheye.codehaus.org/changelog/xstream?cs=2210
  source_url: https://snyk.io/vuln/SNYK-JAVA-COMTHOUGHTWORKSXSTREAM-30088
- id: snykio:maven:com.thoughtworks.xstream:xstream:30385
  title: XML External Entity (XXE) Injection
  description: |+
    [`com.thoughtworks.xstream:xstream`][1] is a simple library to serialize
    objects to XML and back again. Multiple XML external entity (XXE)
    vulnerabilities in the (1) Dom4JDriver, (2) DomDriver, (3) JDomDriver,
    (4) JDom2Driver, (5) SjsxpDriver, (6) StandardStaxDriver, and (7)
    WstxDriver drivers in XStream before 1.4.9 allow remote attackers to
    read arbitrary files via a crafted XML document.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22xstream%22
    \nXXE Injection is a type of attack against an application that parses XML
    input. XML is a markup language that defines a set of rules for encoding
    documents in a format that is both human-readable and machine-readable.
    By default, many XML processors allow specification of an external
    entity, a URI that is dereferenced and evaluated during XML processing.
    When an XML document is being parsed, the parser can make a request and
    include the content at the specified URI inside of the XML document.

    Attacks can include disclosing local files, which may contain sensitive
    data such as passwords or private user data, using file: schemes or
    relative paths in the system identifier.

    For example, below is a sample XML document, containing an XML element-
    username.

        <?xml version="1.0" encoding="ISO-8859-1"?>
           <username>John</username>
        </xml>
    {: .language-xml}

    An external XML entity - `xxe`, is defined using a system identifier and
    present within a DOCTYPE header. These entities can access local or
    remote content. For example the below code contains an external XML
    entity that would fetch the content of `/etc/passwd` and display it to
    the user rendered by `username`.

        <?xml version="1.0" encoding="ISO-8859-1"?>
        <!DOCTYPE foo [
           <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
           <username>&xxe;</username>
        </xml>
    {: .language-xml}

    Other XXE Injection attacks can access local resources that may not stop
    returning data, possibly impacting application availability and leading
    to Denial of Service.

  affected_package: com.thoughtworks.xstream:xstream
  vulnerable_versions:
  - ">= 0.3 < 1.4.9"
  severity: high
  package_manager: maven
  cve:
  - CVE-2016-3674
  cwe:
  - CWE-200
  disclosed_date: 2016-03-20
  created_date: 2016-03-20
  last_modified_date: 2016-03-20
  credit:
  - guykoth
  references:
  - http://www.openwall.com/lists/oss-security/2016/03/28/1
  - https://github.com/x-stream/xstream/issues/25
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-3674
  source_url: https://snyk.io/vuln/SNYK-JAVA-COMTHOUGHTWORKSXSTREAM-30385
- id: snykio:maven:com.thoughtworks.xstream:xstream:31394
  title: Denial of Service (DoS)
  description: |+
    [com.thoughtworks.xstream:xstream][1] is a simple library to serialize
    objects to XML and back again.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS). When a certain denyTypes workaround is not used, mishandles
    attempts to create an instance of the primitive type \'void\' during
    unmarshalling, leading to a remote application crash, as demonstrated by
    an `xstream.fromXML("&lt;void/>")` call.



    [1]: https://x-stream.github.io/
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: com.thoughtworks.xstream:xstream
  vulnerable_versions:
  - "< 1.4.10"
  severity: high
  package_manager: maven
  cve:
  - CVE-2017-7957
  cwe:
  - CWE-20
  disclosed_date: 2017-04-29
  created_date: 2017-05-21
  last_modified_date: 2017-05-21
  credit:
  - Unknown
  references:
  - http://x-stream.github.io/CVE-2017-7957.html
  - https://github.com/x-stream/xstream/commit/6e546ec366419158b1e393211be6d78ab9604ab
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2017-7957
  source_url: https://snyk.io/vuln/SNYK-JAVA-COMTHOUGHTWORKSXSTREAM-31394
- id: snykio:maven:com.thoughtworks.xstream:xstream:456705
  title: Deserialization of Untrusted Data
  description: |
    [com.thoughtworks.xstream:xstream][1] is a simple library to serialize
    objects to XML and back again.

    Affected versions of this package are vulnerable to Deserialization of
    Untrusted Data. If the security framework has not been initialized, it
    may allow a remote attacker to run arbitrary shell commands when
    unmarshalling XML or any supported format.



    [1]: https://x-stream.github.io/
    \nSerialization is a process of converting an object into a sequence of
    bytes which can be persisted to a disk or database or can be sent
    through streams. The reverse process of creating object from sequence of
    bytes is called deserialization. Serialization is commonly used for
    communication (sharing objects between multiple hosts) and persistence
    (store the object state in a file or a database). It is an integral part
    of popular protocols like *Remote Method Invocation (RMI)*, *Java
    Management Extension (JMX)*, *Java Messaging System (JMS)*, *Action
    Message Format (AMF)*, *Java Server Faces (JSF) ViewState*, etc.

    *Deserialization of untrusted data* ([CWE-502][1]), is when the
    application deserializes untrusted data without sufficiently verifying
    that the resulting data will be valid, letting the attacker to control
    the state or the flow of the execution.

    Java deserialization issues have been known for years. However, interest
    in the issue intensified greatly in 2015, when classes that could be
    abused to achieve remote code execution were found in a [popular library
    (Apache Commons Collection)][2]. These classes were used in zero-days
    affecting IBM WebSphere, Oracle WebLogic and many other products.

    An attacker just needs to identify a piece of software that has both a
    vulnerable class on its path, and performs deserialization on untrusted
    data. Then all they need to do is send the payload into the
    deserializer, getting the command executed.

    > Developers put too much trust in Java Object Serialization. Some even
    > de-serialize objects pre-authentication. When deserializing an Object
    > in Java you typically cast it to an expected type, and therefore
    > Java\'s strict type system will ensure you only get valid object
    > trees. Unfortunately, by the time the type checking happens, platform
    > code has already created and executed significant logic. So, before
    > the final type is checked a lot of code is executed from the
    > readObject() methods of various objects, all of which is out of the
    > developer\'s control. By combining the readObject() methods of various
    > classes which are available on the classpath of the vulnerable
    > application an attacker can execute functions (including calling
    > Runtime.exec() to execute local OS commands).

    * Apache Blog



    [1]: https://cwe.mitre.org/data/definitions/502.html
    [2]: https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078
  affected_package: com.thoughtworks.xstream:xstream
  vulnerable_versions:
  - ">= 1.4.10 < 1.4.11"
  severity: high
  package_manager: maven
  cve:
  - CVE-2019-10173
  cwe:
  - CWE-502
  disclosed_date: 2019-06-21
  created_date: 2019-08-05
  last_modified_date: 2019-08-05
  credit:
  - Laura Pardo
  references:
  - http://x-stream.github.io/changes.html#1.4.11
  - https://access.redhat.com/security/cve/cve-2013-7285
  - https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2019-10173
  source_url: https://snyk.io/vuln/SNYK-JAVA-COMTHOUGHTWORKSXSTREAM-456705
- id: snykio:maven:com.thoughtworks.xstream:xstream:460764
  title: Insecure XML deserialization
  description: |
    [com.thoughtworks.xstream:xstream][1] is a simple library to serialize
    objects to XML and back again.

    Affected versions of this package are vulnerable to Insecure XML
    deserialization. It could deserialize arbitrary user-supplied XML
    content, representing objects of any type. A remote attacker able to
    pass XML to XStream could use this flaw to perform a variety of attacks,
    including remote code execution in the context of the server running the
    XStream application.



    [1]: https://x-stream.github.io/
  affected_package: com.thoughtworks.xstream:xstream
  vulnerable_versions:
  - "< 1.4.11"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2013-7285
  cwe:
  - CWE-94
  disclosed_date: 2016-12-25
  created_date: 2016-12-25
  last_modified_date: 2016-12-25
  credit:
  - Dinis Cruz
  references:
  - http://blog.diniscruz.com/2013/12/xstream-remote-code-execution-exploit.html
  - https://bugzilla.redhat.com/CVE-2013-7285
  - https://github.com/x-stream/xstream/commit/6344867dce6767af7d0fe34fb393271a6456672d
  - https://www.exploit-db.com/exploits/39193
  source_url: https://snyk.io/vuln/SNYK-JAVA-COMTHOUGHTWORKSXSTREAM-460764
- id: victims:maven:com.thoughtworks.xstream:xstream:2013-7285
  title: 'XStream: remote code execution due to insecure XML deserialization'
  affected_package: com.thoughtworks.xstream:xstream
  vulnerable_versions:
  - "<=1.4.6"
  patched_versions:
  - ">=1.4.7"
  severity: high
  package_manager: maven
  cve:
  - CVE-2013-7285
  cvss_v2_score: 6.8
  credit:
  - Victims CVE Database
  references:
  - http://blog.diniscruz.com/2013/12/xstream-remote-code-execution-exploit.html
  - https://bugzilla.redhat.com/CVE-2013-7285
  - https://fisheye.codehaus.org/changelog/xstream?cs=2210
  source_url: https://github.com/victims/victims-cve-db/blob/master/database/java/2013/7285.yaml
- id: victims:maven:com.thoughtworks.xstream:xstream:2017-7957
  title: Denial of Service on XStream
  description: 'XStream through 1.4.9, when a certain denyTypes workaround is not
    used, mishandles attempts to create an instance of the primitive type ''void''
    during unmarshalling, leading to a remote application crash, as demonstrated by
    an xstream.fromXML("<void/>") call.

'
  affected_package: com.thoughtworks.xstream:xstream
  vulnerable_versions:
  - "<=1.4.9"
  patched_versions:
  - ">=1.4.10"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2017-7957
  cvss_v2_score: 5.9
  credit:
  - Victims CVE Database
  references:
  - http://x-stream.github.io/CVE-2017-7957.html
  - https://access.redhat.com/security/cve/cve-2017-7957
  - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-7957
  - https://security-tracker.debian.org/tracker/CVE-2017-7957
  source_url: https://github.com/victims/victims-cve-db/blob/master/database/java/2017/7957.yaml
