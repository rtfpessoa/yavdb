---
- id: snykio:maven:org.apache.flex.blazeds:blazeds:31455
  title: Arbitrary Code Execution
  description: |
    [org.apache.flex.blazeds:blazeds][1] is an application development
    framework for easily building Flash-based applications for mobile
    devices, web browsers, and desktops.

    Affected versions of this package are vulnerable to Arbitrary Code
    Execution. The AMF deserialization implementation of Flex BlazeDS is
    vulnerable to Deserialization of Untrusted Data. By sending a specially
    crafted AMF message, it is possible to make the server establish a
    connection to an endpoint specified in the message and request an RMI
    remote object from that endpoint. This can result in the execution of
    arbitrary code on the server via Java deserialization.

    Starting with BlazeDS version `4.7.3`, Deserialization of XML is
    disabled completely per default, while the
    `ClassDeserializationValidator` allows deserialization of whitelisted
    classes only. BlazeDS internally comes with the following whitelist:

        flex.messaging.io.amf.ASObject
        flex.messaging.io.amf.SerializedObject
        flex.messaging.io.ArrayCollection
        flex.messaging.io.ArrayList
        flex.messaging.messages.AcknowledgeMessage
        flex.messaging.messages.AcknowledgeMessageExt
        flex.messaging.messages.AsyncMessage
        flex.messaging.messages.AsyncMessageExt
        flex.messaging.messages.CommandMessage
        flex.messaging.messages.CommandMessageExt
        flex.messaging.messages.ErrorMessage
        flex.messaging.messages.HTTPMessage
        flex.messaging.messages.RemotingMessage
        flex.messaging.messages.SOAPMessage
        java.lang.Boolean
        java.lang.Byte
        java.lang.Character
        java.lang.Double
        java.lang.Float
        java.lang.Integer
        java.lang.Long
        java.lang.Object
        java.lang.Short
        java.lang.String
        java.util.ArrayList
        java.util.Date
        java.util.HashMap
        org.w3c.dom.Document



    [1]: https://github.com/apache/flex-blazeds
    \nSerialization is a process of converting an object into a sequence of
    bytes which can be persisted to a disk or database or can be sent
    through streams. The reverse process of creating object from sequence of
    bytes is called deserialization. Serialization is commonly used for
    communication (sharing objects between multiple hosts) and persistence
    (store the object state in a file or a database). It is an integral part
    of popular protocols like *Remote Method Invocation (RMI)*, *Java
    Management Extension (JMX)*, *Java Messaging System (JMS)*, *Action
    Message Format (AMF)*, *Java Server Faces (JSF) ViewState*, etc.

    *Deserialization of untrusted data* ([CWE-502][1]), is when the
    application deserializes untrusted data without sufficiently verifying
    that the resulting data will be valid, letting the attacker to control
    the state or the flow of the execution.

    Java deserialization issues have been known for years. However, interest
    in the issue intensified greatly in 2015, when classes that could be
    abused to achieve remote code execution were found in a [popular library
    (Apache Commons Collection)][2]. These classes were used in zero-days
    affecting IBM WebSphere, Oracle WebLogic and many other products.

    An attacker just needs to identify a piece of software that has both a
    vulnerable class on its path, and performs deserialization on untrusted
    data. Then all they need to do is send the payload into the
    deserializer, getting the command executed.

    > Developers put too much trust in Java Object Serialization. Some even
    > de-serialize objects pre-authentication. When deserializing an Object
    > in Java you typically cast it to an expected type, and therefore
    > Java\'s strict type system will ensure you only get valid object
    > trees. Unfortunately, by the time the type checking happens, platform
    > code has already created and executed significant logic. So, before
    > the final type is checked a lot of code is executed from the
    > readObject() methods of various objects, all of which is out of the
    > developer\'s control. By combining the readObject() methods of various
    > classes which are available on the classpath of the vulnerable
    > application an attacker can execute functions (including calling
    > Runtime.exec() to execute local OS commands).

    * Apache Blog



    [1]: https://cwe.mitre.org/data/definitions/502.html
    [2]: https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078
  affected_package: org.apache.flex.blazeds:blazeds
  vulnerable_versions:
  - "< 4.7.3"
  severity: high
  package_manager: maven
  cve:
  - CVE-2017-5641
  cwe:
  - CWE-502
  disclosed_date: 2017-04-25
  created_date: 2017-08-09
  last_modified_date: 2017-08-09
  credit:
  - Markus Wulftange
  references:
  - http://www.securitytracker.com/id/1038364
  - https://github.com/apache/flex-blazeds/blob/master/RELEASE_NOTES
  - https://github.com/apache/flex-blazeds/commit/f861f0993c35e664906609cad275e45a71e2aaf1
  - https://nvd.nist.gov/vuln/detail/CVE-2017-5641
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHEFLEXBLAZEDS-31455
- id: snykio:maven:org.apache.flex.blazeds:blazeds:31479
  title: Deserialization of Untrusted Data
  description: |
    [org.apache.flex.blazeds:blazeds][1] is an application development
    framework for easily building Flash-based applications for mobile
    devices, web browsers, and desktops.

    Affected versions of this package are vulnerable to Deserialization of
    Untrusted Data. Adobe LiveCycle Data Services 3.1 and earlier, LiveCycle
    9.0.0.2 and earlier, and BlazeDS 4.0.1 and earlier do not properly
    restrict creation of classes during deserialization of (1) AMF and (2)
    AMFX data, which allows attackers to have an unspecified impact via
    unknown vectors, related to a \"deserialization vulnerability.\"



    [1]: https://github.com/apache/flex-blazeds
    \nSerialization is a process of converting an object into a sequence of
    bytes which can be persisted to a disk or database or can be sent
    through streams. The reverse process of creating object from sequence of
    bytes is called deserialization. Serialization is commonly used for
    communication (sharing objects between multiple hosts) and persistence
    (store the object state in a file or a database). It is an integral part
    of popular protocols like *Remote Method Invocation (RMI)*, *Java
    Management Extension (JMX)*, *Java Messaging System (JMS)*, *Action
    Message Format (AMF)*, *Java Server Faces (JSF) ViewState*, etc.

    *Deserialization of untrusted data* ([CWE-502][1]), is when the
    application deserializes untrusted data without sufficiently verifying
    that the resulting data will be valid, letting the attacker to control
    the state or the flow of the execution.

    Java deserialization issues have been known for years. However, interest
    in the issue intensified greatly in 2015, when classes that could be
    abused to achieve remote code execution were found in a [popular library
    (Apache Commons Collection)][2]. These classes were used in zero-days
    affecting IBM WebSphere, Oracle WebLogic and many other products.

    An attacker just needs to identify a piece of software that has both a
    vulnerable class on its path, and performs deserialization on untrusted
    data. Then all they need to do is send the payload into the
    deserializer, getting the command executed.

    > Developers put too much trust in Java Object Serialization. Some even
    > de-serialize objects pre-authentication. When deserializing an Object
    > in Java you typically cast it to an expected type, and therefore
    > Java\'s strict type system will ensure you only get valid object
    > trees. Unfortunately, by the time the type checking happens, platform
    > code has already created and executed significant logic. So, before
    > the final type is checked a lot of code is executed from the
    > readObject() methods of various objects, all of which is out of the
    > developer\'s control. By combining the readObject() methods of various
    > classes which are available on the classpath of the vulnerable
    > application an attacker can execute functions (including calling
    > Runtime.exec() to execute local OS commands).

    * Apache Blog

    The vulnerability, also know as *Mad Gadget*

    > Mad Gadget is one of the most pernicious vulnerabilities we’ve seen.
    > By merely existing on the Java classpath, seven “gadget” classes in
    > Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0)
    > make object deserialization for the entire JVM process Turing complete
    > with an exec function. Since many business applications use object
    > deserialization to send messages across the network, it would be like
    > hiring a bank teller who was trained to hand over all the money in the
    > vault if asked to do so politely, and then entrusting that teller with
    > the key. The only thing that would keep a bank safe in such a
    > circumstance is that most people wouldn’t consider asking such a
    > question.

    * Google



    [1]: https://cwe.mitre.org/data/definitions/502.html
    [2]: https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078
  affected_package: org.apache.flex.blazeds:blazeds
  vulnerable_versions:
  - "< 4.0.1"
  severity: high
  package_manager: maven
  cve:
  - CVE-2011-2092
  cwe:
  - CWE-502
  disclosed_date: 2011-06-13
  created_date: 2017-08-31
  last_modified_date: 2017-08-31
  credit:
  - Wouter Coekaerts
  references:
  - http://www.adobe.com/support/security/bulletins/apsb11-15.html
  - https://nvd.nist.gov/vuln/detail/CVE-2011-2093
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHEFLEXBLAZEDS-31479
- id: snykio:maven:org.apache.flex.blazeds:blazeds:31480
  title: Denial of Service (DoS)
  description: |+
    [org.apache.flex.blazeds:blazeds][1] is an application development
    framework for easily building Flash-based applications for mobile
    devices, web browsers, and desktops.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS). Adobe LiveCycle Data Services 3.1 and earlier, LiveCycle 9.0.0.2
    and earlier, and BlazeDS 4.0.1 and earlier do not properly handle object
    graphs, which allows attackers to cause a denial of service via
    unspecified vectors, related to a \"complex object graph
    vulnerability.\"



    [1]: https://github.com/apache/flex-blazeds
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: org.apache.flex.blazeds:blazeds
  vulnerable_versions:
  - "< 4.0.1"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2011-2093
  cwe:
  - CWE-399
  disclosed_date: 2011-06-13
  created_date: 2017-08-31
  last_modified_date: 2017-08-31
  credit:
  - Wouter Coekaerts
  references:
  - http://drops.dagstuhl.de/opus/volltexte/2017/7260/pdf/LIPIcs-ECOOP-2017-10.pdf
  - http://www.adobe.com/support/security/bulletins/apsb11-15.html
  - https://nvd.nist.gov/vuln/detail/CVE-2011-2092
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHEFLEXBLAZEDS-31480
