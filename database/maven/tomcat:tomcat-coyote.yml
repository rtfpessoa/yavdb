---
- id: ossindex:maven:tomcat:tomcat-coyote:311310
  title: "[CVE-2005-2090] Jakarta Tomcat 5.0.19 (Coyote/1.1) and Tomcat 4.1.24 (Coyote/1.0)
    allows remote ..."
  description: 'Jakarta Tomcat 5.0.19 (Coyote/1.1) and Tomcat 4.1.24 (Coyote/1.0)
    allows remote attackers to poison the web cache, bypass web application firewall
    protection, and conduct XSS attacks via an HTTP request with both a "Transfer-Encoding:
    chunked" header and a Content-Length header, which causes Tomcat to incorrectly
    handle and forward the body of the request in a way that causes the receiving
    server to process it as a separate HTTP request, aka "HTTP Request Smuggling."'
  affected_package: tomcat:tomcat-coyote
  vulnerable_versions:
  - '1.0'
  - '1.1'
  package_manager: maven
  cve:
  - CVE-2005-2090
  disclosed_date: 2005-07-05
  created_date: 2005-07-05
  last_modified_date: 2017-04-19
  credit:
  - OSSIndex
  references:
  - http://community.ca.com/blogs/casecurityresponseblog/archive/2009/01/23.aspx
  - http://docs.info.apple.com/article.html?artnum=306172
  - http://h20000.www2.hp.com/bizsupport/TechSupport/Document.jsp?objectID=c01178795
  - http://lists.apple.com/archives/security-announce//2007/Jul/msg00004.html
  - http://lists.opensuse.org/opensuse-security-announce/2008-03/msg00001.html
  - http://lists.vmware.com/pipermail/security-announce/2008/000003.html
  - http://seclists.org/lists/bugtraq/2005/Jun/0025.html
  - http://secunia.com/advisories/26235
  - http://secunia.com/advisories/26660
  - http://secunia.com/advisories/27037
  - http://secunia.com/advisories/28365
  - http://secunia.com/advisories/29242
  - http://secunia.com/advisories/30899
  - http://secunia.com/advisories/30908
  - http://secunia.com/advisories/33668
  - http://securitytracker.com/id?1014365
  - http://sunsolve.sun.com/search/document.do?assetkey=1-26-239312-1
  - http://support.avaya.com/elmodocs2/security/ASA-2007-206.htm
  - http://support.ca.com/irj/portal/anonymous/phpsupcontent?contentID=197540
  - http://tomcat.apache.org/security-4.html
  - http://tomcat.apache.org/security-5.html
  - http://tomcat.apache.org/security-6.html
  - http://www.fujitsu.com/global/support/software/security/products-f/interstage-200703e.html
  - http://www.redhat.com/support/errata/RHSA-2007-0327.html
  - http://www.redhat.com/support/errata/RHSA-2007-0360.html
  - http://www.redhat.com/support/errata/RHSA-2008-0261.html
  - http://www.securiteam.com/securityreviews/5GP0220G0U.html
  - http://www.securityfocus.com/archive/1/archive/1/485938/100/0/threaded
  - http://www.securityfocus.com/archive/1/archive/1/500396/100/0/threaded
  - http://www.securityfocus.com/archive/1/archive/1/500412/100/0/threaded
  - http://www.securityfocus.com/bid/13873
  - http://www.securityfocus.com/bid/25159
  - http://www.vupen.com/english/advisories/2007/2732
  - http://www.vupen.com/english/advisories/2007/3087
  - http://www.vupen.com/english/advisories/2007/3386
  - http://www.vupen.com/english/advisories/2008/0065
  - http://www.vupen.com/english/advisories/2008/1979/references
  - http://www.vupen.com/english/advisories/2009/0233
  - http://www.watchfire.com/resources/HTTP-Request-Smuggling.pdf
  source_url: https://ossindex.net/resource/package/7015191228/vulnerabilities
- id: ossindex:maven:tomcat:tomcat-coyote:8402545391
  title: "[Disputed] Arbitrary file upload via deserialization"
  description: "> A poison null byte flaw was found in the implementation of the DiskFileItem
    class. A remote attacker able to supply a serialized instance of the DiskFileItem
    class, which will be deserialized on a server, could use this flaw to write arbitrary
    content to any location on the server that is permitted by the user running the
    application server process.\n> \n> -- [redhat.com](https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2013-2185)"
  affected_package: tomcat:tomcat-coyote
  vulnerable_versions:
  - ">=7.0.0 <7.0.40"
  package_manager: maven
  disclosed_date: 2017-03-10
  created_date: 2017-03-10
  last_modified_date: 2017-04-19
  credit:
  - OSSIndex
  references:
  - https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2013-2185
  - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-2185
  - https://github.com/victims/victims-cve-db/blob/master/database/java/2013/2185.yaml
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2013-2185
  source_url: https://ossindex.net/resource/package/7015191228/vulnerabilities
- id: snykio:maven:tomcat:tomcat-coyote:31378
  title: Denial of Service (DoS)
  description: |+
    [`tomcat:tomcat-coyote`][1] Apache Tomcat 5.5.0 through 5.5.29, 6.0.0
    through 6.0.27, and 7.0.0 beta does not properly handle an invalid
    Transfer-Encoding header, which allows remote attackers to cause a
    denial of service (application outage) or obtain sensitive information
    via a crafted header that interferes with \"recycling of a buffer.\"



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22tomcat-coyote%22
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: tomcat:tomcat-coyote
  vulnerable_versions:
  - ">= 5.5 < 5.5.30"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2010-2227
  cwe:
  - CWE-119
  disclosed_date: 2010-07-13
  created_date: 2014-01-10
  last_modified_date: 2014-01-10
  credit:
  - Unknown
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2010-2227
  source_url: https://snyk.io/vuln/SNYK-JAVA-TOMCAT-31378
- id: snykio:maven:tomcat:tomcat-coyote:31379
  title: Access Restriction Bypass
  description: |
    [`tomcat:tomcat-coyote`][1] Certain AJP protocol connector
    implementations in Apache Tomcat 7.0.0 through 7.0.20, 6.0.0 through
    6.0.33, 5.5.0 through 5.5.33, and possibly other versions allow remote
    attackers to spoof AJP requests, bypass authentication, and obtain
    sensitive information by causing the connector to interpret a request
    body as a new request.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22tomcat-coyote%22
  affected_package: tomcat:tomcat-coyote
  vulnerable_versions:
  - ">= 5.5.4"
  severity: high
  package_manager: maven
  cve:
  - CVE-2011-3190
  cwe:
  - CWE-264
  disclosed_date: 2011-08-31
  created_date: 2015-06-10
  last_modified_date: 2015-06-10
  credit:
  - Unknown
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2011-3190
  source_url: https://snyk.io/vuln/SNYK-JAVA-TOMCAT-31379
- id: snykio:maven:tomcat:tomcat-coyote:31380
  title: Information Exposure
  description: |
    [tomcat:tomcat-coyote][1] is a discontinued coyote plugin for Tomcat.

    Affected versions of this package are vulnerable to Information
    Exposure. Apache Tomcat before 6.0.39, 7.x before 7.0.47, and 8.x before
    8.0.0-RC3, when an HTTP connector or AJP connector is used, does not
    properly handle certain inconsistent HTTP request headers, which allows
    remote attackers to trigger incorrect identification of a request\'s
    length and conduct request-smuggling attacks via (1) multiple
    Content-Length headers or (2) a Content-Length header and a
    \"Transfer-Encoding: chunked\" header.

    **NOTE:** this vulnerability exists because of an incomplete fix for
    CVE-2005-2090.



    [1]: https://archive.apache.org/dist/tomcat/
  affected_package: tomcat:tomcat-coyote
  vulnerable_versions:
  - ">= 0"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2013-4286
  cwe:
  - CWE-200
  disclosed_date: 2014-02-26
  created_date: 2015-03-03
  last_modified_date: 2015-03-03
  credit:
  - Unknown
  references:
  - http://tomcat.apache.org/security-8.html
  - http://www.openwall.com/lists/oss-security/2016/11/22/17
  - https://github.com/apache/tomcat/commit/41b90b6ebc3e7f898a5a87d197ddf63790d33315
  - https://github.com/apache/tomcat/commit/bcce3e4997a4ed06fe03e2517443f3ad8ade2dfa
  - https://github.com/apache/tomcat80/commit/ff00954b78e6484e40f323c0cef2e6d95c2882b9
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2013-4286
  source_url: https://snyk.io/vuln/SNYK-JAVA-TOMCAT-31380
- id: snykio:maven:tomcat:tomcat-coyote:31381
  title: Denial of Service (DoS)
  description: "[tomcat:tomcat-coyote][1] is a discontinued coyote plugin for Tomcat.\n\nAffected
    versions of this package are vulnerable to Denial of Service\n(DoS). Apache Tomcat
    before 6.0.39, 7.x before 7.0.50, and 8.x before\n8.0.0-RC10 processes chunked
    transfer coding without properly handling\n(1) a large total amount of chunked
    data or (2) whitespace characters in\nan HTTP header value within a trailer field,
    which allows remote\nattackers to cause a denial of service by streaming data.
    NOTE: this\nvulnerability exists because of an incomplete fix for CVE-2012-3544.\n\n\n\n[1]:
    https://archive.apache.org/dist/tomcat/\n\\nDenial of Service (DoS) describes
    a family of attacks, all aimed at\nmaking a system inaccessible to its original
    and legitimate users. There\nare many types of DoS attacks, ranging from trying
    to clog the network\npipes to the system by generating a large volume of traffic
    from many\nmachines (a Distributed Denial of Service - DDoS - attack) to sending\ncrafted
    requests that cause a system to crash or take a disproportional\namount of time
    to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial
    of\nService attack. Regular expressions are incredibly powerful, but they\naren\\'t
    very intuitive and can ultimately end up making it easy for\nattackers to take
    your site down.\n\nLet’s take the following regular expression as an example:\n\n
    \   regex = /A(B|C+)+D/\n{: .language-js}\n\nThis regular expression accomplishes
    the following:\n\n* `A` The string must start with the letter \\'A\\'\n* `(B|C+)+`
    The string must then follow the letter A with either the\n  letter \\'B\\' or
    some number of occurrences of the letter \\'C\\' (the\n  `+` matches one or more
    times). The `+` at the end of this section\n  states that we can look for one
    or more matches of this section.\n* `D` Finally, we ensure this section of the
    string ends with a \\'D\\'\n\nThe expression would match inputs such as `ABBD`,
    `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases, it doesn\\'t take very
    long for a regex engine to find a\nmatch:\n\n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n
    \   0.04s user 0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n{: .language-bash}\n\nThe entire
    process of testing it against a 30 characters long string\ntakes around ~52ms.
    But when given an invalid string, it takes nearly\ntwo seconds to complete the
    test, over ten times as long as it took to\ntest a valid string. The dramatic
    difference is due to the way regular\nexpressions get evaluated.\n\nMost Regex
    engines will work very similarly (with minor differences).\nThe engine will match
    the first possible way to accept the current\ncharacter and proceed to the next
    one. If it then fails to match the\nnext one, it will backtrack and see if there
    was another way to digest\nthe previous character. If it goes too far down the
    rabbit hole only to\nfind out the string doesn’t match in the end, and if many
    characters\nhave multiple valid regex paths, the number of backtracking steps
    can\nbecome very large, resulting in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s
    look at how our expression runs into this problem, using a\nshorter string: \\\"ACCCX\\\".
    While it seems fairly straightforward, there\nare still four different ways that
    the engine could match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.
    \ C+C+C.\n\nThe engine has to try each of those combinations to see if any of
    them\npotentially match against the expression. When you combine that with the\nother
    steps the engine must take, we can use [RegEx 101 debugger][1] to\nsee the engine
    has to take a total of 38 steps before it can determine\nthe string doesn\\'t
    match.\n\nFrom there, the number of steps the engine must use to validate a string\njust
    continues to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n|
    ACCCX | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX
    | 14 | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to
    take over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n"
  affected_package: tomcat:tomcat-coyote
  vulnerable_versions:
  - ">= 3.3.2 < 5.5.24"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2013-4322
  cwe:
  - CWE-400
  disclosed_date: 2014-02-26
  created_date: 2014-06-08
  last_modified_date: 2014-06-08
  credit:
  - Unknown
  references:
  - https://github.com/apache/tomcat/commit/a91516b80deaf1d0c6e04a7931765fdac34c4ccd
  - https://github.com/apache/tomcat/commit/d6a9898125f34e593de426e8c7dabb0f224fc00f
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2013-4322
  source_url: https://snyk.io/vuln/SNYK-JAVA-TOMCAT-31381
- id: snykio:maven:tomcat:tomcat-coyote:467116
  title: Information Exposure
  description: |
    [tomcat:tomcat-coyote][1] is a discontinued coyote plugin for Tomcat.

    Affected versions of this package are vulnerable to Information
    Exposure. The previous fix for `CVE-2007-3385` was incomplete. It did
    not consider the use of quotes or `%5C` within a cookie value which
    might cause sensitive information such as session IDs to be leaked to
    remote attackers and enable session hijacking attacks.



    [1]: https://archive.apache.org/dist/tomcat/
  affected_package: tomcat:tomcat-coyote
  vulnerable_versions:
  - ">= 4.1.0"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2007-5333
  cwe:
  - CWE-000
  disclosed_date: 2008-02-12
  created_date: 2019-09-17
  last_modified_date: 2019-09-17
  credit:
  - Unknown
  references:
  - http://svn.apache.org/viewvc?view=revision&revision=620028
  - https://tomcat.apache.org/security-4.html
  - https://tomcat.apache.org/security-5.html
  - https://tomcat.apache.org/security-6.html
  source_url: https://snyk.io/vuln/SNYK-JAVA-TOMCAT-467116
