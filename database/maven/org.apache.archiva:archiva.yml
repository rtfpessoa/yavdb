---
- id: ossindex:maven:org.apache.archiva:archiva:342713
  title: "[CVE-2010-3449]  Cross-Site Request Forgery (CSRF)"
  description: Cross-site request forgery (CSRF) vulnerability in Redback before 1.2.4,
    as used in Apache Archiva 1.0 through 1.0.3, 1.1 through 1.1.4, 1.2 through 1.2.2,
    and 1.3 through 1.3.1; and Apache Continuum 1.3.6, 1.4.0, and 1.1 through 1.2.3.1;
    allows remote attackers to hijack the authentication of administrators for requests
    that modify credentials.
  affected_package: org.apache.archiva:archiva
  vulnerable_versions:
  - '1.0'
  - 1.0.1
  - 1.0.2
  - 1.0.3
  - '1.1'
  - 1.1.1
  - 1.1.2
  - 1.1.3
  - 1.1.4
  - '1.2'
  - 1.2.1
  - 1.2.2
  - '1.3'
  - 1.3.1
  package_manager: maven
  cve:
  - CVE-2010-3449
  disclosed_date: 2010-12-06
  created_date: 2010-12-06
  last_modified_date: 2017-04-19
  credit:
  - OSSIndex
  references:
  - http://archiva.apache.org/security.html
  - http://continuum.apache.org/security.html
  - http://jira.codehaus.org/browse/MRM-1438
  - http://mail-archives.apache.org/mod_mbox/archiva-users/201011.mbox/ajax/%3CAANLkTimXejHAuXdoUKLN=GkNty1_XnRCbv0YA0T2cS_2@mail.gmail.com%3E
  - http://mail-archives.apache.org/mod_mbox/continuum-users/201102.mbox/%3C032C189E-D821-4833-A8F2-F72365147695@apache.org%3E
  - http://seclists.org/fulldisclosure/2011/Feb/238
  - http://secunia.com/advisories/42376
  - http://secunia.com/advisories/43261
  - http://svn.apache.org/viewvc/archiva/branches/archiva-1.3.x/archiva-modules/archiva-web/archiva-webapp/src/main/resources/struts.xml?r1=1038518&r2=1038517&pathrev=1038518
  - http://svn.apache.org/viewvc/archiva/branches/archiva-1.3.x/pom.xml?r1=1038518&r2=1038517&pathrev=1038518
  - http://svn.apache.org/viewvc?view=revision&revision=1038518
  - http://svn.apache.org/viewvc?view=revision&revision=1066010
  - http://www.osvdb.org/69520
  - http://www.securityfocus.com/archive/1/archive/1/514937/100/0/threaded
  - http://www.securityfocus.com/archive/1/archive/1/516341/100/0/threaded
  - http://www.securityfocus.com/bid/45095
  - http://www.securitytracker.com/id?1025066
  - http://www.vupen.com/english/advisories/2010/3098
  - http://www.vupen.com/english/advisories/2011/0373
  source_url: https://ossindex.net/resource/package/7015390102/vulnerabilities
- id: ossindex:maven:org.apache.archiva:archiva:343546
  title: '[CVE-2010-4408]  Improper Neutralization of Input During Web Page Generation
    ("Cross-site Scripting")'
  description: Apache Archiva 1.0 through 1.0.3, 1.1 through 1.1.4, 1.2 through 1.2.2,
    and 1.3 through 1.3.1 does not require entry of the administrator's password at
    the time of modifying a user account, which makes it easier for context-dependent
    attackers to gain privileges by leveraging a (1) unattended workstation or (2)
    cross-site request forgery (CSRF) vulnerability, a related issue to CVE-2010-3449.
  affected_package: org.apache.archiva:archiva
  vulnerable_versions:
  - '1.0'
  - 1.0.1
  - 1.0.2
  - 1.0.3
  - '1.1'
  - 1.1.1
  - 1.1.2
  - 1.1.3
  - 1.1.4
  - '1.2'
  - 1.2.1
  - 1.2.2
  - '1.3'
  - 1.3.1
  package_manager: maven
  cve:
  - CVE-2010-4408
  disclosed_date: 2010-12-06
  created_date: 2010-12-06
  last_modified_date: 2017-06-02
  credit:
  - OSSIndex
  references:
  - http://archiva.apache.org/security.html
  - http://mail-archives.apache.org/mod_mbox/archiva-users/201011.mbox/ajax/%3CAANLkTimXejHAuXdoUKLN=GkNty1_XnRCbv0YA0T2cS_2@mail.gmail.com%3E
  - http://www.securityfocus.com/archive/1/archive/1/514937/100/0/threaded
  source_url: https://ossindex.net/resource/package/7015390102/vulnerabilities
- id: ossindex:maven:org.apache.archiva:archiva:344859
  title: '[CVE-2011-0533]  Improper Neutralization of Input During Web Page Generation
    ("Cross-site Scripting")'
  description: Cross-site scripting (XSS) vulnerability in Apache Continuum 1.1 through
    1.2.3.1, 1.3.6, and 1.4.0 Beta; and Archiva 1.3.0 through 1.3.3 and 1.0 through
    1.22 allows remote attackers to inject arbitrary web script or HTML via a crafted
    parameter, related to the autoIncludeParameters setting for the extremecomponents
    table.
  affected_package: org.apache.archiva:archiva
  vulnerable_versions:
  - '1.0'
  - 1.0.1
  - 1.0.2
  - 1.0.3
  - '1.1'
  - 1.1.1
  - 1.1.2
  - 1.1.3
  - 1.1.4
  - '1.2'
  - 1.2.1
  - 1.2.2
  - '1.3'
  - 1.3.1
  - 1.3.2
  - 1.3.3
  package_manager: maven
  cve:
  - CVE-2011-0533
  disclosed_date: 2011-02-17
  created_date: 2011-02-17
  last_modified_date: 2017-04-19
  credit:
  - OSSIndex
  references:
  - http://continuum.apache.org/security.html
  - http://jira.codehaus.org/browse/CONTINUUM-2604
  - http://mail-archives.apache.org/mod_mbox/continuum-users/201102.mbox/%3C981C0A79-5B7B-4053-84CC-3217870BE360@apache.org%3E
  - http://osvdb.org/70925
  - http://seclists.org/fulldisclosure/2011/Feb/236
  - http://secunia.com/advisories/43261
  - http://secunia.com/advisories/43334
  - http://securityreason.com/securityalert/8091
  - http://securitytracker.com/id?1025065
  - http://svn.apache.org/viewvc?view=revision&revision=1066053
  - http://svn.apache.org/viewvc?view=revision&revision=1066056
  - http://www.securityfocus.com/archive/1/archive/1/516342/100/0/threaded
  - http://www.securityfocus.com/archive/1/archive/1/516474/100/0/threaded
  - http://www.securityfocus.com/bid/46311
  - http://www.vupen.com/english/advisories/2011/0373
  - http://www.vupen.com/english/advisories/2011/0426
  - http://xforce.iss.net/xforce/xfdb/65343
  - https://exchange.xforce.ibmcloud.com/vulnerabilities/65343
  source_url: https://ossindex.net/resource/package/7015390102/vulnerabilities
- id: ossindex:maven:org.apache.archiva:archiva:345280
  title: "[CVE-2011-1026]  Cross-Site Request Forgery (CSRF)"
  description: Multiple cross-site request forgery (CSRF) vulnerabilities in Apache
    Archiva 1.0 through 1.2.2, and 1.3.x before 1.3.5, allow remote attackers to hijack
    the authentication of administrators.
  affected_package: org.apache.archiva:archiva
  vulnerable_versions:
  - '1.0'
  - 1.0.1
  - 1.0.2
  - 1.0.3
  - '1.1'
  - 1.1.1
  - 1.1.2
  - 1.1.3
  - 1.1.4
  - '1.2'
  - 1.2-m1
  - 1.2.1
  - 1.2.2
  - '1.3'
  - 1.3.1
  - 1.3.2
  - 1.3.3
  - 1.3.4
  package_manager: maven
  cve:
  - CVE-2011-1026
  disclosed_date: 2011-06-02
  created_date: 2011-06-02
  last_modified_date: 2017-04-19
  credit:
  - OSSIndex
  references:
  - http://archiva.apache.org/docs/1.3.5/release-notes.html
  - http://archiva.apache.org/security.html
  - http://archives.neohapsis.com/archives/fulldisclosure/2011-05/0532.html
  - http://secunia.com/advisories/44693
  - http://securityreason.com/securityalert/8266
  - http://www.securityfocus.com/archive/1/archive/1/518168/100/0/threaded
  - http://www.securityfocus.com/bid/48015
  - http://xforce.iss.net/xforce/xfdb/67671
  source_url: https://ossindex.net/resource/package/7015390102/vulnerabilities
- id: ossindex:maven:org.apache.archiva:archiva:345322
  title: '[CVE-2011-1077]  Improper Neutralization of Input During Web Page Generation
    ("Cross-site Scripting")'
  description: Multiple cross-site scripting (XSS) vulnerabilities in Apache Archiva
    1.0 through 1.2.2, and 1.3.x before 1.3.5, allow remote attackers to inject arbitrary
    web script or HTML via unspecified vectors.
  affected_package: org.apache.archiva:archiva
  vulnerable_versions:
  - '1.0'
  - 1.0.1
  - 1.0.2
  - 1.0.3
  - '1.1'
  - 1.1.1
  - 1.1.2
  - 1.1.3
  - 1.1.4
  - '1.2'
  - 1.2-m1
  - 1.2.1
  - 1.2.2
  - '1.3'
  - 1.3.1
  - 1.3.2
  - 1.3.3
  - 1.3.4
  package_manager: maven
  cve:
  - CVE-2011-1077
  disclosed_date: 2011-06-02
  created_date: 2011-06-02
  last_modified_date: 2017-04-19
  credit:
  - OSSIndex
  references:
  - http://archiva.apache.org/docs/1.3.5/release-notes.html
  - http://archiva.apache.org/security.html
  - http://archives.neohapsis.com/archives/fulldisclosure/2011-05/0531.html
  - http://secunia.com/advisories/44693
  - http://securityreason.com/securityalert/8267
  - http://www.securityfocus.com/archive/1/archive/1/518167/100/0/threaded
  - http://www.securityfocus.com/bid/48011
  - http://xforce.iss.net/xforce/xfdb/67672
  source_url: https://ossindex.net/resource/package/7015390102/vulnerabilities
- id: ossindex:maven:org.apache.archiva:archiva:355857
  title: '[CVE-2013-2187]  Improper Neutralization of Input During Web Page Generation
    ("Cross-site Scripting")'
  description: Cross-site scripting (XSS) vulnerability in Apache Archiva 1.2 through
    1.2.2 and 1.3 before 1.3.8 allows remote attackers to inject arbitrary web script
    or HTML via unspecified parameters, related to the home page.
  affected_package: org.apache.archiva:archiva
  vulnerable_versions:
  - '1.2'
  - 1.2.1
  - 1.2.2
  - '1.3'
  - 1.3.1
  - 1.3.2
  - 1.3.3
  - 1.3.4
  - 1.3.5
  - 1.3.6
  package_manager: maven
  cve:
  - CVE-2013-2187
  disclosed_date: 2014-04-22
  created_date: 2014-04-22
  last_modified_date: 2017-04-19
  credit:
  - OSSIndex
  references:
  - http://archiva.apache.org/security.html
  - http://www.securityfocus.com/archive/1/archive/1/531884/100/0/threaded
  - http://www.securityfocus.com/bid/66991
  - http://www.securitytracker.com/id/1030130
  source_url: https://ossindex.net/resource/package/7015390102/vulnerabilities
- id: ossindex:maven:org.apache.archiva:archiva:8399952669
  title: "[CVE-2016-4469]  Cross-Site Request Forgery (CSRF)"
  description: Multiple cross-site request forgery (CSRF) vulnerabilities in Apache
    Archiva 1.3.9 and earlier allow remote attackers to hijack the authentication
    of administrators for requests that (1) add new repository proxy connectors via
    the token parameter to admin/addProxyConnector_commit.action, (2) new repositories
    via the token parameter to admin/addRepository_commit.action, (3) edit existing
    repositories via the token parameter to admin/editRepository_commit.action, (4)
    add legacy artifact paths via the token parameter to admin/addLegacyArtifactPath_commit.action,
    (5) change the organizational appearance via the token parameter to admin/saveAppearance.action,
    or (6) upload new artifacts via the token parameter to upload_submit.action.
  affected_package: org.apache.archiva:archiva
  vulnerable_versions:
  - "<=1.3.9"
  package_manager: maven
  cve:
  - CVE-2016-4469
  disclosed_date: 2016-07-28
  created_date: 2016-07-28
  last_modified_date: 2017-06-02
  credit:
  - OSSIndex
  references:
  - http://packetstormsecurity.com/files/137869/Apache-Archiva-1.3.9-Cross-Site-Request-Forgery.html
  - http://seclists.org/fulldisclosure/2016/Jul/37
  - http://www.securityfocus.com/archive/1/archive/1/538877/100/0/threaded
  - http://www.securityfocus.com/bid/91703
  - http://www.securitytracker.com/id/1036475
  - https://www.exploit-db.com/exploits/40109/
  source_url: https://ossindex.net/resource/package/7015390102/vulnerabilities
- id: ossindex:maven:org.apache.archiva:archiva:8399952672
  title: '[CVE-2016-5005]  Improper Neutralization of Input During Web Page Generation
    ("Cross-site Scripting")'
  description: Cross-site scripting (XSS) vulnerability in Apache Archiva 1.3.9 and
    earlier allows remote authenticated administrators to inject arbitrary web script
    or HTML via the connector.sourceRepoId parameter to admin/addProxyConnector_commit.action.
  affected_package: org.apache.archiva:archiva
  vulnerable_versions:
  - "<=1.3.9"
  package_manager: maven
  cve:
  - CVE-2016-5005
  disclosed_date: 2016-07-28
  created_date: 2016-07-28
  last_modified_date: 2017-06-02
  credit:
  - OSSIndex
  references:
  - http://packetstormsecurity.com/files/137870/Apache-Archiva-1.3.9-Cross-Site-Scripting.html
  - http://seclists.org/fulldisclosure/2016/Jul/38
  - http://www.securityfocus.com/archive/1/archive/1/538878/100/0/threaded
  - http://www.securityfocus.com/bid/91707
  - http://www.securitytracker.com/id/1036475
  source_url: https://ossindex.net/resource/package/7015390102/vulnerabilities
- id: ossindex:maven:org.apache.archiva:archiva:8404541785
  title: "[CVE-2017-5657]  Cross-Site Request Forgery (CSRF)"
  description: Several REST service endpoints of Apache Archiva are not protected
    against Cross Site Request Forgery (CSRF) attacks. A malicious site opened in
    the same browser as the archiva site, may send an HTML response that performs
    arbitrary actions on archiva services, with the same rights as the active archiva
    session (e.g. administrator rights).
  affected_package: org.apache.archiva:archiva
  vulnerable_versions:
  - 2.2.1
  package_manager: maven
  cve:
  - CVE-2017-5657
  disclosed_date: 2017-05-22
  created_date: 2017-05-22
  last_modified_date: 2017-06-02
  credit:
  - OSSIndex
  references:
  - http://archiva.apache.org/security.html#CVE-2017-5657
  - http://www.securityfocus.com/bid/98570
  source_url: https://ossindex.net/resource/package/7015390102/vulnerabilities
- id: snykio:maven:org.apache.archiva:archiva:174551
  title: Arbitrary File Write
  description: |
    [org.apache.archiva:archiva][1] is a repository management software that
    helps taking care of your own personal or enterprise-wide build artifact
    repository.

    Affected versions of this package are vulnerable to Arbitrary File
    Write. It is possible to write files to the archiva server at arbitrary
    locations by using the artifact upload mechanism. Existing files could
    be overwritten, if the archiva run user has appropriate permission on
    the filesystem for the target file.



    [1]: http://archiva.apache.org/index.cgi
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
  affected_package: org.apache.archiva:archiva
  vulnerable_versions:
  - ">= 1.0.0 < 2.2.4"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2019-0214
  cwe:
  - CWE-22
  disclosed_date: 2019-04-30
  created_date: 2019-05-01
  last_modified_date: 2019-05-01
  credit:
  - Unknown
  references:
  - http://archiva.apache.org/security.html#CVE-2019-0214
  - https://lists.apache.org/thread.html/239349b6dd8f66cf87a70c287b03af451dea158b776d3dfc550b4f0e@%3Cusers.maven.apache.org%3E
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHEARCHIVA-174551
- id: snykio:maven:org.apache.archiva:archiva:174553
  title: Cross-site Scripting (XSS)
  description: |+
    [org.apache.archiva:archiva][1] is a repository management software that
    helps taking care of your own personal or enterprise-wide build artifact
    repository.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). It was possible to store malicious XSS code into central
    configuration entries, i.e. the logo URL.

    **Note:** Only users with admin role can change the configuration, or
    the communication between the browser and the Archiva server must be
    compromised.



    [1]: http://archiva.apache.org/index.cgi
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: org.apache.archiva:archiva
  vulnerable_versions:
  - "< 2.2.4"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2019-0213
  cwe:
  - CWE-79
  disclosed_date: 2019-04-30
  created_date: 2019-04-30
  last_modified_date: 2019-04-30
  credit:
  - Unknown
  references:
  - http://archiva.apache.org/security.html#CVE-2019-0213
  - https://lists.apache.org/thread.html/c358754a35473a61477f9d487870581a0dd7054ff95974628fa09f97@%3Cusers.maven.apache.org%3E
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHEARCHIVA-174553
- id: snykio:maven:org.apache.archiva:archiva:30511
  title: Cross-site Scripting (XSS)
  description: |+
    [`org.apache.archiva:archiva`][1] Cross-site Scripting (XSS)
    vulnerability in Apache Continuum 1.1 through 1.2.3.1, 1.3.6, and 1.4.0
    Beta; and Archiva 1.3.0 through 1.3.3 and 1.0 through 1.22 allows remote
    attackers to inject arbitrary web script or HTML via a crafted
    parameter, related to the autoIncludeParameters setting for the
    extremecomponents table.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22archiva%22
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: org.apache.archiva:archiva
  vulnerable_versions:
  - "< 1.3.4"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2011-0533
  cwe:
  - CWE-79
  disclosed_date: 2011-02-17
  created_date: 2014-09-08
  last_modified_date: 2014-09-08
  credit:
  - Unknown
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2011-0533
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHEARCHIVA-30511
- id: snykio:maven:org.apache.archiva:archiva:30512
  title: Cross-site Request Forgery (CSRF)
  description: |
    [`org.apache.archiva:archiva`][1] Multiple cross-site request forgery
    (CSRF) vulnerabilities in Apache Archiva 1.0 through 1.2.2, and 1.3.x
    before 1.3.5, allow remote attackers to hijack the authentication of
    administrators.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22archiva%22
  affected_package: org.apache.archiva:archiva
  vulnerable_versions:
  - ">= 1.1 <= 1.3.4"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2011-1026
  cwe:
  - CWE-352
  disclosed_date: 2011-06-02
  created_date: 2014-09-08
  last_modified_date: 2014-09-08
  credit:
  - Unknown
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2011-1026
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHEARCHIVA-30512
- id: snykio:maven:org.apache.archiva:archiva:30513
  title: Cross-site Scripting (XSS)
  description: |+
    [`org.apache.archiva:archiva`][1] Multiple cross-site scripting (XSS)
    vulnerabilities in Apache Archiva 1.0 through 1.2.2, and 1.3.x before
    1.3.5, allow remote attackers to inject arbitrary web script or HTML via
    unspecified vectors.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22archiva%22
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: org.apache.archiva:archiva
  vulnerable_versions:
  - ">= 1.1 <= 1.3.4"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2011-1077
  cwe:
  - CWE-79
  disclosed_date: 2011-06-02
  created_date: 2014-01-10
  last_modified_date: 2014-01-10
  credit:
  - Unknown
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2011-1077
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHEARCHIVA-30513
- id: snykio:maven:org.apache.archiva:archiva:30514
  title: Cross-site Scripting (XSS)
  description: |+
    [`org.apache.archiva:archiva`][1] Cross-site Scripting (XSS)
    vulnerability in Apache Archiva 1.3.9 and earlier allows remote
    authenticated administrators to inject arbitrary web script or HTML via
    the connector.sourceRepoId parameter to
    admin/addProxyConnector\_commit.action.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22archiva%22
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: org.apache.archiva:archiva
  vulnerable_versions:
  - "<= 1.3.9"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2016-5005
  cwe:
  - CWE-79
  disclosed_date: 2016-07-13
  created_date: 2016-07-13
  last_modified_date: 2016-07-13
  credit:
  - Unknown
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-5005
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHEARCHIVA-30514
- id: snykio:maven:org.apache.archiva:archiva:31505
  title: Cross-site Scripting (XSS)
  description: |+
    Affected versions of [`org.apache.archiva:archiva`][1] are vulnerable to
    Cross-site Scripting (XSS) attacks. Cross-site Scripting (XSS)
    vulnerability in Apache Archiva 1.2 through 1.2.2 and 1.3 before 1.3.8
    allows remote attackers to inject arbitrary web script or HTML via
    unspecified parameters, related to the home page.



    [1]: https://archiva.apache.org
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: org.apache.archiva:archiva
  vulnerable_versions:
  - ">= 1.2 < 1.2.2"
  - ">= 1.3 < 1.3.8"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2013-2187
  cwe:
  - CWE-79
  disclosed_date: 2014-04-22
  created_date: 2017-09-14
  last_modified_date: 2017-09-14
  credit:
  - Unknown
  references:
  - https://nvd.nist.gov/vuln/detail/CVE-2013-2187
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHEARCHIVA-31505
- id: snykio:maven:org.apache.archiva:archiva:31506
  title: Cross-site Request Forgery (CSRF)
  description: |
    Affected versions of [`org.apache.archiva:archiva`][1] are vulnerable to
    Cross-site Request Forgery (CSRF). Several REST service endpoints of
    Apache Archiva are not protected against Cross Site Request Forgery
    (CSRF) attacks. A malicious site opened in the same browser as the
    archiva site, may send an HTML response that performs arbitrary actions
    on archiva services, with the same rights as the active archiva session
    (e.g. administrator rights).



    [1]: https://archiva.apache.org
  affected_package: org.apache.archiva:archiva
  vulnerable_versions:
  - "< 2.2.3"
  severity: high
  package_manager: maven
  cve:
  - CVE-2017-5657
  cwe:
  - CWE-352
  disclosed_date: 2017-05-18
  created_date: 2017-09-14
  last_modified_date: 2017-09-14
  credit:
  - Unknown
  references:
  - http://archiva.apache.org/security.html#CVE-2017-5657:_Apache_Archiva_CSRF_vulnerabilities_for_various_REST_endpoints
  - http://www.openwall.com/lists/oss-security/2017/05/19/4
  - https://nvd.nist.gov/vuln/detail/CVE-2017-5657
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHEARCHIVA-31506
