---
- id: snykio:maven:io.jenkins.blueocean:blueocean-parent:32224
  title: Authentication Bypass
  description: |
    \[io.jenkins.blueocean:blueocean-parent\]([https://github.com/jenkinsci/blueocean-plugin][1]
    is a reboot of the Jenkins CI/CD User Experience.

    Affected versions of this package are vulnerable to Authentication
    Bypass. It did not properly check the current userâ€™s authentication and
    authorization when configuring existing GitHub organization folders.
    This allowed users with read access to the GitHub organization folder to
    reconfigure it, including changing the GitHub API endpoint for the
    organization folder to an attacker-controlled server to obtain the
    GitHub access token, if the organization folder was initially created
    using Blue Ocean.



    [1]: https://github.com/jenkinsci/blueocean-plugin
  affected_package: io.jenkins.blueocean:blueocean-parent
  vulnerable_versions:
  - "< 1.1.6"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2017-1000110
  cwe:
  - CWE-264
  disclosed_date: 2017-07-08
  created_date: 2018-04-25
  last_modified_date: 2018-04-25
  credit:
  - Cliff Meyers
  references:
  - https://jenkins.io/security/advisory/2017-08-07/
  - https://nvd.nist.gov/vuln/detail/CVE-2017-1000110
  source_url: https://snyk.io/vuln/SNYK-JAVA-IOJENKINSBLUEOCEAN-32224
- id: snykio:maven:io.jenkins.blueocean:blueocean-parent:727997
  title: Insecure Permissions
  description: |+
    Affected versions of this package are vulnerable to Insecure
    Permissions. It does not perform permission checks in several HTTP
    endpoints implementing connection tests.This allows attackers with
    Overall/Read permission to connect to an attacker-specified URL.

  affected_package: io.jenkins.blueocean:blueocean-parent
  vulnerable_versions:
  - "< 1.23.3"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2020-2255
  cwe:
  - CWE-275
  disclosed_date: 2020-09-17
  created_date: 2020-09-17
  last_modified_date: 2020-09-17
  credit:
  - Ant Security FG Lab.
  - Jinchen Sheng
  references:
  - https://www.jenkins.io/security/advisory/2020-09-16/#SECURITY-1961
  source_url: https://snyk.io/vuln/SNYK-JAVA-IOJENKINSBLUEOCEAN-727997
- id: snykio:maven:io.jenkins.blueocean:blueocean-parent:728000
  title: Directory Traversal
  description: |
    Affected versions of this package are vulnerable to Directory Traversal.
    It provides an undocumented feature flag that allows for path traversal,
    Blue Ocean Plugin 1.23.3 no longer includes this feature and redirects
    existing usage to a safer alternative.

    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
  affected_package: io.jenkins.blueocean:blueocean-parent
  vulnerable_versions:
  - "< 1.23.3"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2020-2254
  cwe:
  - CWE-22
  disclosed_date: 2020-09-17
  created_date: 2020-09-17
  last_modified_date: 2020-09-17
  credit:
  - Ant Security FG Lab.
  - Jinchen Sheng
  references:
  - https://www.jenkins.io/security/advisory/2020-09-16/#SECURITY-1956
  source_url: https://snyk.io/vuln/SNYK-JAVA-IOJENKINSBLUEOCEAN-728000
