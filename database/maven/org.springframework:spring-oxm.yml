---
- id: ossindex:maven:org.springframework:spring-oxm:8399934729
  title: "[CVE-2015-3192]  Improper Restriction of Operations within the Bounds of
    a Memory Buffer"
  description: Pivotal Spring Framework before 3.2.14 and 4.x before 4.1.7 do not
    properly process inline DTD declarations when DTD is not entirely disabled, which
    allows remote attackers to cause a denial of service (memory consumption and out-of-memory
    errors) via a crafted XML file.
  affected_package: org.springframework:spring-oxm
  vulnerable_versions:
  - "> >=4.0.0 <4.1.7"
  package_manager: maven
  cve:
  - CVE-2015-3192
  disclosed_date: 2016-07-12
  created_date: 2016-07-12
  last_modified_date: 2017-06-02
  credit:
  - OSSIndex
  references:
  - http://lists.fedoraproject.org/pipermail/package-announce/2015-July/162015.html
  - http://lists.fedoraproject.org/pipermail/package-announce/2015-July/162017.html
  - http://pivotal.io/security/cve-2015-3192
  - http://rhn.redhat.com/errata/RHSA-2016-1592.html
  - http://rhn.redhat.com/errata/RHSA-2016-1593.html
  - http://rhn.redhat.com/errata/RHSA-2016-2035.html
  - http://rhn.redhat.com/errata/RHSA-2016-2036.html
  - http://www.securityfocus.com/bid/90853
  - http://www.securitytracker.com/id/1036587
  - https://access.redhat.com/errata/RHSA-2016:1218
  - https://access.redhat.com/errata/RHSA-2016:1219
  - https://jira.spring.io/browse/SPR-13136
  source_url: https://ossindex.net/resource/package/7015204920/vulnerabilities
- id: ossindex:maven:org.springframework:spring-oxm:8404580678
  title: '[CVE-2014-0225]  Improper Restriction of XML External Entity Reference ("XXE")'
  description: When processing user provided XML documents, the Spring Framework 4.0.0
    to 4.0.4, 3.0.0 to 3.2.8, and possibly earlier unsupported versions did not disable
    by default the resolution of URI references in a DTD declaration. This enabled
    an XXE attack.
  affected_package: org.springframework:spring-oxm
  vulnerable_versions:
  - "> >=3.0.0 <=3.2.8"
  - "> >=4.0.0 <=4.0.4"
  package_manager: maven
  cve:
  - CVE-2014-0225
  disclosed_date: 2017-05-25
  created_date: 2017-05-25
  last_modified_date: 2017-06-07
  credit:
  - OSSIndex
  references:
  - https://pivotal.io/security/cve-2014-0225
  source_url: https://ossindex.net/resource/package/7015204920/vulnerabilities
- id: snykio:maven:org.springframework:spring-oxm:30158
  title: XML External Entity (XXE) Injection
  description: |+
    [org.springframework:spring-oxm][1] is a Spring Object/XML Marshalling
    library.

    Affected versions of this package are vulnerable to XML External Entity
    (XXE) Injection. The Spring OXM wrapper in Spring Framework before 3.2.4
    and 4.0.0.M1, when using the JAXB marshaller, does not disable entity
    resolution, which allows context-dependent attackers to read arbitrary
    files, cause a denial of service, and conduct CSRF attacks via an XML
    external entity declaration in conjunction with an entity reference in a
    (1) DOMSource, (2) StAXSource, (3) SAXSource, or (4) StreamSource, aka
    an XML External Entity (XXE) issue.



    [1]: https://github.com/spring-projects/spring-framework
    \nXXE Injection is a type of attack against an application that parses XML
    input. XML is a markup language that defines a set of rules for encoding
    documents in a format that is both human-readable and machine-readable.
    By default, many XML processors allow specification of an external
    entity, a URI that is dereferenced and evaluated during XML processing.
    When an XML document is being parsed, the parser can make a request and
    include the content at the specified URI inside of the XML document.

    Attacks can include disclosing local files, which may contain sensitive
    data such as passwords or private user data, using file: schemes or
    relative paths in the system identifier.

    For example, below is a sample XML document, containing an XML element-
    username.

        <?xml version="1.0" encoding="ISO-8859-1"?>
           <username>John</username>
        </xml>
    {: .language-xml}

    An external XML entity - `xxe`, is defined using a system identifier and
    present within a DOCTYPE header. These entities can access local or
    remote content. For example the below code contains an external XML
    entity that would fetch the content of `/etc/passwd` and display it to
    the user rendered by `username`.

        <?xml version="1.0" encoding="ISO-8859-1"?>
        <!DOCTYPE foo [
           <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
           <username>&xxe;</username>
        </xml>
    {: .language-xml}

    Other XXE Injection attacks can access local resources that may not stop
    returning data, possibly impacting application availability and leading
    to Denial of Service.

  affected_package: org.springframework:spring-oxm
  vulnerable_versions:
  - ">= 3.0.0.RELEASE < 3.2.3.RELEASE"
  - ">= 4.0.0.RELEASE < 4.0.1.RELEASE"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2013-4152
  cwe:
  - CWE-611
  disclosed_date: 2014-01-23
  created_date: 2016-12-25
  last_modified_date: 2016-12-25
  credit:
  - Alvaro Munoz
  references:
  - http://www.gopivotal.com/security/cve-2013-4152
  - https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2013-4152
  - https://github.com/spring-projects/spring-framework/commit/7576274874deeccb6da6b09a8d5bd62e8b5538b7
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORK-30158
- id: snykio:maven:org.springframework:spring-oxm:30159
  title: XML External Entity (XXE) Injection
  description: |+
    [`org.springframework:spring-oxm`][1] When processing user provided XML
    documents, the Spring Framework did not disable by default the
    resolution of URI references in a DTD declaration. By observing
    differences in response times, an attacker could then identify valid IP
    addresses on the internal network with functioning web servers.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22spring-oxm%22
    \nXXE Injection is a type of attack against an application that parses XML
    input. XML is a markup language that defines a set of rules for encoding
    documents in a format that is both human-readable and machine-readable.
    By default, many XML processors allow specification of an external
    entity, a URI that is dereferenced and evaluated during XML processing.
    When an XML document is being parsed, the parser can make a request and
    include the content at the specified URI inside of the XML document.

    Attacks can include disclosing local files, which may contain sensitive
    data such as passwords or private user data, using file: schemes or
    relative paths in the system identifier.

    For example, below is a sample XML document, containing an XML element-
    username.

        <?xml version="1.0" encoding="ISO-8859-1"?>
           <username>John</username>
        </xml>
    {: .language-xml}

    An external XML entity - `xxe`, is defined using a system identifier and
    present within a DOCTYPE header. These entities can access local or
    remote content. For example the below code contains an external XML
    entity that would fetch the content of `/etc/passwd` and display it to
    the user rendered by `username`.

        <?xml version="1.0" encoding="ISO-8859-1"?>
        <!DOCTYPE foo [
           <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
           <username>&xxe;</username>
        </xml>
    {: .language-xml}

    Other XXE Injection attacks can access local resources that may not stop
    returning data, possibly impacting application availability and leading
    to Denial of Service.

  affected_package: org.springframework:spring-oxm
  vulnerable_versions:
  - ">= 3.0.0.RELEASE < 3.2.9.RELEASE"
  - ">= 4.0.0.RELEASE < 4.0.5.RELEASE"
  severity: high
  package_manager: maven
  cve:
  - CVE-2014-0225
  cwe:
  - CWE-611
  disclosed_date: 2016-12-25
  created_date: 2016-12-25
  last_modified_date: 2016-12-25
  credit:
  - Unknown
  references:
  - http://www.gopivotal.com/security/cve-2014-0225
  - https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2014-0225
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORK-30159
- id: snykio:maven:org.springframework:spring-oxm:31328
  title: Denial of Service (DoS)
  description: |+
    [`org.springframework:spring-oxm`][1] Pivotal Spring Framework before
    3.2.14 and 4.x before 4.1.7 do not properly process inline DTD
    declarations when DTD is not entirely disabled, which allows remote
    attackers to cause a denial of service (memory consumption and
    out-of-memory errors) via a crafted XML file.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22spring-oxm%22
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: org.springframework:spring-oxm
  vulnerable_versions:
  - ">= 3.2.0.RELEASE < 3.2.14.RELEASE"
  - ">= 4.0.0.RELEASE < 4.1.7.RELEASE"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2015-3192
  cwe:
  - CWE-119
  disclosed_date: 2015-10-16
  created_date: 2015-10-16
  last_modified_date: 2015-10-16
  credit:
  - Toshiaki Maki
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2015-3192
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORK-31328
- id: victims:maven:org.springframework:spring-oxm:2013-4152
  title: XML External Entity (XXE) injection in Spring Framework
  affected_package: org.springframework:spring-oxm
  vulnerable_versions:
  - '3'
  - '4'
  - "<=3.2.3.RELEASE"
  - "<=4.0.0.M1"
  patched_versions:
  - '3'
  - '4'
  - ">=3.2.4.RELEASE"
  - ">=4.0.0.M2"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2013-4152
  cvss_v2_score: 5.0
  credit:
  - Victims CVE Database
  references:
  - http://www.gopivotal.com/security/cve-2013-4152
  - https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2013-4152
  source_url: https://github.com/victims/victims-cve-db/blob/master/database/java/2013/4152.yaml
- id: victims:maven:org.springframework:spring-oxm:2014-0225
  title: Information disclosure via SSRF
  affected_package: org.springframework:spring-oxm
  vulnerable_versions:
  - '3'
  - '4'
  - "<=3.2.8.RELEASE"
  - "<=4.0.4.RELEASE"
  patched_versions:
  - '3'
  - '4'
  - ">=3.2.9.RELEASE"
  - ">=4.0.5.RELEASE"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2014-0225
  cvss_v2_score: 5.0
  credit:
  - Victims CVE Database
  references:
  - http://www.gopivotal.com/security/cve-2014-0225
  - https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2014-0225
  source_url: https://github.com/victims/victims-cve-db/blob/master/database/java/2014/0225.yaml
