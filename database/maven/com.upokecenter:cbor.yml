---
- id: snykio:maven:com.upokecenter:cbor:575461
  title: Denial of Service (DoS)
  description: |+
    [com.upokecenter:cbor][1] is a Java implementation of Concise Binary
    Object Representation.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS). The CBOR library supports optional tags that enable CBOR objects
    to contain references to objects within them. Versions earlier than 4.0
    resolved those references automatically. While this by itself doesn\'t
    cause much of a security problem, a denial of service can happen if
    those references are deeply nested and used multiple times (so that the
    same reference to the same object occurs multiple times), and if the
    decoded CBOR object is sent to a serialization method such as
    EncodeToBytes, ToString, or ToJSONString, since the objects referred to
    are expanded in the process and take up orders of magnitude more memory
    than if the references weren\'t resolved.

    The impact of this problem on any particular system varies. In general,
    the risk is higher if the system allows users to send arbitrary CBOR
    objects without authentication, or exposes a remote endpoint in which
    arbitrary CBOR objects can be sent without authentication.



    [1]: https://github.com/peteroupc/CBOR-Java
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: com.upokecenter:cbor
  vulnerable_versions:
  - "< 4.0.0"
  severity: medium
  package_manager: maven
  cwe:
  - CWE-400
  disclosed_date: 2020-07-08
  created_date: 2020-07-08
  last_modified_date: 2020-07-08
  credit:
  - Unknown
  references:
  - https://github.com/peteroupc/CBOR-Java/security/advisories/GHSA-mm44-wc5p-wqhq
  source_url: https://snyk.io/vuln/SNYK-JAVA-COMUPOKECENTER-575461
