---
- id: ossindex:maven:org.webjars.npm:js-yaml:357790
  title: "[CVE-2013-4660]  Improper Input Validation"
  description: The JS-YAML module before 2.0.5 for Node.js parses input without properly
    considering the unsafe !!js/function tag, which allows remote attackers to execute
    arbitrary code via a crafted string that triggers an eval operation.
  affected_package: org.webjars.npm:js-yaml
  vulnerable_versions:
  - 0.2.0
  - 0.2.1
  - 0.2.2
  - 0.3.0
  - 0.3.1
  - 0.3.2
  - 0.3.3
  - 0.3.4
  - 0.3.5
  - 0.3.6
  - 0.3.7
  - 1.0.0
  - 1.0.1
  - 1.0.2
  - 1.0.3
  - 2.0.0
  - 2.0.1
  - 2.0.2
  - 2.0.3
  - 2.0.4
  package_manager: maven
  cve:
  - CVE-2013-4660
  disclosed_date: 2013-06-28
  created_date: 2013-06-28
  last_modified_date: 2013-07-01
  credit:
  - OSSIndex
  references:
  - http://portal.nodesecurity.io/advisories/js-yaml
  - https://nealpoole.com/blog/2013/06/code-execution-via-yaml-in-js-yaml-nodejs-module/
  source_url: https://ossindex.net/resource/package/7109559372/vulnerabilities
- id: snykio:maven:org.webjars.npm:js-yaml:479829
  title: Denial of Service (DoS)
  description: "[org.webjars.npm:js-yaml][1] is a human-friendly data serialization\nlanguage.\n\nAffected
    versions of this package are vulnerable to Denial of Service\n(DoS). The parsing
    of a specially crafted YAML file may exhaust the\nsystem resources.\n\n\n\n[1]:
    https://www.npmjs.com/package/js-yaml\n\\nDenial of Service (DoS) describes a
    family of attacks, all aimed at\nmaking a system inaccessible to its original
    and legitimate users. There\nare many types of DoS attacks, ranging from trying
    to clog the network\npipes to the system by generating a large volume of traffic
    from many\nmachines (a Distributed Denial of Service - DDoS - attack) to sending\ncrafted
    requests that cause a system to crash or take a disproportional\namount of time
    to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial
    of\nService attack. Regular expressions are incredibly powerful, but they\naren\\'t
    very intuitive and can ultimately end up making it easy for\nattackers to take
    your site down.\n\nLet’s take the following regular expression as an example:\n\n
    \   regex = /A(B|C+)+D/\n{: .language-js}\n\nThis regular expression accomplishes
    the following:\n\n* `A` The string must start with the letter \\'A\\'\n* `(B|C+)+`
    The string must then follow the letter A with either the\n  letter \\'B\\' or
    some number of occurrences of the letter \\'C\\' (the\n  `+` matches one or more
    times). The `+` at the end of this section\n  states that we can look for one
    or more matches of this section.\n* `D` Finally, we ensure this section of the
    string ends with a \\'D\\'\n\nThe expression would match inputs such as `ABBD`,
    `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases, it doesn\\'t take very
    long for a regex engine to find a\nmatch:\n\n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n
    \   0.04s user 0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n{: .language-bash}\n\nThe entire
    process of testing it against a 30 characters long string\ntakes around ~52ms.
    But when given an invalid string, it takes nearly\ntwo seconds to complete the
    test, over ten times as long as it took to\ntest a valid string. The dramatic
    difference is due to the way regular\nexpressions get evaluated.\n\nMost Regex
    engines will work very similarly (with minor differences).\nThe engine will match
    the first possible way to accept the current\ncharacter and proceed to the next
    one. If it then fails to match the\nnext one, it will backtrack and see if there
    was another way to digest\nthe previous character. If it goes too far down the
    rabbit hole only to\nfind out the string doesn’t match in the end, and if many
    characters\nhave multiple valid regex paths, the number of backtracking steps
    can\nbecome very large, resulting in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s
    look at how our expression runs into this problem, using a\nshorter string: \\\"ACCCX\\\".
    While it seems fairly straightforward, there\nare still four different ways that
    the engine could match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.
    \ C+C+C.\n\nThe engine has to try each of those combinations to see if any of
    them\npotentially match against the expression. When you combine that with the\nother
    steps the engine must take, we can use [RegEx 101 debugger][1] to\nsee the engine
    has to take a total of 38 steps before it can determine\nthe string doesn\\'t
    match.\n\nFrom there, the number of steps the engine must use to validate a string\njust
    continues to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n|
    ACCCX | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX
    | 14 | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to
    take over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n"
  affected_package: org.webjars.npm:js-yaml
  vulnerable_versions:
  - ">= 3.0.0 < 3.13.0"
  severity: medium
  package_manager: maven
  cwe:
  - CWE-400
  disclosed_date: 2019-03-18
  created_date: 2019-03-24
  last_modified_date: 2019-03-24
  credit:
  - Jens DIetrich
  - Shawn Rasheed
  references:
  - https://github.com/nodeca/js-yaml/commit/a567ef3c6e61eb319f0bfc2671d91061afb01235
  - https://github.com/nodeca/js-yaml/issues/475
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-479829
- id: snykio:maven:org.webjars.npm:js-yaml:479833
  title: Arbitrary Code Execution
  description: |
    [org.webjars.npm:js-yaml][1] is a human-friendly data serialization
    language.

    Affected versions of this package are vulnerable to Arbitrary Code
    Execution. When an object with an executable `toString()` property used
    as a map key, it will execute that function. This happens only for
    `load()`, which should not be used with untrusted data anyway.
    `safeLoad()` is not affected because it can\'t parse functions.



    [1]: https://www.npmjs.com/package/js-yaml
  affected_package: org.webjars.npm:js-yaml
  vulnerable_versions:
  - "< 3.13.1"
  severity: high
  package_manager: maven
  cwe:
  - CWE-94
  disclosed_date: 2019-04-05
  created_date: 2019-04-07
  last_modified_date: 2019-04-07
  credit:
  - Alex Kocharin
  references:
  - https://github.com/nodeca/js-yaml/pull/480
  - https://github.com/nodeca/js-yaml/pull/480/commits/e18afbf1edcafb7add2c4c7b22abc8d6ebc2fa61
  - https://www.npmjs.com/advisories/813
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-479833
