---
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:174177
  title: Cross-site Scripting (XSS)
  description: |+
    [org.jenkins-ci.main:jenkins-core][1] is an open source automation
    server.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). The `f:validateButton` form control for the Jenkins UI does not
    properly escape job URLs. The vulnerability is exploitable by users with
    the ability to control job names.



    [1]: https://github.com/jenkinsci/jenkins
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 2.164.2"
  - "< 2.172"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2019-1003050
  cwe:
  - CWE-79
  disclosed_date: 2019-04-10
  created_date: 2019-04-14
  last_modified_date: 2019-04-14
  credit:
  - Unknown
  references:
  - https://jenkins.io/security/advisory/2019-04-10/#SECURITY-1327
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-174177
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:174178
  title: Authentication Bypass
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open source automation
    server.

    Affected versions of this package are vulnerable to Authentication
    Bypass. Users who cached their CLI authentication before Jenkins was
    updated to 2.150.2 and newer, or 2.160 and newer, would remain
    authenticated in Jenkins 2.171 and earlier and Jenkins LTS 2.164.1 and
    earlier, because the fix for CVE-2019-1003004 in these releases did not
    reject existing remoting-based CLI authentication caches.



    [1]: https://github.com/jenkinsci/jenkins
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 2.164.2"
  - "< 2.172"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2019-1003049
  cwe:
  - CWE-287
  disclosed_date: 2019-04-10
  created_date: 2019-04-14
  last_modified_date: 2019-04-14
  credit:
  - CWE287
  references:
  - https://jenkins.io/security/advisory/2019-04-10/#SECURITY-1289
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-174178
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:31678
  title: Cross-site Scripting (XSS)
  description: |+
    [org.jenkins-ci.main:jenkins-core][1] is an open-source automation
    server.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks.



    [1]: https://github.com/jenkinsci/jenkins
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 1.625.3"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2015-7536
  cwe:
  - CWE-79
  disclosed_date: 2015-09-19
  created_date: 2018-05-13
  last_modified_date: 2018-05-13
  credit:
  - Antoine Musso
  references:
  - https://jenkins.io/security/advisory/2015-12-09/
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-31678
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:31683
  title: Arbitrary File Write via Archive Extraction (Zip Slip)
  description: "[org.jenkins-ci.main:jenkins-core][1] is an open-source automation\nserver.\n\nAffected
    versions of the package are vulnerable to Arbitrary File Write\nvia Archive Extraction
    (AKA \\\"Zip Slip\\\").\n\nIt is exploited using a specially crafted zip archive,
    that holds path\ntraversal filenames. When exploited, a filename in a malicious
    archive\nis concatenated to the target extraction directory, which results in
    the\nfinal path ending up outside of the target folder. For instance, a zip\nmay
    hold a file with a \\\"../../file.exe\\\" location and thus break out of\nthe
    target folder. If an executable or a configuration file is\noverwritten with a
    file containing malicious code, the problem can turn\ninto an arbitrary code execution
    issue quite easily.\n\nThe following is an example of a zip archive with one benign
    file and\none malicious file. Extracting the malicous file will result in\ntraversing
    out of the target folder, ending up in `/root/.ssh/`\noverwriting the `authorized_keys`
    file:\n\n    \n    +2018-04-15 22:04:29 ..... 19 19 good.txt\n    \n    +2018-04-15
    22:04:42 ..... 20 20 ../../../../../../root/.ssh/authorized_keys\n\n\n\n[1]: https://github.com/jenkinsci/jenkins\n"
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 2.120"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2015-7536
  cwe:
  - CWE-29
  disclosed_date: 2016-02-03
  created_date: 2018-06-06
  last_modified_date: 2018-06-06
  credit:
  - Snyk Security research Team
  references:
  - https://github.com/jenkinsci/jenkins/commit/8ede53387ec060a7c343e32efe808b1016f0c10c
  - https://github.com/jenkinsci/jenkins/pull/3402
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-31683
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32156
  title: Directory Traversal
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open-source automation
    server.

    Affected versions of this package are vulnerable to Directory Traversal.
    It did not properly prevent specifying relative paths that escape a base
    directory for URLs accessing plugin resource files. This allowed users
    with Overall/Read permission to download files from the Jenkins master
    they should not have access to. On Windows, any file accessible to the
    Jenkins master process could be downloaded. On other operating systems,
    any file within the Jenkins home directory accessible to the Jenkins
    master process could be downloaded.



    [1]: https://github.com/jenkinsci/jenkins
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 2.89.4"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2018-6356
  cwe:
  - CWE-22
  disclosed_date: 2018-02-20
  created_date: 2018-04-08
  last_modified_date: 2018-04-08
  credit:
  - Unknown
  references:
  - https://github.com/jenkinsci/jenkins/commit/eb03a42078f29dbed3742b8740c95e02890e4545
  - https://jenkins.io/security/advisory/2018-02-14/
  - https://nvd.nist.gov/vuln/detail/CVE-2018-6356
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32156
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32159
  title: Improper Input Validation
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open-source automation
    server. Built with Java, it provides over 1000 plugins to support
    automating virtually anything, so that humans can actually spend their
    time doing things machines cannot.

    Affected versions of this package are vulnerable to Improper Input
    Validation. It allows an attacker to access plugin resource files in the
    META-INF and WEB-INF directories that should not be accessible, if the
    Jenkins home directory is on a case-insensitive file system.



    [1]: https://github.com/jenkinsci/jenkins
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "<= 2.89.4"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2018-1000068
  cwe:
  - CWE-20
  disclosed_date: 2018-02-14
  created_date: 2018-04-08
  last_modified_date: 2018-04-08
  credit:
  - Unknown
  references:
  - https://jenkins.io/security/advisory/2018-02-14/#SECURITY-717
  - https://jenkins.io/security/advisory/2018-02-14/#SECURITY-717
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32159
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32160
  title: Server-Side Request Forgery (SSRF)
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open-source automation
    server.

    Affected versions of this package are vulnerable to Server-Side Request
    Forgery (SSRF). The form validation for the proxy configuration form did
    not check the permission of the user accessing it, allowing anyone with
    Overall/Read access to cause Jenkins to send a GET request to a
    specified URL, optionally with a specified proxy configuration.



    [1]: https://github.com/jenkinsci/jenkins
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 2.89.4"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2018-1000067
  cwe:
  - CWE-285
  disclosed_date: 2018-01-30
  created_date: 2018-04-08
  last_modified_date: 2018-04-08
  credit:
  - Unknown
  references:
  - https://github.com/jenkinsci/jenkins/commit/2d16b459205730d85e51499c2457109b234ca9d9
  - https://jenkins.io/security/advisory/2018-02-14/#SECURITY-506
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32160
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32172
  title: Cross-site Request Forgery (CSRF)
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open-source automation
    server.

    Affected versions of this package are vulnerable to Cross-site Request
    Forgery (CSRF). It could result in the wrong order of execution of
    commands during initialization. There is a very short window of time
    after startup during whichit may no longer show the \'Please wait while
    Jenkins is getting ready to work\' message and Cross-Site Request
    Forgery (CSRF) protection may not yet be effective.



    [1]: https://github.com/jenkinsci/jenkins
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 2.89.2"
  - ">= 2.90 < 2.95"
  severity: high
  package_manager: maven
  cve:
  - CVE-2017-1000504
  cwe:
  - CWE-352
  disclosed_date: 2017-12-13
  created_date: 2018-04-08
  last_modified_date: 2018-04-08
  credit:
  - Daniel Beck
  references:
  - https://github.com/jenkinsci/jenkins/commit/ccc374a7176d7704941fb494589790b7673efe2e
  - https://jenkins.io/security/advisory/2017-12-14/
  - https://nvd.nist.gov/vuln/detail/CVE-2017-1000504
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32172
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32173
  title: Insecure Initialization
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open-source automation
    server.

    Affected versions of this package are vulnerable to Insecure
    Initialization. Startup could result in the wrong order of execution of
    commands during initialization. This could in rare cases result in
    failure to initialize the setup wizard on the first startup. This
    resulted in multiple security-related settings not being set to their
    usual strict default.



    [1]: https://github.com/jenkinsci/jenkins
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 2.89.2"
  - ">= 2.90 < 2.95"
  severity: high
  package_manager: maven
  cve:
  - CVE-2017-1000503
  cwe:
  - CWE-362
  disclosed_date: 2017-12-13
  created_date: 2018-04-08
  last_modified_date: 2018-04-08
  credit:
  - Daniel Beck
  references:
  - https://github.com/jenkinsci/jenkins/commit/ccc374a7176d7704941fb494589790b7673efe2e
  - https://jenkins.io/security/advisory/2017-12-14/
  - https://nvd.nist.gov/vuln/detail/CVE-2017-1000503
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32173
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32177
  title: Information Exposure
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open-source automation
    server.

    Affected versions of this package are vulnerable to Information
    Exposure. Default form control for passwords and other secrets,
    `<f:password/>`, supports form validation (e.g. for API keys). The form
    validation `AJAX` requests were sent via `GET`, which could result in
    secrets being logged to a HTTP access log in non-default configurations
    of Jenkins, and made available to users with access to these log files.



    [1]: https://github.com/jenkinsci/jenkins
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 2.73.2"
  severity: low
  package_manager: maven
  cve:
  - CVE-2017-1000401
  cwe:
  - CWE-20
  disclosed_date: 2017-09-22
  created_date: 2018-04-08
  last_modified_date: 2018-04-08
  credit:
  - Ben Walding
  references:
  - https://github.com/jenkinsci/jenkins/commit/09d60462b9edf775f08568601bb3e2cfd8075368
  - https://jenkins.io/security/advisory/2017-10-11/
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32177
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32178
  title: Information Exposure
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open-source automation
    server.

    Affected versions of this package are vulnerable to Information
    Exposure. The re-key admin monitor was introduced in Jenkins 1.498 and
    re-encrypted all secrets in JENKINS\_HOME with a new key. It also
    created a backup directory with all old secrets, and the key used to
    encrypt them. These backups were world-readable and not removed
    afterwards.



    [1]: https://github.com/jenkinsci/jenkins
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 2.32.2"
  - ">= 2.40 < 2.44"
  severity: high
  package_manager: maven
  cve:
  - CVE-2017-1000362
  cwe:
  - CWE-200
  disclosed_date: 2017-02-01
  created_date: 2018-04-09
  last_modified_date: 2018-04-09
  credit:
  - Steve Marlowe
  references:
  - https://jenkins.io/security/advisory/2017-02-01/
  - https://nvd.nist.gov/vuln/detail/CVE-2017-1000362
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32178
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32181
  title: 'Authentication Bypass '
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open-source automation
    server.

    Affected versions of this package are vulnerable to Authentication
    Bypass. The login command available in the remoting-based CLI stored the
    encrypted user name of the successfully authenticated user in a cache
    file used to authenticate further commands. Users with sufficient
    permission to create secrets in Jenkins, and download their encrypted
    values (e.g. with Job/Configure permission), were able to impersonate
    any other Jenkins user on the same instance.



    [1]: https://github.com/jenkinsci/jenkins
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 2.46.2"
  - ">= 2.50 < 2.57"
  severity: high
  package_manager: maven
  cve:
  - CVE-2017-1000354
  cwe:
  - CWE-287
  disclosed_date: 2017-03-14
  created_date: 2018-04-09
  last_modified_date: 2018-04-09
  credit:
  - Jesse Glick
  references:
  - https://github.com/jenkinsci/jenkins/commit/02d24053bdfeb219d2387a19885a60bdab510479
  - https://jenkins.io/security/advisory/2017-04-26/
  - https://nvd.nist.gov/vuln/detail/CVE-2017-1000354
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32181
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32182
  title: Deserialization of Untrusted Data
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open-source automation
    server.

    Affected versions of this package are vulnerable to Deserialization of
    Untrusted Data. It allowed attackers to transfer a serialized Java
    `SignedObject` object to the remoting-based Jenkins CLI, that would be
    deserialized using a new `ObjectInputStream`, bypassing the existing
    blacklist-based protection mechanism.



    [1]: https://github.com/jenkinsci/jenkins
    \nSerialization is a process of converting an object into a sequence of
    bytes which can be persisted to a disk or database or can be sent
    through streams. The reverse process of creating object from sequence of
    bytes is called deserialization. Serialization is commonly used for
    communication (sharing objects between multiple hosts) and persistence
    (store the object state in a file or a database). It is an integral part
    of popular protocols like *Remote Method Invocation (RMI)*, *Java
    Management Extension (JMX)*, *Java Messaging System (JMS)*, *Action
    Message Format (AMF)*, *Java Server Faces (JSF) ViewState*, etc.

    *Deserialization of untrusted data* ([CWE-502][1]), is when the
    application deserializes untrusted data without sufficiently verifying
    that the resulting data will be valid, letting the attacker to control
    the state or the flow of the execution.

    Java deserialization issues have been known for years. However, interest
    in the issue intensified greatly in 2015, when classes that could be
    abused to achieve remote code execution were found in a [popular library
    (Apache Commons Collection)][2]. These classes were used in zero-days
    affecting IBM WebSphere, Oracle WebLogic and many other products.

    An attacker just needs to identify a piece of software that has both a
    vulnerable class on its path, and performs deserialization on untrusted
    data. Then all they need to do is send the payload into the
    deserializer, getting the command executed.

    > Developers put too much trust in Java Object Serialization. Some even
    > de-serialize objects pre-authentication. When deserializing an Object
    > in Java you typically cast it to an expected type, and therefore
    > Java\'s strict type system will ensure you only get valid object
    > trees. Unfortunately, by the time the type checking happens, platform
    > code has already created and executed significant logic. So, before
    > the final type is checked a lot of code is executed from the
    > readObject() methods of various objects, all of which is out of the
    > developer\'s control. By combining the readObject() methods of various
    > classes which are available on the classpath of the vulnerable
    > application an attacker can execute functions (including calling
    > Runtime.exec() to execute local OS commands).

    * Apache Blog

    The vulnerability, also know as *Mad Gadget*

    > Mad Gadget is one of the most pernicious vulnerabilities we’ve seen.
    > By merely existing on the Java classpath, seven “gadget” classes in
    > Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0)
    > make object deserialization for the entire JVM process Turing complete
    > with an exec function. Since many business applications use object
    > deserialization to send messages across the network, it would be like
    > hiring a bank teller who was trained to hand over all the money in the
    > vault if asked to do so politely, and then entrusting that teller with
    > the key. The only thing that would keep a bank safe in such a
    > circumstance is that most people wouldn’t consider asking such a
    > question.

    * Google



    [1]: https://cwe.mitre.org/data/definitions/502.html
    [2]: https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 2.46.2"
  - ">= 2.50 < 2.57"
  severity: high
  package_manager: maven
  cve:
  - CVE-2017-1000353
  cwe:
  - CWE-502
  disclosed_date: 2017-03-06
  created_date: 2018-04-09
  last_modified_date: 2018-04-09
  credit:
  - Unknown
  references:
  - https://github.com/jenkinsci/jenkins/commit/36b8285a41eb28333549e8d851f81fd80a184076
  - https://jenkins.io/security/advisory/2017-04-26/
  - https://nvd.nist.gov/vuln/detail/CVE-2017-1000353
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32182
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32183
  title: Information Exposure
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open-source automation
    server.

    Affected versions of this package are vulnerable to Information
    Exposure. The remote API at `/job/(job-name)/api` contained information
    about upstream and downstream projects. This included information about
    tasks that the current user otherwise has no access to, e.g. due to lack
    of Job/Read permission.



    [1]: https://github.com/jenkinsci/jenkins
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 2.73.2"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2017-1000400
  cwe:
  - CWE-200
  disclosed_date: 2017-09-18
  created_date: 2018-04-09
  last_modified_date: 2018-04-09
  credit:
  - Jesse Glick
  references:
  - https://github.com/jenkinsci/jenkins/commit/b2083a387a5bdb6f7ee7f7c81a1f6312aca2a558
  - https://jenkins.io/security/advisory/2017-10-11/
  - https://nvd.nist.gov/vuln/detail/CVE-2017-1000400
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32183
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32184
  title: Information Exposure
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open-source automation
    server.

    Affected versions of this package are vulnerable to Information
    Exposure. The remote API at `/queue/item/(ID)/api` showed information
    about tasks in the queue (typically builds waiting to start). This
    included information about tasks that the current user otherwise has no
    access to, e.g. due to lack of Job/Read permission.



    [1]: https://github.com/jenkinsci/jenkins
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 2.73.2"
  - ">= 2.80 < 2.84"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2017-1000399
  cwe:
  - CWE-200
  disclosed_date: 2017-09-28
  created_date: 2018-04-09
  last_modified_date: 2018-04-09
  credit:
  - Unknown
  references:
  - https://github.com/jenkinsci/jenkins/commit/3ff432ace14d8f4544c88a179a2f7a962eb98ba6
  - https://jenkins.io/security/advisory/2017-10-11/
  - https://nvd.nist.gov/vuln/detail/CVE-2017-1000399
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32184
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32185
  title: Information Exposure
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open-source automation
    server.

    Affected versions of this package are vulnerable to Information
    Exposure. The remote API at `/computer/(agent-name)/api` showed
    information about tasks (typically builds) currently running on that
    agent. This included information about tasks that the current user
    otherwise has no access to, e.g. due to lack of Job/Read permission.



    [1]: https://github.com/jenkinsci/jenkins
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 2.73.2"
  - ">= 2.80 < 2.84"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2017-1000398
  cwe:
  - CWE-200
  disclosed_date: 2017-09-28
  created_date: 2018-04-09
  last_modified_date: 2018-04-09
  credit:
  - Daniel Beck
  references:
  - https://github.com/jenkinsci/jenkins/commit/da06fd471cea79123821c778228eeb08e1cedcc7
  - https://jenkins.io/security/advisory/2017-10-11/
  - https://nvd.nist.gov/vuln/detail/CVE-2017-1000398
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32185
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32187
  title: Man-in-the-Middle (MitM)
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open-source automation
    server.

    Affected versions of this package are vulnerable to Man-in-the-Middle
    (MitM) attacks. It bundled a [vulnerable version of the
    commons-httpclient][2] which incorrectly verified SSL certificates.



    [1]: https://github.com/jenkinsci/jenkins
    [2]: https://snyk.io/vuln/SNYK-JAVA-COMMONSHTTPCLIENT-31660
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 2.73.2"
  - ">= 2.80 < 2.84"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2017-1000396
  cwe:
  - CWE-20
  disclosed_date: 2017-09-29
  created_date: 2018-04-09
  last_modified_date: 2018-04-09
  credit:
  - Unknown
  references:
  - https://jenkins.io/security/advisory/2017-10-11/
  - https://nvd.nist.gov/vuln/detail/CVE-2017-1000396
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32187
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32188
  title: Information Exposure
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open-source automation
    server.

    Affected versions of this package are vulnerable to Information
    Exposure. It provides information about Jenkins user accounts which is
    generally available to anyone with Overall/Read permissions via the
    `/user/(username)/api` remote API. This included e.g. Jenkins users
    email addresses if the Mailer Plugin is installed.



    [1]: https://github.com/jenkinsci/jenkins
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 2.73.2"
  - ">= 2.80 < 2.84"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2017-1000395
  cwe:
  - CWE-200
  disclosed_date: 2017-09-07
  created_date: 2018-04-09
  last_modified_date: 2018-04-09
  credit:
  - Ananthapadmanabhan
  references:
  - https://github.com/jenkinsci/jenkins/commit/7b1f8e96a8d97dd09e5e093fcdb010b3295acc77
  - https://jenkins.io/security/advisory/2017-10-11/
  - https://nvd.nist.gov/vuln/detail/CVE-2017-1000395
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32188
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32189
  title: Arbitrary Shell Command Execution
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open-source automation
    server.

    Affected versions of this package are vulnerable to Arbitrary Shell
    Command Execution. Users with permission to create or configure agents
    in Jenkins could configure a launch method called `Launch agent via
    execution of command on master`. This allowed them to run arbitrary
    shell commands on the master node whenever the agent was supposed to be
    launched. Configuration of this launch method now requires the Run
    Scripts permission typically only granted to administrators.



    [1]: https://github.com/jenkinsci/jenkins
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 2.73.2"
  - ">= 2.80 < 2.83"
  severity: high
  package_manager: maven
  cve:
  - CVE-2017-1000393
  cwe:
  - CWE-78
  disclosed_date: 2017-09-13
  created_date: 2018-04-09
  last_modified_date: 2018-04-09
  credit:
  - Daniel Beck
  references:
  - https://github.com/jenkinsci/jenkins/commit/d7ea3f40efedd50541a57b943d5f7bbed046d091
  - https://jenkins.io/security/advisory/2017-10-11/
  - https://nvd.nist.gov/vuln/detail/CVE-2017-1000393
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32189
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32191
  title: Directory Traversal
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open-source automation
    server.

    Affected versions of this package are vulnerable to Directory Traversal.
    It stores metadata related to `people`, which encompasses actual user
    accounts, as well as users appearing in SCM, in directories
    corresponding to the user ID on disk. These directories used the user ID
    for their name without additional escaping, potentially resulting in
    problems like overwriting of unrelated configuration files.



    [1]: https://github.com/jenkinsci/jenkins
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 2.73.3"
  - ">= 2.80 < 2.89"
  severity: high
  package_manager: maven
  cve:
  - CVE-2017-1000391
  cwe:
  - CWE-20
  disclosed_date: 2017-10-19
  created_date: 2018-04-09
  last_modified_date: 2018-04-09
  credit:
  - Darren Zhao
  references:
  - https://github.com/jenkinsci/jenkins/commit/566a8ddb885f0bef9bc848e60455c0aabbf0c1d3
  - https://jenkins.io/security/advisory/2017-11-08/
  - https://nvd.nist.gov/vuln/detail/CVE-2017-1000391
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32191
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32194
  title: Cross-Site Request Forgery (CSRF)
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open-source automation
    server.

    Affected versions of this package are vulnerable to Cross-Site Request
    Forgery (CSRF). It allowed malicious users to perform several
    administrative actions by tricking a victim into opening a web page.



    [1]: https://github.com/jenkinsci/jenkins
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 2.46.2"
  - ">= 2.50 < 2.57"
  severity: high
  package_manager: maven
  cve:
  - CVE-2017-1000356
  cwe:
  - CWE-352
  disclosed_date: 2018-01-29
  created_date: 2018-04-09
  last_modified_date: 2018-04-09
  credit:
  - Steve Marlowe
  references:
  - https://jenkins.io/security/advisory/2017-04-26/
  - https://nvd.nist.gov/vuln/detail/CVE-2017-1000356
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32194
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32195
  title: Deserialization of Untrusted Data
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open-source automation
    server.

    Affected versions of this package are vulnerable to Deserialization of
    Untrusted Data. It used the XStream library to serialize and deserialize
    XML. Its maintainer recently published a security vulnerability that
    allows anyone able to provide XML to Jenkins for processing using
    XStream to crash the Java process. In Jenkins this typically applies to
    users with permission to create or configure items (jobs), views, or
    agents.



    [1]: https://github.com/jenkinsci/jenkins
    \nSerialization is a process of converting an object into a sequence of
    bytes which can be persisted to a disk or database or can be sent
    through streams. The reverse process of creating object from sequence of
    bytes is called deserialization. Serialization is commonly used for
    communication (sharing objects between multiple hosts) and persistence
    (store the object state in a file or a database). It is an integral part
    of popular protocols like *Remote Method Invocation (RMI)*, *Java
    Management Extension (JMX)*, *Java Messaging System (JMS)*, *Action
    Message Format (AMF)*, *Java Server Faces (JSF) ViewState*, etc.

    *Deserialization of untrusted data* ([CWE-502][1]), is when the
    application deserializes untrusted data without sufficiently verifying
    that the resulting data will be valid, letting the attacker to control
    the state or the flow of the execution.

    Java deserialization issues have been known for years. However, interest
    in the issue intensified greatly in 2015, when classes that could be
    abused to achieve remote code execution were found in a [popular library
    (Apache Commons Collection)][2]. These classes were used in zero-days
    affecting IBM WebSphere, Oracle WebLogic and many other products.

    An attacker just needs to identify a piece of software that has both a
    vulnerable class on its path, and performs deserialization on untrusted
    data. Then all they need to do is send the payload into the
    deserializer, getting the command executed.

    > Developers put too much trust in Java Object Serialization. Some even
    > de-serialize objects pre-authentication. When deserializing an Object
    > in Java you typically cast it to an expected type, and therefore
    > Java\'s strict type system will ensure you only get valid object
    > trees. Unfortunately, by the time the type checking happens, platform
    > code has already created and executed significant logic. So, before
    > the final type is checked a lot of code is executed from the
    > readObject() methods of various objects, all of which is out of the
    > developer\'s control. By combining the readObject() methods of various
    > classes which are available on the classpath of the vulnerable
    > application an attacker can execute functions (including calling
    > Runtime.exec() to execute local OS commands).

    * Apache Blog

    The vulnerability, also know as *Mad Gadget*

    > Mad Gadget is one of the most pernicious vulnerabilities we’ve seen.
    > By merely existing on the Java classpath, seven “gadget” classes in
    > Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0)
    > make object deserialization for the entire JVM process Turing complete
    > with an exec function. Since many business applications use object
    > deserialization to send messages across the network, it would be like
    > hiring a bank teller who was trained to hand over all the money in the
    > vault if asked to do so politely, and then entrusting that teller with
    > the key. The only thing that would keep a bank safe in such a
    > circumstance is that most people wouldn’t consider asking such a
    > question.

    * Google



    [1]: https://cwe.mitre.org/data/definitions/502.html
    [2]: https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 2.46.2"
  - ">= 2.50 < 2.57"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2017-1000355
  cwe:
  - CWE-502
  disclosed_date: 2017-04-26
  created_date: 2018-04-09
  last_modified_date: 2018-04-09
  credit:
  - Steve Marlowe
  references:
  - https://jenkins.io/security/advisory/2017-04-26/
  - https://nvd.nist.gov/vuln/detail/CVE-2017-1000355
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32195
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32220
  title: Insufficient Permission Validation
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open-source automation
    server.

    Affected versions of this package are vulnerable to Insufficient
    Permission Check. It allows users with permissions to create new items
    (e.g. jobs) to overwrite existing items they don\'t have access to.



    [1]: https://github.com/jenkinsci/jenkins
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 2.32.2"
  - ">= 2.40 < 2.44"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2017-2599
  cwe:
  - CWE-280
  disclosed_date: 2018-04-11
  created_date: 2018-04-16
  last_modified_date: 2018-04-16
  credit:
  - Unknown
  references:
  - https://jenkins.io/security/advisory/2017-02-01/
  - https://nvd.nist.gov/vuln/detail/CVE-2017-2599
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32220
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32221
  title: Information Exposure
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open-source automation
    server.

    Affected versions of this package are vulnerable to Information
    Exposure. It allows unauthorized attackers to confirm the existence of
    agents or views with an attacker-specified name by sending a CLI command
    to Jenkins.



    [1]: https://github.com/jenkinsci/jenkins
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 2.107.2"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2018-1000169
  cwe:
  - CWE-200
  disclosed_date: 2018-04-15
  created_date: 2018-04-16
  last_modified_date: 2018-04-16
  credit:
  - Assaf Berg
  references:
  - https://jenkins.io/security/advisory/2018-04-11/#SECURITY-754
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32221
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32222
  title: Cross-site Scripting (XSS)
  description: |+
    [org.jenkins-ci.main:jenkins-core][1] is an open-source automation
    server.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks via the `confirmationList.jelly` and `stopButton.jelly`
    methods. It allows attackers with `Job/Configure` and/or `Job/Create`
    permission to create an item name containing JavaScript that would be
    executed in another user\'s browser when that other user performs some
    UI actions.



    [1]: https://github.com/jenkinsci/jenkins
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - ">= 2.107.0 < 2.107.2"
  - ">= 2.110 < 2.116"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2018-1000170
  cwe:
  - CWE-79
  disclosed_date: 2018-04-15
  created_date: 2018-04-16
  last_modified_date: 2018-04-16
  credit:
  - Jesper den Boer
  references:
  - https://jenkins.io/security/advisory/2018-04-11/#SECURITY-759
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32222
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32246
  title: Arbitrary Code Execution
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open-source automation
    server.

    Affected versions of this package are vulnerable to Arbitrary Code
    Execution. It allows remote attackers to execute arbitrary code via a
    crafted serialized Java object, which triggers an LDAP query to a
    third-party server.



    [1]: https://github.com/jenkinsci/jenkins
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 2.19.3"
  - ">= 2.30 < 2.32"
  severity: high
  package_manager: maven
  cve:
  - CVE-2016-9299
  cwe:
  - CWE-90
  disclosed_date: 2017-01-12
  created_date: 2018-05-06
  last_modified_date: 2018-05-06
  credit:
  - Unknown
  references:
  - https://exploit-db.com/exploits/44642
  - https://github.com/jenkinsci/jenkins/commit/fde9c42fe05ac925a904b6c09a81d497d0e6ccea
  - https://nvd.nist.gov/vuln/detail/CVE-2016-9299
  - https://www.cloudbees.com/jenkins-security-advisory-2016-11-16
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32246
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32247
  title: Denial of Service (DoS)
  description: |+
    [org.jenkins-ci.main:jenkins-core][1] is an open-source automation
    server.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS). When determining which account is currently trying to log in, the
    ‘full name’ was resolved before the user name. Thus, by editing the full
    name, a malicious remote authenticated user with multiple accounts could
    deny login services to ordinary users.



    [1]: https://github.com/jenkinsci/jenkins
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 1.651.2"
  - ">= 2.0 < 2.3"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2016-3722
  cwe:
  - CWE-264
  disclosed_date: 2016-04-26
  created_date: 2018-05-08
  last_modified_date: 2018-05-08
  credit:
  - Unknown
  references:
  - https://github.com/jenkinsci/jenkins/commit/d1d1ab152bfd67a2a737d7b530eb011982157f83
  - https://nvd.nist.gov/vuln/detail/CVE-2016-3722
  - https://www.cloudbees.com/jenkins-security-advisory-2016-05-11
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32247
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32248
  title: Authentication Bypass
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open-source automation
    server.

    Affected versions of this package are vulnerable to Authentication
    Bypass. Due to a missing permissions check, a malicious remote
    authenticated user may be able to trigger the update process of the
    site.



    [1]: https://github.com/jenkinsci/jenkins
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 1.651.2"
  - ">= 2.0 < 2.3"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2016-3725
  cwe:
  - CWE-264
  disclosed_date: 2016-04-25
  created_date: 2018-05-08
  last_modified_date: 2018-05-08
  credit:
  - Unknown
  references:
  - https://github.com/jenkinsci/jenkins/commit/56be107feb24ab3470efae7603041bbbb9cdf7fb
  - https://www.cloudbees.com/jenkins-security-advisory-2016-05-11
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32248
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32249
  title: Information Exposure
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open-source automation
    server.

    Affected versions of this package are vulnerable to Information
    Exposure. Due to leveraging missing permissions checks in unspecified
    XML/JSON API endpoints, a malicous user with read access could obtain
    sensitive plugin installation information.



    [1]: https://github.com/jenkinsci/jenkins
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 1.651.2"
  - ">= 2.0 < 2.3"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2016-3723
  cwe:
  - CWE-200
  disclosed_date: 2016-05-17
  created_date: 2018-05-08
  last_modified_date: 2018-05-08
  credit:
  - Unknown
  references:
  - https://github.com/jenkinsci/jenkins/commit/17edeb48291a3807b84142bb01f576b8eb2f50a2
  - https://nvd.nist.gov/vuln/detail/CVE-2016-3724
  - https://www.cloudbees.com/jenkins-security-advisory-2016-05-11
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32249
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32250
  title: Information Exposure
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open-source automation
    server.

    Affected versions of this package are vulnerable to Information
    Exposure. Due to reading the job configuration, a malicous user with
    extended read access could obtain sensitive password information.



    [1]: https://github.com/jenkinsci/jenkins
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 1.651.2"
  - ">= 2.0.0 < 2.3"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2016-3724
  cwe:
  - CWE-200
  disclosed_date: 2016-04-20
  created_date: 2018-05-08
  last_modified_date: 2018-05-08
  credit:
  - Unknown
  references:
  - https://github.com/jenkinsci/jenkins/commit/82b42359797e42fa4b2428d5e390e7ce91b74998
  - https://www.cloudbees.com/jenkins-security-advisory-2016-05-11
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32250
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32251
  title: Open Redirect
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open-source automation
    server.

    Affected versions of this package are vulnerable to Open Redirect
    attacks. Due to improperly validation of the redirect URLs, a malicous
    user could create URLs that redirect users to arbitrary
    `scheme-relative` URLs.



    [1]: https://github.com/jenkinsci/jenkins
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 1.651.1"
  - ">= 2.0.0 < 2.3"
  severity: high
  package_manager: maven
  cve:
  - CVE-2016-3726
  cwe:
  - CWE-601
  disclosed_date: 2016-04-25
  created_date: 2018-05-08
  last_modified_date: 2018-05-08
  credit:
  - Unknown
  references:
  - https://github.com/jenkinsci/jenkins/commit/2ed0c046dfbb2003a17df27c53777e72c6eaff25
  - https://nvd.nist.gov/vuln/detail/CVE-2016-3726
  - https://www.cloudbees.com/jenkins-security-advisory-2016-05-11
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32251
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32252
  title: Information Exposure
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open-source automation
    server.

    Affected versions of this package are vulnerable to Information Exposure
    via the API URL: `computer/(master)/api/xml`. It allows remote
    authenticated users with extended read permission for the master node to
    obtain sensitive information about the global configuration via
    unspecified vectors.



    [1]: https://github.com/jenkinsci/jenkins
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 1.651"
  - ">= 2.0.0 < 2.3"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2016-3727
  cwe:
  - CWE-200
  disclosed_date: 2016-04-28
  created_date: 2018-05-08
  last_modified_date: 2018-05-08
  credit:
  - Unknown
  references:
  - https://github.com/jenkinsci/jenkins/commit/d66ad6f3ee46a5c6bb865bb831e8cdfc74cd7eb3
  - https://nvd.nist.gov/vuln/detail/CVE-2016-3727
  - https://www.cloudbees.com/jenkins-security-advisory-2016-05-11
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32252
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32253
  title: Arbitrary Code Injection
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open-source automation
    server.

    Affected versions of this package are vulnerable to Arbitrary Code
    Injection. It allows remote authenticated users to inject arbitrary
    build parameters into the build environment via environment variables.



    [1]: https://github.com/jenkinsci/jenkins
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 1.651.2"
  - ">= 2.0 < 2.3"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2016-3721
  cwe:
  - CWE-17
  disclosed_date: 2015-03-17
  created_date: 2018-05-08
  last_modified_date: 2018-05-08
  credit:
  - Unknown
  references:
  - https://github.com/jenkinsci/jenkins/commit/57e78880cc035874bda916ef4d8d7fd7642af9db
  - https://nvd.nist.gov/vuln/detail/CVE-2016-3721
  - https://www.cloudbees.com/jenkins-security-advisory-2016-05-11
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32253
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32262
  title: Arbitrary Code Execution
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open-source automation
    server.

    Affected versions of this package are vulnerable to Arbitrary Code
    Execution via sending deserialized XML files to API endpoints.



    [1]: https://github.com/jenkinsci/jenkins
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 1.642.2"
  - ">= 1.643.0 < 1.650"
  severity: high
  package_manager: maven
  cve:
  - CVE-2016-0792
  cwe:
  - CWE-20
  disclosed_date: 2016-02-24
  created_date: 2018-05-13
  last_modified_date: 2018-05-13
  credit:
  - Arshan Dabirsiaghi
  references:
  - https://github.com/jenkinsci/jenkins/commit/18cc8e0eb7d8c9910ce8ce2a9c8dab4c4df8b9c2
  - https://jenkins.io/security/advisory/2016-02-24/
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32262
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32263
  title: Arbitrary Code Execution
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open-source automation
    server.

    Affected versions of this package are vulnerable to Arbitrary Code
    Execution due to not verifying checksums for plugin files referenced in
    update site data.



    [1]: https://github.com/jenkinsci/jenkins
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 1.625.3"
  - ">= 1.630 < 1.641"
  severity: high
  package_manager: maven
  cve:
  - CVE-2015-7539
  cwe:
  - CWE-345
  disclosed_date: 2015-12-09
  created_date: 2018-05-13
  last_modified_date: 2018-05-13
  credit:
  - Alex Soto Bueno
  references:
  - https://github.com/jenkinsci/jenkins/commit/9ec88357a354d8354728cc06e2b8c8b68aee58bf
  - https://jenkins.io/security/advisory/2015-12-09/
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32263
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32265
  title: Timing Attack
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open-source automation
    server.

    Affected versions of this package are vulnerable to Timing Attack. Due
    to not using a constant-time algorithm to verify CSRF tokens, an
    attacker could bypass a CSRF protection mechanism via a brute-force
    approach.



    [1]: https://github.com/jenkinsci/jenkins
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 1.642.2"
  - ">= 1.643 < 1.650"
  severity: high
  package_manager: maven
  cve:
  - CVE-2016-0791
  cwe:
  - CWE-200
  disclosed_date: 2016-02-24
  created_date: 2018-05-13
  last_modified_date: 2018-05-13
  credit:
  - James Nord
  references:
  - https://github.com/jenkinsci/jenkins/commit/559566b1ac62ebe966613933baf1714137daeb8c
  - https://jenkins.io/security/advisory/2016-02-24/
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32265
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32267
  title: HTTP Response Splitting
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open-source automation
    server.

    Affected versions of this package are vulnerable to HTTP Response
    Splitting. A malicious user could inject arbitrary HTTP headers and
    conduct HTTP response splitting attacks via unspecified vectors.



    [1]: https://github.com/jenkinsci/jenkins
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 1.642.2"
  - ">= 1.643.0 < 1.650"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2016-0789
  cwe:
  - CWE-20
  disclosed_date: 2016-02-24
  created_date: 2018-05-13
  last_modified_date: 2018-05-13
  credit:
  - SeungHyun Cho
  references:
  - https://github.com/jenkinsci/jenkins/commit/f5c51fbad2b62b81dc1e0402aeee058a4a478046
  - https://jenkins.io/security/advisory/2016-02-24/
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32267
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32268
  title: Timing Attacks
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open-source automation
    server.

    Affected versions of this package are vulnerable to Timing Attacks. Due
    to not using a constant-time algorithm to verify API tokens, an attacker
    could determine API tokens via a brute-force approach.



    [1]: https://github.com/jenkinsci/jenkins
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 1.642.2"
  - ">= 1.643 < 1.650"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2016-0790
  cwe:
  - CWE-254
  disclosed_date: 2016-02-24
  created_date: 2018-05-13
  last_modified_date: 2018-05-13
  credit:
  - Steve Marlowe
  references:
  - https://github.com/jenkinsci/jenkins/commit/79e0b64322a6b15e0b80ac6511c9aa74383642be
  - https://jenkins.io/security/advisory/2016-02-24/
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32268
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32269
  title: Arbitrary Code Execution
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open-source automation
    server.

    Affected versions of this package are vulnerable to Arbitrary Code
    Execution Due to unsafe deserialization.



    [1]: https://github.com/jenkinsci/jenkins
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 1.625.2"
  - ">= 1.630 < 1.638"
  severity: high
  package_manager: maven
  cve:
  - CVE-2015-8103
  cwe:
  - CWE-77
  disclosed_date: 2015-11-11
  created_date: 2018-05-13
  last_modified_date: 2018-05-13
  credit:
  - Unknown
  references:
  - https://jenkins.io/blog/2015/11/06/mitigating-unauthenticated-remote-code-execution-0-day-in-jenkins-cli/
  - https://jenkins.io/security/advisory/2015-11-11/
  - https://nvd.nist.gov/vuln/detail/CVE-2015-8103
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32269
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32270
  title: Insufficient Permission Validation
  description: |
    [org.jenkins-ci.main:Jenkins-core][1] is an open-source automation
    server.

    Affected versions of this package are vulnerable to Insufficient
    Permission Check for periodic processes. It allows users with read
    access to Jenkins to trigger background processes (that are otherwise
    performed daily) and may cause additional load on Jenkins master and
    agents.



    [1]: https://github.com/jenkinsci/jenkins
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 2.32.2"
  - ">= 2.4 < 2.44"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2017-2611
  cwe:
  - CWE-280
  disclosed_date: 2017-01-09
  created_date: 2018-05-13
  last_modified_date: 2018-05-13
  credit:
  - Robert Picard
  references:
  - https://github.com/jenkinsci/jenkins/commit/97a61a9fe55f4c16168c123f98301a5173b9fa86
  - https://jenkins.io/security/advisory/2017-02-01/
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32270
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32271
  title: Information Exposure
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open-source automation
    server.

    Affected versions of this package are vulnerable to Information
    Exposure. A malicious user may access to item names that should not be
    visible.



    [1]: https://github.com/jenkinsci/jenkins
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 2.32.2"
  - ">= 2.40 < 2.44"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2017-2606
  cwe:
  - CWE-200
  disclosed_date: 2017-02-01
  created_date: 2018-05-13
  last_modified_date: 2018-05-13
  credit:
  - James Dumay
  references:
  - https://github.com/jenkinsci/jenkins/commit/09cfbc9cd5c9df7c763bc976b7f5c51266b63719
  - https://jenkins.io/security/advisory/2017-02-01/
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32271
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32272
  title: Arbitrary Code Execution
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open-source automation
    server.

    Affected versions of this package are vulnerable to Arbitrary Code
    Execution.



    [1]: https://github.com/jenkinsci/jenkins
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 1.642.2"
  - ">= 1.643.0 < 1.650"
  severity: high
  package_manager: maven
  cve:
  - CVE-2016-0788
  cwe:
  - CWE-264
  disclosed_date: 2016-02-24
  created_date: 2018-05-13
  last_modified_date: 2018-05-13
  credit:
  - Moritz Bechler
  references:
  - https://github.com/jenkinsci/jenkins/commit/1ec232ca1c80e924d70212313b852aec408aa37e
  - https://jenkins.io/security/advisory/2016-02-24/
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32272
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32273
  title: Cross-site Request Forgery (CSRF)
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open-source automation
    server.

    Affected versions of this package are vulnerable to Cross-site Request
    Forgery (CSRF). A malicious user could bypass the CSRF protection
    mechanism via unspecified vectors.



    [1]: https://github.com/jenkinsci/jenkins
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 1.625.3"
  - ">= 1.630 < 1.641"
  severity: high
  package_manager: maven
  cve:
  - CVE-2015-7538
  cwe:
  - CWE-352
  disclosed_date: 2015-12-19
  created_date: 2018-05-13
  last_modified_date: 2018-05-13
  credit:
  - Plastunov Andrey
  references:
  - https://github.com/jenkinsci/jenkins/commit/ef2c0dc163695af3a57ad7a45571293377ff679b
  - https://jenkins.io/security/advisory/2015-12-09/
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32273
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32276
  title: Cross-site Scripting (XSS)
  description: |+
    [org.jenkins-ci.main:jenkins-core][1] is an open-source automation
    server.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks. Users with the permission to configure jobs were able to
    inject JavaScript into parameter names and descriptions.



    [1]: https://github.com/jenkinsci/jenkins
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 2.32.2"
  - "< 2.44"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2017-2601
  cwe:
  - CWE-79
  disclosed_date: 2017-02-01
  created_date: 2018-05-16
  last_modified_date: 2018-05-16
  credit:
  - Mayuri Gaikwad
  - Suhas Gaikwad
  references:
  - https://github.com/jenkinsci/jenkins/commit/fd2e081b947124c90bcd97bfc55e1a7f2ef41a74
  - https://jenkins.io/security/advisory/2017-02-01/
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32276
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32277
  title: Arbitrary File Overwrite
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open-source automation
    server.

    Affected versions of this package are vulnerable to Arbitrary File
    Overwrite. The Pipeline suite of plugins stored build metadata in the
    file `program.dat` and the directory `workflow/`. These were not
    blacklisted in the `agent-to-master` security subsystem and could
    therefore be written to by malicious agents.



    [1]: https://github.com/jenkinsci/jenkins
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 2.32.2"
  - ">= 2.40 < 2.44"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2017-2602
  cwe:
  - CWE-264
  disclosed_date: 2017-02-01
  created_date: 2018-05-16
  last_modified_date: 2018-05-16
  credit:
  - Jesse Glick
  references:
  - https://github.com/jenkinsci/jenkins/commit/414ff7e30aba66bed18c4ee8a8660fb36fc8c655
  - https://jenkins.io/security/advisory/2017-02-01/
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32277
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32278
  title: Information Exposure
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open-source automation
    server.

    Affected versions of this package are vulnerable to Information
    Exposure. Agents that were disconnected by users contained the
    disconnecting user’s User object in serialized form in the `config.xml`
    remote `API` output. This could leak sensitive data such as `API`
    tokens.



    [1]: https://github.com/jenkinsci/jenkins
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 2.32.2"
  - ">= 2.40 < 2.44"
  severity: low
  package_manager: maven
  cve:
  - CVE-2017-2603
  cwe:
  - CWE-200
  disclosed_date: 2017-02-01
  created_date: 2018-05-16
  last_modified_date: 2018-05-16
  credit:
  - Robert Pitt
  references:
  - https://github.com/jenkinsci/jenkins/commit/3cd946cbef82c6da5ccccf3890d0ae4e091c4265
  - https://jenkins.io/security/advisory/2017-02-01/
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32278
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32282
  title: Insufficient Permission Validation
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open-source automation
    server.

    Affected versions of this package are vulnerable to Insufficient
    Permission Validation. Low privilege users were able to act on
    administrative monitors.



    [1]: https://github.com/jenkinsci/jenkins
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 2.32.2"
  - ">= 2.40 < 2.44"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2017-2604
  cwe:
  - CWE-284
  disclosed_date: 2017-02-01
  created_date: 2018-05-21
  last_modified_date: 2018-05-21
  credit:
  - Unknown
  references:
  - https://github.com/jenkinsci/jenkins/commit/6efcf6c2ac39bc5c59ac7251822be8ddf67ceaf8
  - https://jenkins.io/security/advisory/2017-02-01/
  - https://nvd.nist.gov/vuln/detail/CVE-2017-2604
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32282
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32283
  title: Deserialization of Untrusted Data
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open-source automation
    server.

    Affected versions of this package are vulnerable to Deserialization of
    Untrusted Data. An attacker may be able to leverage a flaw in
    XStream-based APIs like `/createItem` URLs, or `POST config.xml` remote
    API, to execute malicious code on the remote server. This is due to the
    deserialization of various types in `javax.imageio`.



    [1]: https://github.com/jenkinsci/jenkins
    \nSerialization is a process of converting an object into a sequence of
    bytes which can be persisted to a disk or database or can be sent
    through streams. The reverse process of creating object from sequence of
    bytes is called deserialization. Serialization is commonly used for
    communication (sharing objects between multiple hosts) and persistence
    (store the object state in a file or a database). It is an integral part
    of popular protocols like *Remote Method Invocation (RMI)*, *Java
    Management Extension (JMX)*, *Java Messaging System (JMS)*, *Action
    Message Format (AMF)*, *Java Server Faces (JSF) ViewState*, etc.

    *Deserialization of untrusted data* ([CWE-502][1]), is when the
    application deserializes untrusted data without sufficiently verifying
    that the resulting data will be valid, letting the attacker to control
    the state or the flow of the execution.

    Java deserialization issues have been known for years. However, interest
    in the issue intensified greatly in 2015, when classes that could be
    abused to achieve remote code execution were found in a [popular library
    (Apache Commons Collection)][2]. These classes were used in zero-days
    affecting IBM WebSphere, Oracle WebLogic and many other products.

    An attacker just needs to identify a piece of software that has both a
    vulnerable class on its path, and performs deserialization on untrusted
    data. Then all they need to do is send the payload into the
    deserializer, getting the command executed.

    > Developers put too much trust in Java Object Serialization. Some even
    > de-serialize objects pre-authentication. When deserializing an Object
    > in Java you typically cast it to an expected type, and therefore
    > Java\'s strict type system will ensure you only get valid object
    > trees. Unfortunately, by the time the type checking happens, platform
    > code has already created and executed significant logic. So, before
    > the final type is checked a lot of code is executed from the
    > readObject() methods of various objects, all of which is out of the
    > developer\'s control. By combining the readObject() methods of various
    > classes which are available on the classpath of the vulnerable
    > application an attacker can execute functions (including calling
    > Runtime.exec() to execute local OS commands).

    * Apache Blog

    The vulnerability, also know as *Mad Gadget*

    > Mad Gadget is one of the most pernicious vulnerabilities we’ve seen.
    > By merely existing on the Java classpath, seven “gadget” classes in
    > Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0)
    > make object deserialization for the entire JVM process Turing complete
    > with an exec function. Since many business applications use object
    > deserialization to send messages across the network, it would be like
    > hiring a bank teller who was trained to hand over all the money in the
    > vault if asked to do so politely, and then entrusting that teller with
    > the key. The only thing that would keep a bank safe in such a
    > circumstance is that most people wouldn’t consider asking such a
    > question.

    * Google



    [1]: https://cwe.mitre.org/data/definitions/502.html
    [2]: https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 2.32.2"
  - ">= 2.40 < 2.44"
  severity: high
  package_manager: maven
  cve:
  - CVE-2017-2608
  cwe:
  - CWE-502
  disclosed_date: 2017-01-02
  created_date: 2018-05-21
  last_modified_date: 2018-05-21
  credit:
  - Unknown
  references:
  - https://github.com/jenkinsci/jenkins/commit/a814154695e23dc37542af7d40cacc129cf70722
  - https://jenkins.io/security/advisory/2017-02-01/
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32283
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32285
  title: Privilege Escalation
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open-source automation
    server.

    Affected versions of this package are vulnerable to Privilege
    Escalation. Low privilege users were able to override `JDK` download
    credentials, resulting in future builds possibly failing to download a
    `JDK`.



    [1]: https://github.com/jenkinsci/jenkins
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 2.32.2"
  - ">= 2.40 < 2.44"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2017-2612
  cwe:
  - CWE-265
  disclosed_date: 2018-02-01
  created_date: 2018-05-21
  last_modified_date: 2018-05-21
  credit:
  - Daniel Beck
  references:
  - https://github.com/jenkinsci/jenkins/commit/b0ed9669bc00dbccf1be6896bb527b4cf2e7687d
  - https://jenkins.io/security/advisory/2017-02-01/
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32285
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32286
  title: Cross-site Request Forgery (CSRF)
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open-source automation
    server.

    Affected versions of this package are vulnerable to Cross-site Request
    Forgery (CSRF). When administrators accessed a URL like `/user/example`
    via `HTTP GET`, a user with the ID example was created if it did not
    exist. While this user record was only retained until restart in most
    cases, administrator\'s web browsers could be manipulated to create a
    large number of user records.



    [1]: https://github.com/jenkinsci/jenkins
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 2.32.2"
  - ">= 2.40 < 2.44"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2017-2613
  cwe:
  - CWE-352
  disclosed_date: 2017-01-02
  created_date: 2018-05-21
  last_modified_date: 2018-05-21
  credit:
  - Jean Marsault
  references:
  - https://github.com/jenkinsci/jenkins
  - https://github.com/jenkinsci/jenkins/commit/b88b20ec473200db35d0a0d29dcf192069106601
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32286
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32288
  title: Information Exposure
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open-source automation
    server.

    Affected versions of this package are vulnerable to Information
    Exposure. An attacker could obtain sensitive job and build name
    information via a direct request.



    [1]: https://github.com/jenkinsci/jenkins
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 1.625.2"
  - ">= 1.630 < 1.638"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2015-5317
  cwe:
  - CWE-200
  disclosed_date: 2015-11-11
  created_date: 2018-05-22
  last_modified_date: 2018-05-22
  credit:
  - Nicolas De Loof
  references:
  - https://github.com/jenkinsci/jenkins/commit/0594c4cbccd24d4883fc0150e8fc511c9da63eb4
  - https://jenkins.io/security/advisory/2015-11-11/
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32288
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32289
  title: Improper Access Control
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open-source automation
    server.

    Affected versions of this package are vulnerable to Improper Access
    Control. An attacker could bypass intended `slave-to-master` access
    restrictions by leveraging a `JNLP` slave.



    [1]: https://github.com/jenkinsci/jenkins
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 1.625.2"
  - ">= 1.630 < 1.638"
  severity: high
  package_manager: maven
  cve:
  - CVE-2015-5325
  cwe:
  - CWE-284
  disclosed_date: 2015-11-11
  created_date: 2018-05-22
  last_modified_date: 2018-05-22
  credit:
  - Jesse Glick
  references:
  - https://github.com/jenkinsci/jenkins/commit/ed407e66bcd3743a3b458ea8284977e5cac56c2a
  - https://jenkins.io/security/advisory/2015-11-11/
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32289
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32290
  title: Information Exposure
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open-source automation
    server.

    Affected versions of this package are vulnerable to Information
    Exposure. A remote attacker may obtain sensitive information via a
    direct request to `queue/api`.



    [1]: https://github.com/jenkinsci/jenkins
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 1.625.2"
  - ">= 1.630 < 1.638"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2015-5324
  cwe:
  - CWE-264
  disclosed_date: 2015-11-11
  created_date: 2018-05-22
  last_modified_date: 2018-05-22
  credit:
  - Daniel Beck
  references:
  - https://github.com/jenkinsci/jenkins/commit/581eb9ceb354b8a55c010d0547ff73cb6fd67a75
  - https://jenkins.io/security/advisory/2015-11-11/
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32290
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32293
  title: Cross-site Scripting (XSS)
  description: |+
    [org.jenkins-ci.main:jenkins-core][1] is an open-source automation
    server.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks. A remote authenticated users with certain permissions
    could inject arbitrary web script or HTML via the slave offline status
    message.



    [1]: https://github.com/jenkinsci/jenkins
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 1.625.2"
  - ">= 1.630 < 1.638"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2015-5326
  cwe:
  - CWE-79
  disclosed_date: 2015-11-04
  created_date: 2018-05-22
  last_modified_date: 2018-05-22
  credit:
  - Unknown
  references:
  - https://github.com/jenkinsci/jenkins/commit/1addc5d0feab0e77bb68e88fc74bb651e45cb462
  - https://jenkins.io/security/advisory/2015-11-11/
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32293
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32294
  title: Access Restriction Bypass
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open-source automation
    server.

    Affected versions of this package are vulnerable to Access Restriction
    Bypass. It does not properly restrict access to API tokens which might
    allow remote administrators to gain privileges and run scripts by using
    an API token of another user.



    [1]: https://github.com/jenkinsci/jenkins
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 1.625.2"
  - ">= 1.630 < 1.638"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2015-5323
  cwe:
  - CWE-264
  disclosed_date: 2015-11-11
  created_date: 2018-05-22
  last_modified_date: 2018-05-22
  credit:
  - Oleg Nenashev
  references:
  - https://github.com/jenkinsci/jenkins/commit/b3f16489ad5f15c3e749ed066cf6b4251f6668c6
  - https://jenkins.io/security/advisory/2015-11-11/
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32294
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32295
  title: Directory Traversal
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open-source automation
    server.

    Affected versions of this package are vulnerable to Directory Traversal
    attacks. An attacker could list directory contents and read arbitrary
    files in the Jenkins servlet resources via directory traversal sequences
    in a request to `jnlpJars/`.



    [1]: https://github.com/jenkinsci/jenkins
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 1.625.2"
  - ">= 1.630 < 1.638"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2015-5322
  cwe:
  - CWE-22
  disclosed_date: 2015-11-11
  created_date: 2018-05-22
  last_modified_date: 2018-05-22
  credit:
  - Ari Rubinstein
  references:
  - https://github.com/jenkinsci/jenkins/commit/5431e397216b4ab80e58bdabcb06a0066bce6592
  - https://jenkins.io/security/advisory/2015-11-11/
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32295
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32296
  title: XML External Entity (XXE) Injection
  description: |+
    [org.jenkins-ci.main:jenkins-core][1] is an open-source automation
    server.

    Affected versions of this package are vulnerable to XML external entity
    (XXE) Injection. A remote attacker could read arbitrary files via a
    crafted job configuration that is then used in an XML-aware tool, as
    demonstrated by get-job and update-job.



    [1]: https://github.com/jenkinsci/jenkins
    \nXXE Injection is a type of attack against an application that parses XML
    input. XML is a markup language that defines a set of rules for encoding
    documents in a format that is both human-readable and machine-readable.
    By default, many XML processors allow specification of an external
    entity, a URI that is dereferenced and evaluated during XML processing.
    When an XML document is being parsed, the parser can make a request and
    include the content at the specified URI inside of the XML document.

    Attacks can include disclosing local files, which may contain sensitive
    data such as passwords or private user data, using file: schemes or
    relative paths in the system identifier.

    For example, below is a sample XML document, containing an XML element-
    username.

        <?xml version="1.0" encoding="ISO-8859-1"?>
           <username>John</username>
        </xml>
    {: .language-xml}

    An external XML entity - `xxe`, is defined using a system identifier and
    present within a DOCTYPE header. These entities can access local or
    remote content. For example the below code contains an external XML
    entity that would fetch the content of `/etc/passwd` and display it to
    the user rendered by `username`.

        <?xml version="1.0" encoding="ISO-8859-1"?>
        <!DOCTYPE foo [
           <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
           <username>&xxe;</username>
        </xml>
    {: .language-xml}

    Other XXE Injection attacks can access local resources that may not stop
    returning data, possibly impacting application availability and leading
    to Denial of Service.

  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 1.625.2"
  - ">= 1.630 < 1.638"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2015-5319
  cwe:
  - CWE-611
  disclosed_date: 2015-11-11
  created_date: 2018-05-22
  last_modified_date: 2018-05-22
  credit:
  - James Nord
  references:
  - https://github.com/jenkinsci/jenkins/commit/e78e9e8144f7304cf274cd4b756f458cf63a3556
  - https://jenkins.io/security/advisory/2015-11-11/
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32296
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32297
  title: Cross-site Request Forgery (CSRF)
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open-source automation
    server.

    Affected versions of this package are vulnerable to Cross-site Request
    Forgery (CSRF). It uses a publicly accessible salt to generate CSRF
    protection tokens, which makes it easier for remote attackers to bypass
    the CSRF protection mechanism via a brute force attack.



    [1]: https://github.com/jenkinsci/jenkins
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 1.625.2"
  - ">= 1.630 < 1.638"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2015-5318
  cwe:
  - CWE-352
  disclosed_date: 2015-11-11
  created_date: 2018-05-22
  last_modified_date: 2018-05-22
  credit:
  - James Nord
  references:
  - https://github.com/jenkinsci/jenkins/commit/f53802bb82a25b295b6dfa3bf2a591a6c8552183
  - https://jenkins.io/security/advisory/2015-11-11/
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32297
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32299
  title: Cross-site Scripting (XSS)
  description: |+
    [org.jenkins-ci.main:jenkins-core][1] is an open-source automation
    server.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks via the console notes. Some plugins were able to edit
    build logs, add new content or change the presentation of existing
    content while the build is running. Malicious Jenkins users, or users
    with SCM access, could configure jobs or modify build scripts such that
    they print serialized console notes that perform cross-site scripting
    attacks on Jenkins users viewing the build logs.



    [1]: https://github.com/jenkinsci/jenkins
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 2.32.2"
  - ">= 2.40 < 2.44"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2017-2607
  cwe:
  - CWE-79
  disclosed_date: 2017-02-01
  created_date: 2018-05-22
  last_modified_date: 2018-05-22
  credit:
  - Jesse Glick
  references:
  - https://jenkins.io/security/advisory/2017-02-01/
  - https://nvd.nist.gov/vuln/detail/CVE-2017-2607
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32299
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32302
  title: Information Exposure
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open-source automation
    server.

    Affected versions of this package are vulnerable to Information Exposure
    via search suggestions. The autocomplete feature on the search box
    discloses the names of the views in its suggestions, including the ones
    for which the current user does not have access to.



    [1]: https://github.com/jenkinsci/jenkins
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 2.32.2"
  - ">= 2.40 < 2.44"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2017-2609
  cwe:
  - CWE-200
  disclosed_date: 2017-02-01
  created_date: 2018-05-23
  last_modified_date: 2018-05-23
  credit:
  - Daniel Beck
  references:
  - https://github.com/jenkinsci/jenkins/commit/246a0fa90a05b729eaabca6d697016015f622e57
  - https://jenkins.io/security/advisory/2017-02-01/
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32302
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32305
  title: Information Exposure
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open-source automation
    server.

    Affected versions of this package are vulnerable to Information
    Exposure. It uses AES ECB block cipher mode without IV for encrypting
    secrets which makes Jenkins and the stored secrets vulnerable to
    unnecessary risks.



    [1]: https://github.com/jenkinsci/jenkins
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 2.32.2"
  - ">= 2.40 < 2.44"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2017-2598
  cwe:
  - CWE-200
  disclosed_date: 2017-01-02
  created_date: 2018-05-24
  last_modified_date: 2018-05-24
  credit:
  - Ben Walding
  references:
  - https://github.com/jenkinsci/jenkins/commit/e6aa166246d1734f4798a9e31f78842f4c85c28b
  - https://jenkins.io/security/advisory/2017-02-01/
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32305
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32308
  title: Cross-site Scripting (XSS)
  description: |+
    [org.jenkins-ci.main:jenkins-core][1] is an open-source automation
    server.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks. A remote attackers could inject arbitrary web script or
    HTML via unspecified vectors.



    [1]: https://github.com/jenkinsci/jenkins
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 1.596.2"
  - ">= 1.600 < 1.606"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2015-1812
  cwe:
  - CWE-79
  disclosed_date: 2015-03-23
  created_date: 2018-05-28
  last_modified_date: 2018-05-28
  credit:
  - Jesse Glick
  references:
  - https://github.com/jenkinsci/jenkins/commit/feb2703adb0c121705e5c8e9ddf8f663b6481cbd
  - https://jenkins.io/security/advisory/2015-03-23/
  - https://nvd.nist.gov/vuln/detail/CVE-2015-1812
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32308
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32309
  title: Directory Traversal
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open-source automation
    server.

    Affected versions of this package are vulnerable to Directory Traversal
    attacks. A remote authenticated user with certain permissions could read
    arbitrary files via a symlink, related to building artifacts.



    [1]: https://github.com/jenkinsci/jenkins
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 1.596.1"
  severity: low
  package_manager: maven
  cve:
  - CVE-2015-1807
  cwe:
  - CWE-22
  disclosed_date: 2015-02-27
  created_date: 2018-05-28
  last_modified_date: 2018-05-28
  credit:
  - Daniel Beck
  references:
  - https://github.com/jenkinsci/jenkins/commit/1bba1ac3c6e9ae96e605e3846b9c77e2baafdedd
  - https://jenkins.io/security/advisory/2015-02-27/
  - https://nvd.nist.gov/vuln/detail/CVE-2015-1807
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32309
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32310
  title: Denial of Service (DoS)
  description: |+
    [org.jenkins-ci.main:jenkins-core][1] is an open-source automation
    server.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS) attacks via crafted update canter data.



    [1]: https://github.com/jenkinsci/jenkins
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 1.596.1"
  severity: low
  package_manager: maven
  cve:
  - CVE-2015-1808
  cwe:
  - CWE-20
  disclosed_date: 2015-02-27
  created_date: 2018-05-28
  last_modified_date: 2018-05-28
  credit:
  - Daniel Beck
  references:
  - https://github.com/jenkinsci/jenkins/commit/889b46cc9146fda468023f3ada71070e240c13ac
  - https://jenkins.io/security/advisory/2015-02-27/
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32310
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32311
  title: Information Exposure
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open-source automation
    server.

    Affected versions of this package are vulnerable to Information
    Exposure. It does not properly prevent downloading of plugins, which
    allows remote authenticated users with the `Overall/READ` permission to
    obtain sensitive information by reading the plugin code.



    [1]: https://github.com/jenkinsci/jenkins
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 1.565.3"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2014-3667
  cwe:
  - CWE-200
  disclosed_date: 2014-10-01
  created_date: 2018-05-28
  last_modified_date: 2018-05-28
  credit:
  - Jesse Glick
  references:
  - https://github.com/jenkinsci/jenkins/commit/f0a29b562e14d837912c6b35fa4e81478563813a
  - https://jenkins.io/security/advisory/2014-10-01/
  - https://nvd.nist.gov/vuln/detail/CVE-2014-3667
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32311
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32312
  title: Denial of Service (DoS)
  description: |+
    [org.jenkins-ci.main:jenkins-core][1] is a open source automation
    server.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS), via vectors related to a CLI handshake.



    [1]: https://github.com/jenkinsci/jenkins
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 1.565.3"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2014-3661
  cwe:
  - CWE-399
  disclosed_date: 2014-10-01
  created_date: 2018-05-28
  last_modified_date: 2018-05-28
  credit:
  - Daniel Beck
  references:
  - https://github.com/jenkinsci/jenkins/commit/880e101b1a449355db6eb91f662aab9e5df75769
  - https://jenkins.io/security/advisory/2014-10-01/
  - https://nvd.nist.gov/vuln/detail/CVE-2014-3661
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32312
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32313
  title: Arbitrary Code Execution
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is a open source automation
    server.

    Affected versions of this package are vulnerable to Arbitrary Code
    Execution, via a crafted packet in the CLI channel.



    [1]: https://github.com/jenkinsci/jenkins
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 1.565.3"
  severity: high
  package_manager: maven
  cve:
  - CVE-2014-3666
  cwe:
  - CWE-94
  disclosed_date: 2014-10-01
  created_date: 2018-05-28
  last_modified_date: 2018-05-28
  credit:
  - Stephen Connolly
  references:
  - https://github.com/jenkinsci/jenkins/commit/be195b0e19343bff6d966029d8eea99b2c039c32
  - https://jenkins.io/security/advisory/2014-10-01/
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32313
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32314
  title: Privilege Escalation
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open source automation
    server.

    Affected version of this package are vulnerable to Privilege Escalation.
    A malicious user with the `Job/CONFIGURE` permission could bypass
    intended restrictions and create or destroy arbitrary jobs via
    unspecified vectors.



    [1]: https://github.com/jenkinsci/jenkins
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 1.565.3"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2014-3663
  cwe:
  - CWE-264
  disclosed_date: 2014-10-01
  created_date: 2018-05-28
  last_modified_date: 2018-05-28
  credit:
  - Daniel Beck
  references:
  - https://github.com/jenkinsci/jenkins/commit/54d44502bd6ec8df23bf8ef0413bdad650ef321e
  - https://jenkins.io/security/advisory/2014-10-01/
  - https://nvd.nist.gov/vuln/detail/CVE-2014-3661
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32314
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32315
  title: Directory Traversal
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open source automation
    server.

    Affected versions of this package are vulnerable to Directory Traversal
    attacks. A malicious user with the `Overall/READ` permission to read
    arbitrary files via unspecified vectors.



    [1]: https://github.com/jenkinsci/jenkins
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 1.565.3"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2014-3664
  cwe:
  - CWE-22
  disclosed_date: 2014-01-10
  created_date: 2018-05-28
  last_modified_date: 2018-05-28
  credit:
  - Jesse Glick
  references:
  - https://github.com/jenkinsci/jenkins/commit/71a28615e33fe42e3cc7a34ef86e31ed5d87bc74
  - https://jenkins.io/security/advisory/2014-10-01/
  - https://nvd.nist.gov/vuln/detail/CVE-2014-3661
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32315
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32316
  title: Cross-site Scripting (XSS)
  description: |+
    [org.jenkins-ci.main:jenkins-core][1] is an open-source automation
    server.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks. A remote attacker could inject arbitrary web script or
    HTML via unspecified vectors.



    [1]: https://github.com/jenkinsci/jenkins
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 1.565.3"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2014-3681
  cwe:
  - CWE-79
  disclosed_date: 2014-10-01
  created_date: 2018-05-28
  last_modified_date: 2018-05-28
  credit:
  - Seth Graham
  references:
  - https://github.com/jenkinsci/jenkins/commit/0f63c678ee49d7f75432ebc778ffdda49890c1d2
  - https://jenkins.io/security/advisory/2014-10-01/
  - https://nvd.nist.gov/vuln/detail/CVE-2014-3681
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32316
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32317
  title: Information Exposure
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open-source automation
    server.

    Affected versions of this package are vulnerable to Information
    Exposure. It does not set the `HttpOnly` flag in a `Set-Cookie` header
    for session cookies when running on Tomcat 7.0.41 or later, which makes
    it easier for remote attackers to obtain potentially sensitive
    information via script access to cookies.



    [1]: https://github.com/jenkinsci/jenkins
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 1.586"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2014-9635
  cwe:
  - CWE-254
  disclosed_date: 2014-10-17
  created_date: 2018-05-28
  last_modified_date: 2018-05-28
  credit:
  - Unknown
  references:
  - https://github.com/jenkinsci/jenkins/commit/582128b9ac179a788d43c1478be8a5224dc19710
  - https://jenkins.io/changelog-old/
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32317
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32318
  title: Man-in-the-Middle (MitM)
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open-source automation
    server.

    Affected versions of this package are vulnerable to Man-in-the-Middle
    (MitM) attacks. It does not set the secure flag on session cookies when
    running on Tomcat 7.0.41 or later, which makes it easier for remote
    attackers to capture cookies by intercepting their transmission within
    an HTTP session.



    [1]: https://github.com/jenkinsci/jenkins
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 1.586"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2014-9634
  cwe:
  - CWE-254
  disclosed_date: 2014-10-17
  created_date: 2018-05-28
  last_modified_date: 2018-05-28
  credit:
  - Unknown
  references:
  - https://github.com/jenkinsci/jenkins/commit/582128b9ac179a788d43c1478be8a5224dc19710
  - https://nvd.nist.gov/vuln/detail/CVE-2014-9634
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32318
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32319
  title: Privilege Escalation
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open-source automation
    server.

    Affected versions of this package are vulnerable to Privilege
    Escalation. A remote attacker could gain privileges via a forced API
    token change involving anonymous users.



    [1]: https://github.com/jenkinsci/jenkins
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 1.596.2"
  - ">= 1.600 < 1.606"
  severity: high
  package_manager: maven
  cve:
  - CVE-2015-1814
  cwe:
  - CWE-264
  disclosed_date: 2015-03-23
  created_date: 2018-05-28
  last_modified_date: 2018-05-28
  credit:
  - Missoum Said
  references:
  - https://github.com/jenkinsci/jenkins/commit/c826a1b8276879c6e3de384b697d42eadfcdf127
  - https://jenkins.io/security/advisory/2015-03-23/
  - https://nvd.nist.gov/vuln/detail/CVE-2015-1814
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32319
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32320
  title: Arbitrary Code Execution
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open-source automation
    server.

    Affected versions of this package are vulnerable to Arbitrary Code
    Execution. A remote authenticated users with job configuration
    permission could gain privileges and execute arbitrary code on the
    master via unspecified vectors.



    [1]: https://github.com/jenkinsci/jenkins
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 1.596.1"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2015-1806
  cwe:
  - CWE-264
  disclosed_date: 2015-02-27
  created_date: 2018-05-28
  last_modified_date: 2018-05-28
  credit:
  - Daniel Beck
  references:
  - https://github.com/jenkinsci/jenkins/commit/a001f71ded7473a7a122073c2849ec7d119ae888
  - https://jenkins.io/security/advisory/2015-02-27/
  - https://nvd.nist.gov/vuln/detail/CVE-2015-1806
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32320
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32321
  title: Cross-site Scripting (XSS)
  description: |+
    [org.jenkins-ci.main:jenkins-core][1] is an open-source automation
    server.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks. A remote attacker could inject arbitrary web script or
    HTML via unspecified vectors.



    [1]: https://github.com/jenkinsci/jenkins
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 1.596.2"
  - ">= 1.600 < 1.606"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2015-1813
  cwe:
  - CWE-79
  disclosed_date: 2015-03-23
  created_date: 2018-05-28
  last_modified_date: 2018-05-28
  credit:
  - Jesse Glick
  references:
  - https://github.com/jenkinsci/jenkins/commit/1699e2c1f36a22d6a149e71c80937e9972ef6224
  - https://jenkins.io/security/advisory/2015-03-23/
  - https://nvd.nist.gov/vuln/detail/CVE-2015-1813
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32321
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32322
  title: Information Exposure
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open source automation
    server.

    Affected versions of this package are vulnerable to Information
    Exposure. A malicious user could enumerate user names via vectors
    related to login attempts.



    [1]: https://github.com/jenkinsci/jenkins
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 1.565.3"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2014-3662
  cwe:
  - CWE-200
  disclosed_date: 2014-10-01
  created_date: 2018-05-28
  last_modified_date: 2018-05-28
  credit:
  - Daniel Beck
  references:
  - https://github.com/jenkinsci/jenkins/commit/880e101b1a449355db6eb91f662aab9e5df75769
  - https://jenkins.io/security/advisory/2014-10-01/
  - https://nvd.nist.gov/vuln/detail/CVE-2014-3661
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32322
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32323
  title: Information Exposure
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open-source automation
    server.

    Affected versions of this package are vulnerable to Information
    Exposure. A remote authenticated user with the `Job/READ` permission
    could obtain the default value for the password field of a parameterized
    job by reading the DOM.



    [1]: https://github.com/jenkinsci/jenkins
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 1.565.3"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2014-3680
  cwe:
  - CWE-200
  disclosed_date: 2014-10-01
  created_date: 2018-05-28
  last_modified_date: 2018-05-28
  credit:
  - Matthias Schmalz
  references:
  - https://github.com/jenkinsci/jenkins/commit/a6a7bec04b41e0d6913241e702e0b2195924eda7
  - https://jenkins.io/security/advisory/2014-10-01/
  - https://nvd.nist.gov/vuln/detail/CVE-2014-3681
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32323
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32326
  title: Privilege Escalation
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open-source automation
    server.

    Affected versions of this package are vulnerable to Privilege Escalation
    via the `HudsonPrivateSecurityRealm` class. It does not restrict access
    to reserved names when using the Jenkins own user database setting,
    which allows remote attackers to gain privileges by creating a reserved
    name.



    [1]: https://github.com/jenkinsci/jenkins
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 1.596.1"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2015-1810
  cwe:
  - CWE-264
  disclosed_date: 2015-02-27
  created_date: 2018-05-28
  last_modified_date: 2018-05-28
  credit:
  - Steven Christou
  references:
  - https://github.com/jenkinsci/jenkins/commit/01a087d127d7a871eac02b03143464e2f4c6d48c
  - https://jenkins.io/security/advisory/2015-02-27/
  - https://nvd.nist.gov/vuln/detail/CVE-2015-1810
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32326
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32327
  title: Cross-site Scripting (XSS)
  description: |+
    [org.jenkins-ci.main:jenkins-core][1] is an open sourcr automation
    server.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks via the `java/hudson/model/Cause.java` class. A malicious
    user of Jenkins with a certain set of permissions can cause Jenkins to
    store arbitrary HTML fragment.



    [1]: https://github.com/jenkinsci/jenkins
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 1.532.2"
  severity: low
  package_manager: maven
  cve:
  - CVE-2014-2067
  cwe:
  - CWE-79
  disclosed_date: 2014-02-14
  created_date: 2018-05-29
  last_modified_date: 2018-05-29
  credit:
  - Unknown
  references:
  - https://github.com/jenkinsci/jenkins/commit/5d57c855f3147bfc5e7fda9252317b428a700014
  - https://jenkins.io/security/advisory/2014-02-14/
  - https://nvd.nist.gov/vuln/detail/CVE-2014-2067
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32327
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32328
  title: Information Exposure
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open source automation
    server.

    Affected versions of this package are vulnerable to Information Exposure
    via the `hudson/util/RemotingDiagnostics.java` function. A remote
    authenticated user with the ADMINISTER permission could obtain sensitive
    information via vectors related to `heapDump`.



    [1]: https://github.com/jenkinsci/jenkins
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 1.532.2"
  severity: low
  package_manager: maven
  cve:
  - CVE-2014-2068
  cwe:
  - CWE-264
  disclosed_date: 2014-02-14
  created_date: 2018-05-29
  last_modified_date: 2018-05-29
  credit:
  - Unknown
  references:
  - https://github.com/jenkinsci/jenkins/commit/0530a6645aac10fec005614211660e98db44b5eb
  - https://jenkins.io/security/advisory/2014-02-14/
  - https://nvd.nist.gov/vuln/detail/CVE-2014-2068
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32328
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32329
  title: Information Exposure
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open source automation
    server.

    Affected versions of this package are vulnerable to Information Exposure
    via the `hudson/security/HudsonPrivateSecurityRealm.java` class. A
    malicious user could determine whether a user exists via vectors related
    to failed login attempts.



    [1]: https://github.com/jenkinsci/jenkins
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 1.532.2"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2014-2064
  cwe:
  - CWE-200
  disclosed_date: 2014-02-14
  created_date: 2018-05-29
  last_modified_date: 2018-05-29
  credit:
  - Unknown
  references:
  - https://github.com/jenkinsci/jenkins/commit/fbf96734470caba9364f04e0b77b0bae7293a1ec
  - https://jenkins.io/security/advisory/2014-02-14/
  - https://nvd.nist.gov/vuln/detail/CVE-2014-2064
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32329
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32330
  title: Directory Traversal
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open source automation
    server.

    Affecetd versions of this package are vulnerable to Directory Traversal
    attacks via the CLI job creation. A malicious user could overwrite
    arbitrary files via the job name.



    [1]: https://github.com/jenkinsci/jenkins
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 1.532.2"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2014-2059
  cwe:
  - CWE-22
  disclosed_date: 2014-02-14
  created_date: 2018-05-29
  last_modified_date: 2018-05-29
  credit:
  - Unknown
  references:
  - https://github.com/jenkinsci/jenkins/commit/5548b5220cfd496831b5721124189ff18fbb12a3
  - https://jenkins.io/security/advisory/2014-02-14/
  - https://nvd.nist.gov/vuln/detail/CVE-2014-2059
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32330
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32332
  title: Cross-site Scripting (XSS)
  description: |+
    [org.jenkins-ci.main:jenkins-core][1] is an open source automation
    server.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks. A malicious user could inject arbitrary web script or
    HTML via the `iconSize cookie`.



    [1]: https://github.com/jenkinsci/jenkins
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 1.532.2"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2014-2065
  cwe:
  - CWE-79
  disclosed_date: 2014-02-14
  created_date: 2018-05-29
  last_modified_date: 2018-05-29
  credit:
  - Unknown
  references:
  - https://github.com/jenkinsci/jenkins/commit/a0b00508eeb74d7033dc4100eb382df4e8fa72e7
  - https://jenkins.io/security/advisory/2014-02-14/
  - https://nvd.nist.gov/vuln/detail/CVE-2014-2065
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32332
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32333
  title: Access Restriction Bypass
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open source automation
    server.

    Affected versions of this package are vulnerable to Access Restriction
    Bypass. It does not invalidate the API token when a user is deleted,
    which allows remote authenticated users to retain access via the token.



    [1]: https://github.com/jenkinsci/jenkins
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 1.532.2"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2014-2062
  cwe:
  - CWE-287
  disclosed_date: 2014-02-14
  created_date: 2018-05-29
  last_modified_date: 2018-05-29
  credit:
  - Unknown
  references:
  - https://github.com/jenkinsci/jenkins/commit/5548b5220cfd496831b5721124189ff18fbb12a3
  - https://jenkins.io/security/advisory/2014-02-14/
  - https://nvd.nist.gov/vuln/detail/CVE-2014-2062
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32333
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32334
  title: Access Restriction Bypass
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open source automation
    server.

    Affected versions of this package are vulnerable to Access Restriction
    Bypass. A malicious user could bypass access restrictions and execute
    arbitrary jobs by configuring a job to trigger another job.



    [1]: https://github.com/jenkinsci/jenkins
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 1.532.2"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2014-2058
  cwe:
  - CWE-264
  disclosed_date: 2014-02-14
  created_date: 2018-05-29
  last_modified_date: 2018-05-29
  credit:
  - Unknown
  references:
  - https://github.com/jenkinsci/jenkins/commit/5548b5220cfd496831b5721124189ff18fbb12a3
  - https://jenkins.io/security/advisory/2014-02-14/
  - https://nvd.nist.gov/vuln/detail/CVE-2014-2058
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32334
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32335
  title: Session Hijacking
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open source automation
    server.

    Affected versions of this package are vulnerable to Session Hijacking. A
    remote attacker may hijack web sessions via vectors involving the
    `override` of Jenkins cookies.



    [1]: https://github.com/jenkinsci/jenkins
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 1.532.2"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2014-2066
  cwe:
  - CWE-287
  disclosed_date: 2014-02-14
  created_date: 2018-05-29
  last_modified_date: 2018-05-29
  credit:
  - Unknown
  references:
  - https://github.com/jenkinsci/jenkins/commit/8ac74c350779921598f9d5edfed39dd35de8842a
  - https://jenkins.io/security/advisory/2014-02-14/
  - https://nvd.nist.gov/vuln/detail/CVE-2014-2066
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32335
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32336
  title: Clickjacking
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open source automation
    server.

    Affected versions of this package are vulnerable to Clickjacking. It is
    possible for remote attackers to conduct clickjacking attacks via
    unspecified vectors.



    [1]: https://github.com/jenkinsci/jenkins
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 1.532.2"
  severity: high
  package_manager: maven
  cve:
  - CVE-2014-2063
  cwe:
  - CWE-254
  disclosed_date: 2014-02-14
  created_date: 2018-05-29
  last_modified_date: 2018-05-29
  credit:
  - Unknown
  references:
  - https://github.com/jenkinsci/jenkins
  - https://github.com/jenkinsci/jenkins/commit/16931bd7bf7560e26ef98328b8e95e803d0e90f6
  - https://nvd.nist.gov/vuln/detail/CVE-2014-2063
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32336
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32357
  title: Information Exposure
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open-source automation
    server.

    Affected versions of this package are vulnerable to Information
    Exposure. A user with `Overall/Read` access could enumerate all
    installed plugins.



    [1]: https://github.com/jenkinsci/jenkins
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 2.107.3"
  - ">= 2.120 < 2.121"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2018-1000192
  cwe:
  - CWE-200
  disclosed_date: 2018-06-05
  created_date: 2018-06-10
  last_modified_date: 2018-06-10
  credit:
  - Devin Nusbaum
  references:
  - https://github.com/snyk/vulndb-internal/pull/1722/files
  - https://jenkins.io/security/advisory/2018-05-09/#SECURITY-771
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32357
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32358
  title: Directory Traversal
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open source automation
    server.

    Affected versions of this package are vulnerable to Directory Traversal
    Attacks. A malicious agent could read and write arbitrary files on the
    Jenkins master, bypassing the agent-to-master security subsystem
    protection.



    [1]: https://github.com/jenkinsci/jenkins
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 2.107.3"
  - ">= 2.120 < 2.121"
  severity: high
  package_manager: maven
  cve:
  - CVE-2018-1000194
  cwe:
  - CWE-22
  disclosed_date: 2018-06-05
  created_date: 2018-06-10
  last_modified_date: 2018-06-10
  credit:
  - Sureshbabu Narvaneni
  references:
  - https://github.com/jenkinsci/jenkins/commit/de7aaab441151fb1760855fec83681c6a8756a45
  - https://jenkins.io/security/advisory/2018-05-09/#SECURITY-788
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32358
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32359
  title: Server-Side Request Forgery (SSRF)
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open source automation
    server.

    Affected versions of this package are vulnerable to Server-Side Request
    Forgery (SSRF). A user with `Overall/Read` permission to have Jenkins
    submit a `HTTP GET` request to an arbitrary URL and learn whether the
    response is successful (200) or not.



    [1]: https://github.com/jenkinsci/jenkins
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 2.107.3"
  - ">= 2.120 < 2.121"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2018-1000195
  cwe:
  - CWE-918
  disclosed_date: 2018-06-05
  created_date: 2018-06-10
  last_modified_date: 2018-06-10
  credit:
  - Thomas de Grenier de Latour
  references:
  - https://github.com/jenkinsci/jenkins/commit/6eea1e97840b5623829b2c1fd2e363c045bdc230
  - https://jenkins.io/security/advisory/2018-05-09/#SECURITY-794
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32359
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32370
  title: User Impersonation
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open source automation
    server.

    Affected versions of this package are vulnerable to User Impersonation
    via the `HudsonPrivateSecurityRealm.java` method. A malicious user could
    sign up using user names containing control characters that can then
    appear to have the same name as other users, and cannot be deleted via
    the UI.



    [1]: https://github.com/jenkinsci/jenkins
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 2.107.3"
  - ">= 2.120 < 2.121"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2018-1000193
  cwe:
  - CWE-290
  disclosed_date: 2018-04-26
  created_date: 2018-06-13
  last_modified_date: 2018-06-13
  credit:
  - Sureshbabu Narvaneni
  references:
  - https://github.com/jenkinsci/jenkins/commit/de7aaab441151fb1760855fec83681c6a8756a45
  - https://jenkins.io/security/advisory/2018-05-09/#SECURITY-786
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32370
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32433
  title: Authentication Bypass
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open-source automation
    server.

    Affected versions of this package are vulnerable to Authentication
    Bypass. An attacker could provide crafted login credentials that would
    cause Jenkins to move the `config.xml` file from the home directory.



    [1]: https://github.com/jenkinsci/jenkins
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 2.121.2"
  - ">= 2.130 < 2.133"
  severity: high
  package_manager: maven
  cve:
  - CVE-2018-1999001
  cwe:
  - CWE-592
  disclosed_date: 2018-06-19
  created_date: 2018-07-26
  last_modified_date: 2018-07-26
  credit:
  - Nimrod Stoler
  references:
  - https://github.com/jenkinsci/jenkins/commit/5f4d014b3b7f89e206c6c8509540ed559f604959
  - https://jenkins.io/security/advisory/2018-07-18/#SECURITY-897
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32433
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32434
  title: Arbitrary File Read
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open source automation
    server.

    Affected versions of this package are vulnerable to Arbitrary File Read
    via the `org/kohsuke/stapler/Stapler.java` class. An attacker could send
    a malicious `HTTP` requests which return the contents of any file on the
    Jenkins master file system.



    [1]: https://github.com/jenkinsci/jenkins
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 2.121.2"
  - ">= 2.130 < 2.133"
  severity: high
  package_manager: maven
  cve:
  - CVE-2018-1999002
  cwe:
  - CWE-94
  disclosed_date: 2018-07-23
  created_date: 2018-07-26
  last_modified_date: 2018-07-26
  credit:
  - Orange Tsai
  references:
  - https://github.com/jenkinsci/jenkins/commit/29ca81dd59c255ad633f1bd86cf1be40a5f02c64
  - https://jenkins.io/security/advisory/2018-07-18/#SECURITY-914
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32434
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32435
  title: Insufficient Permission Check
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open source automation
    server.

    Affected versions of this package are vulnerable to Insufficient
    Permissions Check. Users with `Overall/Read` permission could cancel
    queued builds due to missing permissions check.



    [1]: https://github.com/jenkinsci/jenkins
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 2.121.2"
  - ">= 2.130 < 2.133"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2018-1999003
  cwe:
  - CWE-280
  disclosed_date: 2018-07-19
  created_date: 2018-07-26
  last_modified_date: 2018-07-26
  credit:
  - Nimrod Stoler
  references:
  - https://github.com/jenkinsci/jenkins/commit/af9e11c9941487f69ec1a95c65958fc208064e7a
  - https://jenkins.io/security/advisory/2018-07-18/#SECURITY-891
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32435
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32436
  title: Improper Authorization
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open source automation
    server.

    Affected versions of this package are vulnerable to Improper
    Authorization. Due to missing permissions check, users with
    `Overall/Read` permission could initiate agent launches.



    [1]: https://github.com/jenkinsci/jenkins
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 2.121.2"
  - ">= 2.130 < 2.133"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2018-1999004
  cwe:
  - CWE-285
  disclosed_date: 2018-07-23
  created_date: 2018-07-26
  last_modified_date: 2018-07-26
  credit:
  - Nimrod Stoler
  references:
  - https://github.com/jenkinsci/jenkins/commit/40250f08aca7f3f8816f21870ee23463a52ef2f2
  - https://jenkins.io/security/advisory/2018-07-18/#SECURITY-892
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32436
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32437
  title: Cross-site Scripting (XSS)
  description: |+
    [org.jenkins-ci.main:jenkins-core][1] is an open source automation
    server.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks due to not properly escaping display names of items.



    [1]: https://github.com/jenkinsci/jenkins
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 2.121.2"
  - ">= 2.130 < 2.133"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2018-1999005
  cwe:
  - CWE-79
  disclosed_date: 2018-06-19
  created_date: 2018-07-26
  last_modified_date: 2018-07-26
  credit:
  - AZZAZ Yasmine
  references:
  - https://github.com/jenkinsci/jenkins/commit/8697bdff0342421e22230028d84aaa265719e86c
  - https://jenkins.io/security/advisory/2018-07-18/#SECURITY-944
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32437
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32438
  title: Information Exposure
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open source automation
    server.

    Affected versions of this package are vulnerable to Information
    Exposure. Users with `Overall/Read` permission could determine the date
    and time a `HPI/JPI` file was last extracted.



    [1]: https://github.com/jenkinsci/jenkins
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 2.121.2"
  - ">= 2.130 < 2.133"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2018-1999006
  cwe:
  - CWE-200
  disclosed_date: 2018-06-19
  created_date: 2018-07-26
  last_modified_date: 2018-07-26
  credit:
  - Daniel Beck
  references:
  - https://github.com/jenkinsci/jenkins/commit/f46842c7a2c916170ac457a039a2f7f019afd885
  - https://jenkins.io/security/advisory/2018-07-18/#SECURITY-925
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32438
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32439
  title: Cross-site Scripting (XSS)
  description: |+
    [org.jenkins-ci.main:jenkins-core][1] is an open source automation
    service.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks via the `org/kohsuke/stapler/Stapler.java` class. The
    `HTTP 404` error pages did not escape parts of URLs they displayed,
    allowing an attacker to define code that would be executed in another
    user\'s browser.



    [1]: https://github.com/jenkinsci/jenkins
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 2.121.2"
  - ">= 2.130 < 2.133"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2018-1999007
  cwe:
  - CWE-79
  disclosed_date: 2018-06-19
  created_date: 2018-07-26
  last_modified_date: 2018-07-26
  credit:
  - Daniel Beck
  references:
  - https://jenkins.io/security/advisory/2018-07-18/#SECURITY-390
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32439
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32478
  title: Information Exposure
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open source automation
    server.

    Affected versions of this package are vulnerable to Information
    Exposure. An attacker could obtain the master cryptographic key when a
    slave was attached and anonymous read access was enabled.



    [1]: https://github.com/jenkinsci/jenkins
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 1.480.2"
  - ">= 1.490 < 1.498"
  severity: low
  package_manager: maven
  cve:
  - CVE-2013-0158
  cwe:
  - CWE-200
  disclosed_date: 2013-01-04
  created_date: 2018-08-27
  last_modified_date: 2018-08-27
  credit:
  - Unknown
  references:
  - https://jenkins.io/security/advisory/2013-01-04/
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32478
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32479
  title: Arbitrary Code Execution
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open source automation
    server.

    Affected versions of this package are vulnerable to Arbitrary Code
    Execution. It did not properly ensure trust separation between a master
    and slaves, which might allow remote attackers to execute arbitrary code
    on the master by leveraging access to the slave.



    [1]: https://github.com/jenkinsci/jenkins
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 1.587"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2014-3665
  cwe:
  - CWE-264
  disclosed_date: 2014-10-30
  created_date: 2018-08-27
  last_modified_date: 2018-08-27
  credit:
  - Unknown
  references:
  - https://jenkins.io/security/advisory/2014-10-30/#affected-versions
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32479
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32480
  title: Arbitrary Code Execution
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open source automation
    server.

    Affected versions of this package are vulnerable to Arbitrary Code
    Execution. A malicious user with write permission could inject arbitrary
    web script or HTML.



    [1]: https://github.com/jenkinsci/jenkins
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - ">= 1.509.0 < 1.509.1"
  - ">= 1.510 < 1.514"
  severity: low
  package_manager: maven
  cve:
  - CVE-2013-2033
  cwe:
  - CWE-94
  disclosed_date: 2013-05-02
  created_date: 2018-08-27
  last_modified_date: 2018-08-27
  credit:
  - Unknown
  references:
  - https://www.cloudbees.com/jenkins-security-advisory-2013-05-02
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32480
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32483
  title: Information Exposure
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open source automation
    server.

    Affected versions of this package are vulnerable to Information
    Exposure. It did not properly verify the shared secret used in `JNLP`
    slave connections, which allows remote attackers to connect as slaves
    and obtain sensitive information or possibly gain administrative access
    by leveraging knowledge of the name of a slave.



    [1]: https://github.com/jenkinsci/jenkins
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 1.625.2"
  - ">= 1.630 < 1.638"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2015-5320
  cwe:
  - CWE-200
  disclosed_date: 2015-11-11
  created_date: 2018-08-27
  last_modified_date: 2018-08-27
  credit:
  - Akshay Dayal
  references:
  - https://jenkins.io/security/advisory/2015-11-11/
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32483
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32485
  title: Deserialization of Untrusted Data
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open source automation
    server.

    Affected versions of this package are vulnerable to Deserialization of
    URL objects via Remoting (agent communication) and XStream.



    [1]: https://github.com/jenkinsci/jenkins
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 2.121.3"
  - ">= 2.130 < 2.138"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2018-1999042
  cwe:
  - CWE-502
  disclosed_date: 2018-08-15
  created_date: 2018-08-27
  last_modified_date: 2018-08-27
  credit:
  - Jesse Glick
  references:
  - https://github.com/jenkinsci/jenkins/commit/727d58f690abf64f543407e1de3545eca76ad30e
  - https://jenkins.io/security/advisory/2018-08-15/#SECURITY-637
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32485
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32486
  title: Denial of Service (DoS)
  description: |+
    [org.jenkins-ci.main:jenkins-core][1] is an open source automation
    server.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS). An attacker could create ephemeral in-memory user records by
    attempting to log in using invalid credentials.



    [1]: https://github.com/jenkinsci/jenkins
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 2.121.3"
  - ">= 2.130 < 2.138"
  severity: high
  package_manager: maven
  cve:
  - CVE-2018-1999043
  cwe:
  - CWE-400
  disclosed_date: 2018-08-15
  created_date: 2018-08-27
  last_modified_date: 2018-08-27
  credit:
  - Wadeck Follonier
  references:
  - https://jenkins.io/security/advisory/2018-08-15/#SECURITY-672
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32486
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32487
  title: Denial of Service (DoS)
  description: |+
    [org.jenkins-ci.main:jenkins-core][1] is an open source automation
    server.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS). A malicious user with `Overall/Read` permission could have a
    request handling thread enter an infinite loop.



    [1]: https://github.com/jenkinsci/jenkins
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 2.121.3"
  - ">= 2.130 < 2.138"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2018-1999044
  cwe:
  - CWE-400
  disclosed_date: 2018-08-15
  created_date: 2018-08-27
  last_modified_date: 2018-08-27
  credit:
  - Thomas de Grenier de Latour
  references:
  - https://github.com/jenkinsci/jenkins/commit/e5046911c57e60a1d6d8aca9b21bd9093b0f3763
  - https://jenkins.io/security/advisory/2018-08-15/#SECURITY-790
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32487
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32488
  title: Authentication Bypass
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open source automation
    server.

    Affected versions of this package are vulnerable to Authentication
    Bypass. An attacker with a valid cookie could remain logged in even if
    that feature is disabled.



    [1]: https://github.com/jenkinsci/jenkins
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 2.121.3"
  - ">= 2.130 < 2.138"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2018-1999045
  cwe:
  - CWE-592
  disclosed_date: 2018-08-15
  created_date: 2018-08-27
  last_modified_date: 2018-08-27
  credit:
  - Unknown
  references:
  - https://github.com/jenkinsci/jenkins/commit/ef9583a24abc4de157e1570cb32d7a273d327f36
  - https://jenkins.io/security/advisory/2018-08-15/#SECURITY-996
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32488
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32489
  title: Information Exposure
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open source automation
    server.

    Affected versions of this package are vulnerable to Information
    Exposure. A malicious user With `Overall/Read` permission could access
    the connection log for any agent.



    [1]: https://github.com/jenkinsci/jenkins
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 2.121.3"
  - ">= 2.130 < 2.138"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2018-1999046
  cwe:
  - CWE-200
  disclosed_date: 2018-08-15
  created_date: 2018-08-27
  last_modified_date: 2018-08-27
  credit:
  - Orange Tsai
  references:
  - https://github.com/jenkinsci/jenkins/commit/6867e4469525d16319b1bae9c840b933fe4e23c4
  - https://jenkins.io/security/advisory/2018-08-15/#SECURITY-1071
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32489
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:32490
  title: Improper Authorization
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open source automation
    server.

    Affected versions of this package are vulnerable to Improper
    Authorization. A malicious user could cancel a Jenkins restart scheduled
    through the update center.



    [1]: https://github.com/jenkinsci/jenkins
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 2.121.3"
  - ">= 2.130 < 2.138"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2018-1999047
  cwe:
  - CWE-85
  disclosed_date: 2018-08-15
  created_date: 2018-08-27
  last_modified_date: 2018-08-27
  credit:
  - Wadeck Follonier
  references:
  - https://jenkins.io/security/advisory/2018-08-15/#SECURITY-1076
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32490
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:451651
  title: Cross Site Request Forgery (CSRF)
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open source automation
    server.

    Affected versions of this package are vulnerable to Cross Site Request
    Forgery (CSRF). CSRF tokens in older releases of did not expire, thereby
    allowing attackers able to obtain them to bypass CSRF protection. By
    default, CSRF tokens only validated user authentication access and IP
    address. This could allow attackers the ability to obtain a CSRF token
    for another user to implement CSRF attacks as long as the victim’s IP
    address remained unchanged.



    [1]: https://github.com/jenkinsci/jenkins
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 2.176.2"
  - ">= 2.180 < 2.186"
  severity: high
  package_manager: maven
  cve:
  - CVE-2019-10353
  cwe:
  - CWE-352
  disclosed_date: 2019-07-17
  created_date: 2019-07-18
  last_modified_date: 2019-07-18
  credit:
  - Unknown
  references:
  - https://github.com/jenkinsci/jenkins/commit/772152315aa0a9ba27b812a4ba0f3f9b64af78d9
  - https://jenkins.io/security/advisory/2019-07-17/
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-451651
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:451652
  title: Directory Traversal
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open source automation
    server.

    Affected versions of this package are vulnerable to Directory Traversal.
    A path traversal vulnerability exists in
    `core/src/main/java/hudson/model/FileParameterValue.java` which allows
    attackers with `Job/Configure` permission to define a file parameter
    with a file name outside the intended directory, resulting in an
    arbitrary file write on the Jenkins master when scheduling a build.



    [1]: https://github.com/jenkinsci/jenkins
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - ">= 0"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2019-10352
  cwe:
  - CWE-22
  disclosed_date: 2019-07-17
  created_date: 2019-07-18
  last_modified_date: 2019-07-18
  credit:
  - Conor O'Neill of Tenable
  references:
  - https://github.com/jenkinsci/jenkins/commit/18fc7c0b466553cbd4f790db3270964305bee7f9
  - https://jenkins.io/security/advisory/2019-07-17/
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-451652
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:451653
  title: Access Control Bypass
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open source automation
    server.

    Affected versions of this package are vulnerable to Access Control
    Bypass. A vulnerability in the Stapler web framework used in Jenkins
    allows attackers to access view fragments directly, bypassing permission
    checks and possibly obtain sensitive information.



    [1]: https://github.com/jenkinsci/jenkins
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - ">= 0"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2019-10354
  cwe:
  - CWE-288
  disclosed_date: 2019-07-17
  created_date: 2019-07-18
  last_modified_date: 2019-07-18
  credit:
  - CloudBees
  - Inc.
  - Jesse Glick
  references:
  - https://github.com/jenkinsci/jenkins/commit/279d8109eddb7a494428baf25af9756c2e33576b
  - https://jenkins.io/security/advisory/2019-07-17/
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-451653
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:460446
  title: Protection Bypass
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open source automation
    server.

    Affected versions of this package are vulnerable to Protection Bypass. A
    user can obtain CSRF tokens without an associated web session ID,
    resulting in CSRF tokens that did not expire and could be used to bypass
    CSRF protection for the anonymous user.



    [1]: https://github.com/jenkinsci/jenkins
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 2.176.2"
  - ">= 2.177 < 2.192"
  severity: high
  package_manager: maven
  cve:
  - CVE-2019-10384
  cwe:
  - CWE-693
  disclosed_date: 2019-08-28
  created_date: 2019-08-29
  last_modified_date: 2019-08-29
  credit:
  - Unknown
  references:
  - https://jenkins.io/security/advisory/2019-08-28/
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-460446
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:460449
  title: Cross-site Scripting (XSS)
  description: |+
    [org.jenkins-ci.main:jenkins-core][1] is an open source automation
    server.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). An attacker with Overall/Administer permission to configure the
    update site URL can inject arbitrary HTML and JavaScript in update
    center web pages.



    [1]: https://github.com/jenkinsci/jenkins
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 2.176.2"
  - ">= 2.177 < 2.192"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2019-10383
  cwe:
  - CWE-79
  disclosed_date: 2019-08-28
  created_date: 2019-08-29
  last_modified_date: 2019-08-29
  credit:
  - Jesper den Boer
  references:
  - https://jenkins.io/security/advisory/2019-08-28/
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-460449
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:561363
  title: Cross-site Scripting (XSS)
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is a open source automation
    server.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). Jenkins does not properly escape node labels that are shown in
    the form validation for label expressions on job configuration pages,
    resulting in a stored XSS vulnerability exploitable by users able to
    define node labels.

    \##Details A cross-site scripting attack occurs when the attacker tricks
    a legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.



    [1]: https://github.com/jenkinsci/jenkins
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 2.228"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2020-2161
  cwe:
  - CWE-79
  disclosed_date: 2020-03-25
  created_date: 2020-03-26
  last_modified_date: 2020-03-26
  credit:
  - CloudBees
  - Inc.
  - Wadeck Follonier
  references:
  - https://github.com/jenkinsci/jenkins/commit/dbff6fdcf8c4bc00729ace66c33208ae7aa18ac0
  - https://jenkins.io/security/advisory/2020-03-25/
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-561363
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:561364
  title: Cross-site Scripting (XSS)
  description: |+
    [org.jenkins-ci.main:jenkins-core][1] is an open source automation
    server.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). Jenkins improperly processes HTML content of list view column
    headers, resulting in a stored XSS vulnerability exploitable by users
    able to control column headers.



    [1]: https://github.com/jenkinsci/jenkins
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 2.228"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2020-2163
  cwe:
  - CWE-79
  disclosed_date: 2020-03-25
  created_date: 2020-03-26
  last_modified_date: 2020-03-26
  credit:
  - Unknown
  references:
  - https://jenkins.io/security/advisory/2020-03-25/
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-561364
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:561365
  title: Cross-site Scripting (XSS)
  description: |+
    [org.jenkins-ci.main:jenkins-core][1] is an open source automation
    server.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). Jenkins does not set Content-Security-Policy headers for files
    uploaded as file parameters to a build, resulting in a stored XSS
    vulnerability.



    [1]: https://github.com/jenkinsci/jenkins
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 2.228"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2020-2162
  cwe:
  - CWE-79
  disclosed_date: 2020-03-25
  created_date: 2020-03-26
  last_modified_date: 2020-03-26
  credit:
  - Phu X. Mai
  - University of Luxembourg
  references:
  - https://jenkins.io/security/advisory/2020-03-25/
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-561365
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:561369
  title: Cross-site Scripting (XSS)
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is a open source automation
    server.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). Jenkins does not set Content-Security-Policy headers for files
    uploaded as file parameters to a build, resulting in a possible stored
    XSS vulnerability.

    \##Details A cross-site scripting attack occurs when the attacker tricks
    a legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.



    [1]: https://github.com/jenkinsci/jenkins
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 2.228"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2020-2162
  cwe:
  - CWE-79
  disclosed_date: 2020-03-25
  created_date: 2020-03-26
  last_modified_date: 2020-03-26
  credit:
  - Phu X. Mai
  - University of Luxembourg
  references:
  - https://jenkins.io/security/advisory/2020-03-25/
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-561369
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:561370
  title: Cross-site Request Forgery (CSRF)
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open source automation
    server.

    Affected versions of this package are vulnerable to Cross-site Request
    Forgery (CSRF). Jenkins uses different representations of request URL
    paths, which allows attackers to craft URLs that allow bypassing CSRF
    protection of any target URL.



    [1]: https://github.com/jenkinsci/jenkins
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 2.228"
  severity: high
  package_manager: maven
  cve:
  - CVE-2020-2160
  cwe:
  - CWE-435
  disclosed_date: 2020-03-25
  created_date: 2020-03-26
  last_modified_date: 2020-03-26
  credit:
  - LLC.
  - Nick Collisson from Gemini Trust Company
  references:
  - https://jenkins.io/security/advisory/2020-03-25/
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-561370
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:584961
  title: Cross-site Scripting (XSS)
  description: |+
    [org.jenkins-ci.main:jenkins-core][1] is an open source automation
    server.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). It does not escape the the `href` attribute of links to
    downstream jobs displayed in the build console page.



    [1]: https://github.com/jenkinsci/jenkins
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 2.245"
  severity: high
  package_manager: maven
  cve:
  - CVE-2020-2223
  cwe:
  - CWE-79
  disclosed_date: 2020-07-16
  created_date: 2020-07-16
  last_modified_date: 2020-07-16
  credit:
  - CloudBees
  - Inc.
  - Oleg Nenashev
  references:
  - https://github.com/jenkinsci/jenkins/commit/11f4a351224ef04cfeb9c7636fb1590b67543f3c
  - https://www.jenkins.io/security/advisory/2020-07-15/#SECURITY-1945
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-584961
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:584962
  title: Cross-site Scripting (XSS)
  description: |+
    [org.jenkins-ci.main:jenkins-core][1] is an open source automation
    server.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). It does not escape the job name in the \'Keep this build
    forever\' badge tooltip.



    [1]: https://github.com/jenkinsci/jenkins
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 2.245"
  severity: high
  package_manager: maven
  cve:
  - CVE-2020-2222
  cwe:
  - CWE-79
  disclosed_date: 2020-07-16
  created_date: 2020-07-16
  last_modified_date: 2020-07-16
  credit:
  - CloudBees
  - Inc.
  - Wadeck Follonier
  references:
  - https://github.com/jenkinsci/jenkins/commit/e7443ef2ef255253231f3f1db0034fae39f0cba5
  - https://www.jenkins.io/security/advisory/2020-07-15/#SECURITY-1902
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-584962
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:584963
  title: Cross-site Scripting (XSS)
  description: |+
    [org.jenkins-ci.main:jenkins-core][1] is an open source automation
    server.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). It does not escape the upstream job’s display name shown as part
    of a build cause.



    [1]: https://github.com/jenkinsci/jenkins
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 2.245"
  severity: high
  package_manager: maven
  cve:
  - CVE-2020-2221
  cwe:
  - CWE-79
  disclosed_date: 2020-07-16
  created_date: 2020-07-16
  last_modified_date: 2020-07-16
  credit:
  - CloudBees
  - Inc.
  - Wadeck Follonier
  references:
  - https://github.com/jenkinsci/jenkins/commit/f6e575381bdba85afaf27c529d7298091f226e49
  - https://www.jenkins.io/security/advisory/2020-07-15/#SECURITY-1901
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-584963
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:584964
  title: Cross-site Scripting (XSS)
  description: |+
    [org.jenkins-ci.main:jenkins-core][1] is an open source automation
    server.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). It does not escape the agent name on build time trend pages.



    [1]: https://github.com/jenkinsci/jenkins
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 2.245"
  severity: high
  package_manager: maven
  cve:
  - CVE-2020-2220
  cwe:
  - CWE-79
  disclosed_date: 2020-07-16
  created_date: 2020-07-16
  last_modified_date: 2020-07-16
  credit:
  - CloudBees
  - Inc.
  - Wadeck Follonier
  references:
  - https://www.jenkins.io/security/advisory/2020-07-15/#SECURITY-1868
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-584964
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:596941
  title: Cross-site Scripting (XSS)
  description: |+
    [org.jenkins-ci.main:jenkins-core][1] is an open source automation
    server.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). Does not restrict or filter values set as Jenkins URL in the
    global configuration, resulting in a stored XSS vulnerability
    exploitable by attackers with Overall/Administer permission.



    [1]: https://github.com/jenkinsci/jenkins
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 2.176.4"
  - ">= 2.180.0 < 2.196.1"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2019-10406
  cwe:
  - CWE-79
  disclosed_date: 2020-07-30
  created_date: 2020-07-30
  last_modified_date: 2020-07-30
  credit:
  - Unknown
  references:
  - http://www.openwall.com/lists/oss-security/2019/09/25/3
  - https://jenkins.io/security/advisory/2019-09-25/#SECURITY-1471
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-596941
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:596942
  title: Cross-site Scripting (XSS)
  description: |+
    [org.jenkins-ci.main:jenkins-core][1] is an open source automation
    server.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). The `f:expandableTextBox` form control interpreted its content as
    HTML when expanded, resulting in a stored XSS vulnerability exploitable
    by users with permission to define its contents (typically
    Job/Configure).



    [1]: https://github.com/jenkinsci/jenkins
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 2.176.4"
  - ">= 2.180.0 < 2.196.1"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2019-10401
  cwe:
  - CWE-79
  disclosed_date: 2020-07-30
  created_date: 2020-07-30
  last_modified_date: 2020-07-30
  credit:
  - Unknown
  references:
  - http://www.openwall.com/lists/oss-security/2019/09/25/3
  - https://jenkins.io/security/advisory/2019-09-25/#SECURITY-1498
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-596942
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:596943
  title: Cross-site Scripting (XSS)
  description: |+
    [org.jenkins-ci.main:jenkins-core][1] is an open source automation
    server.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). Does not escape the reason why a queue items is blocked in
    tooltips, resulting in a stored XSS vulnerability exploitable by users
    able to control parts of the reason a queue item is blocked, such as
    label expressions not matching any idle executors.



    [1]: https://github.com/jenkinsci/jenkins
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - ">= 0 < 2.176.4"
  - ">= 2.180.0 < 2.196.1"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2019-10404
  cwe:
  - CWE-79
  disclosed_date: 2020-07-30
  created_date: 2020-07-30
  last_modified_date: 2020-07-30
  credit:
  - Unknown
  references:
  - http://www.openwall.com/lists/oss-security/2019/09/25/3
  - https://jenkins.io/security/advisory/2019-09-25/#SECURITY-1537%20(2)
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-596943
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:596944
  title: Cross-site Scripting (XSS)
  description: |+
    [org.jenkins-ci.main:jenkins-core][1] is an open source automation
    server.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). Does not escape the SCM tag name on the tooltip for SCM tag
    actions, resulting in a stored XSS vulnerability exploitable by users
    able to control SCM tag names for these actions.



    [1]: https://github.com/jenkinsci/jenkins
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - ">= 0 < 2.176.4"
  - ">= 2.180.0 < 2.196.1"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2019-10403
  cwe:
  - CWE-79
  disclosed_date: 2020-07-30
  created_date: 2020-07-30
  last_modified_date: 2020-07-30
  credit:
  - Unknown
  references:
  - http://www.openwall.com/lists/oss-security/2019/09/25/3
  - https://jenkins.io/security/advisory/2019-09-25/#SECURITY-1537%20(1)
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-596944
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:596945
  title: Denial of Service (DoS)
  description: |+
    [org.jenkins-ci.main:jenkins-core][1] is an open source automation
    server.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS). Bundled a version of the `commons-fileupload library` with the
    denial-of-service vulnerability known as `CVE-2016-3092`. The fix for
    that vulnerability has been backported to the version of the library
    bundled with Jenkins.



    [1]: https://github.com/jenkinsci/jenkins
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - ">= 0 < 2.73.2"
  - ">= 2.83 < 2.83.1"
  severity: high
  package_manager: maven
  cve:
  - CVE-2017-1000394
  cwe:
  - CWE-400
  disclosed_date: 2020-07-30
  created_date: 2020-07-30
  last_modified_date: 2020-07-30
  credit:
  - Unknown
  references:
  - https://jenkins.io/security/advisory/2017-10-11/
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-596945
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:596946
  title: Cross-site Scripting (XSS)
  description: |+
    [org.jenkins-ci.main:jenkins-core][1] is an open source automation
    server.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). The `f:combobox` form control interpreted its item labels as
    HTML, resulting in a stored XSS vulnerability exploitable by users with
    permission to define its contents.



    [1]: https://github.com/jenkinsci/jenkins
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 2.176.4"
  - ">= 2.180.0 < 2.190.1"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2019-10402
  cwe:
  - CWE-79
  disclosed_date: 2020-07-30
  created_date: 2020-07-30
  last_modified_date: 2020-07-30
  credit:
  - Unknown
  references:
  - http://www.openwall.com/lists/oss-security/2019/09/25/3
  - https://jenkins.io/security/advisory/2019-09-25/#SECURITY-1525
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-596946
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:596947
  title: Information Exposure
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open source automation
    server.

    Affected versions of this package are vulnerable to Information
    Exposure. Prints the value of the \\Cookie\\ HTTP request header on the
    /whoAmI/ URL, allowing attackers exploiting another XSS vulnerability to
    obtain the HTTP session cookie despite it being marked HttpOnly.



    [1]: https://github.com/jenkinsci/jenkins
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 2.176.4"
  - ">= 2.180.0 < 2.196.1"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2019-10405
  cwe:
  - CWE-200
  disclosed_date: 2020-07-30
  created_date: 2020-07-30
  last_modified_date: 2020-07-30
  credit:
  - Unknown
  references:
  - http://www.openwall.com/lists/oss-security/2019/09/25/3
  - https://jenkins.io/security/advisory/2019-09-25/#SECURITY-1505
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-596947
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:72668
  title: Denial of Service (DoS)
  description: |+
    [org.jenkins-ci.main:jenkins-core][1] is an open source automation
    server.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS) attacks. The form validation for cron expressions could enter
    infinite loops when cron expressions only matching certain rare dates
    were entered, blocking request handling threads indefinitely.



    [1]: https://github.com/jenkinsci/jenkins
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 2.138.4"
  - ">= 2.150 < 2.154"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2018-1000864
  cwe:
  - CWE-400
  disclosed_date: 2018-12-10
  created_date: 2018-12-10
  last_modified_date: 2018-12-10
  credit:
  - Denis Shvedchenko
  references:
  - https://github.com/jenkinsci/jenkins/commit/73afa0ca786a87f05b5433e2e38f863826fcad17
  - https://jenkins.io/security/advisory/2018-12-05/%23SECURITY-1193
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-72668
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:72669
  title: Arbitrary Code Execution
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open source automation
    server..

    Affected versions of this package are vulnerable to Arbitrary Code
    Execution via the
    `stapler/core/src/main/java/org/kohsuke/stapler/MetaClass.java` method.
    An attacker could invoke some methods on Java objects by accessing
    crafted URLs that were not intended to be invoked this way.



    [1]: https://github.com/jenkinsci/jenkins
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 2.138.4"
  - ">= 2.140 <= 2.149"
  - ">= 2.150 < 2.150.1"
  - ">= 2.153 < 2.154"
  severity: high
  package_manager: maven
  cve:
  - CVE-2018-1000861
  cwe:
  - CWE-94
  disclosed_date: 2018-12-10
  created_date: 2018-12-12
  last_modified_date: 2018-12-12
  credit:
  - Daniel Beck
  references:
  - https://github.com/jenkinsci/jenkins/commit/47f38d714c99e1841fb737ad1005618eb26ed852
  - https://jenkins.io/security/advisory/2018-12-05/#SECURITY-595
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-72669
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:72670
  title: Information Exposure
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open source automation
    server.

    Affected versions of this package are vulnerable to Information
    Exposure. An attacker with the ability to control build output could
    browse the file system on agents running builds beyond the duration of
    the build using the workspace browser.



    [1]: https://github.com/jenkinsci/jenkins
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 2.138.4"
  - ">= 2.140 <= 2.149"
  - ">= 2.150 < 2.150.1"
  - ">= 2.153 < 2.154"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2018-1000862
  cwe:
  - CWE-200
  disclosed_date: 2018-12-10
  created_date: 2018-12-12
  last_modified_date: 2018-12-12
  credit:
  - Apple Information Security
  references:
  - https://github.com/jenkinsci/jenkins/commit/c19cc705688cfffa4fe735e0edbe84862b6c135f
  - https://jenkins.io/security/advisory/2018-12-05/#SECURITY-904
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-72670
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:72671
  title: Modification of Assumed-Immutable Data (MAID)
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open source automation
    server.

    Affected versions of this package are vulnerable to Modification of
    Assumed-Immutable Data (MAID). An attacker could submit crafted user
    names that can cause an improper migration of user record storage
    formats, potentially preventing the victim from logging into Jenkins.



    [1]: https://github.com/jenkinsci/jenkins
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 2.138.4"
  - ">= 2.140 <= 2.149"
  - ">= 2.150 < 2.150.1"
  - ">= 2.153 < 2.154"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2018-1000863
  cwe:
  - CWE-471
  disclosed_date: 2018-12-10
  created_date: 2018-12-12
  last_modified_date: 2018-12-12
  credit:
  - Unknown
  references:
  - https://github.com/jenkinsci/jenkins/commit/4ed66e5838476e575a83c3cd13fffb37eefa2f48
  - https://jenkins.io/security/advisory/2018-12-05/#SECURITY-1072
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-72671
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:73605
  title: Authorization Bypass
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open source automation
    server.

    Affected versions of this package are vulnerable to Authorization
    Bypass. A malicious user with `Overall/RunScripts` permission could
    craft Remember Me cookies that would never expire, allowing e.g. to
    persist access to temporarily compromised user accounts.



    [1]: https://github.com/jenkinsci/jenkins
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - ">= 2.150 < 2.160"
  - ">= 2.150.1 < 2.150.2"
  severity: high
  package_manager: maven
  cve:
  - CVE-2019-1003003
  cwe:
  - CWE-285
  disclosed_date: 2019-01-22
  created_date: 2019-04-30
  last_modified_date: 2019-04-30
  credit:
  - Unknown
  references:
  - https://github.com/jenkinsci/jenkins/commit/07c09bebb8396a48063c1da4fc4b628acddd72a8
  - https://jenkins.io/security/advisory/2019-01-16/#SECURITY-868
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-73605
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:73609
  title: Ephemeral User Record Creation
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open source automation
    server.

    Affected versions of this package are vulnerable to Ephemeral User
    Record Creation via the `getUser` function. A malicious user without
    Overall/Read permission could access a specific URL on instances using
    the built-in Jenkins user database security realm that results in the
    creation of an ephemeral user record in memory.



    [1]: https://github.com/jenkinsci/jenkins
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 2.138.2"
  - ">= 2.140 < 2.146"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2018-1000408
  cwe:
  - CWE-286
  disclosed_date: 2019-01-09
  created_date: 2019-01-09
  last_modified_date: 2019-01-09
  credit:
  - Unknown
  references:
  - https://github.com/jenkinsci/jenkins/commit/01157a699f611ca7492e872103ac01526a982cf2
  - https://jenkins.io/security/advisory/2018-10-10/#SECURITY-1128
  - https://www.exploit-db.com/exploits/46572
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-73609
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:73610
  title: Arbitrary File Write
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open source automation
    server.

    Affected versions of this package are vulnerable to Arbitrary File
    Write. An attacker with Job/Configure permission could define a file
    parameter with a file name outside the intended directory, resulting in
    an arbitrary file write on the Jenkins master when scheduling a build.



    [1]: https://github.com/jenkinsci/jenkins
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 2.138.2"
  - ">= 2.140 < 2.146"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2018-1000406
  cwe:
  - CWE-434
  disclosed_date: 2019-01-09
  created_date: 2019-01-09
  last_modified_date: 2019-01-09
  credit:
  - Oleg Nenashev
  references:
  - https://github.com/jenkinsci/jenkins/commit/c3351d2e7c3edfee82b9470e9aa1168982296072
  - https://jenkins.io/security/advisory/2018-10-10/#SECURITY-1074
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-73610
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:73611
  title: Session Fixation
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open source automation
    server.

    Affected versions of this package are vulnerable to Session Fixation. It
    prevented Jenkins from invalidating the existing session and creating a
    new one when a user signed up for a new user account.



    [1]: https://github.com/jenkinsci/jenkins
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 2.138.2"
  - ">= 2.140 < 2.146"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2018-1000409
  cwe:
  - CWE-384
  disclosed_date: 2019-01-09
  created_date: 2019-01-09
  last_modified_date: 2019-01-09
  credit:
  - Wadeck Follonier
  references:
  - https://github.com/jenkinsci/jenkins/commit/517da6ed389f0a606dd9bb8595bc79fc93f4331c
  - https://jenkins.io/security/advisory/2018-10-10/#SECURITY-1158
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-73611
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:73612
  title: Information Exposure
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open source automation
    server.

    Affected versions of this package are vulnerable to Information
    Exposure. An attacker with Overall/Administer permission could access to
    the local file system to obtain credentials entered by users if the form
    submission could not be successfully processed.



    [1]: https://github.com/jenkinsci/jenkins
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 2.138.2"
  - ">= 2.140 < 2.146"
  severity: low
  package_manager: maven
  cve:
  - CVE-2018-1000410
  cwe:
  - CWE-200
  disclosed_date: 2019-01-09
  created_date: 2019-01-09
  last_modified_date: 2019-01-09
  credit:
  - Sam Gleske
  references:
  - https://github.com/jenkinsci/jenkins/commit/7366cc50106442a021c5178cd101057ecc08f2c2
  - https://jenkins.io/security/advisory/2018-10-10/#SECURITY-765
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-73612
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:73613
  title: Cross-site Scripting (XSS)
  description: |+
    [org.jenkins-ci.main:jenkins-core][1] is an open source automation
    server.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). An attacker could specify URLs to Jenkins that result in
    rendering arbitrary attacker-controlled HTML by Jenkins.



    [1]: https://github.com/jenkinsci/jenkins
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 2.138.2"
  - ">= 2.140 < 2.146"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2018-1000407
  cwe:
  - CWE-79
  disclosed_date: 2019-01-09
  created_date: 2019-01-09
  last_modified_date: 2019-01-09
  credit:
  - Evan Grant of Tenable
  references:
  - https://github.com/jenkinsci/jenkins/commit/df87e12ddcfeafdba6e0de0e07b3e21f8473ece6
  - https://jenkins.io/security/advisory/2018-10-10/#SECURITY-1129
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-73613
- id: snykio:maven:org.jenkins-ci.main:jenkins-core:73615
  title: Directory Traversal
  description: |
    [org.jenkins-ci.main:jenkins-core][1] is an open source automation
    server.

    Affected versions of this package are vulnerable to Directory Traversal.
    It allows attackers to render routable objects using any view in
    Jenkins, exposing internal information about those objects not intended
    to be viewed, such as their `toString()` representation.



    [1]: https://github.com/jenkinsci/jenkins
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
  affected_package: org.jenkins-ci.main:jenkins-core
  vulnerable_versions:
  - "< 2.138.2"
  - ">= 2.140 < 2.146"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2018-1000997
  cwe:
  - CWE-22
  disclosed_date: 2019-01-23
  created_date: 2019-01-23
  last_modified_date: 2019-01-23
  credit:
  - Unknown
  references:
  - https://github.com/jenkinsci/jenkins/commit/fd5f5be0304c6bf1918892b81e2efb6b6d09c521
  - https://jenkins.io/security/advisory/2018-10-10/#SECURITY-867
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-73615
