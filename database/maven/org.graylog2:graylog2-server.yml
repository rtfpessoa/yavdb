---
- id: snykio:maven:org.graylog2:graylog2-server:1009834
  title: Directory Traversal
  description: |
    [org.graylog2:graylog2-server][1] is a log management platform.

    Affected versions of this package are vulnerable to Directory Traversal.
    When starting Graylog with the JVM `-cp` classpath options, instead of
    using the default `-jar` for the bundled classes, the API REST endpoint
    `/api-browser/.*` would allow path traversal to allow reading files on
    the server\'s filesystem.

    For example, when starting graylog-server like:

        /usr/local/openjdk-8/bin/java -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap -XX:NewRatio=1 -XX:MaxMetaspaceSize=256m -server -XX:+ResizeTLAB -XX:+UseConcMarkSweepGC -XX:+CMSConcurrentMTEnabled -XX:+CMSClassUnloadingEnabled -XX:+UseParNewGC -XX:-OmitStackTraceInFastThrow -cp /usr/share/graylog:/usr/share/graylog/graylog.jar -Dlog4j.configurationFile=/usr/share/graylog/data/config/log4j2.xml -Djava.library.path=/usr/share/graylog/lib/sigar/ -Dgraylog2.installation_source=docker org.graylog2.bootstrap.Main server -f /usr/share/graylog/data/config/graylog.conf

    The use of `-cp /usr/share/graylog:/usr/share/graylog/graylog.jar`
    triggers the vulnerability.

    The check for `..` elements in the resulting file path for documentation
    resources is performed too early in the resolution process. As a result,
    an attacker can craft a URL that can contain `..` elements and thus read
    files the server process has access to.

    Note: This vulnerability does not apply to the standard installation
    methods.



    [1]: https://github.com/Graylog2/graylog2-server.git/graylog-project-parent/graylog2-server
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
  affected_package: org.graylog2:graylog2-server
  vulnerable_versions:
  - ">= 0 < 4.0.0-beta.1"
  severity: medium
  package_manager: maven
  cwe:
  - CWE-22
  disclosed_date: 2020-09-17
  created_date: 2020-10-23
  last_modified_date: 2020-10-23
  credit:
  - Christian Fünfhaus
  - Florian Hauser
  references:
  - https://github.com/Graylog2/graylog2-server/commit/b42f85fbed25ee5446544697bfc06bcce218f7bf
  - https://github.com/Graylog2/graylog2-server/issues/8986
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGGRAYLOG2-1009834
- id: snykio:maven:org.graylog2:graylog2-server:32344
  title: Cross-site Scripting (XSS)
  description: |+
    [org.graylog2:graylog2-server][1] is an open source log management.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks due to unescaped text in dashboard names.



    [1]: https://github.com/Graylog2/graylog2-server
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: org.graylog2:graylog2-server
  vulnerable_versions:
  - "< 2.4.4"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2018-11651
  cwe:
  - CWE-79
  disclosed_date: 2018-04-20
  created_date: 2018-06-04
  last_modified_date: 2018-06-04
  credit:
  - Unknown
  references:
  - https://github.com/Graylog2/graylog2-server/commit/4a346654d5660d7c824322c4745ae87a1e3e6bf3
  - https://github.com/Graylog2/graylog2-server/pull/4739
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGGRAYLOG2-32344
- id: snykio:maven:org.graylog2:graylog2-server:32345
  title: Cross-site Scripting (XSS)
  description: |+
    [org.graylog2:graylog2-server][1] is an open source log management.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks due to not escaping text in notifications.



    [1]: https://github.com/Graylog2/graylog2-server
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: org.graylog2:graylog2-server
  vulnerable_versions:
  - "< 2.4.4"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2018-11650
  cwe:
  - CWE-79
  disclosed_date: 2018-04-17
  created_date: 2018-06-04
  last_modified_date: 2018-06-04
  credit:
  - Unknown
  references:
  - https://github.com/Graylog2/graylog2-server/commit/469c92377bec77c3ba10113895fd45f84ebabdfc
  - https://github.com/Graylog2/graylog2-server/pull/4727
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGGRAYLOG2-32345
- id: snykio:maven:org.graylog2:graylog2-server:575712
  title: Improper Certificate Validation
  description: |
    [org.graylog2:graylog2-server][1] is a log management platform.

    Affected versions of this package are vulnerable to Improper Certificate
    Validation. It accepts LDAP server certificates whose root certificate
    is not in any trust store. This presents a vulnerability for
    man-in-the-middle attacks.



    [1]: https://github.com/Graylog2/graylog2-server.git/graylog-project-parent/graylog2-server
  affected_package: org.graylog2:graylog2-server
  vulnerable_versions:
  - ">= 0"
  severity: high
  package_manager: maven
  cve:
  - CVE-2020-15813
  cwe:
  - CWE-295
  disclosed_date: 2020-07-12
  created_date: 2020-07-19
  last_modified_date: 2020-07-19
  credit:
  - SammyA
  references:
  - https://github.com/Graylog2/graylog2-server/issues/5906#issuecomment-656657874
  - https://github.com/Graylog2/graylog2-server/pull/8569
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGGRAYLOG2-575712
