---
- id: ossindex:maven:org.jruby:jruby:340745
  title: '[CVE-2010-1330]  Improper Neutralization of Input During Web Page Generation
    ("Cross-site Scripting")'
  description: The regular expression engine in JRuby before 1.4.1, when $KCODE is
    set to 'u', does not properly handle characters immediately after a UTF-8 character,
    which allows remote attackers to conduct cross-site scripting (XSS) attacks via
    a crafted string.
  affected_package: org.jruby:jruby
  vulnerable_versions:
  - 0.9.0
  - 0.9.1
  - 0.9.2
  - 0.9.8
  - 0.9.9
  - '1.0'
  - 1.0.0
  - 1.0.1
  - 1.0.2
  - 1.0.3
  - '1.1'
  - 1.1.1
  - 1.1.2
  - 1.1.3
  - 1.1.4
  - 1.1.5
  - 1.1.6
  - 1.2.0
  - 1.3.0
  - 1.3.1
  - 1.4.0
  package_manager: maven
  cve:
  - CVE-2010-1330
  disclosed_date: 2012-11-23
  created_date: 2012-11-23
  last_modified_date: 2017-03-10
  credit:
  - OSSIndex
  references:
  - http://rhn.redhat.com/errata/RHSA-2011-1456.html
  - http://secunia.com/advisories/46891
  - http://www.jruby.org/2010/04/26/jruby-1-4-1-xss-vulnerability.html
  - http://www.osvdb.org/77297
  - http://xforce.iss.net/xforce/xfdb/80277
  - https://bugs.gentoo.org/show_bug.cgi?id=317435
  - https://bugzilla.redhat.com/show_bug.cgi?id=750306
  source_url: https://ossindex.net/resource/package/7015268762/vulnerabilities
- id: ossindex:maven:org.jruby:jruby:348440
  title: "[CVE-2011-4838]  Improper Input Validation"
  description: JRuby before 1.6.5.1 computes hash values without restricting the ability
    to trigger hash collisions predictably, which allows context-dependent attackers
    to cause a denial of service (CPU consumption) via crafted input to an application
    that maintains a hash table.
  affected_package: org.jruby:jruby
  vulnerable_versions:
  - 0.9.0
  - 0.9.1
  - 0.9.2
  - 0.9.8
  - 0.9.9
  - '1.0'
  - 1.0.0
  - 1.0.1
  - 1.0.2
  - 1.0.3
  - '1.1'
  - 1.1.1
  - 1.1.2
  - 1.1.3
  - 1.1.4
  - 1.1.5
  - 1.1.6
  - 1.2.0
  - 1.3.0
  - 1.3.1
  - 1.4.0
  - 1.4.1
  - 1.5.0
  - 1.5.1
  - 1.5.2
  - 1.5.3
  - 1.5.4
  - 1.5.5
  - 1.5.6
  - 1.6.0
  - 1.6.1
  - 1.6.2
  - 1.6.3
  - 1.6.4
  - 1.6.5
  package_manager: maven
  cve:
  - CVE-2011-4838
  disclosed_date: 2011-12-30
  created_date: 2011-12-30
  last_modified_date: 2017-03-10
  credit:
  - OSSIndex
  references:
  - http://archives.neohapsis.com/archives/bugtraq/2011-12/0181.html
  - http://jruby.org/2011/12/27/jruby-1-6-5-1.html
  - http://rhn.redhat.com/errata/RHSA-2012-1232.html
  - http://secunia.com/advisories/47407
  - http://secunia.com/advisories/50084
  - http://security.gentoo.org/glsa/glsa-201207-06.xml
  - http://www.kb.cert.org/vuls/id/903934
  - http://www.nruns.com/_downloads/advisory28122011.pdf
  - http://www.ocert.org/advisories/ocert-2011-003.html
  - http://xforce.iss.net/xforce/xfdb/72019
  - https://exchange.xforce.ibmcloud.com/vulnerabilities/72019
  source_url: https://ossindex.net/resource/package/7015268762/vulnerabilities
- id: ossindex:maven:org.jruby:jruby:353234
  title: "[CVE-2012-5370]  Cryptographic Issues"
  description: JRuby computes hash values without properly restricting the ability
    to trigger hash collisions predictably, which allows context-dependent attackers
    to cause a denial of service (CPU consumption) via crafted input to an application
    that maintains a hash table, as demonstrated by a universal multicollision attack
    against the MurmurHash2 algorithm, a different vulnerability than CVE-2011-4838.
  affected_package: org.jruby:jruby
  vulnerable_versions:
  - "*"
  package_manager: maven
  cve:
  - CVE-2012-5370
  disclosed_date: 2012-11-28
  created_date: 2012-11-28
  last_modified_date: 2017-03-10
  credit:
  - OSSIndex
  references:
  - http://2012.appsec-forum.ch/conferences/#c17
  - http://asfws12.files.wordpress.com/2012/11/asfws2012-jean_philippe_aumasson-martin_bosslet-hash_flooding_dos_reloaded.pdf
  - http://rhn.redhat.com/errata/RHSA-2013-0533.html
  - http://www.ocert.org/advisories/ocert-2012-001.html
  - https://bugzilla.redhat.com/show_bug.cgi?id=880671
  - https://www.131002.net/data/talks/appsec12_slides.pdf
  source_url: https://ossindex.net/resource/package/7015268762/vulnerabilities
- id: snykio:maven:org.jruby:jruby:30132
  title: SQL Injection
  description: |
    [`org.jruby:jruby`][1] The JSON gem before 1.5.5, 1.6.x before 1.6.8,
    and 1.7.x before 1.7.7 for Ruby allows remote attackers to cause a
    denial of service (resource consumption) or bypass the mass assignment
    protection mechanism via a crafted JSON document that triggers the
    creation of arbitrary Ruby symbols or certain internal objects, as
    demonstrated by conducting a SQL injection attack against Ruby on Rails,
    aka \"Unsafe Object Creation Vulnerability.\"



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22jruby%22
  affected_package: org.jruby:jruby
  vulnerable_versions:
  - ">= 1.7.1 < 1.7.3"
  severity: high
  package_manager: maven
  cve:
  - CVE-2013-0269
  cwe:
  - CWE-20
  disclosed_date: 2013-02-13
  created_date: 2016-12-25
  last_modified_date: 2016-12-25
  credit:
  - Ben Murphy
  - Thomas Hollstegge
  references:
  - https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2013-0269
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJRUBY-30132
- id: snykio:maven:org.jruby:jruby:30133
  title: XML External Entity (XXE) Injection
  description: |+
    [`org.jruby:jruby`][1] lib/rexml/text.rb in the REXML parser in Ruby
    before 1.9.3-p392 allows remote attackers to cause a denial of service
    (memory consumption and crash) via crafted text nodes in an XML
    document, aka an XML Entity Expansion (XEE) attack.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22jruby%22
    \nXXE Injection is a type of attack against an application that parses XML
    input. XML is a markup language that defines a set of rules for encoding
    documents in a format that is both human-readable and machine-readable.
    By default, many XML processors allow specification of an external
    entity, a URI that is dereferenced and evaluated during XML processing.
    When an XML document is being parsed, the parser can make a request and
    include the content at the specified URI inside of the XML document.

    Attacks can include disclosing local files, which may contain sensitive
    data such as passwords or private user data, using file: schemes or
    relative paths in the system identifier.

    For example, below is a sample XML document, containing an XML element-
    username.

        <?xml version="1.0" encoding="ISO-8859-1"?>
           <username>John</username>
        </xml>
    {: .language-xml}

    An external XML entity - `xxe`, is defined using a system identifier and
    present within a DOCTYPE header. These entities can access local or
    remote content. For example the below code contains an external XML
    entity that would fetch the content of `/etc/passwd` and display it to
    the user rendered by `username`.

        <?xml version="1.0" encoding="ISO-8859-1"?>
        <!DOCTYPE foo [
           <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
           <username>&xxe;</username>
        </xml>
    {: .language-xml}

    Other XXE Injection attacks can access local resources that may not stop
    returning data, possibly impacting application availability and leading
    to Denial of Service.

  affected_package: org.jruby:jruby
  vulnerable_versions:
  - ">= 1.7.1 < 1.7.3"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2013-1821
  cwe:
  - CWE-20
  disclosed_date: 2013-04-09
  created_date: 2016-12-25
  last_modified_date: 2016-12-25
  credit:
  - Ben Murphy
  references:
  - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-1821
  - https://www.ruby-lang.org/en/news/2013/02/22/rexml-dos-2013-02-22/
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJRUBY-30133
- id: snykio:maven:org.jruby:jruby:30134
  title: XML External Entity (XXE) Injection
  description: |+
    [org.jruby:jruby][1] is a high performance, stable, fully threaded Java
    implementation of the Ruby programming language.

    Affected versions of this package are vulnerable to XML External Entity
    (XXE) Injection The `ActiveSupport::XmlMini_JDOM` backend in
    `lib/active_support/xml_mini/jdom.rb` in the Active Support component;
    when JRuby is used, does not properly restrict the capabilities of the
    XML parser, which allows remote attackers to read arbitrary files or
    cause a denial of service (resource consumption) via vectors involving
    (1) an external DTD or (2) an external entity declaration in conjunction
    with an entity reference.



    [1]: https://www.jruby.org
    \nXXE Injection is a type of attack against an application that parses XML
    input. XML is a markup language that defines a set of rules for encoding
    documents in a format that is both human-readable and machine-readable.
    By default, many XML processors allow specification of an external
    entity, a URI that is dereferenced and evaluated during XML processing.
    When an XML document is being parsed, the parser can make a request and
    include the content at the specified URI inside of the XML document.

    Attacks can include disclosing local files, which may contain sensitive
    data such as passwords or private user data, using file: schemes or
    relative paths in the system identifier.

    For example, below is a sample XML document, containing an XML element-
    username.

        <?xml version="1.0" encoding="ISO-8859-1"?>
           <username>John</username>
        </xml>
    {: .language-xml}

    An external XML entity - `xxe`, is defined using a system identifier and
    present within a DOCTYPE header. These entities can access local or
    remote content. For example the below code contains an external XML
    entity that would fetch the content of `/etc/passwd` and display it to
    the user rendered by `username`.

        <?xml version="1.0" encoding="ISO-8859-1"?>
        <!DOCTYPE foo [
           <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
           <username>&xxe;</username>
        </xml>
    {: .language-xml}

    Other XXE Injection attacks can access local resources that may not stop
    returning data, possibly impacting application availability and leading
    to Denial of Service.

  affected_package: org.jruby:jruby
  vulnerable_versions:
  - ">= 3.1.0 < 3.1.12"
  - ">= 3.2.0 < 3.2.13"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2013-1856
  cwe:
  - CWE-20
  disclosed_date: 2013-03-19
  created_date: 2016-12-25
  last_modified_date: 2016-12-25
  credit:
  - Ben Murphy
  references:
  - http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2013-1856
  - http://www.openwall.com/lists/oss-security/2013/03/18/4
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJRUBY-30134
- id: snykio:maven:org.jruby:jruby:30135
  title: Arbitrary Code Injection
  description: |
    [`org.jruby:jruby`][1] Race condition in
    hawtjni-runtime/src/main/java/org/fusesource/hawtjni/runtime/Library.java
    in HawtJNI before 1.8, when a custom library path is not specified,
    allows local users to execute arbitrary Java code by overwriting a
    temporary JAR file with a predictable name in /tmp.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22jruby%22
  affected_package: org.jruby:jruby
  vulnerable_versions:
  - ">= 0 < 1.7.4"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2013-2035
  cwe:
  - CWE-94
  disclosed_date: 2016-12-25
  created_date: 2016-12-25
  last_modified_date: 2016-12-25
  credit:
  - Florian Weimer
  references:
  - https://bugzilla.redhat.com/CVE-2013-2035
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJRUBY-30135
- id: snykio:maven:org.jruby:jruby:31215
  title: Cross-site Scripting (XSS)
  description: |+
    [org.jruby:jruby][1] is a high performance, stable, fully threaded Java
    implementation of the Ruby programming language.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). The regular expression engine in JRuby before 1.4.1, when $KCODE
    is set to \'u\', does not properly handle characters immediately after a
    UTF-8 character, which allows remote attackers to conduct cross-site
    scripting (XSS) attacks via a crafted string.



    [1]: https://www.jruby.org
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: org.jruby:jruby
  vulnerable_versions:
  - "< 1.4.1"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2010-1330
  cwe:
  - CWE-79
  disclosed_date: 2012-11-23
  created_date: 2015-02-26
  last_modified_date: 2015-02-26
  credit:
  - Unknown
  references:
  - https://bugzilla.redhat.com/show_bug.cgi?id=750306
  - https://github.com/jruby/jruby/commit/773581164056535ed8dffe3ade826f04633bfd55
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2010-1330
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJRUBY-31215
- id: snykio:maven:org.jruby:jruby:472854
  title: Denial of Service (DoS)
  description: |+
    [org.jruby:jruby][1] is a high performance, stable, fully threaded Java
    implementation of the Ruby programming language.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS). It computes hash values without restricting the ability to
    trigger hash collisions predictably, which allows context-dependent
    attackers to cause a denial of service (CPU consumption) via crafted
    input to an application that maintains a hash table.



    [1]: https://www.jruby.org
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: org.jruby:jruby
  vulnerable_versions:
  - "< 1.6.5.1"
  severity: high
  package_manager: maven
  cve:
  - CVE-2011-4838
  cwe:
  - CWE-189
  disclosed_date: 2011-12-30
  created_date: 2019-10-10
  last_modified_date: 2019-10-10
  credit:
  - Unknown
  references:
  - http://jruby.org/2011/12/27/jruby-1-6-5-1.html
  - https://github.com/jruby/jruby/commit/c1c9f95ed29cb93806fbc90e9eaabb9c406581e5
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJRUBY-472854
- id: victims:maven:org.jruby:jruby:2013-0269
  title: 'rubygem-json: Denial of Service and SQL Injection'
  affected_package: org.jruby:jruby
  vulnerable_versions:
  - "==1.7.2"
  severity: high
  package_manager: maven
  cve:
  - CVE-2013-0269
  cvss_v2_score: 7.5
  credit:
  - Victims CVE Database
  references:
  - https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2013-0269
  source_url: https://github.com/victims/victims-cve-db/blob/master/database/java/2013/0269.yaml
- id: victims:maven:org.jruby:jruby:2013-1821
  title: 'ruby: entity expansion DoS vulnerability in REXML'
  affected_package: org.jruby:jruby
  vulnerable_versions:
  - "==1.7.2"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2013-1821
  cvss_v2_score: 4.3
  credit:
  - Victims CVE Database
  source_url: https://github.com/victims/victims-cve-db/blob/master/database/java/2013/1821.yaml
- id: victims:maven:org.jruby:jruby:2013-1856
  title: 'JRuby: File access with XML External Entities'
  description: 'There is a vulnerability in the JDOM backend to ActiveSupport''s XML
    parser.  This could allow an attacker to perform a denial of service attack or
    gain access to files stored on the application server.  This vulnerability has
    been assigned the CVE identifier CVE-2013-1856.

'
  affected_package: org.jruby:jruby
  vulnerable_versions:
  - '3.2'
  - "<=3.1.11"
  - "<=3.2.12"
  patched_versions:
  - '3.2'
  - "<=3.2.13"
  - ">=3.1.12"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2013-1856
  cvss_v2_score: 5.8
  credit:
  - Victims CVE Database
  references:
  - http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2013-1856
  - http://www.openwall.com/lists/oss-security/2013/03/18/4
  source_url: https://github.com/victims/victims-cve-db/blob/master/database/java/2013/1856.yaml
- id: victims:maven:org.jruby:jruby:2013-2035
  title: 'HawtJNI: predictable temporary file name leading to local arbitrary code
    execution'
  description: '"The HawtJNI Library class wrote native libraries to a predictable
    file name  in /tmp when the native libraries were bundled in a JAR file, and no
    custom  library path was specified. A local attacker could overwrite these native  libraries
    with malicious versions during the window between when HawtJNI  writes them, and
    when they are executed."

'
  affected_package: org.jruby:jruby
  vulnerable_versions:
  - "<=1.7.4"
  patched_versions:
  - ">=1.7.5"
  severity: low
  package_manager: maven
  cve:
  - CVE-2013-2035
  cvss_v2_score: 3.3
  credit:
  - Victims CVE Database
  references:
  - https://bugzilla.redhat.com/CVE-2013-2035
  source_url: https://github.com/victims/victims-cve-db/blob/master/database/java/2013/2035.yaml
