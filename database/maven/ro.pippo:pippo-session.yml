---
- id: snykio:maven:ro.pippo:pippo-session:72565
  title: Deserialization of Untrusted Data
  description: |
    [ro.pippo:pippo-session][1] is a micro Java Web Framework.

    Affected versions of this package are vulnerable to Deserialization of
    Untrusted Data. The function
    `SerializationSessionDataTranscoder.decode()` calls
    `ObjectInputStream.readObject()` to deserialize a `SessionData` object
    without checking the object types.



    [1]: https://github.com/pippo-java/pippo
    \nSerialization is a process of converting an object into a sequence of
    bytes which can be persisted to a disk or database or can be sent
    through streams. The reverse process of creating object from sequence of
    bytes is called deserialization. Serialization is commonly used for
    communication (sharing objects between multiple hosts) and persistence
    (store the object state in a file or a database). It is an integral part
    of popular protocols like *Remote Method Invocation (RMI)*, *Java
    Management Extension (JMX)*, *Java Messaging System (JMS)*, *Action
    Message Format (AMF)*, *Java Server Faces (JSF) ViewState*, etc.

    *Deserialization of untrusted data* ([CWE-502][1]), is when the
    application deserializes untrusted data without sufficiently verifying
    that the resulting data will be valid, letting the attacker to control
    the state or the flow of the execution.

    Java deserialization issues have been known for years. However, interest
    in the issue intensified greatly in 2015, when classes that could be
    abused to achieve remote code execution were found in a [popular library
    (Apache Commons Collection)][2]. These classes were used in zero-days
    affecting IBM WebSphere, Oracle WebLogic and many other products.

    An attacker just needs to identify a piece of software that has both a
    vulnerable class on its path, and performs deserialization on untrusted
    data. Then all they need to do is send the payload into the
    deserializer, getting the command executed.

    > Developers put too much trust in Java Object Serialization. Some even
    > de-serialize objects pre-authentication. When deserializing an Object
    > in Java you typically cast it to an expected type, and therefore
    > Java\'s strict type system will ensure you only get valid object
    > trees. Unfortunately, by the time the type checking happens, platform
    > code has already created and executed significant logic. So, before
    > the final type is checked a lot of code is executed from the
    > readObject() methods of various objects, all of which is out of the
    > developer\'s control. By combining the readObject() methods of various
    > classes which are available on the classpath of the vulnerable
    > application an attacker can execute functions (including calling
    > Runtime.exec() to execute local OS commands).

    * Apache Blog



    [1]: https://cwe.mitre.org/data/definitions/502.html
    [2]: https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078
  affected_package: ro.pippo:pippo-session
  vulnerable_versions:
  - ">= 0.9 < 1.12.0"
  severity: high
  package_manager: maven
  cve:
  - CVE-2018-18240
  - CVE-2018-18628
  cwe:
  - CWE-352
  disclosed_date: 2018-09-30
  created_date: 2018-11-06
  last_modified_date: 2018-11-06
  credit:
  - idealzh
  references:
  - https://github.com/pippo-java/pippo/commit/a82347d9d3358e98c89b48579d4285d807a57cc0
  - https://github.com/pippo-java/pippo/commit/c6b26551a82d2dd32097fcb17c13c3b830916296
  - https://github.com/pippo-java/pippo/issues/458
  source_url: https://snyk.io/vuln/SNYK-JAVA-ROPIPPO-72565
