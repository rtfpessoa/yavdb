---
- id: snykio:maven:org.webjars.npm:yarn:480358
  title: Man-in-the-Middle (MitM)
  description: |
    [org.webjars.npm:yarn][1] is a package for dependency management.

    Affected versions of this package are vulnerable to Man-in-the-Middle
    (MitM). Npm credentials such as `_authToken` were found to be sent over
    clear text when processing scoped packages that are listed as resolved.
    This could allow a suitably positioned attacker to eavesdrop and
    compromise the sent credentials.



    [1]: https://yarnpkg.com/
  affected_package: org.webjars.npm:yarn
  vulnerable_versions:
  - ">= 0"
  severity: high
  package_manager: maven
  cve:
  - CVE-2019-5448
  cwe:
  - CWE-300
  disclosed_date: 2019-07-12
  created_date: 2019-07-15
  last_modified_date: 2019-07-15
  credit:
  - Сковорода Никита Андреевич
  references:
  - https://github.com/ChALkeR/notes/blob/master/Yarn-vuln.md
  - https://github.com/yarnpkg/yarn/commit/2f08a7405cc3f6fe47c30293050bb0ac94850932
  - https://hackerone.com/reports/640904
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-480358
- id: snykio:maven:org.webjars.npm:yarn:537807
  title: Arbitrary File Write
  description: |
    [org.webjars.npm:yarn][1] is a package for dependency management.

    Affected versions of this package are vulnerable to Arbitrary File
    Write. The package install functionality can be abused to generate
    arbitrary symlinks on the host filesystem by using specially crafted
    `bin` keys. Existing files could be overwritten depending on the current
    user permission set.



    [1]: https://yarnpkg.com/
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
  affected_package: org.webjars.npm:yarn
  vulnerable_versions:
  - ">= 0"
  severity: low
  package_manager: maven
  cve:
  - CVE-2019-10773
  cwe:
  - CWE-22
  disclosed_date: 2019-12-11
  created_date: 2019-12-13
  last_modified_date: 2019-12-13
  credit:
  - Daniel Ruf
  references:
  - https://blog.daniel-ruf.de/critical-design-flaw-npm-pnpm-yarn/
  - https://github.com/pnpm/package-bins/commit/adefce5b1ba635d3c8d48692f753a3f49ea0bb3b
  - https://github.com/yarnpkg/yarn/commit/039bafd74b7b1a88a53a54f8fa6fa872615e90e7
  - https://github.com/yarnpkg/yarn/issues/7761#issuecomment-565493023
  - https://snyk.io/blog/understanding-filesystem-takeover-vulnerabilities-in-npm-javascript-package-manager/
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-537807
- id: snykio:maven:org.webjars.npm:yarn:548870
  title: Arbitrary File Overwrite
  description: |
    [org.webjars.npm:yarn][1] is a package for dependency management.

    Affected versions of this package are vulnerable to Arbitrary File
    Overwrite. It is possible for a malicious package, upon install, to
    write to any path on the filesystem even when the `--ignore-scripts`
    option is set. This occurs due to symlinks not being correctly unpacked
    as part of the Yarn install process.



    [1]: https://yarnpkg.com/
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
  affected_package: org.webjars.npm:yarn
  vulnerable_versions:
  - ">= 0"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2020-8131
  cwe:
  - CWE-22
  disclosed_date: 2020-02-15
  created_date: 2020-02-15
  last_modified_date: 2020-02-15
  credit:
  - Rhys Elsmore
  references:
  - https://github.com/yarnpkg/yarn/commit/0e7133ca28618513503b4e1d9063f1c18ea318e5
  - https://hackerone.com/reports/730239
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-548870
- id: snykio:maven:org.webjars.npm:yarn:557183
  title: Improper Integrity Checks
  description: |
    [org.webjars.npm:yarn][1] is a package for dependency management.

    Affected versions of this package are vulnerable to Improper Integrity
    Checks. It allows to pollute yarn cache via a crafted `yarn.lock` file
    and place a malicious package into cache under any name/version,
    bypassing both integrity and hash checks in `yarn.lock` so that any
    future installs of that package will install the fake version
    (regardless of integrity and hashes).



    [1]: https://yarnpkg.com/
  affected_package: org.webjars.npm:yarn
  vulnerable_versions:
  - "< 1.19"
  severity: high
  package_manager: maven
  cve:
  - CVE-2019-15608
  cwe:
  - CWE-354
  disclosed_date: 2020-02-26
  created_date: 2020-02-26
  last_modified_date: 2020-02-26
  credit:
  - chalker
  references:
  - https://github.com/yarnpkg/yarn/commit/0474b8c66a8ea298f5e4dedc67b2de464297ad1c
  - https://hackerone.com/reports/703138
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-557183
