---
- id: ossindex:maven:org.webjars.bower:i18next:8400185064
  title: Cross Site Scripting (XSS)
  description: Cross Site Scripting is possible due to a bug in the `interpolation
    resolution code`.
  affected_package: org.webjars.bower:i18next
  vulnerable_versions:
  - "<1.10.3"
  package_manager: maven
  disclosed_date: 2016-10-17
  created_date: 2016-10-17
  last_modified_date: 2017-03-15
  credit:
  - OSSIndex
  references:
  - https://cwe.mitre.org/data/definitions/79.html
  - https://github.com/i18next/i18next/issues/443
  - https://github.com/i18next/i18next/pull/443
  - https://github.com/i18next/i18next/pull/443/commits/34e8e13a2b64708a0aed01092e4dbfd0e5013831
  - https://nodesecurity.io/advisories/325
  source_url: https://ossindex.net/resource/package/7104974433/vulnerabilities
- id: ossindex:maven:org.webjars.bower:i18next:8402281066
  title: Fix Interpolator.escapeValue defaulting to undefined in some cases
  description: "> [When passing] any `interpolation` options without including `escapeValue`,
    `this.escapeValue` will get set to `undefined` in `Interpolator`. The documentation
    indicates `escapeValue` defaults to `true`, so this could cause variables to not
    be escaped as expected in some cases.\n> \n> -- [github.com](https://github.com/i18next/i18next/pull/826)"
  affected_package: org.webjars.bower:i18next
  vulnerable_versions:
  - "<3.4.4 >=2.0.0"
  package_manager: maven
  disclosed_date: 2016-12-29
  created_date: 2016-12-29
  last_modified_date: 2017-03-16
  credit:
  - OSSIndex
  references:
  - https://cwe.mitre.org/data/definitions/79.html
  - https://github.com/i18next/i18next/issues/826
  - https://github.com/i18next/i18next/pull/826/commits/d367309d4427c2d651b0f0b304504cf59c056cab
  - https://nodesecurity.io/advisories/326
  source_url: https://ossindex.net/resource/package/7104974433/vulnerabilities
- id: snykio:maven:org.webjars.bower:i18next:479746
  title: Cross-site Scripting (XSS)
  description: |+
    [org.webjars.bower:i18next][1] is an internationalization framework for
    browser or any other javascript environment (eg. node.js).

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) due to the interpolation resolution code in `translate.js` loops
    over each key in the dictionary and applies replacements one at a time.
    Along with the unescaped suffix feature in `i18next`, may allow
    attackers to use the name of another key in the dictionary to leverage
    themselves to inject code into the browser.



    [1]: https://www.npmjs.com/package/i18next
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: org.webjars.bower:i18next
  vulnerable_versions:
  - "< 1.10.3"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2017-16008
  cwe:
  - CWE-79
  disclosed_date: 2015-10-17
  created_date: 2017-02-13
  last_modified_date: 2017-02-13
  credit:
  - KJ Tsanaktsidis
  references:
  - https://github.com/i18next/i18next/pull/443
  - https://github.com/i18next/i18next/pull/443/commits/34e8e13a2b64708a0aed01092e4dbfd0e5013831
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSBOWER-479746
- id: snykio:maven:org.webjars.bower:i18next:479750
  title: Cross-site Scripting (XSS)
  description: |+
    [`i18next`][1] is i18next internationalization framework. Affected
    versions of the package are vulnerable to Cross-site Scripting (XSS) due
    to not escaping variables as expected. When passing any `interpolation`
    options without including `escapeValue`, the function `this.escapeValue`
    will get set to `undefined` in `Interpolator`. Meaning values aren\'t
    being escaped even though users expect them to be.



    [1]: https://www.npmjs.com/package/i18next
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: org.webjars.bower:i18next
  vulnerable_versions:
  - ">= 2.0.0 < 3.4.4"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2017-16010
  cwe:
  - CWE-79
  disclosed_date: 2016-10-12
  created_date: 2017-02-13
  last_modified_date: 2017-02-13
  credit:
  - alexmchardy
  references:
  - https://github.com/i18next/i18next/pull/826
  - https://github.com/i18next/i18next/pull/826/commits/d367309d4427c2d651b0f0b304504cf59c056cab
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSBOWER-479750
- id: snykio:maven:org.webjars.bower:i18next:575545
  title: Buffer Overflow
  description: |
    [org.webjars.bower:i18next][1] is an internationalization framework for
    browser or any other javascript environment (eg. node.js).

    Affected versions of this package are vulnerable to Buffer Overflow. It
    is possible to cause buffer overflow by changing the translation to be
    recursive.



    [1]: https://www.npmjs.com/package/i18next
  affected_package: org.webjars.bower:i18next
  vulnerable_versions:
  - ">= 0"
  severity: medium
  package_manager: maven
  cwe:
  - CWE-119
  disclosed_date: 2020-07-09
  created_date: 2020-07-09
  last_modified_date: 2020-07-09
  credit:
  - lynn
  references:
  - https://github.com/i18next/i18next/commit/360c8a92dcfe90964b433fa947f7f467a10887da
  - https://github.com/i18next/i18next/issues/1479
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSBOWER-575545
- id: snykio:maven:org.webjars.bower:i18next:585935
  title: Prototype Pollution
  description: "[org.webjars.bower:i18next][1] is an internationalization framework
    for\nbrowser or any other javascript environment (eg. node.js).\n\nAffected versions
    of this package are vulnerable to Prototype Pollution.\nThis vulnerability relates
    to the `AddResourceBundle` API which uses the\nthe `deepExtend` function\n(`https://github.com/i18next/i18next/blob/master/i18next.js#L361-L370`)\ninternally
    to extend existing translations in a file. Depending on if\nuser input is provided,
    an attacker can overwrite and pollute the object\nprototype of a program.\n\n###
    PoC   {#poc}\n\n    import i18n from \"i18next\";\n    i18n.init({\n        resources:
    {\n          en: {\n            namespace1: {\n              key: 'hello from
    namespace 1'\n            },\n            namespace2: {\n              key: 'hello
    from namespace 2'\n            }\n          },\n          de: {\n            namespace1:
    {\n              key: 'hallo von namespace 1'\n            },\n            namespace2:
    {\n              key: 'hallo von namespace 2'\n            }  \n          }\n
    \       }\n      });\n    \n      var malicious_payload = '{\"__proto__\":{\"vulnerable\":\"Polluted\"}}';\n
    \     i18n.init({ resources: {} });\n      i18n.addResourceBundle('en', 'namespace1',
    JSON.parse(malicious_payload)\n      ,true,true);\n    \n    \n    console.log(i18n.options.resources);\n
    \   //a newly created empty object has the vulnerable property\n    console.log({}.vulnerable);\n\n\n\n[1]:
    https://www.npmjs.com/package/i18next\n\\nPrototype Pollution is a vulnerability
    affecting JavaScript. Prototype\nPollution refers to the ability to inject properties
    into existing\nJavaScript language construct prototypes, such as objects. JavaScript\nallows
    all Object attributes to be altered, including their magical\nattributes such
    as `_proto_`, `constructor` and `prototype`. An attacker\nmanipulates these attributes
    to overwrite, or pollute, a JavaScript\napplication object prototype of the base
    object by injecting other\nvalues. Properties on the `Object.prototype` are then
    inherited by all\nthe JavaScript objects through the prototype chain. When that
    happens,\nthis leads to either denial of service by triggering JavaScript\nexceptions,
    or it tampers with the application source code to force the\ncode path that the
    attacker injects, thereby leading to remote code\nexecution.\n\nThere are two
    main ways in which the pollution of prototypes occurs:\n\n* Unsafe `Object` recursive
    merge\n\n* Property definition by path\n\n### Unsafe Object recursive merge   {#unsafe-object-recursive-merge}\n\nThe
    logic of a vulnerable recursive merge function follows the following\nhigh-level
    model:\n\n    merge (target, source)\n    \n      foreach property of source\n
    \   \n        if property exists and is an object on both the target and the source\n
    \   \n          merge(target[property], source[property])\n    \n        else\n
    \   \n          target[property] = source[property]\n\n\n\nWhen the source object
    contains a property named `_proto_` defined with\n`Object.defineProperty()` ,
    the condition that checks if the property\nexists and is an object on both the
    target and the source passes and the\nmerge recurses with the target, being the
    prototype of `Object` and the\nsource of `Object` as defined by the attacker.
    Properties are then\ncopied on the `Object` prototype.\n\nClone operations are
    a special sub-class of unsafe recursive merges,\nwhich occur when a recursive
    merge is conducted on an empty object:\n`merge({},source)`.\n\n`lodash` and `Hoek`
    are examples of libraries susceptible to recursive\nmerge attacks.\n\n### Property
    definition by path   {#property-definition-by-path}\n\nThere are a few JavaScript
    libraries that use an API to define property\nvalues on an object based on a given
    path. The function that is\ngenerally affected contains this signature: `theFunction(object,
    path,\nvalue)`\n\nIf the attacker can control the value of “path”, they can set
    this value\nto `_proto_.myValue`. `myValue` is then assigned to the prototype
    of the\nclass of the object.\n\n"
  affected_package: org.webjars.bower:i18next
  vulnerable_versions:
  - "< 19.6.0"
  severity: medium
  package_manager: maven
  cwe:
  - CWE-400
  disclosed_date: 2020-07-11
  created_date: 2020-07-19
  last_modified_date: 2020-07-19
  credit:
  - Snyk Security Team
  references:
  - https://github.com/i18next/i18next/pull/1482
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSBOWER-585935
