---
- id: ossindex:maven:javax.faces:jsf-impl:328789
  title: '[CVE-2008-1285]  Improper Neutralization of Input During Web Page Generation
    ("Cross-site Scripting")'
  description: Cross-site scripting (XSS) vulnerability in Sun Java Server Faces (JSF)
    1.2 before 1.2_08 allows remote attackers to inject arbitrary web script or HTML
    via unknown vectors.
  affected_package: javax.faces:jsf-impl
  vulnerable_versions:
  - 1.2_07
  package_manager: maven
  cve:
  - CVE-2008-1285
  disclosed_date: 2008-03-11
  created_date: 2008-03-11
  last_modified_date: 2017-03-10
  credit:
  - OSSIndex
  references:
  - http://rhn.redhat.com/errata/RHSA-2008-0825.html
  - http://rhn.redhat.com/errata/RHSA-2008-0826.html
  - http://rhn.redhat.com/errata/RHSA-2008-0827.html
  - http://rhn.redhat.com/errata/RHSA-2008-0828.html
  - http://secunia.com/advisories/29327
  - http://sunsolve.sun.com/search/document.do?assetkey=1-26-233561-1
  - http://www.redhat.com/docs/en-US/JBoss_Enterprise_Application_Platform/4.2.0.cp03/html-single/readme/index.html
  - http://www.redhat.com/docs/en-US/JBoss_Enterprise_Application_Platform/4.3.0.cp01/html-single/readme/
  - http://www.securityfocus.com/bid/28192
  - http://www.securitytracker.com/id?1020628
  - http://www.vupen.com/english/advisories/2008/0808/references
  - https://bugzilla.redhat.com/bugzilla/show_bug.cgi?id=437082
  - https://jira.jboss.org/jira/browse/JBPAPP-682
  source_url: https://ossindex.net/resource/package/7015409214/vulnerabilities
- id: ossindex:maven:javax.faces:jsf-impl:341457
  title: '[CVE-2010-2087]  Improper Neutralization of Input During Web Page Generation
    ("Cross-site Scripting")'
  description: Oracle Mojarra 1.2_14 and 2.0.2, as used in IBM WebSphere Application
    Server, Caucho Resin, and other applications, does not properly handle an unencrypted
    view state, which allows remote attackers to conduct cross-site scripting (XSS)
    attacks or execute arbitrary Expression Language (EL) statements via vectors that
    involve modifying the serialized view object.
  affected_package: javax.faces:jsf-impl
  vulnerable_versions:
  - 1.2_14
  - 2.0.2
  package_manager: maven
  cve:
  - CVE-2010-2087
  disclosed_date: 2010-05-27
  created_date: 2010-05-27
  last_modified_date: 2017-03-10
  credit:
  - OSSIndex
  references:
  - http://www.blackhat.com/presentations/bh-dc-10/Byrne_David/BlackHat-DC-2010-Byrne-SGUI-slides.pdf
  - https://www.trustwave.com/spiderlabs/advisories/TWSL2010-001.txt
  source_url: https://ossindex.net/resource/package/7015409214/vulnerabilities
- id: ossindex:maven:javax.faces:jsf-impl:343213
  title: "[CVE-2010-4007]  Cryptographic Issues"
  description: Oracle Mojarra uses an encrypted View State without a Message Authentication
    Code (MAC), which makes it easier for remote attackers to perform successful modifications
    of the View State via a padding oracle attack, a related issue to CVE-2010-2057.
  affected_package: javax.faces:jsf-impl
  vulnerable_versions:
  - '1.1'
  - 1.1_02
  - '1.2'
  - 1.2_01
  - 1.2_02
  - 1.2_03
  - 1.2_04
  - 1.2_05
  - 1.2_06
  - 1.2_07
  - 1.2_08
  - 1.2_09
  - 1.2_10
  - 1.2_11
  - 1.2_12
  - 1.2_13
  - 1.2_14
  - 1.2_15
  - 2.0.0
  - 2.0.1
  - 2.0.2
  - 2.0.3
  package_manager: maven
  cve:
  - CVE-2010-4007
  disclosed_date: 2010-10-20
  created_date: 2010-10-20
  last_modified_date: 2017-03-10
  credit:
  - OSSIndex
  references:
  - https://bugzilla.redhat.com/show_bug.cgi?id=623799
  - https://issues.apache.org/jira/browse/MYFACES-2749
  source_url: https://ossindex.net/resource/package/7015409214/vulnerabilities
- id: ossindex:maven:javax.faces:jsf-impl:351076
  title: '[CVE-2012-2672] Oracle Mojarra 2.1.7 does not properly "clean up" the FacesContext
    reference dur...'
  description: Oracle Mojarra 2.1.7 does not properly "clean up" the FacesContext
    reference during startup, which allows local users to obtain context information
    an access resources from another WAR file by calling the FacesContext.getCurrentInstance
    function.
  affected_package: javax.faces:jsf-impl
  vulnerable_versions:
  - 2.1.7
  package_manager: maven
  cve:
  - CVE-2012-2672
  disclosed_date: 2012-06-17
  created_date: 2012-06-17
  last_modified_date: 2017-03-10
  credit:
  - OSSIndex
  references:
  - http://java.net/jira/browse/JAVASERVERFACES-2436
  - http://rhn.redhat.com/errata/RHSA-2012-1591.html
  - http://rhn.redhat.com/errata/RHSA-2012-1592.html
  - http://rhn.redhat.com/errata/RHSA-2012-1594.html
  - http://secunia.com/advisories/49284
  - http://secunia.com/advisories/51607
  - http://www.openwall.com/lists/oss-security/2012/06/07/2
  - http://www.openwall.com/lists/oss-security/2012/06/07/3
  - http://xforce.iss.net/xforce/xfdb/76179
  - https://exchange.xforce.ibmcloud.com/vulnerabilities/76179
  - https://issues.jboss.org/browse/JBPAPP-9197
  source_url: https://ossindex.net/resource/package/7015409214/vulnerabilities
- id: ossindex:maven:javax.faces:jsf-impl:358656
  title: '[CVE-2013-5855]  Improper Neutralization of Input During Web Page Generation
    ("Cross-site Scripting")'
  description: Oracle Mojarra 2.2.x before 2.2.6 and 2.1.x before 2.1.28 does not
    perform appropriate encoding when a (1) <h:outputText> tag or (2) EL expression
    is used after a scriptor style block, which allows remote attackers to conduct
    cross-site scripting (XSS) attacks via application-specific vectors.
  affected_package: javax.faces:jsf-impl
  vulnerable_versions:
  - ">=2.1.0 <2.1.28"
  - ">=2.2.0 <2.2.6"
  package_manager: maven
  cve:
  - CVE-2013-5855
  disclosed_date: 2014-07-17
  created_date: 2014-07-17
  last_modified_date: 2017-04-17
  credit:
  - OSSIndex
  references:
  - http://h30499.www3.hp.com/t5/HP-Security-Research-Blog/JSF-outputText-tag-the-good-the-bad-and-the-ugly/ba-p/6368011#.U8ccVPlXZHU
  - http://rhn.redhat.com/errata/RHSA-2015-0675.html
  - http://rhn.redhat.com/errata/RHSA-2015-0720.html
  - http://rhn.redhat.com/errata/RHSA-2015-0765.html
  - http://seclists.org/fulldisclosure/2014/Dec/23
  - http://www.oracle.com/technetwork/topics/security/cpujan2016-2367955.html
  - http://www.oracle.com/technetwork/topics/security/cpujul2014-1972956.html
  - http://www.securityfocus.com/archive/1/archive/1/534161/100/0/threaded
  - http://www.securityfocus.com/bid/65600
  - http://www.vmware.com/security/advisories/VMSA-2014-0012.html
  - https://java.net/jira/browse/JAVASERVERFACES-3150
  - https://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1258
  source_url: https://ossindex.net/resource/package/7015409214/vulnerabilities
- id: ossindex:maven:javax.faces:jsf-impl:8402545337
  title: Multiple Information Disclosure flaws due to unsafe path traversal
  description: "> Multiple path traversal flaws where found in Mojarra JSF2 implementation
    for identifying resources by name or from libraries. An unauthenticated remote
    attacker can use these flaws to gather otherwise undisclosed information from
    within an application's root.\n> \n> -- [github.com](https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2013-3827)"
  affected_package: javax.faces:jsf-impl
  vulnerable_versions:
  - ">=2.0 <=2.1.18"
  package_manager: maven
  disclosed_date: 2017-03-10
  created_date: 2017-03-10
  last_modified_date: 2017-03-10
  credit:
  - OSSIndex
  references:
  - http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-3827
  - http://security.coverity.com/advisory/2013/Oct/two-path-traversal-defects-in-oracles-jsf2-implementation.html
  - http://www.kb.cert.org/vuls/id/526012
  - http://www.oracle.com/technetwork/topics/security/cpuoct2013-1899837.html
  - https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2013-3827
  - https://java.net/projects/mojarra/sources/svn/revision/11603
  - https://java.net/projects/mojarra/sources/svn/revision/11606
  source_url: https://ossindex.net/resource/package/7015409214/vulnerabilities
- id: snykio:maven:javax.faces:jsf-impl:30105
  title: Cross-site Scripting (XSS)
  description: |+
    [`javax.faces:jsf-impl`][1] Oracle Mojarra 2.2.x before 2.2.6 and 2.1.x
    before 2.1.28 does not perform appropriate encoding when a (1)
    &lt;h:outputText&gt; tag or (2) EL expression is used after a scriptor
    style block, which allows remote attackers to conduct cross-site
    scripting (XSS) attacks via application-specific vectors.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22jsf-impl%22
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: javax.faces:jsf-impl
  vulnerable_versions:
  - ">= 1.2_03 < 2"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2013-5855
  cwe:
  - CWE-79
  disclosed_date: 2014-02-13
  created_date: 2014-02-13
  last_modified_date: 2014-02-13
  credit:
  - Unknown
  references:
  - http://h30499.www3.hp.com/t5/HP-Security-Research-Blog/JSF-outputText-tag-the-good-the-bad-and-the-ugly/bc-p/6370209
  - https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2013-5855
  - https://java.net/jira/browse/JAVASERVERFACES-3150
  source_url: https://snyk.io/vuln/SNYK-JAVA-JAVAXFACES-30105
- id: snykio:maven:javax.faces:jsf-impl:472719
  title: Cross-site Scripting (XSS)
  description: |+
    [javax.faces:jsf-impl][1] is a master POM file for Sun\'s Implementation
    of the JSF 1.2 Specification.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) due to improperly sanitising user input.



    [1]: https://svn.java.net/svn/mojarra~svn/trunk
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: javax.faces:jsf-impl
  vulnerable_versions:
  - "< 1.2.0-8"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2008-1285
  cwe:
  - CWE-79
  disclosed_date: 2008-03-11
  created_date: 2019-10-10
  last_modified_date: 2019-10-10
  credit:
  - unknown
  references:
  - http://www.securityfocus.com/bid/28192
  - https://bugzilla.redhat.com/bugzilla/show_bug.cgi?id=437082
  - https://nvd.nist.gov/vuln/detail/CVE-2008-1285
  source_url: https://snyk.io/vuln/SNYK-JAVA-JAVAXFACES-472719
- id: victims:maven:javax.faces:jsf-impl:2013-5855
  title: 'Mojarra JSF: XSS due to insufficient escaping of user-supplied content in
    outputText tags and EL expressions'
  affected_package: javax.faces:jsf-impl
  vulnerable_versions:
  - '1'
  - ">=1.2_03"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2013-5855
  cvss_v2_score: 5.0
  credit:
  - Victims CVE Database
  references:
  - http://h30499.www3.hp.com/t5/HP-Security-Research-Blog/JSF-outputText-tag-the-good-the-bad-and-the-ugly/bc-p/6370209
  - https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2013-5855
  - https://java.net/jira/browse/JAVASERVERFACES-3150
  source_url: https://github.com/victims/victims-cve-db/blob/master/database/java/2013/5855.yaml
