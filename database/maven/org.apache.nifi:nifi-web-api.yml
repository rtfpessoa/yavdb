---
- id: snykio:maven:org.apache.nifi:nifi-web-api:31618
  title: Deserialization of Untrusted Data
  description: |
    [Apache NiFi][1] is a system to process and distribute data.

    Affected versions of this package are vulnerable to Deserialization of
    Untrusted Data.

    Any authenticated user (valid client certificate but without ACL
    permissions) could upload a template which contained malicious code and
    caused a denial of service via Java deserialization attack. The fix to
    properly handle Java deserialization was applied on the Apache NiFi
    1.4.0 release. Users running a prior 1.x release should upgrade to the
    appropriate release.



    [1]: https://nifi.apache.org/
    \nSerialization is a process of converting an object into a sequence of
    bytes which can be persisted to a disk or database or can be sent
    through streams. The reverse process of creating object from sequence of
    bytes is called deserialization. Serialization is commonly used for
    communication (sharing objects between multiple hosts) and persistence
    (store the object state in a file or a database). It is an integral part
    of popular protocols like *Remote Method Invocation (RMI)*, *Java
    Management Extension (JMX)*, *Java Messaging System (JMS)*, *Action
    Message Format (AMF)*, *Java Server Faces (JSF) ViewState*, etc.

    *Deserialization of untrusted data* ([CWE-502][1]), is when the
    application deserializes untrusted data without sufficiently verifying
    that the resulting data will be valid, letting the attacker to control
    the state or the flow of the execution.

    Java deserialization issues have been known for years. However, interest
    in the issue intensified greatly in 2015, when classes that could be
    abused to achieve remote code execution were found in a [popular library
    (Apache Commons Collection)][2]. These classes were used in zero-days
    affecting IBM WebSphere, Oracle WebLogic and many other products.

    An attacker just needs to identify a piece of software that has both a
    vulnerable class on its path, and performs deserialization on untrusted
    data. Then all they need to do is send the payload into the
    deserializer, getting the command executed.

    > Developers put too much trust in Java Object Serialization. Some even
    > de-serialize objects pre-authentication. When deserializing an Object
    > in Java you typically cast it to an expected type, and therefore
    > Java\'s strict type system will ensure you only get valid object
    > trees. Unfortunately, by the time the type checking happens, platform
    > code has already created and executed significant logic. So, before
    > the final type is checked a lot of code is executed from the
    > readObject() methods of various objects, all of which is out of the
    > developer\'s control. By combining the readObject() methods of various
    > classes which are available on the classpath of the vulnerable
    > application an attacker can execute functions (including calling
    > Runtime.exec() to execute local OS commands).

    * Apache Blog



    [1]: https://cwe.mitre.org/data/definitions/502.html
    [2]: https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078
  affected_package: org.apache.nifi:nifi-web-api
  vulnerable_versions:
  - "< 1.4.0"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2017-15703
  cwe:
  - CWE-611
  disclosed_date: 2017-10-02
  created_date: 2018-02-06
  last_modified_date: 2018-02-06
  credit:
  - Andy LoPresto
  references:
  - https://github.com/apache/nifi/pull/2134/commits/91ff58d038d3afe6a6c1aa13226a2c3050612938
  - https://issues.apache.org/jira/browse/NIFI-4357
  - https://nifi.apache.org/security.html#CVE-2017-15703
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHENIFI-31618
- id: snykio:maven:org.apache.nifi:nifi-web-api:534975
  title: Session Fixation
  description: |
    [org.apache.nifi:nifi-web-api][1] is a system to process and distribute
    data.

    Affected versions of this package are vulnerable to Session Fixation.
    When using an authentication mechanism other than PKI, when the user
    clicks Log Out, NiFi invalidates the authentication token on the client
    side but not on the server side. This permits the user\'s client-side
    token to be used for up to 12 hours after logging out to make API
    requests to NiFi.



    [1]: https://github.com/apache/nifi
  affected_package: org.apache.nifi:nifi-web-api
  vulnerable_versions:
  - ">= 1.0.0 < 1.10.0"
  severity: high
  package_manager: maven
  cve:
  - CVE-2019-12421
  cwe:
  - CWE-384
  disclosed_date: 2019-02-27
  created_date: 2019-11-19
  last_modified_date: 2019-11-19
  credit:
  - Abdu Sahin
  references:
  - https://github.com/apache/nifi/pull/3362
  - https://issues.apache.org/jira/browse/NIFI-6085
  - https://nifi.apache.org/security.html#CVE-2019-12421
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHENIFI-534975
- id: snykio:maven:org.apache.nifi:nifi-web-api:534983
  title: Information Exposure
  description: |
    [org.apache.nifi:nifi-web-api][1] is a system to process and distribute
    data.

    Affected versions of this package are vulnerable to Information
    Exposure. When updating a Process Group via the API, the response to the
    request includes all of its contents (at the top most level, not
    recursively). The response included details about processors and
    controller services which the user may not have had read access to.



    [1]: https://github.com/apache/nifi
  affected_package: org.apache.nifi:nifi-web-api
  vulnerable_versions:
  - ">= 1.3.0 < 1.10.0"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2019-10083
  cwe:
  - CWE-200
  disclosed_date: 2019-05-29
  created_date: 2019-11-19
  last_modified_date: 2019-11-19
  credit:
  - Mark Payne
  references:
  - https://github.com/apache/nifi/pull/3477
  - https://github.com/apache/nifi/pull/3487
  - https://issues.apache.org/jira/browse/NIFI-6302
  - https://nifi.apache.org/security.html#CVE-2019-10083
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHENIFI-534983
- id: snykio:maven:org.apache.nifi:nifi-web-api:543493
  title: Cross-site Scripting (XSS)
  description: |+
    [org.apache.nifi:nifi-web-api][1] is a system to process and distribute
    data.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). Malicious scripts could be injected to the UI through action by
    an unaware authenticated user in Firefox. This vulnerability is not
    exploitable via other browsers.



    [1]: https://github.com/apache/nifi
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: org.apache.nifi:nifi-web-api
  vulnerable_versions:
  - ">= 1.0.0 < 1.11.0"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2020-1933
  cwe:
  - CWE-79
  disclosed_date: 2020-01-28
  created_date: 2020-01-28
  last_modified_date: 2020-01-28
  credit:
  - Unknown
  references:
  - https://github.com/apache/nifi/commit/34f2a592df8996b5f9e65039a35ecd8c31417fbd
  - https://nifi.apache.org/security.html#CVE-2020-1933
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHENIFI-543493
- id: snykio:maven:org.apache.nifi:nifi-web-api:543494
  title: Information Exposure
  description: |
    [org.apache.nifi:nifi-web-api][1] is a system to process and distribute
    data.

    Affected versions of this package are vulnerable to Information
    Exposure. The sensitive parameter parser would log parsed values for
    debugging purposes. This would expose literal values entered in a
    sensitive property when no parameter was present.



    [1]: https://github.com/apache/nifi
  affected_package: org.apache.nifi:nifi-web-api
  vulnerable_versions:
  - ">= 1.0.0 < 1.11.0"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2020-1928
  cwe:
  - CWE-200
  disclosed_date: 2020-01-28
  created_date: 2020-01-28
  last_modified_date: 2020-01-28
  credit:
  - Unknown
  references:
  - https://github.com/apache/nifi/commit/34f2a592df8996b5f9e65039a35ecd8c31417fbd
  - https://github.com/apache/nifi/pull/3935
  - https://nifi.apache.org/security.html#CVE-2020-1928
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHENIFI-543494
- id: snykio:maven:org.apache.nifi:nifi-web-api:72715
  title: Cross-site Request Forgery (CSRF)
  description: |
    [org.apache.nifi:nifi-web-api][1] is a system to process and distribute
    data.

    Affected versions of this package are vulnerable to Cross-site Request
    Forgery (CSRF). The template upload API endpoint accepted requests from
    different domain when sent in conjunction with ARP spoofing + man in the
    middle (MiTM) attack, resulting in a CSRF attack. The required attack
    vector is complex, requiring a scenario with client certificate
    authentication, same subnet access, and injecting malicious code into an
    unprotected (plaintext HTTP) website which the targeted user later
    visits, but the possible damage warranted a Severe severity level.



    [1]: https://github.com/apache/nifi
  affected_package: org.apache.nifi:nifi-web-api
  vulnerable_versions:
  - ">= 1.0.0 < 1.8.0"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2018-17195
  cwe:
  - CWE-352
  disclosed_date: 2018-09-14
  created_date: 2018-12-20
  last_modified_date: 2018-12-20
  credit:
  - Mike Colw
  references:
  - https://github.com/apache/nifi/commit/246c090526143943557b15868db6e8fe3fb30cf6
  - https://issues.apache.org/jira/browse/NIFI-5595
  - https://nifi.apache.org/security.html#CVE-2018-17195
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHENIFI-72715
