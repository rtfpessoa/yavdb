---
- id: snykio:maven:org.keycloak:keycloak-server-spi-private:31447
  title: Timing Attack
  description: |
    [`org.keycloak:keycloak-server-spi-private`][1] Affected versions of
    this package are vulnerable to Timing attacks because it does not use a
    constant time MAC signature comparison algorithm.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22keycloak-server-spi-private%22
  affected_package: org.keycloak:keycloak-server-spi-private
  vulnerable_versions:
  - "< 2.5.1.Final"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2017-2585
  cwe:
  - CWE-208
  disclosed_date: 2017-04-05
  created_date: 2017-05-21
  last_modified_date: 2017-05-21
  credit:
  - Unknown
  references:
  - https://access.redhat.com/security/cve/cve-2017-2585
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2017-2585
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGKEYCLOAK-31447
- id: snykio:maven:org.keycloak:keycloak-server-spi-private:31563
  title: Cross-site Scripting (XSS)
  description: |+
    [`org.keycloak:keycloak-server-spi-private`][1] is an open Source
    Identity and Access Management for modern Applications and Services.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks. It was found that Keycloak would accept a HOST header URL
    in the admin console and use it to determine web resource locations. An
    attacker could use this flaw against an authenticated user to attain
    reflected XSS via a malicious server.



    [1]: https://keycloak.org
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: org.keycloak:keycloak-server-spi-private
  vulnerable_versions:
  - "< 3.1.0.CR1"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2017-12158
  cwe:
  - CWE-79
  disclosed_date: 2017-04-09
  created_date: 2017-11-05
  last_modified_date: 2017-11-05
  credit:
  - Mykhailo Stadnyk
  references:
  - https://github.com/keycloak/keycloak/commit/cf7f28d97e5937245fa14eabe4c477740a9d0e91
  - https://github.com/keycloak/keycloak/pull/4031
  - https://nvd.nist.gov/vuln/detail/CVE-2017-12158
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGKEYCLOAK-31563
- id: snykio:maven:org.keycloak:keycloak-server-spi-private:449844
  title: Man-in-the-Middle (MitM)
  description: |
    [org.keycloak:keycloak-server-spi-private][1] is an open source identity
    and access management solution for modern applications and services.

    Affected versions of this package are vulnerable to Man-in-the-Middle
    (MitM). The `X.509` authenticator supports the verification of client
    certificates through the CRL, where the CRL list can be obtained from
    the URL provided in the certificate itself (CDP) or through the
    separately configured path. The CRL are often available over the network
    through unsecured protocols (`http` or `ldap`) and hence the caller
    should verify the signature and possibly the certification path.
    Keycloak currently doesn\'t validate signatures on CRL, which can result
    in a possibility of various attacks like man-in-the-middle.



    [1]: https://mvnrepository.com/artifact/org.keycloak/keycloak-server-spi-private
  affected_package: org.keycloak:keycloak-server-spi-private
  vulnerable_versions:
  - "< 6.0.0"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2019-3875
  cwe:
  - CWE-300
  disclosed_date: 2019-06-12
  created_date: 2019-06-12
  last_modified_date: 2019-06-12
  credit:
  - Marek Posolda
  references:
  - https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2019-3875
  - https://github.com/keycloak/keycloak/commit/a48698caa32933458916980ab05256f56099a337
  - https://issues.jboss.org/browse/KEYCLOAK-6056
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGKEYCLOAK-449844
- id: snykio:maven:org.keycloak:keycloak-server-spi-private:548450
  title: Cross-site Scripting (XSS)
  description: |+
    [org.keycloak:keycloak-server-spi-private][1] is an open source identity
    and access management solution for modern applications and services.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). Links to external applications (Application Links) in the admin
    console are not validated properly.



    [1]: https://mvnrepository.com/artifact/org.keycloak/keycloak-server-spi-private
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: org.keycloak:keycloak-server-spi-private
  vulnerable_versions:
  - "< 9.0.0"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2020-1697
  cwe:
  - CWE-79
  disclosed_date: 2020-02-10
  created_date: 2020-02-11
  last_modified_date: 2020-02-11
  credit:
  - Cure53 Berlin
  references:
  - https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2020-1697
  - https://github.com/keycloak/keycloak/commit/75457496325c4ae8963199a318d834d6a5eaad16#diff-a8224fb55ff896c3ddd2fcdaac260177
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGKEYCLOAK-548450
