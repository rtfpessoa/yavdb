---
- id: snykio:maven:com.hazelcast:hazelcast:1018909
  title: XML External Entity (XXE) Injection
  description: |+
    [com.hazelcast:hazelcast][1] is a clustering and highly scalable data
    distribution platform.

    Affected versions of this package are vulnerable to XML External Entity
    (XXE) Injection. It does not validate the XML transforming, leading to
    potential XXE.



    [1]: https://github.com/hazelcast/hazelcast
    \nXXE Injection is a type of attack against an application that parses XML
    input. XML is a markup language that defines a set of rules for encoding
    documents in a format that is both human-readable and machine-readable.
    By default, many XML processors allow specification of an external
    entity, a URI that is dereferenced and evaluated during XML processing.
    When an XML document is being parsed, the parser can make a request and
    include the content at the specified URI inside of the XML document.

    Attacks can include disclosing local files, which may contain sensitive
    data such as passwords or private user data, using file: schemes or
    relative paths in the system identifier.

    For example, below is a sample XML document, containing an XML element-
    username.

        <?xml version="1.0" encoding="ISO-8859-1"?>
           <username>John</username>
        </xml>
    {: .language-xml}

    An external XML entity - `xxe`, is defined using a system identifier and
    present within a DOCTYPE header. These entities can access local or
    remote content. For example the below code contains an external XML
    entity that would fetch the content of `/etc/passwd` and display it to
    the user rendered by `username`.

        <?xml version="1.0" encoding="ISO-8859-1"?>
        <!DOCTYPE foo [
           <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
           <username>&xxe;</username>
        </xml>
    {: .language-xml}

    Other XXE Injection attacks can access local resources that may not stop
    returning data, possibly impacting application availability and leading
    to Denial of Service.

  affected_package: com.hazelcast:hazelcast
  vulnerable_versions:
  - ">= 0.0.0 < 4.1"
  severity: medium
  package_manager: maven
  cwe:
  - CWE-611
  disclosed_date: 2020-10-15
  created_date: 2020-11-22
  last_modified_date: 2020-11-22
  credit:
  - Unknown
  references:
  - https://github.com/hazelcast/hazelcast/pull/17722
  - https://github.com/hazelcast/hazelcast/pull/17722/commits/f64acfc6ced7f8c3372acdd23367d1e9b9bf685f
  source_url: https://snyk.io/vuln/SNYK-JAVA-COMHAZELCAST-1018909
- id: snykio:maven:com.hazelcast:hazelcast:174772
  title: Deserialization of Untrusted Data
  description: |
    [com.hazelcast:hazelcast][1] is a clustering and highly scalable data
    distribution platform.

    Affected versions of this package are vulnerable to Deserialization of
    Untrusted Data. If an attacker could reach a listening `Hazelcast`
    instance with a crafted `<code>JoinRequest</code>`, and vulnerable
    classes are also on the `classpath`, they could run arbitrary shell
    commands. Hazelcast would blindly deserialize any object it receives in
    that request stream.



    [1]: https://github.com/hazelcast/hazelcast
    \nSerialization is a process of converting an object into a sequence of
    bytes which can be persisted to a disk or database or can be sent
    through streams. The reverse process of creating object from sequence of
    bytes is called deserialization. Serialization is commonly used for
    communication (sharing objects between multiple hosts) and persistence
    (store the object state in a file or a database). It is an integral part
    of popular protocols like *Remote Method Invocation (RMI)*, *Java
    Management Extension (JMX)*, *Java Messaging System (JMS)*, *Action
    Message Format (AMF)*, *Java Server Faces (JSF) ViewState*, etc.

    *Deserialization of untrusted data* ([CWE-502][1]), is when the
    application deserializes untrusted data without sufficiently verifying
    that the resulting data will be valid, letting the attacker to control
    the state or the flow of the execution.

    Java deserialization issues have been known for years. However, interest
    in the issue intensified greatly in 2015, when classes that could be
    abused to achieve remote code execution were found in a [popular library
    (Apache Commons Collection)][2]. These classes were used in zero-days
    affecting IBM WebSphere, Oracle WebLogic and many other products.

    An attacker just needs to identify a piece of software that has both a
    vulnerable class on its path, and performs deserialization on untrusted
    data. Then all they need to do is send the payload into the
    deserializer, getting the command executed.

    > Developers put too much trust in Java Object Serialization. Some even
    > de-serialize objects pre-authentication. When deserializing an Object
    > in Java you typically cast it to an expected type, and therefore
    > Java\'s strict type system will ensure you only get valid object
    > trees. Unfortunately, by the time the type checking happens, platform
    > code has already created and executed significant logic. So, before
    > the final type is checked a lot of code is executed from the
    > readObject() methods of various objects, all of which is out of the
    > developer\'s control. By combining the readObject() methods of various
    > classes which are available on the classpath of the vulnerable
    > application an attacker can execute functions (including calling
    > Runtime.exec() to execute local OS commands).

    * Apache Blog



    [1]: https://cwe.mitre.org/data/definitions/502.html
    [2]: https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078
  affected_package: com.hazelcast:hazelcast
  vulnerable_versions:
  - "< 3.11"
  severity: high
  package_manager: maven
  cve:
  - CVE-2016-10750
  cwe:
  - CWE-502
  disclosed_date: 2016-04-26
  created_date: 2019-05-22
  last_modified_date: 2019-05-22
  credit:
  - Unknown
  references:
  - https://github.com/hazelcast/hazelcast/commit/5a47697519018eb4918df33a21faae811e85f01a#diff-2470c8b9b4bfbdd311274fd106cc33aa
  - https://github.com/hazelcast/hazelcast/issues/8024
  source_url: https://snyk.io/vuln/SNYK-JAVA-COMHAZELCAST-174772
