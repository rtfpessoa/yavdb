---
- id: ossindex:maven:org.apache.wicket:wicket-util:8404718905
  title: "[CVE-2016-6793] The DiskFileItem class in Apache Wicket 6.x before 6.25.0
    and 1.5.x before 1.5.7..."
  description: The DiskFileItem class in Apache Wicket 6.x before 6.25.0 and 1.5.x
    before 1.5.7 allows remote attackers to cause a denial of service (infinite loop)
    and write to, move, and delete files with the permissions of DiskFileItem, and
    if running on a Java VM before 1.3.1, execute arbitrary code via a crafted serialized
    Java object.
  affected_package: org.apache.wicket:wicket-util
  vulnerable_versions:
  - "> >=1.5.0 <1.5.17"
  - "> >=6.0.0 <6.25.0"
  package_manager: maven
  cve:
  - CVE-2016-6793
  disclosed_date: 2017-07-17
  created_date: 2017-07-17
  last_modified_date: 2017-07-17
  credit:
  - OSSIndex
  references:
  - http://www.openwall.com/lists/oss-security/2016/12/31/1
  - http://www.securityfocus.com/archive/1/archive/1/539975/100/0/threaded
  - http://www.securityfocus.com/bid/95168
  - http://www.securitytracker.com/id/1037541
  - https://wicket.apache.org/news/2016/12/31/cve-2016-6793.html
  - https://www.tenable.com/security/research/tra-2016-23
  source_url: https://ossindex.net/resource/package/7015337785/vulnerabilities
- id: snykio:maven:org.apache.wicket:wicket-util:31021
  title: Inadequate Encryption Strength
  description: |
    [`org.apache.wicket:wicket-util`][1] Affected versions of the package
    are vulnerable to Inadequate Encryption Strength. With Wicket\'s default
    security settings the usage of CryptoMapper to encrypt/obfuscate pages\'
    urls is not strong enough. It is possible to predict the encrypted
    version of an url based on the previous history.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22wicket-util%22
  affected_package: org.apache.wicket:wicket-util
  vulnerable_versions:
  - "< 1.5.13"
  - ">= 6 < 6.19 .0"
  - ">= 7-alpha < 7.0.0-M5"
  severity: high
  package_manager: maven
  cve:
  - CVE-2014-7808
  cwe:
  - CWE-326
  disclosed_date: 2015-10-19
  created_date: 2015-10-19
  last_modified_date: 2015-10-19
  credit:
  - Fabian Faessler
  references:
  - https://mail-archives.apache.org/mod_mbox/wicket-users/201502.mbox/%3CCAMomwMpLPDYezc=iFofm1R1Uq37vUFJ8VC-_ex5SU8-HAKBoRw@mail.gmail.com%3E
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHEWICKET-31021
- id: snykio:maven:org.apache.wicket:wicket-util:31022
  title: Deserialization of Untrusted Data
  description: |
    [org.apache.wicket:wicket-util][1] is a Component-based Java web
    framework.

    Affected versions of this package are vulnerable to Deserialization of
    Untrusted Data. Depending on the `ISerializer` set in the Wicket
    application, it\'s possible that a Wicket\'s object deserialized from an
    untrusted source and utilized by the application to causes the code to
    enter in an infinite loop. Specifically, Wicket\'s `DiskFileItem` class,
    serialized by Kryo, allows an attacker to hack its serialized form to
    put a client on an infinite loop if the client attempts to write on the
    `DeferredFileOutputStream` attribute.



    [1]: https://wicket.apache.org/
    \nSerialization is a process of converting an object into a sequence of
    bytes which can be persisted to a disk or database or can be sent
    through streams. The reverse process of creating object from sequence of
    bytes is called deserialization. Serialization is commonly used for
    communication (sharing objects between multiple hosts) and persistence
    (store the object state in a file or a database). It is an integral part
    of popular protocols like *Remote Method Invocation (RMI)*, *Java
    Management Extension (JMX)*, *Java Messaging System (JMS)*, *Action
    Message Format (AMF)*, *Java Server Faces (JSF) ViewState*, etc.

    *Deserialization of untrusted data* ([CWE-502][1]), is when the
    application deserializes untrusted data without sufficiently verifying
    that the resulting data will be valid, letting the attacker to control
    the state or the flow of the execution.

    Java deserialization issues have been known for years. However, interest
    in the issue intensified greatly in 2015, when classes that could be
    abused to achieve remote code execution were found in a [popular library
    (Apache Commons Collection)][2]. These classes were used in zero-days
    affecting IBM WebSphere, Oracle WebLogic and many other products.

    An attacker just needs to identify a piece of software that has both a
    vulnerable class on its path, and performs deserialization on untrusted
    data. Then all they need to do is send the payload into the
    deserializer, getting the command executed.

    > Developers put too much trust in Java Object Serialization. Some even
    > de-serialize objects pre-authentication. When deserializing an Object
    > in Java you typically cast it to an expected type, and therefore
    > Java\'s strict type system will ensure you only get valid object
    > trees. Unfortunately, by the time the type checking happens, platform
    > code has already created and executed significant logic. So, before
    > the final type is checked a lot of code is executed from the
    > readObject() methods of various objects, all of which is out of the
    > developer\'s control. By combining the readObject() methods of various
    > classes which are available on the classpath of the vulnerable
    > application an attacker can execute functions (including calling
    > Runtime.exec() to execute local OS commands).

    * Apache Blog



    [1]: https://cwe.mitre.org/data/definitions/502.html
    [2]: https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078
  affected_package: org.apache.wicket:wicket-util
  vulnerable_versions:
  - ">= 1.5.0 < 1.5.17"
  - ">= 6.0.0 < 6.25.0"
  severity: high
  package_manager: maven
  cve:
  - CVE-2016-6793
  cwe:
  - CWE-502
  disclosed_date: 2016-12-28
  created_date: 2016-12-28
  last_modified_date: 2016-12-28
  credit:
  - Jacob Baines
  - Pedro Santos
  - Tenable Network Security
  references:
  - http://seclists.org/oss-sec/2016/q4/785
  - https://github.com/apache/wicket/commit/134686ef7185d3f96fec953136ab4847cd36b68
  - https://wicket.apache.org/news/2016/12/31/cve-2016-6793.html
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHEWICKET-31022
