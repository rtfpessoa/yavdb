---
- id: rustsec:cargo:hyper:RUSTSEC-2016-0002
  title: HTTPS MitM vulnerability due to lack of hostname verification
  description: |
    When used on Windows platforms, all versions of Hyper prior to 0.9.4 did not
    perform hostname verification when making HTTPS requests.

    This allows an attacker to perform MitM attacks by preventing any valid
    CA-issued certificate, even if there's a hostname mismatch.

    The problem was addressed by leveraging rust-openssl's built-in support for
    hostname verification.
  affected_package: hyper
  vulnerable_versions:
  - "*"
  severity: high
  package_manager: cargo
  cve:
  - CVE-2016-10932
  disclosed_date: 2016-05-09
  created_date: 2016-05-09
  last_modified_date: 2016-05-09
  credit:
  - RustSec
  references:
  - https://github.com/hyperium/hyper/blob/master/CHANGELOG.md#v094-2016-05-09
  source_url: https://github.com/RustSec/advisory-db/blob/master/crates/hyper/RUSTSEC-2016-0002.toml
- id: rustsec:cargo:hyper:RUSTSEC-2017-0002
  title: headers containing newline characters can split messages
  description: |
    Serializing of headers to the socket did not filter the values for newline bytes (`\r` or `\n`),
    which allowed for header values to split a request or response. People would not likely include
    newlines in the headers in their own applications, so the way for most people to exploit this
    is if an application constructs headers based on unsanitized user input.

    This issue was fixed by replacing all newline characters with a space during serialization of
    a header value.
  affected_package: hyper
  vulnerable_versions:
  - "*"
  severity: high
  package_manager: cargo
  cve:
  - CVE-2017-18587
  disclosed_date: 2017-01-23
  created_date: 2017-01-23
  last_modified_date: 2017-01-23
  credit:
  - RustSec
  references:
  - https://github.com/hyperium/hyper/wiki/Security-001
  source_url: https://github.com/RustSec/advisory-db/blob/master/crates/hyper/RUSTSEC-2017-0002.toml
- id: rustsec:cargo:hyper:RUSTSEC-2020-0008
  title: Flaw in hyper allows request smuggling by sending a body in GET requests
  description: |
    Vulnerable versions of hyper allow GET requests to have bodies, even if there is
    no Transfer-Encoding or Content-Length header.  As per the HTTP 1.1
    specification, such requests do not have bodies, so the body will be interpreted
    as a separate HTTP request.

    This allows an attacker who can control the body and method of an HTTP request
    made by hyper to inject a request with headers that would not otherwise be
    allowed, as demonstrated by sending a malformed HTTP request from a Substrate
    runtime.  This allows bypassing CORS restrictions.  In combination with other
    vulnerabilities, such as an exploitable web server listening on loopback, it may
    allow remote code execution.

    The flaw was corrected in hyper version 0.12.34.
  affected_package: hyper
  vulnerable_versions:
  - "*"
  severity: high
  package_manager: cargo
  disclosed_date: 2020-03-19
  created_date: 2020-03-19
  last_modified_date: 2020-03-19
  credit:
  - RustSec
  references:
  - https://github.com/hyperium/hyper/issues/1925
  source_url: https://github.com/RustSec/advisory-db/blob/master/crates/hyper/RUSTSEC-2020-0008.toml
