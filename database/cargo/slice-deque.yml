---
- id: rustsec:cargo:slice-deque:RUSTSEC-2018-0008
  title: Bug in SliceDeque::move_head_unchecked allows read of corrupted memory
  description: "Affected versions of this crate did not properly update the\nhead
    and tail of the deque when inserting and removing elements from the front\nif,
    before insertion or removal, the tail of the deque was in the mirrored\nmemory
    region, and if, after insertion or removal, the head of the deque is\nexactly
    at the beginning of the mirrored memory region.\n\nAn attacker that controls both
    element insertion and removal into the deque\ncould put it in a corrupted state.
    Once the deque enters such an state, its head\nand tail are corrupted, but in
    bounds of the allocated memory. This can result\nin partial reads and writes,
    reads of uninitialized memory, reads of memory\ncontaining previously dropped
    objects, etc. An attacker could exploit this to\nalter program execution.\n\nThe
    flaw was corrected by properly updating the head and tail of the deque in\nthis
    case. "
  affected_package: slice-deque
  vulnerable_versions:
  - "*"
  severity: high
  package_manager: cargo
  disclosed_date: 2018-12-05
  created_date: 2018-12-05
  last_modified_date: 2018-12-05
  credit:
  - RustSec
  references:
  - https://github.com/gnzlbg/slice_deque/issues/57
  source_url: https://github.com/RustSec/advisory-db/blob/master/crates/slice-deque/RUSTSEC-2018-0008.toml
- id: rustsec:cargo:slice-deque:RUSTSEC-2019-0002
  title: Bug in SliceDeque::move_head_unchecked corrupts its memory
  description: "Affected versions of this crate entered a corrupted state if\n`mem::size_of::<T>()
    % allocation_granularity() != 0` and a specific allocation\npattern was used:
    sufficiently shifting the deque elements over the mirrored\npage boundary.\n\nThis
    allows an attacker that controls controls both element insertion and\nremoval
    to corrupt the deque, such that reading elements from it would read\nbytes corresponding
    to other elements in the deque. (e.g. a read of T could read\nsome bytes from
    one value and some bytes from an adjacent one, resulting in a T\nwhose value representation
    is not meaningful). This is undefined behavior.\n \nThe flaw was corrected by
    using a pair of pointers to track the head and tail of\nthe deque instead of a
    pair of indices. This pair of pointers are represented\nusing a Rust slice.\n"
  affected_package: slice-deque
  vulnerable_versions:
  - "*"
  severity: high
  package_manager: cargo
  disclosed_date: 2019-05-07
  created_date: 2019-05-07
  last_modified_date: 2019-05-07
  credit:
  - RustSec
  references:
  - https://github.com/gnzlbg/slice_deque/issues/57
  source_url: https://github.com/RustSec/advisory-db/blob/master/crates/slice-deque/RUSTSEC-2019-0002.toml
