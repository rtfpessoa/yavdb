---
- id: snykio:go:github.com/sassoftware/go-rpmutils/cpio:570427
  title: Arbitrary File Write via Archive Extraction (Zip Slip)
  description: "[github.com/sassoftware/go-rpmutils/cpio][1] is a package for parsing\nand
    extracting content from RPM files.\n\nAffected versions of this package are vulnerable
    to Arbitrary File Write\nvia Archive Extraction (Zip Slip). The CPIO extraction
    functionality\ndoesn\\'t sanitize the paths of the archived files for leading
    and\nnon-leading \\\"..\\\" which leads in file extraction outside of the current\ndirectory.\n\n*Note:*
    the fixing commit was applied to all affected versions which\nwere re-released.\n\n###
    PoC by Georgios Gkitsas of Snyk Security Team   {#poc-by-georgios-gkitsas-of-snyk-security-team}\n\nHaving
    a modified `relative.cpio` that includes relative paths:\n\n    package main\n
    \   \n    import (\n        cpio \"github.com/sassoftware/go-rpmutils/cpio\"\n
    \       \"os\"\n        \"testing/iotest\"\n        \"fmt\"\n    )\n    \n    func
    main() {\n        file := \"relative.cpio\"\n    \n        f, err := os.Open(file)\n
    \       if err != nil {\n            fmt.Println(err)\n        }\n    \n        hf
    := iotest.HalfReader(f)\n        if err := cpio.Extract(hf, \".\"); err != nil
    {\n            fmt.Println(err)\n        }\n    }\n\n\n\n[1]: https://github.com/sassoftware/go-rpmutils\n\\nIt
    is exploited using a specially crafted zip archive, that holds path\ntraversal
    filenames. When exploited, a filename in a malicious archive\nis concatenated
    to the target extraction directory, which results in the\nfinal path ending up
    outside of the target folder. For instance, a zip\nmay hold a file with a \\\"../../file.exe\\\"
    location and thus break out of\nthe target folder. If an executable or a configuration
    file is\noverwritten with a file containing malicious code, the problem can turn\ninto
    an arbitrary code execution issue quite easily.\n\nThe following is an example
    of a zip archive with one benign file and\none malicious file. Extracting the
    malicous file will result in\ntraversing out of the target folder, ending up in
    `/root/.ssh/`\noverwriting the `authorized_keys` file:\n\n    \n    +2018-04-15
    22:04:29 ..... 19 19 good.txt\n    \n    +2018-04-15 22:04:42 ..... 20 20 ../../../../../../root/.ssh/authorized_keys\n\n"
  affected_package: github.com/sassoftware/go-rpmutils/cpio
  vulnerable_versions:
  - "<0.1.0"
  severity: high
  package_manager: go
  cve:
  - CVE-2020-7667
  cwe:
  - CWE-22
  disclosed_date: 2020-05-27
  created_date: 2020-06-05
  last_modified_date: 2020-06-05
  credit:
  - Georgios Gkitsas of Snyk Security Team
  references:
  - https://github.com/sassoftware/go-rpmutils/commit/a64058cf21b8aada501bba923c9aab66fb6febf0
  source_url: https://snyk.io/vuln/SNYK-GOLANG-GITHUBCOMSASSOFTWAREGORPMUTILSCPIO-570427
