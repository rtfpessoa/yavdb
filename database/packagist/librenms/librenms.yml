---
- id: snykio:packagist:librenms/librenms:174024
  title: SQL Injection
  description: |
    [librenms/librenms][1] is a fully featured network monitoring system
    that provides a wealth of features and device support.

    Affected versions of this package are vulnerable to SQL Injection via
    the html/ajax\_table.php sort\[hostname\] parameter, exploitable by
    authenticated users during a search.



    [1]: https://packagist.org/packages/librenms/librenms
  affected_package: librenms/librenms
  vulnerable_versions:
  - "<1.48"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2018-20678
  cwe:
  - CWE-89
  disclosed_date: 2019-03-28
  created_date: 2019-03-29
  last_modified_date: 2019-03-29
  credit:
  - CERT ENEA member
  - Dariusz GoÅ„da
  references:
  - https://cert.enea.pl/advisories/cert-190101.html
  source_url: https://snyk.io/vuln/SNYK-PHP-LIBRENMSLIBRENMS-174024
- id: snykio:packagist:librenms/librenms:174522
  title: Command Injection
  description: |
    [librenms/librenms][1] is a fully featured network monitoring system
    that provides a wealth of features and device support.

    Affected versions of this package are vulnerable to Command Injection.
    Attackers can execute arbitrary OS commands by making a request to the
    `html/pages/addhost.inc.php` using the `$_POST['community']` parameter
    during creation of a new device, and then making a request to
    `/ajax_output.php?id=capture&format=text&type=snmpwalk&hostname=localhost`
    web page that will trigger `html/includes/output/capture.inc.php`
    command mishandling, resulting in executing of OS commands.



    [1]: https://packagist.org/packages/librenms/librenms
  affected_package: librenms/librenms
  vulnerable_versions:
  - ">=1.46"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2018-20434
  cwe:
  - CWE-77
  disclosed_date: 2019-04-24
  created_date: 2019-04-25
  last_modified_date: 2019-04-25
  credit:
  - Askar
  references:
  - https://exploit-db.com/exploits/46970
  - https://gist.github.com/mhaskar/516df57aafd8c6e3a1d70765075d372d
  - https://shells.systems/librenms-v1-46-remote-code-execution-cve-2018-20434/
  - https://www.exploit-db.com/exploits/47044
  source_url: https://snyk.io/vuln/SNYK-PHP-LIBRENMSLIBRENMS-174522
- id: snykio:packagist:librenms/librenms:174588
  title: Arbitrary File Read
  description: |
    [librenms/librenms][1] is a fully featured network monitoring system
    that provides a wealth of features and device support.

    Affected versions of this package are vulnerable to Arbitrary File Read.
    IT allows remote attackers to read arbitrary files, related to
    `html/install.php`.



    [1]: https://packagist.org/packages/librenms/librenms
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
  affected_package: librenms/librenms
  vulnerable_versions:
  - "<1.31"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2017-16759
  cwe:
  - CWE-22
  disclosed_date: 2017-11-09
  created_date: 2019-05-06
  last_modified_date: 2019-05-06
  credit:
  - Unknown
  references:
  - https://github.com/librenms/librenms/commit/d3094fa6578b29dc34fb5a7d0bd6deab49ecc911
  - https://github.com/librenms/librenms/pull/7184
  source_url: https://snyk.io/vuln/SNYK-PHP-LIBRENMSLIBRENMS-174588
- id: snykio:packagist:librenms/librenms:466416
  title: Authentication Bypass
  description: |
    [librenms/librenms][1] is a fully featured network monitoring system
    that provides a wealth of features and device support.

    Affected versions of this package are vulnerable to Authentication
    Bypass. Multiple LibreNMS scripts do not correctly enforce or completely
    lacks authentication checks. Attackers can take advantage of this to
    access several scripts, including some that suffer from additional
    vulnerabilities. This vulnerability can be combined with other
    vulnerabilities could be used to achieve unauthenticated remote code
    execution.



    [1]: https://packagist.org/packages/librenms/librenms
  affected_package: librenms/librenms
  vulnerable_versions:
  - "<1.50.1"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2019-10668
  cwe:
  - CWE-287
  disclosed_date: 2019-09-09
  created_date: 2019-09-09
  last_modified_date: 2019-09-09
  credit:
  - Eldar Marcussen
  references:
  - https://github.com/librenms/librenms/pull/10091
  - https://github.com/librenms/librenms/pull/10091/commits/678cf548b61aa0db8019141d3577c997e87a0b42
  - https://www.darkmatter.ae/xen1thlabs/librenms-authentication-bypass-vulnerability-xl-19-016/
  source_url: https://snyk.io/vuln/SNYK-PHP-LIBRENMSLIBRENMS-466416
- id: snykio:packagist:librenms/librenms:466417
  title: Directory Traversal
  description: |
    [librenms/librenms][1] is a fully featured network monitoring system
    that provides a wealth of features and device support.

    Affected versions of this package are vulnerable to Directory Traversal.
    An authenticated user can perform a directory traversal attack against
    the `/pdf.php` file with a partial filename in the report parameter, to
    cause local file inclusion resulting in code execution.



    [1]: https://packagist.org/packages/librenms/librenms
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
  affected_package: librenms/librenms
  vulnerable_versions:
  - "<1.53"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2019-12464
  cwe:
  - CWE-23
  disclosed_date: 2019-09-09
  created_date: 2019-09-09
  last_modified_date: 2019-09-09
  credit:
  - Eldar Marcussen
  references:
  - https://github.com/librenms/librenms/pull/10270
  - https://www.darkmatter.ae/xen1thlabs/librenms-limited-local-file-inclusion-via-directory-traversal-vulnerability-xl-19-019/
  source_url: https://snyk.io/vuln/SNYK-PHP-LIBRENMSLIBRENMS-466417
- id: snykio:packagist:librenms/librenms:466423
  title: Cross-site Scripting (XSS)
  description: |+
    [librenms/librenms][1] is a fully featured network monitoring system
    that provides a wealth of features and device support.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). None



    [1]: https://packagist.org/packages/librenms/librenms
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browserâ€™s Same Origin Policy.

    Ö¿Injecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if theyâ€™ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the userâ€™s browser. |
    | **DOM-based** | Client | The attacker forces the userâ€™s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: librenms/librenms
  vulnerable_versions:
  - "<1.50.1"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2019-10670
  cwe:
  - CWE-79
  disclosed_date: 2019-07-15
  created_date: 2019-09-10
  last_modified_date: 2019-09-10
  credit:
  - Eldar Marcussen
  references:
  - https://github.com/librenms/librenms/pull/10088
  - https://github.com/librenms/librenms/pull/10088/commits/0559014c5813ee38d400b593ae5f69da230040ae
  source_url: https://snyk.io/vuln/SNYK-PHP-LIBRENMSLIBRENMS-466423
- id: snykio:packagist:librenms/librenms:466429
  title: SQL Injection
  description: "[librenms/librenms][1] is a fully featured network monitoring system\nthat
    provides a wealth of features and device support.\n\nAffected versions of this
    package are vulnerable to SQL Injection.\nMultiple areas within LibreNMS is vulnerable
    to SQL Injection. This\nincludes:\n\n* The `term` parameter is used insecurely
    in a database query for\n  showing columns of a table within `ajax_rulesuggest.php`
    and\n  `ajax_search.php`\n* Multiple parameters used by `graph.php` which are
    sufficiently\n  parameterized\n  ## Remediation   {#remediation}\n  \n  Upgrade
    `librenms/librenms` to version 1.53 or higher.\n  ## References   {#references}\n\n*
    [DarkMatter Security Blog CVE-2019-10671][2]\n* [DarkMatter Security Blog CVE-2019-12465][3]\n*
    [GitHub Commit][4]\n\n\n\n[1]: https://packagist.org/packages/librenms/librenms\n[2]:
    https://www.darkmatter.ae/xen1thlabs/librenms-multiple-sql-injection-vulnerability-xl-19-025/\n[3]:
    https://www.darkmatter.ae/xen1thlabs/librenms-sql-injection-vulnerability-xl-19-024/\n[4]:
    https://github.com/librenms/librenms/pull/10088/commits/0559014c5813ee38d400b593ae5f69da230040ae\n"
  affected_package: librenms/librenms
  vulnerable_versions:
  - "<1.53"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2019-10671
  - CVE-2019-12465
  cwe:
  - CWE-89
  disclosed_date: 2019-09-09
  created_date: 2019-09-09
  last_modified_date: 2019-09-09
  credit:
  - Eldar Marcussen
  source_url: https://snyk.io/vuln/SNYK-PHP-LIBRENMSLIBRENMS-466429
- id: snykio:packagist:librenms/librenms:466430
  title: Insufficient Input Validation
  description: |
    [librenms/librenms][1] is a fully featured network monitoring system
    that provides a wealth of features and device support.

    Affected versions of this package are vulnerable to Insufficient Input
    Validation. It is possible to inject syntax to the RRDtool used by
    LibreNMS to draw graphs. This could lead to information disclosure,
    denial of service, remote code execution and arbitrary file writes under
    certain conditions.

    ### PoC by Eldar Marcussen   {#poc-by-eldar-marcussen}

        $ curl "http://host/graph.php?device=&type=device_ber&from=1&graph_title=1'%0a%0acd+.. %0als%0a'&to=2&width=50&height=300&debug=1"



    [1]: https://packagist.org/packages/librenms/librenms
  affected_package: librenms/librenms
  vulnerable_versions:
  - "<1.53"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2019-10665
  - CVE-2019-12463
  cwe:
  - CWE-284
  disclosed_date: 2019-09-09
  created_date: 2019-09-09
  last_modified_date: 2019-09-09
  credit:
  - Eldar Marcussen
  references:
  - https://github.com/librenms/librenms/pull/10276
  - https://www.darkmatter.ae/xen1thlabs/librenms-rrdtool-injection-vulnerability-xl-19-023/
  source_url: https://snyk.io/vuln/SNYK-PHP-LIBRENMSLIBRENMS-466430
- id: snykio:packagist:librenms/librenms:466431
  title: Command Injection
  description: |
    [librenms/librenms][1] is a fully featured network monitoring system
    that provides a wealth of features and device support.

    Affected versions of this package are vulnerable to Command Injection.
    It is possible to inject arbitrary commands in
    `html/includes/graphs/device/collectd.inc.php` where user supplied
    parameters are filtered with the`mysqli_escape_real_string function`.
    This function is not the appropriate function to sanitize command
    arguments as it does not escape a number of command line syntax
    characters such as backticks, allowing an attacker to inject commands
    into the variable `$rrd_cmd`, which gets executed via `passthru()`.



    [1]: https://packagist.org/packages/librenms/librenms
  affected_package: librenms/librenms
  vulnerable_versions:
  - "<1.50.1"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2019-10669
  cwe:
  - CWE-94
  disclosed_date: 2019-09-09
  created_date: 2019-09-09
  last_modified_date: 2019-09-09
  credit:
  - Eldar Marcussen
  references:
  - https://github.com/librenms/librenms/pull/10091
  - https://github.com/librenms/librenms/pull/10091/commits/678cf548b61aa0db8019141d3577c997e87a0b42
  - https://www.darkmatter.ae/xen1thlabs/librenms-command-injection-vulnerability-xl-19-017/
  source_url: https://snyk.io/vuln/SNYK-PHP-LIBRENMSLIBRENMS-466431
- id: snykio:packagist:librenms/librenms:466432
  title: Directory Traversal
  description: |
    [librenms/librenms][1] is a fully featured network monitoring system
    that provides a wealth of features and device support.

    Affected versions of this package are vulnerable to Directory Traversal.
    Several areas within the package perform dynamic script inclusion via
    the `include()` function on user supplied input without sanitizing the
    values by calling `basename()` or a similar function. An attacker can
    leverage this to execute PHP code from an included file such as
    `csv.php?report=../`

    Exploitation of these scripts is made difficult by additional text being
    appended such as`.inc.php`. As such, an attacker would need to be able
    to control both a filename and its content on the target server.



    [1]: https://packagist.org/packages/librenms/librenms
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
  affected_package: librenms/librenms
  vulnerable_versions:
  - "<1.53"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2019-10666
  cwe:
  - CWE-23
  disclosed_date: 2019-07-15
  created_date: 2019-09-09
  last_modified_date: 2019-09-09
  credit:
  - Eldar Marcussen
  references:
  - https://github.com/librenms/librenms/pull/10091
  - https://github.com/librenms/librenms/pull/10276
  - https://www.darkmatter.ae/xen1thlabs/librenms-limited-local-file-inclusion-via-directory-traversal-vulnerability-xl-19-020/
  source_url: https://snyk.io/vuln/SNYK-PHP-LIBRENMSLIBRENMS-466432
- id: snykio:packagist:librenms/librenms:536059
  title: Information Exposure
  description: |
    [librenms/librenms][1] is a fully featured network monitoring system
    that provides a wealth of features and device support.

    Affected versions of this package are vulnerable to Information
    Exposure. An attacker can fingerprint the exact code version installed
    and disclose local file paths.



    [1]: https://packagist.org/packages/librenms/librenms
  affected_package: librenms/librenms
  vulnerable_versions:
  - "<1.50.1"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2019-10667
  cwe:
  - CWE-200
  disclosed_date: 2019-09-09
  created_date: 2019-11-26
  last_modified_date: 2019-11-26
  credit:
  - Unknown
  references:
  - https://nvd.nist.gov/vuln/detail/CVE-2019-10667
  - https://www.darkmatter.ae/xen1thlabs/librenms-information-disclosure-vulnerability-xl-19-018/
  source_url: https://snyk.io/vuln/SNYK-PHP-LIBRENMSLIBRENMS-536059
- id: snykio:packagist:librenms/librenms:589930
  title: Improper Access Control
  description: |
    [librenms/librenms][1] is a fully featured network monitoring system
    that provides a wealth of features and device support.

    Affected versions of this package are vulnerable to Improper Access
    Control. It has insufficient access control for normal users because of
    `"'guard' => 'admin'"` instead of `"'middleware' => ['can:admin']"` in
    `routes/web.php`.



    [1]: https://packagist.org/packages/librenms/librenms
  affected_package: librenms/librenms
  vulnerable_versions:
  - "<1.65.1"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2020-15877
  cwe:
  - CWE-284
  disclosed_date: 2020-07-22
  created_date: 2020-07-22
  last_modified_date: 2020-07-22
  credit:
  - Shielder.it
  references:
  - https://github.com/librenms/librenms/commit/e5bb6d80bc308fc56b9a01ffb76c34159995353c
  - https://github.com/librenms/librenms/pull/11915
  source_url: https://snyk.io/vuln/SNYK-PHP-LIBRENMSLIBRENMS-589930
- id: snykio:packagist:librenms/librenms:589931
  title: SQL Injection
  description: |
    [librenms/librenms][1] is a fully featured network monitoring system
    that provides a wealth of features and device support.

    Affected versions of this package are vulnerable to SQL Injection. An
    authenticated attacker can achieve SQL Injection via the
    `customoid.inc.php` `device_id` `POST` parameter to `ajax_form.php`.



    [1]: https://packagist.org/packages/librenms/librenms
  affected_package: librenms/librenms
  vulnerable_versions:
  - "<1.65.1"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2020-15873
  cwe:
  - CWE-89
  disclosed_date: 2020-07-22
  created_date: 2020-07-22
  last_modified_date: 2020-07-22
  credit:
  - Loginsoft
  references:
  - https://github.com/librenms/librenms/commit/8f3a29cde5bbd8608f9b42923a7d7e2598bcac4e
  - https://github.com/librenms/librenms/pull/11923
  - https://research.loginsoft.com/bugs/blind-sql-injection-in-librenms/
  source_url: https://snyk.io/vuln/SNYK-PHP-LIBRENMSLIBRENMS-589931
- id: snykio:packagist:librenms/librenms:72473
  title: Cross-site Scripting (XSS)
  description: |+
    [librenms/librenms][1] is a featured network monitoring system that
    provides a wealth of features and device support.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks. A malicious user could inject arbitrary web script or
    HTML via the `dashboard_name` parameter in the `/ajax_form.php`
    resource.



    [1]: https://packagist.org/packages/librenms/librenms
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browserâ€™s Same Origin Policy.

    Ö¿Injecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if theyâ€™ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the userâ€™s browser. |
    | **DOM-based** | Client | The attacker forces the userâ€™s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: librenms/librenms
  vulnerable_versions:
  - "<1.44"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2018-18478
  cwe:
  - CWE-79
  disclosed_date: 2018-10-18
  created_date: 2018-10-30
  last_modified_date: 2018-10-30
  credit:
  - Unknown
  references:
  - https://github.com/librenms/librenms/issues/9170
  - https://github.com/librenms/librenms/pull/9171
  source_url: https://snyk.io/vuln/SNYK-PHP-LIBRENMSLIBRENMS-72473
