---
- id: friendsofphp:packagist:shopware/shopware:2017-01-24
  title: Remote Code Execution Vulnerability
  affected_package: shopware/shopware
  vulnerable_versions:
  - ">=4.2.0 <4.3.0"
  - ">=4.3.0 <4.4.0"
  - ">=5.0.0 <5.1.0"
  - ">=5.1.0 <5.2.0"
  - ">=5.2.0 <5.2.15"
  package_manager: packagist
  disclosed_date: 2017-01-19
  created_date: 2017-01-19
  last_modified_date: 2017-01-19
  credit:
  - FriendsOfPHP
  references:
  - https://community.shopware.com/_detail_1989.html
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/shopware/shopware/2017-01-24.yaml
- id: friendsofphp:packagist:shopware/shopware:2017-01-25
  title: Remote Code Execution Vulnerability
  affected_package: shopware/shopware
  vulnerable_versions:
  - ">=4.2.0 <4.3.0"
  - ">=4.3.0 <4.4.0"
  - ">=5.0.0 <5.1.0"
  - ">=5.1.0 <5.2.0"
  - ">=5.2.0 <5.2.16"
  package_manager: packagist
  disclosed_date: 2017-01-24
  created_date: 2017-01-24
  last_modified_date: 2017-01-24
  credit:
  - FriendsOfPHP
  references:
  - https://community.shopware.com/_detail_1989.html
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/shopware/shopware/2017-01-25.yaml
- id: friendsofphp:packagist:shopware/shopware:2017-06-22
  title: Remote Code Execution Vulnerability
  affected_package: shopware/shopware
  vulnerable_versions:
  - ">=4.2.0 <4.3.0"
  - ">=4.3.0 <5.0.0"
  - ">=5.0.0 <5.1.0"
  - ">=5.1.0 <5.2.0"
  - ">=5.2.0 <5.2.25"
  package_manager: packagist
  disclosed_date: 2017-06-22
  created_date: 2017-06-22
  last_modified_date: 2017-06-22
  credit:
  - FriendsOfPHP
  references:
  - https://community.shopware.com/_detail_2015.html
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/shopware/shopware/2017-06-22.yaml
- id: friendsofphp:packagist:shopware/shopware:2018-01-22
  title: Non-Persistent XSS
  affected_package: shopware/shopware
  vulnerable_versions:
  - ">=5.2.0 <5.3.0"
  - ">=5.3.0 <5.3.7"
  package_manager: packagist
  disclosed_date: 2018-01-22
  created_date: 2018-01-22
  last_modified_date: 2018-01-22
  credit:
  - FriendsOfPHP
  references:
  - https://community.shopware.com/_detail_2048.html
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/shopware/shopware/2018-01-22.yaml
- id: friendsofphp:packagist:shopware/shopware:CVE-2016-3109
  title: Unauthenticated Remote Code Execution Vulnerability
  affected_package: shopware/shopware
  vulnerable_versions:
  - "<4.3.7"
  - ">=5.0.0 <5.1.0"
  - ">=5.1.0 <5.1.5"
  package_manager: packagist
  cve:
  - CVE-2016-3109
  disclosed_date: 2016-04-08
  created_date: 2016-04-08
  last_modified_date: 2016-04-08
  credit:
  - FriendsOfPHP
  references:
  - https://community.shopware.com/_detail_1918.html
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/shopware/shopware/CVE-2016-3109.yaml
- id: ossindex:packagist:shopware/shopware:8399183275
  title: Unauthenticated Remote Code Execution Vulnerability
  description: Unauthenticated Remote Code Execution Vulnerability
  affected_package: shopware/shopware
  vulnerable_versions:
  - "<4.3.7"
  - ">=5.0.0 <5.1.0"
  - ">=5.1.0 <5.1.5"
  package_manager: packagist
  disclosed_date: 2016-06-05
  created_date: 2016-06-05
  last_modified_date: 2016-06-05
  credit:
  - OSSIndex
  references:
  - http://community.shopware.com/_detail_1918.html
  - https://github.com/FriendsOfPHP/security-advisories/blob/master/shopware/shopware/CVE-2016-3109.yaml
  source_url: https://ossindex.net/resource/package/8397591578/vulnerabilities
- id: snykio:packagist:shopware/shopware:1040421
  title: Cross-site Scripting (XSS)
  description: |+
    [shopware/shopware][1] is an open source e-commerce software made in
    Germany

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). Via the Customer, Newsletter and Shopping Worlds modules.



    [1]: https://github.com/shopware/shopware
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: shopware/shopware
  vulnerable_versions:
  - "<5.6.9"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-79
  disclosed_date: 2020-11-13
  created_date: 2020-11-15
  last_modified_date: 2020-11-15
  credit:
  - Unknown
  references:
  - https://github.com/shopware/shopware/commit/00a172e762c45af14cb16345a944a9e22ec12aeb
  - https://github.com/shopware/shopware/commit/13e67baae3adc6c3e231c323104fa66b4f7d2e93
  - https://github.com/shopware/shopware/commit/2351372e8d78a504f9dba20e42341509137e680b
  source_url: https://snyk.io/vuln/SNYK-PHP-SHOPWARESHOPWARE-1040421
- id: snykio:packagist:shopware/shopware:450885
  title: Cross-site Scripting (XSS)
  description: |+
    [shopware/shopware][1] is an open source e-commerce software made in
    Germany

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) via the Query String to the `backend/Login` or
    `backend/Login/load/` URI.



    [1]: https://github.com/shopware/shopware
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: shopware/shopware
  vulnerable_versions:
  - "<5.5.8"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2019-12935
  cwe:
  - CWE-79
  disclosed_date: 2019-06-23
  created_date: 2019-06-24
  last_modified_date: 2019-06-24
  credit:
  - Umran Yildirimkaya
  references:
  - http://seclists.org/fulldisclosure/2019/Jun/32
  - https://www.netsparker.com/web-applications-advisories/ns-19-004-cross-site-scripting-in-shopware/
  - https://www.shopware.com/en/changelog/#5-5-8
  source_url: https://snyk.io/vuln/SNYK-PHP-SHOPWARESHOPWARE-450885
- id: snykio:packagist:shopware/shopware:596498
  title: Cross-site Scripting (XSS)
  description: |+
    [shopware/shopware][1] is an open source e-commerce software made in
    Germany

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). Remote attackers are able to inject malicious script code into
    the firstname, lastname, or order input fields to provoke persistent
    execution in the customer and orders section of the backend. The
    execution occurs in the administrator backend listing when processing a
    preview of the customers (kunden) or orders (bestellungen). The
    injection can be performed interactively via user registration or by
    manipulation of the order information inputs.



    [1]: https://github.com/shopware/shopware
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: shopware/shopware
  vulnerable_versions:
  - ">=5.2.5  <5.3.1"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2017-15374
  cwe:
  - CWE-79
  disclosed_date: 2020-07-30
  created_date: 2020-07-30
  last_modified_date: 2020-07-30
  credit:
  - Unknown
  references:
  - https://www.exploit-db.com/exploits/43849/
  source_url: https://snyk.io/vuln/SNYK-PHP-SHOPWARESHOPWARE-596498
- id: snykio:packagist:shopware/shopware:597482
  title: SQL Injection
  description: |
    [shopware/shopware][1] is a open source e-commerce software made in
    Germany

    Affected versions of this package are vulnerable to SQL Injection. in
    the backend, by remote authenticated users.



    [1]: https://github.com/shopware/shopware
  affected_package: shopware/shopware
  vulnerable_versions:
  - ">=4.2.0  <5.4.3"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2018-20713
  cwe:
  - CWE-89
  disclosed_date: 2019-01-15
  created_date: 2019-02-17
  last_modified_date: 2019-02-17
  credit:
  - Unknown
  references:
  - https://docs.shopware.com/en/shopware-5-en/security-updates/security-update-05-2018
  - https://github.com/shopware/shopware/commit/73cb46727050e28a0d7c2cf8471baaa3eaf2e5e8
  source_url: https://snyk.io/vuln/SNYK-PHP-SHOPWARESHOPWARE-597482
- id: snykio:packagist:shopware/shopware:70132
  title: Arbitrary Code Execution
  description: |
    Affected versions of [`shopware/shopware`][1] are vulnerable to
    Arbitrary Code Execution.



    [1]: https://packagist.org/packages/shopware/shopware
  affected_package: shopware/shopware
  vulnerable_versions:
  - ">=4.0.0  <5.2.15"
  severity: high
  package_manager: packagist
  cwe:
  - CWE-94
  disclosed_date: 2017-01-19
  created_date: 2017-01-19
  last_modified_date: 2017-01-19
  credit:
  - Unknown
  references:
  - http://community.shopware.com/_detail_1989.html
  source_url: https://snyk.io/vuln/SNYK-PHP-SHOPWARESHOPWARE-70132
- id: snykio:packagist:shopware/shopware:70134
  title: Arbitrary Code Execution
  description: |
    Affected versions of [`shopware/shopware`][1] are vulnerable to
    Arbitrary Code Execution.



    [1]: https://packagist.org/packages/shopware/shopware
  affected_package: shopware/shopware
  vulnerable_versions:
  - "<5.2.25"
  severity: high
  package_manager: packagist
  cwe:
  - CWE-94
  disclosed_date: 2017-06-22
  created_date: 2017-06-22
  last_modified_date: 2017-06-22
  credit:
  - Unknown
  references:
  - http://en.community.shopware.com/_detail_2015.html
  source_url: https://snyk.io/vuln/SNYK-PHP-SHOPWARESHOPWARE-70134
- id: snykio:packagist:shopware/shopware:70135
  title: Arbitrary Code Execution
  description: |
    Affected versions of [`shopware/shopware`][1] are vulnerable to
    Arbitrary Code Execution.



    [1]: https://packagist.org/packages/shopware/shopware
  affected_package: shopware/shopware
  vulnerable_versions:
  - "<4.3.7"
  - ">=5.0.0  <5.1.5"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2016-3109
  cwe:
  - CWE-94
  disclosed_date: 2016-04-08
  created_date: 2016-04-08
  last_modified_date: 2016-04-08
  credit:
  - Unknown
  references:
  - http://community.shopware.com/_detail_1918.html
  source_url: https://snyk.io/vuln/SNYK-PHP-SHOPWARESHOPWARE-70135
- id: snykio:packagist:shopware/shopware:72000
  title: Cross-site Scripting (XSS)
  description: |+
    [`shopware/shopware`][1] is the next generation of open source
    e-commerce software.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks.



    [1]: https://packagist.org/packages/shopware/shopware
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: shopware/shopware
  vulnerable_versions:
  - ">=5.2.0  <5.3.7"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-79
  disclosed_date: 2018-01-22
  created_date: 2018-01-23
  last_modified_date: 2018-01-23
  credit:
  - Unknown
  references:
  - http://en.community.shopware.com/_detail_2048.html
  - https://github.com/shopware/shopware/commit/54461aa651566dc2701b873fe6bd94589604751b
  source_url: https://snyk.io/vuln/SNYK-PHP-SHOPWARESHOPWARE-72000
