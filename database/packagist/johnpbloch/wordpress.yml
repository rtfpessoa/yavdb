---
- id: snykio:packagist:johnpbloch/wordpress:568019
  title: Cross-site Scripting (XSS)
  description: |+
    [johnpbloch/wordpress][1] is a software you can use to create a
    beautiful website, blog, or app.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) in the navigation section of `Customizer` allows JavaScript code
    to be executed. Exploitation requires an authenticated user.



    [1]: https://packagist.org/packages/johnpbloch/wordpress
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: johnpbloch/wordpress
  vulnerable_versions:
  - ">=3.7.0  <3.7.33"
  - ">=3.8.0  <3.8.33"
  - ">=3.9.0  <3.9.31"
  - ">=4.0.0  <4.0.30"
  - ">=4.0.0  <4.9.14"
  - ">=4.1.0  <4.1.30"
  - ">=4.2.0  <4.2.27"
  - ">=4.3.0  <4.3.23"
  - ">=4.4.0  <4.4.22"
  - ">=4.5.0  <4.5.21"
  - ">=4.6.0  <4.6.18"
  - ">=4.7.0  <4.7.17"
  - ">=4.8.0  <4.8.13"
  - ">=5.0.0  <5.0.9"
  - ">=5.1.0  <5.1.5"
  - ">=5.2.0  <5.2.6"
  - ">=5.3.0  <5.3.3"
  - ">=5.4.0  <5.4.1"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2020-11025
  cwe:
  - CWE-79
  disclosed_date: 2020-04-30
  created_date: 2020-04-30
  last_modified_date: 2020-04-30
  credit:
  - Unknown
  references:
  - https://github.com/WordPress/wordpress-develop/security/advisories/GHSA-4mhg-j6fx-5g3c
  - https://wordpress.org/support/wordpress-version/version-5-4-1/#security-updates
  source_url: https://snyk.io/vuln/SNYK-PHP-JOHNPBLOCHWORDPRESS-568019
- id: snykio:packagist:johnpbloch/wordpress:568020
  title: Arbitrary Code Execution
  description: |
    [johnpbloch/wordpress][1] is a software you can use to create a
    beautiful website, blog, or app.

    Affected versions of this package are vulnerable to Arbitrary Code
    Execution. Files with a specially crafted name when uploaded to the
    `Media` section can lead to script execution upon accessing the file.
    This requires an authenticated user with privileges to upload files.



    [1]: https://packagist.org/packages/johnpbloch/wordpress
  affected_package: johnpbloch/wordpress
  vulnerable_versions:
  - ">=3.7.0  <3.7.33"
  - ">=3.8.0  <3.8.33"
  - ">=3.9.0  <3.9.31"
  - ">=4.0.0  <4.0.30"
  - ">=4.0.0  <4.9.14"
  - ">=4.1.0  <4.1.30"
  - ">=4.2.0  <4.2.27"
  - ">=4.3.0  <4.3.23"
  - ">=4.4.0  <4.4.22"
  - ">=4.5.0  <4.5.21"
  - ">=4.6.0  <4.6.18"
  - ">=4.7.0  <4.7.17"
  - ">=4.8.0  <4.8.13"
  - ">=5.0.0  <5.0.9"
  - ">=5.1.0  <5.1.5"
  - ">=5.2.0  <5.2.6"
  - ">=5.3.0  <5.3.3"
  - ">=5.4.0  <5.4.1"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2020-11026
  cwe:
  - CWE-78
  disclosed_date: 2020-05-01
  created_date: 2020-05-01
  last_modified_date: 2020-05-01
  credit:
  - Unknown
  references:
  - https://github.com/WordPress/wordpress-develop/security/advisories/GHSA-3gw2-4656-pfr2
  - https://wordpress.org/support/wordpress-version/version-5-4-1/#security-updates
  source_url: https://snyk.io/vuln/SNYK-PHP-JOHNPBLOCHWORDPRESS-568020
- id: snykio:packagist:johnpbloch/wordpress:568021
  title: Cross-site Scripting (XSS)
  description: |+
    [johnpbloch/wordpress][1] is a software you can use to create a
    beautiful website, blog, or app.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) in the `stats()` method of `class-wp-object-cache.php`.



    [1]: https://packagist.org/packages/johnpbloch/wordpress
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: johnpbloch/wordpress
  vulnerable_versions:
  - ">=3.7.0  <3.7.33"
  - ">=3.8.0  <3.8.33"
  - ">=3.9.0  <3.9.31"
  - ">=4.0.0  <4.0.30"
  - ">=4.0.0  <4.9.14"
  - ">=4.1.0  <4.1.30"
  - ">=4.2.0  <4.2.27"
  - ">=4.3.0  <4.3.23"
  - ">=4.4.0  <4.4.22"
  - ">=4.5.0  <4.5.21"
  - ">=4.6.0  <4.6.18"
  - ">=4.7.0  <4.7.17"
  - ">=4.8.0  <4.8.13"
  - ">=5.0.0  <5.0.9"
  - ">=5.1.0  <5.1.5"
  - ">=5.2.0  <5.2.6"
  - ">=5.3.0  <5.3.3"
  - ">=5.4.0  <5.4.1"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2020-11029
  cwe:
  - CWE-79
  disclosed_date: 2020-05-01
  created_date: 2020-05-01
  last_modified_date: 2020-05-01
  credit:
  - Unknown
  references:
  - https://github.com/WordPress/wordpress-develop/security/advisories/GHSA-568w-8m88-8g2c
  - https://wordpress.org/support/wordpress-version/version-5-4-1/#security-updates
  source_url: https://snyk.io/vuln/SNYK-PHP-JOHNPBLOCHWORDPRESS-568021
- id: snykio:packagist:johnpbloch/wordpress:568022
  title: Improper Access Control
  description: |
    [johnpbloch/wordpress][1] is a software you can use to create a
    beautiful website, blog, or app.

    Affected versions of this package are vulnerable to Improper Access
    Control. When a password reset link is emailed to a user, it does not
    expire upon changing the user password. Access would be needed to the
    email account of the user by a malicious party for successful execution.



    [1]: https://packagist.org/packages/johnpbloch/wordpress
  affected_package: johnpbloch/wordpress
  vulnerable_versions:
  - ">=3.7.0  <3.7.33"
  - ">=3.8.0  <3.8.33"
  - ">=3.9.0  <3.9.31"
  - ">=4.0.0  <4.0.30"
  - ">=4.0.0  <4.9.14"
  - ">=4.1.0  <4.1.30"
  - ">=4.2.0  <4.2.27"
  - ">=4.3.0  <4.3.23"
  - ">=4.4.0  <4.4.22"
  - ">=4.5.0  <4.5.21"
  - ">=4.6.0  <4.6.18"
  - ">=4.7.0  <4.7.17"
  - ">=4.8.0  <4.8.13"
  - ">=5.0.0  <5.0.9"
  - ">=5.1.0  <5.1.5"
  - ">=5.2.0  <5.2.6"
  - ">=5.3.0  <5.3.3"
  - ">=5.4.0  <5.4.1"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2020-11027
  cwe:
  - CWE-284
  disclosed_date: 2020-05-01
  created_date: 2020-05-01
  last_modified_date: 2020-05-01
  credit:
  - Unknown
  references:
  - https://github.com/WordPress/wordpress-develop/security/advisories/GHSA-ww7v-jg8c-q6jw
  - https://wordpress.org/support/wordpress-version/version-5-4-1/#security-updates
  source_url: https://snyk.io/vuln/SNYK-PHP-JOHNPBLOCHWORDPRESS-568022
- id: snykio:packagist:johnpbloch/wordpress:568023
  title: Information Disclosure
  description: |
    [johnpbloch/wordpress][1] is a software you can use to create a
    beautiful website, blog, or app.

    Affected versions of this package are vulnerable to Information
    Disclosure. In some private posts, which were previously public, can
    result in unauthenticated disclosure under a specific set of conditions.



    [1]: https://packagist.org/packages/johnpbloch/wordpress
  affected_package: johnpbloch/wordpress
  vulnerable_versions:
  - ">=3.7.0  <3.7.33"
  - ">=3.8.0  <3.8.33"
  - ">=3.9.0  <3.9.31"
  - ">=4.0.0  <4.0.30"
  - ">=4.0.0  <4.9.14"
  - ">=4.1.0  <4.1.30"
  - ">=4.2.0  <4.2.27"
  - ">=4.3.0  <4.3.23"
  - ">=4.4.0  <4.4.22"
  - ">=4.5.0  <4.5.21"
  - ">=4.6.0  <4.6.18"
  - ">=4.7.0  <4.7.17"
  - ">=4.8.0  <4.8.13"
  - ">=5.0.0  <5.0.9"
  - ">=5.1.0  <5.1.5"
  - ">=5.2.0  <5.2.6"
  - ">=5.3.0  <5.3.3"
  - ">=5.4.0  <5.4.1"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2020-11028
  cwe:
  - CWE-200
  disclosed_date: 2020-05-01
  created_date: 2020-05-01
  last_modified_date: 2020-05-01
  credit:
  - Unknown
  references:
  - https://github.com/WordPress/wordpress-develop/security/advisories/GHSA-xhx9-759f-6p2w
  - https://wordpress.org/support/wordpress-version/version-5-4-1/#security-updates
  source_url: https://snyk.io/vuln/SNYK-PHP-JOHNPBLOCHWORDPRESS-568023
- id: snykio:packagist:johnpbloch/wordpress:568024
  title: Cross-site Scripting (XSS)
  description: |+
    [johnpbloch/wordpress][1] is a software you can use to create a
    beautiful website, blog, or app.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). A special payload can be crafted that can lead to scripts getting
    executed within the search block of the block editor. This requires an
    authenticated user with the ability to add content.



    [1]: https://packagist.org/packages/johnpbloch/wordpress
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: johnpbloch/wordpress
  vulnerable_versions:
  - ">=3.7.0  <3.7.33"
  - ">=3.8.0  <3.8.33"
  - ">=3.9.0  <3.9.31"
  - ">=4.0.0  <4.0.30"
  - ">=4.0.0  <4.9.14"
  - ">=4.1.0  <4.1.30"
  - ">=4.2.0  <4.2.27"
  - ">=4.3.0  <4.3.23"
  - ">=4.4.0  <4.4.22"
  - ">=4.5.0  <4.5.21"
  - ">=4.6.0  <4.6.18"
  - ">=4.7.0  <4.7.17"
  - ">=4.8.0  <4.8.13"
  - ">=5.0.0  <5.0.9"
  - ">=5.1.0  <5.1.5"
  - ">=5.2.0  <5.2.6"
  - ">=5.3.0  <5.3.3"
  - ">=5.4.0  <5.4.1"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2020-11030
  cwe:
  - CWE-79
  disclosed_date: 2020-05-01
  created_date: 2020-05-01
  last_modified_date: 2020-05-01
  credit:
  - Unknown
  references:
  - https://github.com/WordPress/wordpress-develop/security/advisories/GHSA-vccm-6gmc-qhjh
  - https://wordpress.org/support/wordpress-version/version-5-4-1/#security-updates
  source_url: https://snyk.io/vuln/SNYK-PHP-JOHNPBLOCHWORDPRESS-568024
- id: snykio:packagist:johnpbloch/wordpress:674449
  title: Information Exposure
  description: |
    [johnpbloch/wordpress][1] is a software you can use to create a
    beautiful website, blog, or app.

    Affected versions of this package are vulnerable to Information
    Exposure. In `wp-includes/comment-template.php`, comments from a post or
    page could sometimes be seen in the latest comments even if the post or
    page was not public.



    [1]: https://packagist.org/packages/johnpbloch/wordpress
  affected_package: johnpbloch/wordpress
  vulnerable_versions:
  - "<5.4.2"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2020-25286
  cwe:
  - CWE-200
  disclosed_date: 2020-09-14
  created_date: 2020-09-14
  last_modified_date: 2020-09-14
  credit:
  - Unknown
  references:
  - https://core.trac.wordpress.org/changpackageeset/47984
  - https://wordpress.org/news/2020/06/wordpress-5-4-2-security-and-maintenance-release/
  source_url: https://snyk.io/vuln/SNYK-PHP-JOHNPBLOCHWORDPRESS-674449
