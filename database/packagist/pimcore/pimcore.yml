---
- id: snykio:packagist:pimcore/pimcore:1017405
  title: SQL Injection
  description: |
    [pimcore/pimcore][1] is a content &amp; product management framework
    (CMS/PIM/E-Commerce).

    Affected versions of this package are vulnerable to SQL Injection in
    data classification functionality in `ClassificationstoreController`.
    This can be exploited by sending a specifically-crafted input in the
    `relationIds` parameter as demonstrated by the following request:
    `http://vulnerable.pimcore.example/admin/classificationstore/relations?relationIds=[{"keyId"%3a"''","groupId"%3a"'asd'))+or+1%3d1+union+(select+1,2,3,4,5,6,name,8,password,'',11,12,'',14+from+users)+--+"}]`



    [1]: https://packagist.org/packages/pimcore/pimcore
  affected_package: pimcore/pimcore
  vulnerable_versions:
  - ">=6.7.2  <6.8.3"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2020-7759
  cwe:
  - CWE-89
  disclosed_date: 2020-10-14
  created_date: 2020-11-01
  last_modified_date: 2020-11-01
  credit:
  - Daniele Scanu
  references:
  - https://github.com/pimcore/pimcore/pull/7315
  source_url: https://snyk.io/vuln/SNYK-PHP-PIMCOREPIMCORE-1017405
- id: snykio:packagist:pimcore/pimcore:173998
  title: Deserialization of Untrusted Data
  description: |
    [pimcore/pimcore][1] is a content &amp; product management framework
    (CMS/PIM/E-Commerce).

    Affected versions of this package are vulnerable to Deserialization of
    Untrusted Data. An attacker with `classes` permission can send a POST
    request to `/admin/class/bulk-commit`, which will make it possible to
    exploit the `unserialize` function when passing untrusted values in
    \'data\' parameter.



    [1]: https://packagist.org/packages/pimcore/pimcore
    \nSerialization is a process of converting an object into a sequence of
    bytes which can be persisted to a disk or database or can be sent
    through streams. The reverse process of creating object from sequence of
    bytes is called deserialization. Serialization is commonly used for
    communication (sharing objects between multiple hosts) and persistence
    (store the object state in a file or a database). It is an integral part
    of popular protocols like *Remote Method Invocation (RMI)*, *Java
    Management Extension (JMX)*, *Java Messaging System (JMS)*, *Action
    Message Format (AMF)*, *Java Server Faces (JSF) ViewState*, etc.

    *Deserialization of untrusted data* ([CWE-502][1]), is when the
    application deserializes untrusted data without sufficiently verifying
    that the resulting data will be valid, letting the attacker to control
    the state or the flow of the execution.

    Java deserialization issues have been known for years. However, interest
    in the issue intensified greatly in 2015, when classes that could be
    abused to achieve remote code execution were found in a [popular library
    (Apache Commons Collection)][2]. These classes were used in zero-days
    affecting IBM WebSphere, Oracle WebLogic and many other products.

    An attacker just needs to identify a piece of software that has both a
    vulnerable class on its path, and performs deserialization on untrusted
    data. Then all they need to do is send the payload into the
    deserializer, getting the command executed.

    > Developers put too much trust in Java Object Serialization. Some even
    > de-serialize objects pre-authentication. When deserializing an Object
    > in Java you typically cast it to an expected type, and therefore
    > Java\'s strict type system will ensure you only get valid object
    > trees. Unfortunately, by the time the type checking happens, platform
    > code has already created and executed significant logic. So, before
    > the final type is checked a lot of code is executed from the
    > readObject() methods of various objects, all of which is out of the
    > developer\'s control. By combining the readObject() methods of various
    > classes which are available on the classpath of the vulnerable
    > application an attacker can execute functions (including calling
    > Runtime.exec() to execute local OS commands).

    * Apache Blog



    [1]: https://cwe.mitre.org/data/definitions/502.html
    [2]: https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078
  affected_package: pimcore/pimcore
  vulnerable_versions:
  - "<5.7.1"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2019-10867
  cwe:
  - CWE-502
  disclosed_date: 2019-03-19
  created_date: 2019-03-24
  last_modified_date: 2019-03-24
  credit:
  - Daniele Scanu @ Certimeter Group
  references:
  - https://exploit-db.com/exploits/46783
  - https://github.com/pimcore/pimcore/commit/38a29e2f4f5f060a73974626952501cee05fda73
  source_url: https://snyk.io/vuln/SNYK-PHP-PIMCOREPIMCORE-173998
- id: snykio:packagist:pimcore/pimcore:451598
  title: Arbitrary File Upload
  description: |
    [pimcore/pimcore][1] is a content &amp; product management framework
    (CMS/PIM/E-Commerce).

    Affected versions of this package are vulnerable to Arbitrary File
    Upload. It is possible to for a user to upload a `.php` file when
    creating a permission on the `assets` feature, resulting in arbitrary
    code execution. This is achieved by bypassing the `.txt` extension
    automatically added by the framework by uploading a file with 256
    characters name, automatically removing the .txt extension.



    [1]: https://packagist.org/packages/pimcore/pimcore
  affected_package: pimcore/pimcore
  vulnerable_versions:
  - "<5.7.1"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2019-16318
  cwe:
  - CWE-434
  disclosed_date: 2019-03-19
  created_date: 2019-07-15
  last_modified_date: 2019-07-15
  credit:
  - Daniele Scanu
  references:
  - https://github.com/pimcore/pimcore/commit/732f1647cc6e0a29b5b1f5d904b4d726b5e9455f
  source_url: https://snyk.io/vuln/SNYK-PHP-PIMCOREPIMCORE-451598
- id: snykio:packagist:pimcore/pimcore:451599
  title: Deserialization of Untrusted Data
  description: |
    [pimcore/pimcore][1] is a content &amp; product management framework
    (CMS/PIM/E-Commerce).

    Affected versions of this package are vulnerable to Deserialization of
    Untrusted Data. It is possible insert the php wrapper “phar” with an
    arbitrary path in `filename` parameter that allows arbitrary code
    execution via automatic deserialization.



    [1]: https://packagist.org/packages/pimcore/pimcore
    \nSerialization is a process of converting an object into a sequence of
    bytes which can be persisted to a disk or database or can be sent
    through streams. The reverse process of creating object from sequence of
    bytes is called deserialization. Serialization is commonly used for
    communication (sharing objects between multiple hosts) and persistence
    (store the object state in a file or a database). It is an integral part
    of popular protocols like *Remote Method Invocation (RMI)*, *Java
    Management Extension (JMX)*, *Java Messaging System (JMS)*, *Action
    Message Format (AMF)*, *Java Server Faces (JSF) ViewState*, etc.

    *Deserialization of untrusted data* ([CWE-502][1]), is when the
    application deserializes untrusted data without sufficiently verifying
    that the resulting data will be valid, letting the attacker to control
    the state or the flow of the execution.

    Java deserialization issues have been known for years. However, interest
    in the issue intensified greatly in 2015, when classes that could be
    abused to achieve remote code execution were found in a [popular library
    (Apache Commons Collection)][2]. These classes were used in zero-days
    affecting IBM WebSphere, Oracle WebLogic and many other products.

    An attacker just needs to identify a piece of software that has both a
    vulnerable class on its path, and performs deserialization on untrusted
    data. Then all they need to do is send the payload into the
    deserializer, getting the command executed.

    > Developers put too much trust in Java Object Serialization. Some even
    > de-serialize objects pre-authentication. When deserializing an Object
    > in Java you typically cast it to an expected type, and therefore
    > Java\'s strict type system will ensure you only get valid object
    > trees. Unfortunately, by the time the type checking happens, platform
    > code has already created and executed significant logic. So, before
    > the final type is checked a lot of code is executed from the
    > readObject() methods of various objects, all of which is out of the
    > developer\'s control. By combining the readObject() methods of various
    > classes which are available on the classpath of the vulnerable
    > application an attacker can execute functions (including calling
    > Runtime.exec() to execute local OS commands).

    * Apache Blog



    [1]: https://cwe.mitre.org/data/definitions/502.html
    [2]: https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078
  affected_package: pimcore/pimcore
  vulnerable_versions:
  - "<5.7.1"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2019-16317
  cwe:
  - CWE-502
  disclosed_date: 2019-03-19
  created_date: 2019-07-15
  last_modified_date: 2019-07-15
  credit:
  - Daniele Scanu
  references:
  - https://github.com/pimcore/pimcore/commit/6ee5d8536d0802e377594cbe39083e822710aab9
  source_url: https://snyk.io/vuln/SNYK-PHP-PIMCOREPIMCORE-451599
- id: snykio:packagist:pimcore/pimcore:474636
  title: Cross-site Scripting (XSS)
  description: |+
    [pimcore/pimcore][1] is a content &amp; product management framework
    (CMS/PIM/E-Commerce).

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS), exposed in the translations grid because
    `bundles/AdminBundle/Resources/public/js/pimcore/settings/translations.js`
    mishandles certain HTML elements.



    [1]: https://packagist.org/packages/pimcore/pimcore
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: pimcore/pimcore
  vulnerable_versions:
  - ">=6.2.3  <6.3.5"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2019-18656
  cwe:
  - CWE-79
  disclosed_date: 2019-10-31
  created_date: 2019-10-31
  last_modified_date: 2019-10-31
  credit:
  - Unknown
  references:
  - https://github.com/pimcore/pimcore/commit/ca036e9f86bb5cdb3dac0930ec131e5f35e26c5f
  source_url: https://snyk.io/vuln/SNYK-PHP-PIMCOREPIMCORE-474636
- id: snykio:packagist:pimcore/pimcore:480391
  title: SQL Injection
  description: |
    [pimcore/pimcore][1] is a content &amp; product management framework
    (CMS/PIM/E-Commerce).

    Affected versions of this package are vulnerable to SQL Injection. An
    attacker with limited privileges (classes permission) can achieve a SQL
    injection that can lead in data leakage. The vulnerability can be
    exploited via `id`, `storeId`, `pageSize` and `tables` parameters, using
    a payload for trigger a time based or error based sql injection.



    [1]: https://packagist.org/packages/pimcore/pimcore
  affected_package: pimcore/pimcore
  vulnerable_versions:
  - "<6.3.0"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2019-10763
  cwe:
  - CWE-89
  disclosed_date: 2019-11-17
  created_date: 2019-11-17
  last_modified_date: 2019-11-17
  credit:
  - Daniele Scanu
  references:
  - https://github.com/pimcore/pimcore/commit/608ef5d81ba34d034c9b70519bbc6806ad115d68
  source_url: https://snyk.io/vuln/SNYK-PHP-PIMCOREPIMCORE-480391
- id: snykio:packagist:pimcore/pimcore:534500
  title: Cross-site Scripting (XSS)
  description: |
    [pimcore/pimcore][1] is a content &amp; product management framework
    (CMS/PIM/E-Commerce).

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). `bundles/AdminBundle/Controller/Admin/EmailController.php` allows
    script execution in the Email Log preview window because of the lack of
    a `Content-Security-Policy` header.

    \##Details A cross-site scripting attack occurs when the attacker tricks
    a legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.



    [1]: https://packagist.org/packages/pimcore/pimcore
  affected_package: pimcore/pimcore
  vulnerable_versions:
  - "<6.3.0"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2019-18982
  cwe:
  - CWE-79
  disclosed_date: 2019-11-15
  created_date: 2019-11-15
  last_modified_date: 2019-11-15
  credit:
  - Unknown
  references:
  - https://github.com/pimcore/pimcore/commit/e0b48faf7d29ce43a98825a0b230e88350ebcf78
  - https://github.com/pimcore/pimcore/compare/v6.2.3...v6.3.0
  source_url: https://snyk.io/vuln/SNYK-PHP-PIMCOREPIMCORE-534500
- id: snykio:packagist:pimcore/pimcore:534501
  title: Improper Access Control
  description: |
    [pimcore/pimcore][1] is a content &amp; product management framework
    (CMS/PIM/E-Commerce).

    Affected versions of this package are vulnerable to Improper Access
    Control as it lacks an `Access Denied` outcome for an incorrect
    recipient ID of a notification.



    [1]: https://packagist.org/packages/pimcore/pimcore
  affected_package: pimcore/pimcore
  vulnerable_versions:
  - "<6.2.2"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2019-18981
  cwe:
  - CWE-284
  disclosed_date: 2019-11-15
  created_date: 2019-11-15
  last_modified_date: 2019-11-15
  credit:
  - Unknown
  references:
  - https://github.com/pimcore/pimcore/commit/0a5d80b2593b2ebe35d19756b730ba33aa049106
  - https://github.com/pimcore/pimcore/compare/v6.2.1...v6.2.2
  source_url: https://snyk.io/vuln/SNYK-PHP-PIMCOREPIMCORE-534501
- id: snykio:packagist:pimcore/pimcore:534502
  title: Information Exposure
  description: |
    [pimcore/pimcore][1] is a content &amp; product management framework
    (CMS/PIM/E-Commerce).

    Affected versions of this package are vulnerable to Information
    Exposure. It allows attackers to brute-force (guess) valid usernames by
    using the \'forgot password\' functionality as it returns distinct
    messages for invalid password and non-existing users.



    [1]: https://packagist.org/packages/pimcore/pimcore
  affected_package: pimcore/pimcore
  vulnerable_versions:
  - "<6.2.2"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2019-18986
  cwe:
  - CWE-200
  disclosed_date: 2019-11-15
  created_date: 2019-11-15
  last_modified_date: 2019-11-15
  credit:
  - Unknown
  references:
  - https://github.com/pimcore/pimcore/commit/4a7bba5c3f818852cbbd29fa124f7fb09a207185
  - https://github.com/pimcore/pimcore/compare/v6.2.1...v6.2.2
  source_url: https://snyk.io/vuln/SNYK-PHP-PIMCOREPIMCORE-534502
- id: snykio:packagist:pimcore/pimcore:534503
  title: Improper Authentication
  description: |
    [pimcore/pimcore][1] is a content &amp; product management framework
    (CMS/PIM/E-Commerce).

    Affected versions of this package are vulnerable to Improper
    Authentication as it lacks brute force protection for the 2FA token.



    [1]: https://packagist.org/packages/pimcore/pimcore
  affected_package: pimcore/pimcore
  vulnerable_versions:
  - "<6.2.2"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2019-18985
  cwe:
  - CWE-287
  disclosed_date: 2019-11-15
  created_date: 2019-11-15
  last_modified_date: 2019-11-15
  credit:
  - Unknown
  references:
  - https://github.com/pimcore/pimcore/commit/9f2d075243a8392c114d9a8028858b9faf041e2d
  - https://github.com/pimcore/pimcore/compare/v6.2.1...v6.2.2
  source_url: https://snyk.io/vuln/SNYK-PHP-PIMCOREPIMCORE-534503
- id: snykio:packagist:pimcore/pimcore:72269
  title: SQL Injection
  description: |
    [pimcore/pimcore][1] is a Content &amp; Product Management Framework
    (CMS/PIM/E-Commerce).

    Affected versions of this package are vulnerable to SQL Injection via
    the `REST` web service API.



    [1]: https://packagist.org/packages/pimcore/pimcore
  affected_package: pimcore/pimcore
  vulnerable_versions:
  - "<5.3.0"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2018-14058
  cwe:
  - CWE-89
  disclosed_date: 2018-08-17
  created_date: 2018-08-19
  last_modified_date: 2018-08-19
  credit:
  - Unknown
  references:
  - http://seclists.org/fulldisclosure/2018/Aug/13
  - https://packetstormsecurity.com/files/148954/Pimcore-5.2.3-CSRF-Cross-Site-Scripting-SQL-Injection.html
  source_url: https://snyk.io/vuln/SNYK-PHP-PIMCOREPIMCORE-72269
- id: snykio:packagist:pimcore/pimcore:72270
  title: Cross-site Scripting (XSS)
  description: |+
    [pimcore/pimcore][1] is a Content &amp; Product Management Framework
    (CMS/PIM/E-Commerce).

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). An attacker could insert arbitrary JavaScript code in virtually
    all text fields and data entries in the application.



    [1]: https://packagist.org/packages/pimcore/pimcore#v5.3.0
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: pimcore/pimcore
  vulnerable_versions:
  - "<5.3.0"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2018-14059
  cwe:
  - CWE-79
  disclosed_date: 2018-08-17
  created_date: 2018-08-19
  last_modified_date: 2018-08-19
  credit:
  - Unknown
  references:
  - http://seclists.org/fulldisclosure/2018/Aug/13
  - https://packetstormsecurity.com/files/148954/Pimcore-5.2.3-CSRF-Cross-Site-Scripting-SQL-Injection.html
  source_url: https://snyk.io/vuln/SNYK-PHP-PIMCOREPIMCORE-72270
- id: snykio:packagist:pimcore/pimcore:72271
  title: Cross-site Request Forgery (CSRF)
  description: |
    [pimcore/pimcore][1] is a Content &amp; Product Management Framework
    (CMS/PIM/E-Commerce).

    Affected versions of this package are vulnerable to Cross-site Request
    Forgery (CSRF). An attacker could conduct the attack by leveraging the
    validation of the `X-pimcore-csrf-token` anti-CSRF token.



    [1]: https://packagist.org/packages/pimcore/pimcore#v5.3.0
  affected_package: pimcore/pimcore
  vulnerable_versions:
  - "<5.3.0"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2018-14057
  cwe:
  - CWE-352
  disclosed_date: 2018-08-17
  created_date: 2018-08-19
  last_modified_date: 2018-08-19
  credit:
  - Unknown
  references:
  - http://seclists.org/fulldisclosure/2018/Aug/13
  - https://packetstormsecurity.com/files/148954/Pimcore-5.2.3-CSRF-Cross-Site-Scripting-SQL-Injection.html
  source_url: https://snyk.io/vuln/SNYK-PHP-PIMCOREPIMCORE-72271
