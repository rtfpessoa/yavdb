---
- id: ossindex:packagist:tinymce/tinymce:348427
  title: '[CVE-2011-4825]  Improper Control of Generation of Code ("Code Injection")'
  description: Static code injection vulnerability in inc/function.base.php in Ajax
    File and Image Manager before 1.1, as used in tinymce before 1.4.2, phpMyFAQ 2.6
    before 2.6.19 and 2.7 before 2.7.1, and possibly other products, allows remote
    attackers to inject arbitrary PHP code into data.php via crafted parameters.
  affected_package: tinymce/tinymce
  vulnerable_versions:
  - "<1.4.2"
  package_manager: packagist
  cve:
  - CVE-2011-4825
  disclosed_date: 2011-12-15
  created_date: 2011-12-15
  last_modified_date: 2017-01-12
  credit:
  - OSSIndex
  references:
  - http://www.exploit-db.com/exploits/18075
  - http://www.phpletter.com/en/DOWNLOAD/1/
  - http://www.phpmyfaq.de/advisory_2011-10-25.php
  - http://www.securityfocus.com/bid/50523
  - http://www.zenphoto.org/trac/ticket/2005
  source_url: https://ossindex.net/resource/package/8397648193/vulnerabilities
- id: ossindex:packagist:tinymce/tinymce:352354
  title: "[CVE-2012-4230]  Permissions, Privileges, and Access Controls"
  description: The bbcode plugin in TinyMCE 3.5.8 does not properly enforce the TinyMCE
    security policy for the (1) encoding directive and (2) valid_elements attribute,
    which allows attackers to conduct cross-site scripting (XSS) attacks via application-specific
    vectors, as demonstrated using a textarea element.
  affected_package: tinymce/tinymce
  vulnerable_versions:
  - 3.5.8
  package_manager: packagist
  cve:
  - CVE-2012-4230
  disclosed_date: 2014-04-25
  created_date: 2014-04-25
  last_modified_date: 2017-01-12
  credit:
  - OSSIndex
  references:
  - http://osvdb.org/91130
  - http://packetstormsecurity.com/files/120750/TinyMCE-3.5.8-Cross-Site-Scripting.html
  - http://seclists.org/fulldisclosure/2013/Mar/114
  - http://www.madirish.net/554
  - http://www.securityfocus.com/bid/58424
  - http://xforce.iss.net/xforce/xfdb/82744
  - https://exchange.xforce.ibmcloud.com/vulnerabilities/82744
  source_url: https://ossindex.net/resource/package/8397648193/vulnerabilities
- id: ossindex:packagist:tinymce/tinymce:8398938546
  title: "[Unconfirmed] Possible XSS Vulnerability"
  description: An XSS vulnerability was identified and subsequently marked as fixed
    by the TinyMCE team. Details of the fix are not currently available.
  affected_package: tinymce/tinymce
  vulnerable_versions:
  - "<4.2.5"
  package_manager: packagist
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 2017-01-12
  credit:
  - OSSIndex
  references:
  - https://github.com/tinymce/tinymce/issues/2356
  source_url: https://ossindex.net/resource/package/8397648193/vulnerabilities
- id: ossindex:packagist:tinymce/tinymce:8398938550
  title: "[Unconfirmed] XSS vulnerability"
  description: An XSS vulnerability was identified, related to the use of iframes.
    It was subsequently accepted and fixed by the TinyMCE team. Details of the fix
    are not currently available.
  affected_package: tinymce/tinymce
  vulnerable_versions:
  - "<4.1.10"
  package_manager: packagist
  disclosed_date: 2016-05-16
  created_date: 2016-05-16
  last_modified_date: 2017-01-12
  credit:
  - OSSIndex
  references:
  - https://en.wikipedia.org/wiki/Self-XSS
  - https://github.com/tinymce/tinymce/issues/2132
  source_url: https://ossindex.net/resource/package/8397648193/vulnerabilities
- id: ossindex:packagist:tinymce/tinymce:8398938551
  title: "[Unconfirmed] Possible Denial of Service (DOS)"
  description: It's possible to generate arbitrary-sized responses using the compressor
    by appending plugins (languages, themes, files) multiple times, up to a limit
    imposed by the URL length.
  affected_package: tinymce/tinymce
  vulnerable_versions:
  - "<4.0.22"
  package_manager: packagist
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 2017-01-12
  credit:
  - OSSIndex
  references:
  - https://github.com/tinymce/tinymce/issues/1605
  - https://github.com/tinymce/tinymce_compressor/pull/7
  - https://github.com/tinymce/tinymce_compressor/pull/7/commits/c4118c8d71d3db2e42fa0c1743d94b8fb35c7745
  source_url: https://ossindex.net/resource/package/8397648193/vulnerabilities
- id: ossindex:packagist:tinymce/tinymce:8402397894
  title: target='_blank' vulnerability
  description: Some phishing attacks can be enabled by having target="_blank" links
    without an associated rel="noopener"
  affected_package: tinymce/tinymce
  vulnerable_versions:
  - "<4.5.0"
  package_manager: packagist
  disclosed_date: 2017-02-11
  created_date: 2017-02-11
  last_modified_date: 2017-02-14
  credit:
  - OSSIndex
  references:
  - https://dev.to/ben/the-targetblank-vulnerability-by-example
  - https://github.com/tinymce/tinymce/issues/3177
  - https://www.tinymce.com/docs/configure/content-filtering/#allow_unsafe_link_target
  source_url: https://ossindex.net/resource/package/8397648193/vulnerabilities
- id: snykio:packagist:tinymce/tinymce:568935
  title: Cross-site Scripting (XSS)
  description: |+
    [tinymce/tinymce][1] is a web based JavaScript HTML WYSIWYG editor
    control.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) via the `media` plugin.



    [1]: http://www.tinymce.com/
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: tinymce/tinymce
  vulnerable_versions:
  - "<4.9.10"
  - ">=5.0.0  <5.2.2"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2019-1010091
  cwe:
  - CWE-79
  disclosed_date: 2020-05-12
  created_date: 2020-05-12
  last_modified_date: 2020-05-12
  credit:
  - Michal Bentkowski
  references:
  - https://www.tiny.cloud/docs/release-notes/release-notes522/#securityfixes
  source_url: https://snyk.io/vuln/SNYK-PHP-TINYMCETINYMCE-568935
- id: snykio:packagist:tinymce/tinymce:568937
  title: Cross-site Scripting (XSS)
  description: |+
    [tinymce/tinymce][1] is a web based JavaScript HTML WYSIWYG editor
    control.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) in the core parser, paste and `visualchars` plugins. The
    vulnerability allowed arbitrary JavaScript execution when inserting a
    specially crafted piece of content into the editor via the clipboard or
    APIs.



    [1]: http://www.tinymce.com/
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: tinymce/tinymce
  vulnerable_versions:
  - "<4.9.7"
  - ">=5.0.0  <5.1.4"
  severity: high
  package_manager: packagist
  cwe:
  - CWE-79
  disclosed_date: 2020-01-30
  created_date: 2020-01-31
  last_modified_date: 2020-01-31
  credit:
  - Michal Bentkowski
  references:
  - https://github.com/tinymce/tinymce/commit/425a859780fd7d839593c57636e9ba3473e79a12
  - https://github.com/tinymce/tinymce/commit/67e52b815cf575498cab127dbf7f1899216d819f
  - https://github.com/tinymce/tinymce/commit/b9576c8681d6f715623e6a1f403e5aca8d27cbe0
  - https://github.com/tinymce/tinymce/security/advisories/GHSA-27gm-ghr9-4v95
  source_url: https://snyk.io/vuln/SNYK-PHP-TINYMCETINYMCE-568937
