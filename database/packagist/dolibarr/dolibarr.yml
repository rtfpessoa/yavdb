---
- id: snykio:packagist:dolibarr/dolibarr:173765
  title: Cross-site Scripting (XSS)
  description: |+
    [dolibarr/dolibarr][1] is a modern and easy to use web software to
    manage your business.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) via the comments parameter, or a public or private note. When
    editing a billing at
    `/expensereport/card.php?id=$id_integer&action=editline&rowid=$rowid_integer`,
    the POST parameters fail to properly sanitise the parameters due to the
    application using a recursive call to an `eregi()` or a `preg_match()`
    regex to determine the legitimacy of the query being processed. This
    means the string parameters \"comments\" and the public and private note
    can be abused to store an XSS.



    [1]: https://packagist.org/packages/dolibarr/dolibarr
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: dolibarr/dolibarr
  vulnerable_versions:
  - ">=3.8.0  <7.0.1"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2018-16808
  cwe:
  - CWE-79
  disclosed_date: 2019-03-07
  created_date: 2019-03-10
  last_modified_date: 2019-03-10
  credit:
  - chqrly from DIGITEMIS CYBERSECURITY and PRIVACY.
  - Erwan Robin
  - Romain Koszyk
  references:
  - https://github.com/Dolibarr/dolibarr/issues/9449
  source_url: https://snyk.io/vuln/SNYK-PHP-DOLIBARRDOLIBARR-173765
- id: snykio:packagist:dolibarr/dolibarr:173766
  title: SQL Injection
  description: |
    [dolibarr/dolibarr][1] is a modern and easy to use web software to
    manage your business.

    Affected versions of this package are vulnerable to SQL Injection via
    the integer parameters `qty` and `value_unit`. When editing a billing at
    `/expensereport/card.phpid=$id_integer&action=editline&rowid=$rowid_integer`,
    the POST parameters fail to properly sanitise the parameters due to the
    application using a recursive call to an `eregi()` or a `preg_match()`
    regex to determine the legitimacy of the query being processed. This
    allows the integer parameters `qty`, `value_unit` to be abused
    efficiently.



    [1]: https://packagist.org/packages/dolibarr/dolibarr
  affected_package: dolibarr/dolibarr
  vulnerable_versions:
  - ">=3.8.0  <7.0.1"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2018-16809
  cwe:
  - CWE-89
  disclosed_date: 2019-03-07
  created_date: 2019-03-07
  last_modified_date: 2019-03-07
  credit:
  - chqrly from DIGITEMIS CYBERSECURITY and PRIVACY.
  - Erwan Robin
  - Romain Koszyk
  references:
  - https://github.com/Dolibarr/dolibarr/issues/9449
  source_url: https://snyk.io/vuln/SNYK-PHP-DOLIBARRDOLIBARR-173766
- id: snykio:packagist:dolibarr/dolibarr:451606
  title: Cross-site Scripting (XSS)
  description: |+
    [dolibarr/dolibarr][1] is a modern and easy to use web software to
    manage your business.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). An attacker is able to steal a users\' cookie via a specially
    crafted link.



    [1]: https://packagist.org/packages/dolibarr/dolibarr
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: dolibarr/dolibarr
  vulnerable_versions:
  - ">6.0.3  <=6.0.4"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2019-1010016
  cwe:
  - CWE-79
  disclosed_date: 2019-07-15
  created_date: 2019-07-16
  last_modified_date: 2019-07-16
  credit:
  - Unknown
  references:
  - https://github.com/Dolibarr/dolibarr/issues/7962
  source_url: https://snyk.io/vuln/SNYK-PHP-DOLIBARRDOLIBARR-451606
- id: snykio:packagist:dolibarr/dolibarr:459397
  title: Cross-site Scripting (XSS)
  description: |+
    [dolibarr/dolibarr][1] is a modern and easy to use web software to
    manage your business.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). A user can store an `IFRAME` element (containing a
    `user/card.php` CSRF request) in his Linked Files settings page. When
    visited by the admin, this could completely take over the admin account.
    (The protection mechanism for CSRF is to check the `Referer` header;
    however, because the attack is from one of the application\'s own
    settings pages, this mechanism is bypassed.)



    [1]: https://packagist.org/packages/dolibarr/dolibarr
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: dolibarr/dolibarr
  vulnerable_versions:
  - "<10.0.2"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2019-15062
  cwe:
  - CWE-79
  disclosed_date: 2019-08-14
  created_date: 2019-09-16
  last_modified_date: 2019-09-16
  credit:
  - Gaurav Narwani
  references:
  - https://github.com/Dolibarr/dolibarr/commit/d21e5571007d2052a6b5f80a67b6f4cac693584a
  - https://github.com/Dolibarr/dolibarr/issues/11671
  source_url: https://snyk.io/vuln/SNYK-PHP-DOLIBARRDOLIBARR-459397
- id: snykio:packagist:dolibarr/dolibarr:467109
  title: Cross-site Scripting (XSS)
  description: |+
    [dolibarr/dolibarr][1] is a modern and easy to use web software to
    manage your business.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). The value of the User-Agent HTTP header is copied into the HTML
    document as plain text between tags when sending a request to
    `htdocs/societe/card.php`, leading to Cross-site Scripting (XSS).



    [1]: https://packagist.org/packages/dolibarr/dolibarr
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: dolibarr/dolibarr
  vulnerable_versions:
  - "<10.0.2"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2019-16197
  cwe:
  - CWE-79
  disclosed_date: 2019-09-16
  created_date: 2019-09-16
  last_modified_date: 2019-09-16
  credit:
  - Unknown
  references:
  - http://packetstormsecurity.com/files/154481/Dolibarr-ERP-CRM-10.0.1-Cross-Site-Scripting.html
  - https://github.com/Dolibarr/dolibarr/commit/cabbdfc650a1f2b4f0fe04bf29bab0b3cfc2ee63
  - https://www.exploit-db.com/exploits/47384
  source_url: https://snyk.io/vuln/SNYK-PHP-DOLIBARRDOLIBARR-467109
- id: snykio:packagist:dolibarr/dolibarr:473217
  title: Cross-site Scripting (XSS)
  description: |+
    [dolibarr/dolibarr][1] is a modern and easy to use web software to
    manage your business.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) via the `user/note.php` field. Due to improper input validation,
    an attacker could inject HTML code and store it in the application.



    [1]: https://packagist.org/packages/dolibarr/dolibarr
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: dolibarr/dolibarr
  vulnerable_versions:
  - "<11.0.1"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2019-17223
  cwe:
  - CWE-79
  disclosed_date: 2019-10-15
  created_date: 2019-10-16
  last_modified_date: 2019-10-16
  credit:
  - Joao Zietolie Ciconet
  references:
  - https://github.com/Dolibarr/dolibarr/commit/c7736dde41826ac6eca3e838e57eab2f0304e256
  - https://medium.com/@k43p/cve-2019-17223-stored-html-injection-dolibarr-crm-erp-ad1e064d0ca5
  source_url: https://snyk.io/vuln/SNYK-PHP-DOLIBARRDOLIBARR-473217
- id: snykio:packagist:dolibarr/dolibarr:473702
  title: Cross-site Scripting (XSS)
  description: |+
    [dolibarr/dolibarr][1] is a modern and easy to use web software to
    manage your business.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). It is possible to inject malicious JavaScript via the `outgoing
    email setup` feature in the `/admin/mails.php?action=edit` URI via the
    `Send all emails to (instead of real recipients, for test purposes)`
    field.



    [1]: https://packagist.org/packages/dolibarr/dolibarr
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: dolibarr/dolibarr
  vulnerable_versions:
  - "<10.0.3"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2019-17576
  cwe:
  - CWE-79
  disclosed_date: 2019-10-16
  created_date: 2019-10-16
  last_modified_date: 2019-10-16
  credit:
  - Truy Cap Ho So
  references:
  - https://mycvee.blogspot.com/p/blog-page.html
  source_url: https://snyk.io/vuln/SNYK-PHP-DOLIBARRDOLIBARR-473702
- id: snykio:packagist:dolibarr/dolibarr:473703
  title: Cross-site Scripting (XSS)
  description: |+
    [dolibarr/dolibarr][1] is a modern and easy to use web software to
    manage your business.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). It is possible to insert malicious JavaScript via the `outgoing
    email setup` feature in the `admin/mails.php?action=edit URI` via the
    `Email used for error returns emails (fields 'Errors-To' in emails
    sent)` field.



    [1]: https://packagist.org/packages/dolibarr/dolibarr
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: dolibarr/dolibarr
  vulnerable_versions:
  - "<10.0.3"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2019-17577
  cwe:
  - CWE-79
  disclosed_date: 2019-10-16
  created_date: 2019-10-16
  last_modified_date: 2019-10-16
  credit:
  - Truy Cap Ho So
  references:
  - https://mycvee.blogspot.com/p/cve-2019-17576.html
  source_url: https://snyk.io/vuln/SNYK-PHP-DOLIBARRDOLIBARR-473703
- id: snykio:packagist:dolibarr/dolibarr:473704
  title: Cross-site Scripting (XSS)
  description: |+
    [dolibarr/dolibarr][1] is a modern and easy to use web software to
    manage your business.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). It is possible to inject JavaScript via the `outgoing email
    setup` feature in the `admin/mails.php?action=edit` URI via the `Sender
    email for automatic emails (default value in php.ini: Undefined)` field.



    [1]: https://packagist.org/packages/dolibarr/dolibarr
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: dolibarr/dolibarr
  vulnerable_versions:
  - "<10.0.3"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2019-17578
  cwe:
  - CWE-79
  disclosed_date: 2019-10-16
  created_date: 2019-10-16
  last_modified_date: 2019-10-16
  credit:
  - Truy Cap Ho So
  references:
  - https://mycvee.blogspot.com/p/cve-2019-17578.html
  source_url: https://snyk.io/vuln/SNYK-PHP-DOLIBARRDOLIBARR-473704
- id: snykio:packagist:dolibarr/dolibarr:535629
  title: Cross-site Scripting (XSS)
  description: |+
    [dolibarr/dolibarr][1] is a modern and easy to use web software to
    manage your business.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) due to JavaScript execution in an SVG image for a profile picture
    (through `viewimage.php?file=`).



    [1]: https://packagist.org/packages/dolibarr/dolibarr
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: dolibarr/dolibarr
  vulnerable_versions:
  - ">=0.0.0"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2019-19206
  cwe:
  - CWE-79
  disclosed_date: 2019-11-22
  created_date: 2019-11-26
  last_modified_date: 2019-11-26
  credit:
  - Unknown
  references:
  - https://medium.com/@k43p/cve-2019-19206-stored-xss-due-to-javascript-execution-in-an-svg-file-ee1d038fba76
  source_url: https://snyk.io/vuln/SNYK-PHP-DOLIBARRDOLIBARR-535629
- id: snykio:packagist:dolibarr/dolibarr:543481
  title: Cross-site Scripting (XSS)
  description: |
    [dolibarr/dolibarr][1] is a modern and easy to use web software to
    manage your business.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). Multiple cross-site scripting (XSS) vulnerabilities existwhich
    allow remote attackers to inject arbitrary web script or HTML via:

    * `label[libelle]` parameter to the `/htdocs/admin/dict.php?id=3` page;
    * `name[constname]` parameter to the
      `/htdocs/admin/const.php?mainmenu=home` page
    * `note[note]` parameter to the `/htdocs/admin/dict.php?id=10` page
    * `zip[MAIN_INFO_SOCIETE_ZIP]` or `email[mail] paramete`r to the
      `/htdocs/admin/company.php` page
    * `url[defaulturl]`, `field[defaultkey]`, or`value[defaultvalue]`
      parameter to the `/htdocs/admin/defaultvalues.php page`
    * key\[transkey\] or key\[transvalue\] parameter to the
      `/htdocs/admin/translation.php` page
    * `[main_motd]` or `[main_home]` parameter to the
      `/htdocs/admin/ihm.php` page.
      ## Details   {#details}

    A cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.



    [1]: https://packagist.org/packages/dolibarr/dolibarr
  affected_package: dolibarr/dolibarr
  vulnerable_versions:
  - "<11.0.1"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2020-7994
  cwe:
  - CWE-79
  disclosed_date: 2020-01-27
  created_date: 2020-01-27
  last_modified_date: 2020-01-27
  credit:
  - tufangungor
  references:
  - https://github.com/Dolibarr/dolibarr/commit/967d97ccd74935a65db7d04cbc6d5a8b1012dd28
  - https://github.com/Dolibarr/dolibarr/releases/tag/11.0.1
  - https://github.com/tufangungor/tufangungor.github.io/blob/master/0days.md
  source_url: https://snyk.io/vuln/SNYK-PHP-DOLIBARRDOLIBARR-543481
- id: snykio:packagist:dolibarr/dolibarr:543482
  title: Cross-site Scripting (XSS)
  description: |+
    [dolibarr/dolibarr][1] is a modern and easy to use web software to
    manage your business.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). Special characters provided as part of the Referer HTTP header.
    is reflected within `htdocs/user/passwordforgotten.php`.



    [1]: https://packagist.org/packages/dolibarr/dolibarr
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: dolibarr/dolibarr
  vulnerable_versions:
  - "<11.0.1"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2020-7996
  cwe:
  - CWE-79
  disclosed_date: 2020-01-27
  created_date: 2020-01-27
  last_modified_date: 2020-01-27
  credit:
  - tufangungor
  references:
  - https://github.com/Dolibarr/dolibarr/commit/075b1ea7443d9dd17b5bfd5c0e8da160c88307ad
  - https://github.com/Dolibarr/dolibarr/releases/tag/11.0.1
  - https://github.com/tufangungor/tufangungor.github.io/blob/master/_posts/2020-01-19-dolibarr-10.0.6-xss-in-http-header.md
  source_url: https://snyk.io/vuln/SNYK-PHP-DOLIBARRDOLIBARR-543482
- id: snykio:packagist:dolibarr/dolibarr:548896
  title: Cross-site Scripting (XSS)
  description: |+
    [dolibarr/dolibarr][1] is a modern and easy to use web software to
    manage your business.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) via the `joinfiles`, `topic`, or `code` parameter, or the HTTP
    Referrer header.



    [1]: https://packagist.org/packages/dolibarr/dolibarr
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: dolibarr/dolibarr
  vulnerable_versions:
  - ">=0.0.0"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2020-9016
  cwe:
  - CWE-89
  disclosed_date: 2020-02-16
  created_date: 2020-02-17
  last_modified_date: 2020-02-17
  credit:
  - Unknown
  references:
  - https://code610.blogspot.com/2020/02/this-time-i-tried-to-check-one-of.html
  source_url: https://snyk.io/vuln/SNYK-PHP-DOLIBARRDOLIBARR-548896
- id: snykio:packagist:dolibarr/dolibarr:560378
  title: Cross-site Scripting (XSS)
  description: |
    [dolibarr/dolibarr][1] is a modern and easy to use web software to
    manage your business.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). Uploaded HTML documents are served as `text/html` despite being
    renamed to `.noexe` files.



    [1]: https://packagist.org/packages/dolibarr/dolibarr
  affected_package: dolibarr/dolibarr
  vulnerable_versions:
  - "<10.0.3"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2019-19210
  cwe:
  - CWE-94
  disclosed_date: 2020-03-16
  created_date: 2020-03-16
  last_modified_date: 2020-03-16
  credit:
  - Daniel Hoffmann of usd AG
  references:
  - https://herolab.usd.de/security-advisories/usd-2019-0052/
  - https://www.dolibarr.org/forum/dolibarr-changelogs
  source_url: https://snyk.io/vuln/SNYK-PHP-DOLIBARRDOLIBARR-560378
- id: snykio:packagist:dolibarr/dolibarr:560379
  title: Cross-site Scripting (XSS)
  description: |+
    [dolibarr/dolibarr][1] is a modern and easy to use web software to
    manage your business.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). Multiple vulnerabilites due to insufficent filtering of the HTTP
    Header `Accept-Language`. The unfiltered, but modified, variable
    `$langs->defaultlang` gets used in multiple locations. This leads to XSS
    and SQL injection.



    [1]: https://packagist.org/packages/dolibarr/dolibarr
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: dolibarr/dolibarr
  vulnerable_versions:
  - "<10.0.3"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2019-19209
  cwe:
  - CWE-94
  disclosed_date: 2020-03-16
  created_date: 2020-03-16
  last_modified_date: 2020-03-16
  credit:
  - Daniel Hoffmann of usd AG
  references:
  - https://herolab.usd.de/security-advisories/usd-2019-0051/
  - https://www.dolibarr.org/forum/dolibarr-changelogs
  source_url: https://snyk.io/vuln/SNYK-PHP-DOLIBARRDOLIBARR-560379
- id: snykio:packagist:dolibarr/dolibarr:560380
  title: Cross-site Scripting (XSS)
  description: |+
    [dolibarr/dolibarr][1] is a modern and easy to use web software to
    manage your business.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). Insufficient Filtering issue can lead to `user/card.php` XSS.



    [1]: https://packagist.org/packages/dolibarr/dolibarr
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: dolibarr/dolibarr
  vulnerable_versions:
  - "<10.0.4"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2019-19211
  cwe:
  - CWE-94
  disclosed_date: 2020-03-16
  created_date: 2020-03-16
  last_modified_date: 2020-03-16
  credit:
  - Daniel Hoffmann of usd AG
  references:
  - https://herolab.usd.de/en/security-advisories/usd-2019-0053/
  - https://www.dolibarr.org/forum/dolibarr-changelogs
  source_url: https://snyk.io/vuln/SNYK-PHP-DOLIBARRDOLIBARR-560380
- id: snykio:packagist:dolibarr/dolibarr:560383
  title: SQL Injection
  description: |
    [dolibarr/dolibarr][1] is a modern and easy to use web software to
    manage your business.

    Affected versions of this package are vulnerable to SQL Injection via
    the qty parameter to product/fournisseurs.php (product price screen).



    [1]: https://packagist.org/packages/dolibarr/dolibarr
  affected_package: dolibarr/dolibarr
  vulnerable_versions:
  - "<10.0.3"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2019-19212
  cwe:
  - CWE-89
  disclosed_date: 2020-02-05
  created_date: 2020-03-16
  last_modified_date: 2020-03-16
  credit:
  - Daniel Hoffmann of usd AG
  references:
  - https://github.com/Dolibarr/dolibarr/commit/6431e8e16d8ca778d222097a51c927a0526c8101
  - https://herolab.usd.de/security-advisories/usd-2019-0054/
  source_url: https://snyk.io/vuln/SNYK-PHP-DOLIBARRDOLIBARR-560383
- id: snykio:packagist:dolibarr/dolibarr:565917
  title: Cross-site Scripting (XSS)
  description: |+
    [dolibarr/dolibarr][1] is a modern and easy to use web software to
    manage your business.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). A stored XSS vulnerability exists in dmin tools audit page which
    can be triggered when the `USER_LOGIN_FAILED` feature is active. This
    may lead to theft of an admin account.

    ### PoC   {#poc}

        <object data="data:text/html;base64,PHN2Zy9vbmxvYWQ9YWxlcnQoZG9jdW1lbnQuZG9tYWluKT4="></object>



    [1]: https://packagist.org/packages/dolibarr/dolibarr
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: dolibarr/dolibarr
  vulnerable_versions:
  - ">=10.0.6"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2020-11823
  cwe:
  - CWE-79
  disclosed_date: 2020-04-16
  created_date: 2020-04-16
  last_modified_date: 2020-04-16
  credit:
  - fatihhcelik
  references:
  - https://fatihhcelik.blogspot.com/2020/04/dolibarr-stored-xss.html
  source_url: https://snyk.io/vuln/SNYK-PHP-DOLIBARRDOLIBARR-565917
- id: snykio:packagist:dolibarr/dolibarr:565918
  title: Cross-site Request Forgery (CSRF)
  description: |
    [dolibarr/dolibarr][1] is a modern and easy to use web software to
    manage your business.

    Affected versions of this package are vulnerable to Cross-site Request
    Forgery (CSRF). Due to any CSRF token in any user\'s session can be used
    in another user\'s session. CSRF tokens should not be valid in this
    situation.



    [1]: https://packagist.org/packages/dolibarr/dolibarr
  affected_package: dolibarr/dolibarr
  vulnerable_versions:
  - ">=10.0.6"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2020-11825
  cwe:
  - CWE-352
  disclosed_date: 2020-04-16
  created_date: 2020-04-16
  last_modified_date: 2020-04-16
  credit:
  - fatihhcelik
  references:
  - https://fatihhcelik.blogspot.com/2020/04/dolibarr-csrf.html
  source_url: https://snyk.io/vuln/SNYK-PHP-DOLIBARRDOLIBARR-565918
- id: snykio:packagist:dolibarr/dolibarr:568465
  title: Improper Access Control
  description: |
    [dolibarr/dolibarr][1] is a modern and easy to use web software to
    manage your business.

    Affected versions of this package are vulnerable to Improper Access
    Control. `core/get_menudiv.php` allows remote authenticated attackers to
    bypass intended access restrictions via a non-alphanumeric menu
    parameter.



    [1]: https://packagist.org/packages/dolibarr/dolibarr
  affected_package: dolibarr/dolibarr
  vulnerable_versions:
  - "<11.0.4"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2020-12669
  cwe:
  - CWE-284
  disclosed_date: 2020-05-06
  created_date: 2020-05-06
  last_modified_date: 2020-05-06
  credit:
  - Unknown
  references:
  - https://github.com/Dolibarr/dolibarr/commit/c1b530f58f6f01081ddbeaa2092ef308c3ec2727
  - https://sourceforge.net/projects/dolibarr/files/Dolibarr%20ERP-CRM/11.0.4/
  source_url: https://snyk.io/vuln/SNYK-PHP-DOLIBARRDOLIBARR-568465
- id: snykio:packagist:dolibarr/dolibarr:569621
  title: Cross-site Scripting (XSS)
  description: |+
    [dolibarr/dolibarr][1] is a modern and easy to use web software to
    manage your business.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). It is possible to inject JavaScript code to the `host`, `slave`,
    `port` parameters through `/dolibarr/admin/ldap.php?action=setvalue`.



    [1]: https://packagist.org/packages/dolibarr/dolibarr
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: dolibarr/dolibarr
  vulnerable_versions:
  - "<11.0.4"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2020-13094
  cwe:
  - CWE-79
  disclosed_date: 2020-05-18
  created_date: 2020-05-18
  last_modified_date: 2020-05-18
  credit:
  - Unknown
  references:
  - https://github.com/Dolibarr/dolibarr/blob/11.0.4/ChangeLog
  - https://github.com/Dolibarr/dolibarr/commit/53ceef5b6ae352758d9fc6aa39527bd07efd4f14
  - https://packetstormsecurity.com/files/157752/Dolibarr-11.0.3-Cross-Site-Scripting.html
  source_url: https://snyk.io/vuln/SNYK-PHP-DOLIBARRDOLIBARR-569621
- id: snykio:packagist:dolibarr/dolibarr:570054
  title: Arbitrary File Upload
  description: |
    [dolibarr/dolibarr][1] is a modern and easy to use web software to
    manage your business.

    Affected versions of this package are vulnerable to Arbitrary File
    Upload. Users with the \'Setup documents directories\' permission can
    rename uploaded files to have insecure file extensions. This bypasses
    the .noexe protection mechanism against XSS.



    [1]: https://packagist.org/packages/dolibarr/dolibarr
  affected_package: dolibarr/dolibarr
  vulnerable_versions:
  - ">=0.0.0"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2020-13240
  cwe:
  - CWE-434
  disclosed_date: 2020-05-21
  created_date: 2020-05-21
  last_modified_date: 2020-05-21
  credit:
  - Unknown
  references:
  - https://www.dubget.com/stored-xss-via-file-upload.html
  source_url: https://snyk.io/vuln/SNYK-PHP-DOLIBARRDOLIBARR-570054
- id: snykio:packagist:dolibarr/dolibarr:570055
  title: Cross-site Scripting (XSS)
  description: |+
    [dolibarr/dolibarr][1] is a modern and easy to use web software to
    manage your business.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). The module renders user-uploaded html files in the browser when
    the attachment parameter is removed from the direct download link.



    [1]: https://packagist.org/packages/dolibarr/dolibarr
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: dolibarr/dolibarr
  vulnerable_versions:
  - ">=0.0.0"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2020-13239
  cwe:
  - CWE-79
  disclosed_date: 2020-05-21
  created_date: 2020-05-21
  last_modified_date: 2020-05-21
  credit:
  - Unknown
  references:
  - https://www.dubget.com/stored-xss-via-file-upload.html
  source_url: https://snyk.io/vuln/SNYK-PHP-DOLIBARRDOLIBARR-570055
- id: snykio:packagist:dolibarr/dolibarr:572765
  title: SQL Injection
  description: |
    [dolibarr/dolibarr][1] is a modern and easy to use web software to
    manage your business.

    Affected versions of this package are vulnerable to SQL Injection. It is
    a boolean-based blind SQL injection vulnerability in
    `accountancy/customer/card.php` which allows remote authenticated users
    to execute arbitrary SQL commands via the `id` parameter.



    [1]: https://packagist.org/packages/dolibarr/dolibarr
  affected_package: dolibarr/dolibarr
  vulnerable_versions:
  - "<12.0.0"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2020-14443
  cwe:
  - CWE-89
  disclosed_date: 2020-06-19
  created_date: 2020-06-19
  last_modified_date: 2020-06-19
  credit:
  - Christian Weiler
  references:
  - https://github.com/Dolibarr/dolibarr/commit/40e16672e3aa4e9208ea7a4829f30507dcdfc4ba
  source_url: https://snyk.io/vuln/SNYK-PHP-DOLIBARRDOLIBARR-572765
- id: snykio:packagist:dolibarr/dolibarr:572910
  title: Cross-site Scripting (XSS)
  description: |+
    [dolibarr/dolibarr][1] is a modern and easy to use web software to
    manage your business.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). Remote attackers can inject arbitrary web script or HTML into
    `public/notice.php` (related to `transphrase` and `transkey`).



    [1]: https://packagist.org/packages/dolibarr/dolibarr
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: dolibarr/dolibarr
  vulnerable_versions:
  - "<12.0.0"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2020-14475
  cwe:
  - CWE-79
  disclosed_date: 2020-06-21
  created_date: 2020-06-21
  last_modified_date: 2020-06-21
  credit:
  - Unknown
  references:
  - https://github.com/Dolibarr/dolibarr/commit/22ca5e067189bffe8066df26df923a386f044c08
  source_url: https://snyk.io/vuln/SNYK-PHP-DOLIBARRDOLIBARR-572910
- id: snykio:packagist:dolibarr/dolibarr:597085
  title: Improper Input Validation
  description: |
    [dolibarr/dolibarr][1] is a modern and easy to use web software to
    manage your business.

    Affected versions of this package are vulnerable to Improper Input
    Validation. It provides a web-based functionality that backs up the
    database content to a dump file. However, the application performs
    insufficient checks on the export parameters to `mysqldump`, which can
    lead to execution of arbitrary binaries on the server. (Malicious
    binaries can be uploaded by abusing other functionalities of the
    application.)



    [1]: https://packagist.org/packages/dolibarr/dolibarr
  affected_package: dolibarr/dolibarr
  vulnerable_versions:
  - "<9.0.3"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2019-11200
  cwe:
  - CWE-20
  disclosed_date: 2019-07-25
  created_date: 2020-07-31
  last_modified_date: 2020-07-31
  credit:
  - Priyank Nigam of Bishop Fox
  references:
  - https://know.bishopfox.com/advisories/dolibarr-version-9-0-1-vulnerabilities
  source_url: https://snyk.io/vuln/SNYK-PHP-DOLIBARRDOLIBARR-597085
- id: snykio:packagist:dolibarr/dolibarr:597086
  title: Arbitrary Code Injection
  description: |
    [dolibarr/dolibarr][1] is a modern and easy to use web software to
    manage your business.

    Affected versions of this package are vulnerable to Arbitrary Code
    Injection. It provides a module named website that provides for creation
    of public websites with a WYSIWYG editor. It was identified that the
    editor also allowed inclusion of dynamic code, which can lead to code
    execution on the host machine. An attacker has to check a setting on the
    same page, which specifies the inclusion of dynamic content. Thus, a
    lower privileged user of the application can execute code under the
    context and permissions of the underlying web server.



    [1]: https://packagist.org/packages/dolibarr/dolibarr
  affected_package: dolibarr/dolibarr
  vulnerable_versions:
  - "<9.0.3"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2019-11201
  cwe:
  - CWE-94
  disclosed_date: 2019-07-25
  created_date: 2020-07-31
  last_modified_date: 2020-07-31
  credit:
  - Priyank Nigam of Bishop Fox
  references:
  - https://know.bishopfox.com/advisories/dolibarr-version-9-0-1-vulnerabilities
  source_url: https://snyk.io/vuln/SNYK-PHP-DOLIBARRDOLIBARR-597086
- id: snykio:packagist:dolibarr/dolibarr:597087
  title: Cross-site Scripting (XSS)
  description: |+
    [dolibarr/dolibarr][1] is a modern and easy to use web software to
    manage your business.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). More specifically it is affected by stored XSS within uploaded
    files. These vulnerabilities allowed the execution of a JavaScript
    payload each time any regular user or administrative user clicked on the
    malicious link hosted on the same domain. The vulnerabilities could be
    exploited by low privileged users to target administrators. The
    viewimage.php page did not perform any contextual output encoding and
    would display the content within the uploaded file with a user-requested
    MIME type.



    [1]: https://packagist.org/packages/dolibarr/dolibarr
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: dolibarr/dolibarr
  vulnerable_versions:
  - "<9.0.3"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2019-11199
  cwe:
  - CWE-79
  disclosed_date: 2019-07-25
  created_date: 2020-07-31
  last_modified_date: 2020-07-31
  credit:
  - Priyank Nigam of Bishop Fox
  references:
  - https://know.bishopfox.com/advisories/dolibarr-version-9-0-1-vulnerabilities
  source_url: https://snyk.io/vuln/SNYK-PHP-DOLIBARRDOLIBARR-597087
- id: snykio:packagist:dolibarr/dolibarr:608306
  title: Privilege Escalation
  description: |
    [dolibarr/dolibarr][1] is a modern and easy to use web software to
    manage your business.

    Affected versions of this package are vulnerable to Privilege
    Escalation. It allows remote authenticated attackers to upload arbitrary
    files via `societe/document.php` in which \"disabled\" is changed to
    \"enabled\" in the HTML source code.



    [1]: https://packagist.org/packages/dolibarr/dolibarr
  affected_package: dolibarr/dolibarr
  vulnerable_versions:
  - "<11.0.5"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2020-14201
  cwe:
  - CWE-264
  disclosed_date: 2020-08-23
  created_date: 2020-08-23
  last_modified_date: 2020-08-23
  credit:
  - Krzysztof Bednarski
  references:
  - https://github.com/Dolibarr/dolibarr/blob/develop/ChangeLog
  - https://www.wizlynxgroup.com/security-research-advisories/vuln/WLX-2020-011
  source_url: https://snyk.io/vuln/SNYK-PHP-DOLIBARRDOLIBARR-608306
- id: snykio:packagist:dolibarr/dolibarr:72028
  title: Cross-site Scripting (XSS)
  description: |+
    [dolibarr/dolibarr][1] is a modern and easy to use web software to
    manage your business

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks.



    [1]: https://packagist.org/packages/dolibarr/dolibarr
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: dolibarr/dolibarr
  vulnerable_versions:
  - "<7.0.0"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2017-1000509
  cwe:
  - CWE-79
  disclosed_date: 2017-10-28
  created_date: 2018-02-18
  last_modified_date: 2018-02-18
  credit:
  - Sajeeb Asim Lohani
  references:
  - https://github.com/Dolibarr/dolibarr/issues/7727
  source_url: https://snyk.io/vuln/SNYK-PHP-DOLIBARRDOLIBARR-72028
- id: snykio:packagist:dolibarr/dolibarr:72123
  title: Cross-site Scripting (XSS)
  description: |+
    [dolibarr/dolibarr][1] is a modern and easy to use web software to
    manage your business.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks. It could allow remote authenticated attackers to inject
    arbitrary web script or HTML.



    [1]: https://packagist.org/packages/dolibarr/dolibarr
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: dolibarr/dolibarr
  vulnerable_versions:
  - "<5.0.4"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2017-9838
  cwe:
  - CWE-79
  disclosed_date: 2017-03-12
  created_date: 2018-04-16
  last_modified_date: 2018-04-16
  credit:
  - Unknown
  references:
  - https://nvd.nist.gov/vuln/detail/CVE-2017-9838
  - https://www.wizlynxgroup.com/security-research-advisories/vuln/WLX-2017-008
  source_url: https://snyk.io/vuln/SNYK-PHP-DOLIBARRDOLIBARR-72123
- id: snykio:packagist:dolibarr/dolibarr:72124
  title: SQL Injection
  description: |
    [dolibarr/dolibarr][1] is a modern and easy to use web software to
    manage your business.

    Affected versions of this package are vulnerable to SQL Injection via
    the `product/stats/card.php` parameter. It could allow remote
    authenticated attackers to inject arbitrary SQL code.



    [1]: https://packagist.org/packages/dolibarr/dolibarr
  affected_package: dolibarr/dolibarr
  vulnerable_versions:
  - "<5.0.4"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2017-9839
  cwe:
  - CWE-564
  disclosed_date: 2017-03-12
  created_date: 2018-04-16
  last_modified_date: 2018-04-16
  credit:
  - Unknown
  references:
  - https://nvd.nist.gov/vuln/detail/CVE-2017-9839
  - https://www.wizlynxgroup.com/security-research-advisories/vuln/WLX-2017-010
  source_url: https://snyk.io/vuln/SNYK-PHP-DOLIBARRDOLIBARR-72124
- id: snykio:packagist:dolibarr/dolibarr:72125
  title: SQL Injection
  description: |
    [dolibarr/dolibarr][1] is a modern and easy to use web software to
    manage your business.

    Affected versions of this package are vulnerable to SQL Injection
    attacks via the `comm/propal/list.php` (viewstatut parameter) or the
    `comm/propal/list.php` (propal\_statut parameter, aka search\_statut
    parameter).



    [1]: https://packagist.org/packages/dolibarr/dolibarr
  affected_package: dolibarr/dolibarr
  vulnerable_versions:
  - ">=0.0.0"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2017-18260
  cwe:
  - CWE-564
  disclosed_date: 2018-04-10
  created_date: 2018-04-17
  last_modified_date: 2018-04-17
  credit:
  - Unknown
  references:
  - https://nvd.nist.gov/vuln/detail/CVE-2017-18260
  source_url: https://snyk.io/vuln/SNYK-PHP-DOLIBARRDOLIBARR-72125
- id: snykio:packagist:dolibarr/dolibarr:72126
  title: Cross-site Scripting (XSS)
  description: |+
    [dolibarr/dolibarr][1] is a modern and easy to use web software to
    manage your business.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks. It could allow remote authenticated attackers to inject
    arbitrary web script or HTML.



    [1]: https://packagist.org/packages/dolibarr/dolibarr
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: dolibarr/dolibarr
  vulnerable_versions:
  - ">=0.0.0"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2017-18259
  cwe:
  - CWE-79
  disclosed_date: 2018-04-10
  created_date: 2018-04-17
  last_modified_date: 2018-04-17
  credit:
  - Unknown
  references:
  - https://nvd.nist.gov/vuln/detail/CVE-2017-18259
  source_url: https://snyk.io/vuln/SNYK-PHP-DOLIBARRDOLIBARR-72126
- id: snykio:packagist:dolibarr/dolibarr:72149
  title: SQL Injection
  description: |
    [dolibarr/dolibarr][1] is a modern and easy to use web software to
    manage your business.

    Affected versions of this package are vulnerable to SQL Injection. A
    remote attacker could execute arbitrary SQL commands via vectors
    involving integer parameters without quotes.



    [1]: https://packagist.org/packages/dolibarr/dolibarr
  affected_package: dolibarr/dolibarr
  vulnerable_versions:
  - "<7.0.2"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2018-10094
  cwe:
  - CWE-89
  disclosed_date: 2018-04-18
  created_date: 2018-05-23
  last_modified_date: 2018-05-23
  credit:
  - Unknown
  references:
  - https://github.com/Dolibarr/dolibarr/blob/7.0.2/ChangeLog
  - https://github.com/Dolibarr/dolibarr/commit/7ade4e37f24d6859987bb9f6232f604325633fdd
  source_url: https://snyk.io/vuln/SNYK-PHP-DOLIBARRDOLIBARR-72149
- id: snykio:packagist:dolibarr/dolibarr:72150
  title: Arbitrary Code Execution
  description: |
    [dolibarr/dolibarr][1] is a modern and easy to use web software to
    manage your business.

    Affected versions of this package are vulnerable to Arbitrary Code
    Execution. A malicious user could execute arbitrary commands by
    leveraging support for updating the antivirus command and parameters
    used to scan file uploads.



    [1]: https://packagist.org/packages/dolibarr/dolibarr
  affected_package: dolibarr/dolibarr
  vulnerable_versions:
  - "<7.0.2"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2018-10092
  cwe:
  - CWE-94
  disclosed_date: 2018-04-18
  created_date: 2018-05-23
  last_modified_date: 2018-05-23
  credit:
  - Unknown
  references:
  - https://github.com/Dolibarr/dolibarr/blob/7.0.2/ChangeLog
  - https://github.com/Dolibarr/dolibarr/commit/5d121b2d3ae2a95abebc9dc31e4782cbc61a1f39
  source_url: https://snyk.io/vuln/SNYK-PHP-DOLIBARRDOLIBARR-72150
- id: snykio:packagist:dolibarr/dolibarr:72151
  title: Cross-site Scripting (XSS)
  description: |+
    [dolibarr/dolibarr][1] is a modern and easy to use web software to
    manage your business.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks. A remote attacker could inject arbitrary web script or
    HTML via the `foruserlogin` parameter to `adherents/cartes/carte.php`.



    [1]: https://packagist.org/packages/dolibarr/dolibarr
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: dolibarr/dolibarr
  vulnerable_versions:
  - "<7.0.2"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2018-10095
  cwe:
  - CWE-79
  disclosed_date: 2018-04-18
  created_date: 2018-05-23
  last_modified_date: 2018-05-23
  credit:
  - Unknown
  references:
  - https://github.com/Dolibarr/dolibarr/blob/7.0.2/ChangeLog
  - https://github.com/Dolibarr/dolibarr/commit/1dc466e1fb687cfe647de4af891720419823ed56
  source_url: https://snyk.io/vuln/SNYK-PHP-DOLIBARRDOLIBARR-72151
- id: snykio:packagist:dolibarr/dolibarr:72234
  title: SQL Injection
  description: |
    [dolibarr/dolibarr][1] is a modern and easy to use web software to
    manage your business.

    Affected versions of this package are vulnerable to SQL Injection in
    `product/card.php` via the `statut_buy` parameter.



    [1]: https://packagist.org/packages/dolibarr/dolibarr
  affected_package: dolibarr/dolibarr
  vulnerable_versions:
  - "<7.0.4"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2018-13449
  cwe:
  - CWE-79
  disclosed_date: 2018-07-08
  created_date: 2018-07-23
  last_modified_date: 2018-07-23
  credit:
  - Unknown
  references:
  - https://github.com/Dolibarr/dolibarr/commit/36402c22eef49d60edd73a2f312f8e28fe0bd1cb
  source_url: https://snyk.io/vuln/SNYK-PHP-DOLIBARRDOLIBARR-72234
- id: snykio:packagist:dolibarr/dolibarr:72235
  title: SQL Injection
  description: |
    [dolibarr/dolibarr][1] is a modern and easy to use web software to
    manage your business.

    Affected versions of this package are vulnerable to SQL Injection in
    `product/card.php` via the `status_batch` parameter.



    [1]: https://packagist.org/packages/dolibarr/dolibarr
  affected_package: dolibarr/dolibarr
  vulnerable_versions:
  - "<7.0.4"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2018-13450
  cwe:
  - CWE-79
  disclosed_date: 2018-07-08
  created_date: 2018-07-23
  last_modified_date: 2018-07-23
  credit:
  - Unknown
  references:
  - https://github.com/Dolibarr/dolibarr/commit/36402c22eef49d60edd73a2f312f8e28fe0bd1cb
  source_url: https://snyk.io/vuln/SNYK-PHP-DOLIBARRDOLIBARR-72235
- id: snykio:packagist:dolibarr/dolibarr:72236
  title: SQL Injection
  description: |
    [dolibarr/dolibarr][1] is a modern and easy to use web software to
    manage your business.

    Affected versions of this package are vulnerable to SQL Injection in
    `product/card.php` via the `country_id` parameter.



    [1]: https://packagist.org/packages/dolibarr/dolibarr
  affected_package: dolibarr/dolibarr
  vulnerable_versions:
  - "<7.0.4"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2018-13448
  cwe:
  - CWE-89
  disclosed_date: 2018-07-08
  created_date: 2018-07-23
  last_modified_date: 2018-07-23
  credit:
  - Unknown
  references:
  - https://github.com/Dolibarr/dolibarr/commit/36402c22eef49d60edd73a2f312f8e28fe0bd1cb
  source_url: https://snyk.io/vuln/SNYK-PHP-DOLIBARRDOLIBARR-72236
- id: snykio:packagist:dolibarr/dolibarr:72237
  title: SQL Injection
  description: |
    [dolibarr/dolibarr][1] is a modern and easy to use web software to
    manage your business.

    Affected versions of this package are vulnerable to SQL Injection in
    `product/card.php` via the `statut` parameter.



    [1]: https://packagist.org/packages/dolibarr/dolibarr
  affected_package: dolibarr/dolibarr
  vulnerable_versions:
  - "<7.0.4"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2018-13447
  cwe:
  - CWE-89
  disclosed_date: 2018-07-08
  created_date: 2018-07-23
  last_modified_date: 2018-07-23
  credit:
  - Unknown
  references:
  - https://github.com/Dolibarr/dolibarr/commit/36402c22eef49d60edd73a2f312f8e28fe0bd1cb
  source_url: https://snyk.io/vuln/SNYK-PHP-DOLIBARRDOLIBARR-72237
- id: snykio:packagist:dolibarr/dolibarr:73619
  title: Cross-site Scripting (XSS)
  description: |+
    [dolibarr/dolibarr][1] is a modern and easy to use web software to
    manage your business.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). It allows remote attackers to inject arbitrary web script or HTML
    via the `transphrase` parameter to `public/notice.php`.



    [1]: https://packagist.org/packages/dolibarr/dolibarr
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: dolibarr/dolibarr
  vulnerable_versions:
  - "<8.0.4"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2018-19993
  cwe:
  - CWE-79
  disclosed_date: 2019-01-03
  created_date: 2019-01-06
  last_modified_date: 2019-01-06
  credit:
  - Unknown
  references:
  - https://github.com/Dolibarr/dolibarr/commit/fc3fcc5455d9a610b85723e89e8be43a41ad1378
  source_url: https://snyk.io/vuln/SNYK-PHP-DOLIBARRDOLIBARR-73619
- id: snykio:packagist:dolibarr/dolibarr:73620
  title: SQL Injection
  description: |
    [dolibarr/dolibarr][1] is a modern and easy to use web software to
    manage your business.

    Affected versions of this package are vulnerable to SQL Injection. A
    remote authenticated user could execute arbitrary SQL commands via the
    `desiredstock` parameter.



    [1]: https://packagist.org/packages/dolibarr/dolibarr
  affected_package: dolibarr/dolibarr
  vulnerable_versions:
  - "<8.0.4"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2018-19994
  cwe:
  - CWE-89
  disclosed_date: 2019-01-03
  created_date: 2019-01-06
  last_modified_date: 2019-01-06
  credit:
  - Unknown
  references:
  - https://github.com/Dolibarr/dolibarr/commit/850b939ffd2c7a4443649331b923d5e0da2d6446
  source_url: https://snyk.io/vuln/SNYK-PHP-DOLIBARRDOLIBARR-73620
- id: snykio:packagist:dolibarr/dolibarr:73621
  title: Cross-site Scripting (XSS)
  description: |+
    [dolibarr/dolibarr][1] is a modern and easy to use web software to
    manage your business.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). It allows remote authenticated users to inject arbitrary web
    script or HTML via the `address` or `town` (POSTS) parameter to
    `adherents/type.php`.



    [1]: https://packagist.org/packages/dolibarr/dolibarr
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: dolibarr/dolibarr
  vulnerable_versions:
  - "<8.0.4"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2018-19992
  cwe:
  - CWE-79
  disclosed_date: 2019-01-03
  created_date: 2019-01-06
  last_modified_date: 2019-01-06
  credit:
  - Unknown
  references:
  - https://github.com/Dolibarr/dolibarr/commit/0f06e39d23636bd1e4039ac61a743c79725c798b
  source_url: https://snyk.io/vuln/SNYK-PHP-DOLIBARRDOLIBARR-73621
