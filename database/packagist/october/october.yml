---
- id: snykio:packagist:october/october:571242
  title: Command Injection
  description: "Affected versions of this package are vulnerable to Command Injection.\nAny
    users with the ability to modify any data that could eventually be\nexported as
    a CSV file from the `ImportExportController`could\npotentially introduce a CSV
    injection into the data to cause the\ngenerated CSV export file to be malicious.This
    requires attackers to\nachieve the following before a successful attack can be
    completed:\n\n1.  Have found a vulnerability in the victim\\'s spreadsheet software
    of\n    choice.\n2.  Control data that would potentially be exported through the\n
    \   `ImportExportController` by a theoretical victim.\n3.  Convince the victim
    to export above data as a CSV and run it in\n    vulnerable spreadsheet software
    while also bypassing any sanity\n    checks by said software.\n    ## Remediation
    \  {#remediation}\n    \n    Upgrade `october/october` to version 1.0.466 or higher.\n
    \   ## References   {#references}\n\n* [GitHub Advisory][1]\n* [GitHub Commit][2]\n*
    [GitHub Commit][3]\n\n\n\n[1]: https://github.com/octobercms/october/security/advisories/GHSA-4rhm-m2fp-hx7q\n[2]:
    https://github.com/octobercms/library/commit/c84bf03f506052c848f2fddc05f24be631427a1a\n[3]:
    https://github.com/octobercms/october/commit/802d8c8e09a2b342649393edb6d3ceb958851484\n"
  affected_package: october/october
  vulnerable_versions:
  - ">=1.0.319  <1.0.466"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2020-5299
  cwe:
  - CWE-77
  disclosed_date: 2020-06-04
  created_date: 2020-06-04
  last_modified_date: 2020-06-04
  credit:
  - Unknown
  source_url: https://snyk.io/vuln/SNYK-PHP-OCTOBEROCTOBER-571242
- id: snykio:packagist:october/october:571243
  title: Arbitrary File Write
  description: |+
    Affected versions of this package are vulnerable to Arbitrary File
    Write. An attacker can exploit this vulnerability to delete arbitrary
    local files of an October CMS server. The vulnerability is only
    exploitable by an authenticated backend user with the
    `cms.manage_assets` permission.

  affected_package: october/october
  vulnerable_versions:
  - ">=1.0.319  <1.0.466"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2020-5296
  cwe:
  - CWE-20
  disclosed_date: 2020-06-04
  created_date: 2020-06-04
  last_modified_date: 2020-06-04
  credit:
  - Unknown
  references:
  - https://github.com/octobercms/october/commit/2b8939cc8b5b6fe81e093fe2c9f883ada4e3c8cc
  - https://github.com/octobercms/october/security/advisories/GHSA-jv6v-fvvx-4932
  source_url: https://snyk.io/vuln/SNYK-PHP-OCTOBEROCTOBER-571243
- id: snykio:packagist:october/october:571244
  title: Arbitrary File Upload
  description: |+
    Affected versions of this package are vulnerable to Arbitrary File
    Upload. An attacker can exploit this vulnerability to upload jpg, jpeg,
    bmp, png, webp, gif, ico, css, js, woff, woff2, svg, ttf, eot, json, md,
    less, sass, scss, xml files to any directory of an October CMS server.
    The vulnerability is only exploitable by an authenticated backend user
    with the `cms.manage_assets` permission.

  affected_package: october/october
  vulnerable_versions:
  - ">=1.0.319  <1.0.466"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2020-5297
  cwe:
  - CWE-434
  disclosed_date: 2020-06-04
  created_date: 2020-06-04
  last_modified_date: 2020-06-04
  credit:
  - Unknown
  references:
  - https://github.com/octobercms/october/commit/6711dae8ef70caf0e94cec434498012a2ccd86b8
  - https://github.com/octobercms/october/security/advisories/GHSA-9722-rr68-rfpg
  source_url: https://snyk.io/vuln/SNYK-PHP-OCTOBEROCTOBER-571244
- id: snykio:packagist:october/october:571245
  title: Cross-site Scripting (XSS)
  description: |+
    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). A user with the ability to use the import functionality of the
    `ImportExportController` behavior can be socially engineered by an
    attacker to upload a maliciously crafted CSV file which could result in
    a reflected XSS attack on the user in question.

    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: october/october
  vulnerable_versions:
  - ">=1.0.319  <1.0.466"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2020-5298
  cwe:
  - CWE-79
  disclosed_date: 2020-06-04
  created_date: 2020-06-04
  last_modified_date: 2020-06-04
  credit:
  - Unknown
  references:
  - https://github.com/octobercms/october/commit/cd0b6a791f995d86071a024464c1702efc50f46c
  - https://github.com/octobercms/october/security/advisories/GHSA-gg6x-xx78-448c
  source_url: https://snyk.io/vuln/SNYK-PHP-OCTOBEROCTOBER-571245
- id: snykio:packagist:october/october:571246
  title: Arbitrary File Read
  description: |+
    Affected versions of this package are vulnerable to Arbitrary File Read.
    An attacker can exploit this vulnerability to read local files of an
    October CMS server. The vulnerability is only exploitable by an
    authenticated backend user with the `cms.manage_assets` permission.

  affected_package: october/october
  vulnerable_versions:
  - ">=1.0.319  <1.0.466"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2020-5295
  cwe:
  - CWE-22
  disclosed_date: 2020-06-04
  created_date: 2020-06-04
  last_modified_date: 2020-06-04
  credit:
  - Unknown
  references:
  - https://github.com/octobercms/october/commit/2b8939cc8b5b6fe81e093fe2c9f883ada4e3c8cc
  - https://github.com/octobercms/october/security/advisories/GHSA-r23f-c2j5-rx2f
  source_url: https://snyk.io/vuln/SNYK-PHP-OCTOBEROCTOBER-571246
- id: snykio:packagist:october/october:575250
  title: Cross-site Scripting (XSS)
  description: |+
    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). Pasting content copied from malicious websites into the Froala
    rich editor could result in a successful self-XSS attack.

    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: october/october
  vulnerable_versions:
  - ">=1.0.319  <1.0.467"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2020-4061
  cwe:
  - CWE-79
  disclosed_date: 2020-07-03
  created_date: 2020-07-03
  last_modified_date: 2020-07-03
  credit:
  - Unknown
  references:
  - https://github.com/octobercms/october/commit/b384954a29b89117e1c0d6035b3ede4f46df67c5
  - https://github.com/octobercms/october/security/advisories/GHSA-3pc2-fm7p-q2vg
  - https://research.securitum.com/the-curious-case-of-copy-paste/
  source_url: https://snyk.io/vuln/SNYK-PHP-OCTOBEROCTOBER-575250
- id: snykio:packagist:october/october:70383
  title: Configuration Modification
  description: |
    [`october/october`][1] is a Content Management System (CMS) and web
    platform whose sole purpose is to make your development workflow simple
    again.

    October CMS build 412 is vulnerable to Apache configuration modification
    via file upload functionality resulting in site compromise and possibly
    other applications on the server.



    [1]: https://packagist.org/packages/october/october
  affected_package: october/october
  vulnerable_versions:
  - "=1.0.412"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2017-1000194
  cwe:
  - CWE-284
  disclosed_date: 2017-11-17
  created_date: 2017-12-07
  last_modified_date: 2017-12-07
  credit:
  - Unknown
  references:
  - https://github.com/octobercms/october/compare/v1.0.412...v1.0.413#diff-c328b7b99eac0d17b3c71eb37038fd61R224
  source_url: https://snyk.io/vuln/SNYK-PHP-OCTOBEROCTOBER-70383
- id: snykio:packagist:october/october:72104
  title: Cross-site Scripting (XSS)
  description: |+
    [october/october][1] is a Content Management System (CMS) and web
    platform.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) by entering HTML on the Add Posts page.



    [1]: https://packagist.org/packages/october/october
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: october/october
  vulnerable_versions:
  - "<1.0.431"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2018-7198
  cwe:
  - CWE-79
  disclosed_date: 2018-02-17
  created_date: 2018-03-15
  last_modified_date: 2018-03-15
  credit:
  - Unknown
  references:
  - http://securitywarrior9.blogspot.com/2018/02/html-injection-october-cms.html
  - https://nvd.nist.gov/vuln/detail/CVE-2018-7198
  source_url: https://snyk.io/vuln/SNYK-PHP-OCTOBEROCTOBER-72104
- id: snykio:packagist:october/october:72131
  title: Arbitrary Code Execution
  description: |
    [october/october][1] is a Content Management System (CMS) and web
    platform whose sole purpose is to make your development workflow simple
    again.

    Affected versions of this package are vulnerable to Arbitrary Code
    Execution in the file upload functionality resulting in site compromise
    and possibly other applications on the server.



    [1]: https://packagist.org/packages/october/october
  affected_package: october/october
  vulnerable_versions:
  - "<1.0.413"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2017-1000119
  cwe:
  - CWE-434
  disclosed_date: 2017-04-09
  created_date: 2018-04-17
  last_modified_date: 2018-04-17
  credit:
  - Unknown
  references:
  - http://octobercms.com/support/article/rn-8
  - https://nvd.nist.gov/vuln/detail/CVE-2017-1000119
  source_url: https://snyk.io/vuln/SNYK-PHP-OCTOBEROCTOBER-72131
- id: snykio:packagist:october/october:72132
  title: Cross-site Request Forgery (CSRF)
  description: |
    [october/october][1] is a Content Management System (CMS) and web
    platform whose sole purpose is to make your development workflow simple
    again.

    Affected versions of this package are vulnerable to Cross-site Request
    Forgery (CSRF) due to improper validation of CSRF tokens for postback
    handling. It allows an attacker to successfully take over the victim\'s
    account. The attack bypasses a protection mechanism involving X-CSRF
    headers and CSRF tokens via a certain `_handler` postback variable.



    [1]: https://packagist.org/packages/october/october
  affected_package: october/october
  vulnerable_versions:
  - "<1.0.427"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2017-16244
  cwe:
  - CWE-352
  disclosed_date: 2017-10-30
  created_date: 2018-04-17
  last_modified_date: 2018-04-17
  credit:
  - Unknown
  references:
  - https://github.com/octobercms/october/commit/4a6e0e1e0e2c3facebc17e0db38c5b4d4cb05bd0
  - https://nvd.nist.gov/vuln/detail/CVE-2017-16244
  source_url: https://snyk.io/vuln/SNYK-PHP-OCTOBEROCTOBER-72132
- id: snykio:packagist:october/october:72133
  title: Cross-site Scripting (XSS)
  description: |+
    [october/october][1] is a Content Management System (CMS) and web
    platform whose sole purpose is to make your development workflow simple
    again.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks via the brand logo image name.



    [1]: https://packagist.org/packages/october/october
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: october/october
  vulnerable_versions:
  - "<1.0.413"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2017-1000193
  cwe:
  - CWE-79
  disclosed_date: 2017-11-16
  created_date: 2018-04-17
  last_modified_date: 2018-04-17
  credit:
  - Unknown
  references:
  - https://github.com/octobercms/october/compare/v1.0.412...v1.0.413#diff-66d6dfe5e11488e1afefcb69b8bdaabfR31
  - https://nvd.nist.gov/vuln/detail/CVE-2017-1000193
  source_url: https://snyk.io/vuln/SNYK-PHP-OCTOBEROCTOBER-72133
- id: snykio:packagist:october/october:72134
  title: Arbitrary Code Injection
  description: |
    [october/october][1] is a Content Management System (CMS) and web
    platform whose sole purpose is to make your development workflow simple
    again.

    Affected versions of this package are vulnerable to Arbitrary Code
    Injection in the asset move functionality. An attacker may delete files
    that are otherwise limited by file permissions on the server.



    [1]: https://packagist.org/packages/october/october
  affected_package: october/october
  vulnerable_versions:
  - "<1.0.413"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2017-1000195
  cwe:
  - CWE-74
  disclosed_date: 2017-11-16
  created_date: 2018-04-17
  last_modified_date: 2018-04-17
  credit:
  - Unknown
  references:
  - https://github.com/octobercms/october/compare/v1.0.412...v1.0.413#diff-c328b7b99eac0d17b3c71eb37038fd61R317
  - https://nvd.nist.gov/vuln/detail/CVE-2017-1000195
  source_url: https://snyk.io/vuln/SNYK-PHP-OCTOBEROCTOBER-72134
- id: snykio:packagist:october/october:72135
  title: Arbitrary Code Execution
  description: |
    [october/october][1] is a Content Management System (CMS) and web
    platform whose sole purpose is to make your development workflow simple
    again.

    Affected versions of this package are vulnerable to Arbitrary Code
    Execution via the asset manager functionality. It could result in site
    compromise and possibly other applications on the server.



    [1]: https://packagist.org/packages/october/october
  affected_package: october/october
  vulnerable_versions:
  - "<1.0.413"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2017-1000196
  cwe:
  - CWE-94
  disclosed_date: 2017-11-16
  created_date: 2018-04-17
  last_modified_date: 2018-04-17
  credit:
  - Unknown
  references:
  - https://github.com/octobercms/october/compare/v1.0.412...v1.0.413#diff-c328b7b99eac0d17b3c71eb37038fd61R49
  - https://nvd.nist.gov/vuln/detail/CVE-2017-1000196
  source_url: https://snyk.io/vuln/SNYK-PHP-OCTOBEROCTOBER-72135
- id: snykio:packagist:october/october:72136
  title: File Path Modification
  description: |
    [october/october][1] is a Content Management System (CMS) and web
    platform whose sole purpose is to make your development workflow simple
    again.

    Affected versions of this package are vulnerable to File Path
    Modification via the asset move functionality. It coud result in
    creating creating malicious files on the server.



    [1]: https://packagist.org/packages/october/october
  affected_package: october/october
  vulnerable_versions:
  - "<1.0.413"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2017-1000197
  cwe:
  - CWE-417
  disclosed_date: 2017-11-16
  created_date: 2018-04-17
  last_modified_date: 2018-04-17
  credit:
  - Unknown
  references:
  - https://github.com/octobercms/october/compare/v1.0.412...v1.0.413#diff-eef90a4e3585febf6489916dc242d0ceR241
  - https://nvd.nist.gov/vuln/detail/CVE-2017-1000197
  source_url: https://snyk.io/vuln/SNYK-PHP-OCTOBEROCTOBER-72136
- id: snykio:packagist:october/october:72247
  title: Cross-site Scripting (XSS)
  description: |+
    [october/october][1] is a Free, open-source, self-hosted CMS platform
    based on the Laravel PHP Framework.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks. An attacker was able to store XSS and potentially take
    control of another admin\'s account.



    [1]: https://packagist.org/packages/october/october
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: october/october
  vulnerable_versions:
  - "<1.0.437"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2018-1999008
  cwe:
  - CWE-79
  disclosed_date: 2018-07-23
  created_date: 2018-07-30
  last_modified_date: 2018-07-30
  credit:
  - Unknown
  references:
  - https://octobercms.com/support/article/rn-10
  source_url: https://snyk.io/vuln/SNYK-PHP-OCTOBEROCTOBER-72247
- id: snykio:packagist:october/october:72248
  title: Arbitrary Code Execution
  description: |
    [october/october][1] is a Free, open-source, self-hosted CMS platform
    based on the Laravel PHP Framework.

    Affected versions of this package are vulnerable to Arbitrary Code
    Execution via the `modules/system/traits/ViewMaker.php` function. An
    attacker could execute PHP files stored on the server without
    authentication.



    [1]: https://packagist.org/packages/october/october
  affected_package: october/october
  vulnerable_versions:
  - "<1.0.437"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2018-1999009
  cwe:
  - CWE-94
  disclosed_date: 2018-07-23
  created_date: 2018-07-30
  last_modified_date: 2018-07-30
  credit:
  - Unknown
  references:
  - http://octobercms.com/support/article/rn-10
  source_url: https://snyk.io/vuln/SNYK-PHP-OCTOBEROCTOBER-72248
