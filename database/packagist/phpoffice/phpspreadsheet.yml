---
- id: friendsofphp:packagist:phpoffice/phpspreadsheet:CVE-2018-19277
  title: XXE Vulnerability
  affected_package: phpoffice/phpspreadsheet
  vulnerable_versions:
  - "<=1.5.0"
  package_manager: packagist
  cve:
  - CVE-2018-19277
  disclosed_date: 2018-11-20
  created_date: 2018-11-20
  last_modified_date: 2018-11-20
  credit:
  - FriendsOfPHP
  references:
  - https://github.com/PHPOffice/PhpSpreadsheet/issues/771
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/phpoffice/phpspreadsheet/CVE-2018-19277.yaml
- id: snykio:packagist:phpoffice/phpspreadsheet:1048856
  title: Cross-site Scripting (XSS)
  description: "[phpoffice/phpspreadsheet][1] is a Spreadsheet engine that Read, Create\nand
    Write Spreadsheet documents in PHP .\n\nAffected versions of this package are
    vulnerable to Cross-site Scripting\n(XSS). The library is vulnerable to XSS when
    creating an html output\nfrom an excel file by adding a comment on any cell. The
    root cause of\nthis issue is within the HTML writer where user comments are\nconcatenated
    as part of link and this is returned as HTML.\n\n### PoC   {#poc}\n\n    1. Setup
    a project folder on your local web server\n    2. Open project folder in terminal
    to run `composer require phpoffice/phpspreadsheet`\n    3. Create an excel file
    -> Insert Comment -> Insert this payload `<script>alert(1)</script>`\n    4. Move
    the excel file to the project dir\n    5. Create a php file with filename `convert-excel-to-html.php`
    -> Insert code below\n    \n    <?php\n    require './vendor/autoload.php';\n
    \   use PhpOffice\\PhpSpreadsheet\\IOFactory;\n    \n    $filename = 'INSERT_YOUR_EXCEL_FILE_HERE';\n
    \   \n    $spreadsheet = IOFactory::load('./'.$filename);\n    \n    $writer =
    IOFactory::createWriter($spreadsheet, 'Html');\n    \n    $filename = 'testxss.html';\n
    \   $writer->save($filename);\n\n\n\n[1]: https://packagist.org/packages/phpoffice/phpspreadsheet\n\\nA
    cross-site scripting attack occurs when the attacker tricks a\nlegitimate web-based
    application or site to accept a request as\noriginating from a trusted source.\n\nThis
    is done by escaping the context of the web application; the web\napplication then
    delivers that data to its users along with other\ntrusted dynamic content, without
    validating it. The browser unknowingly\nexecutes malicious script on the client
    side (through client-side\nlanguages; usually JavaScript or HTML) in order to
    perform actions that\nare otherwise typically blocked by the browser’s Same Origin
    Policy.\n\nֿInjecting malicious code is the most prevalent manner by which XSS
    is\nexploited; for this reason, escaping characters in order to prevent this\nmanipulation
    is the top method for securing code against this\nvulnerability.\n\nEscaping means
    that the application is coded to mark key characters, and\nparticularly key characters
    included in user input, to prevent those\ncharacters from being interpreted in
    a dangerous context. For example,\nin HTML, `<` can be coded as `&lt`; and `>`
    can be coded as `&gt`; in\norder to be interpreted and displayed as themselves
    in text, while\nwithin the code itself, they are used for HTML tags. If malicious\ncontent
    is injected into an application that escapes special characters\nand that malicious
    content uses `<` and `>` as HTML tags, those\ncharacters are nonetheless not interpreted
    as HTML tags by the browser\nif they’ve been correctly escaped in the application
    code and in this\nway the attempted attack is diverted.\n\nThe most prominent
    use of XSS is to steal cookies (source: OWASP\nHttpOnly) and hijack user sessions,
    but XSS exploits have been used to\nexpose sensitive information, enable access
    to privileged services and\nfunctionality and deliver malware.\n\n### Types of
    attacks   {#types-of-attacks}\n\nThere are a few methods by which XSS can be manipulated:\n\n|
    Type | Origin | Description |\n|----------\n| **Stored** | Server | The malicious
    code is inserted in the application (usually as a link) by the attacker. The code
    is activated every time a user clicks the link. |\n| **Reflected** | Server |
    The attacker delivers a malicious link externally from the vulnerable web site
    application to a user. When clicked, malicious code is sent to the vulnerable
    web site, which reflects the attack back to the user’s browser. |\n| **DOM-based**
    | Client | The attacker forces the user’s browser to render a malicious page.
    The data in the page itself delivers the cross-site scripting data. |\n| **Mutated**
    |  | The attacker injects code that appears safe, but is then rewritten and modified
    by the browser, while parsing the markup. An example is rebalancing unclosed quotation
    marks or even adding quotation marks to unquoted parameters. |\n\n### Affected
    environments   {#affected-environments}\n\nThe following environments are susceptible
    to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n###
    How to prevent   {#how-to-prevent}\n\nThis section describes the top best practices
    designed to specifically\nprotect your code:\n\n* Sanitize data input in an HTTP
    request before reflecting it back,\n  ensuring all data is validated, filtered
    or escaped before echoing\n  anything back to the user, such as the values of
    query parameters\n  during searches.\n* Convert special characters such as `?`,
    `&`, `/`, `<`, `>` and spaces\n  to their respective HTML or URL encoded equivalents.\n*
    Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n*
    Detect simultaneous logins, including those from two separate IP\n  addresses,
    and invalidate those sessions.\n* Use and enforce a Content Security Policy (source:
    Wikipedia) to\n  disable any features that might be manipulated for an XSS attack.\n*
    Read the documentation for any of the libraries referenced in your\n  code to
    understand which elements allow for embedded HTML.\n\n"
  affected_package: phpoffice/phpspreadsheet
  vulnerable_versions:
  - ">=0.0.0"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2020-7776
  cwe:
  - CWE-79
  disclosed_date: 2020-11-19
  created_date: 2020-12-08
  last_modified_date: 2020-12-08
  credit:
  - Nikkolai Fernandez
  references:
  - https://github.com/PHPOffice/PhpSpreadsheet/blob/master/src/PhpSpreadsheet/Writer/Html.php#L1792
  - https://github.com/PHPOffice/PhpSpreadsheet/commit/0ed5b800be2136bcb8fa9c1bdf59abc957a98845
  source_url: https://snyk.io/vuln/SNYK-PHP-PHPOFFICEPHPSPREADSHEET-1048856
- id: snykio:packagist:phpoffice/phpspreadsheet:1055210
  title: Cross-site Scripting (XSS)
  description: |+
    [phpoffice/phpspreadsheet][1] is a Spreadsheet engine that Read, Create
    and Write Spreadsheet documents in PHP .

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) via `/Writer/Html.php`.



    [1]: https://packagist.org/packages/phpoffice/phpspreadsheet
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: phpoffice/phpspreadsheet
  vulnerable_versions:
  - "<1.16.0"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2019-7776
  cwe:
  - CWE-79
  disclosed_date: 2021-01-03
  created_date: 2021-01-03
  last_modified_date: 2021-01-03
  credit:
  - Unknown
  references:
  - https://github.com/PHPOffice/PhpSpreadsheet/pull/1719
  source_url: https://snyk.io/vuln/SNYK-PHP-PHPOFFICEPHPSPREADSHEET-1055210
- id: snykio:packagist:phpoffice/phpspreadsheet:480564
  title: XML External Entity
  description: |+
    [phpoffice/phpspreadsheet][1] is a Spreadsheet engine that Read, Create
    and Write Spreadsheet documents in PHP .

    Affected versions of this package are vulnerable to XML External Entity.
    The XmlScanner decodes the `sheet1.xml` from an `.xlsx` to `UTF-8` if
    something else than `UTF-8` is declared in the header. This was a
    security measurement to prevent CVE-2018-19277 but the fix is not
    sufficient. By double-encoding the the XML payload to `UTF-7` it is
    possible to bypass the check for the string `<!ENTITY`.



    [1]: https://packagist.org/packages/phpoffice/phpspreadsheet
    \nXXE Injection is a type of attack against an application that parses XML
    input. XML is a markup language that defines a set of rules for encoding
    documents in a format that is both human-readable and machine-readable.
    By default, many XML processors allow specification of an external
    entity, a URI that is dereferenced and evaluated during XML processing.
    When an XML document is being parsed, the parser can make a request and
    include the content at the specified URI inside of the XML document.

    Attacks can include disclosing local files, which may contain sensitive
    data such as passwords or private user data, using file: schemes or
    relative paths in the system identifier.

    For example, below is a sample XML document, containing an XML element-
    username.

        <?xml version="1.0" encoding="ISO-8859-1"?>
           <username>John</username>
        </xml>
    {: .language-xml}

    An external XML entity - `xxe`, is defined using a system identifier and
    present within a DOCTYPE header. These entities can access local or
    remote content. For example the below code contains an external XML
    entity that would fetch the content of `/etc/passwd` and display it to
    the user rendered by `username`.

        <?xml version="1.0" encoding="ISO-8859-1"?>
        <!DOCTYPE foo [
           <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
           <username>&xxe;</username>
        </xml>
    {: .language-xml}

    Other XXE Injection attacks can access local resources that may not stop
    returning data, possibly impacting application availability and leading
    to Denial of Service.

  affected_package: phpoffice/phpspreadsheet
  vulnerable_versions:
  - "<1.8.0"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2019-12331
  cwe:
  - CWE-611
  disclosed_date: 2019-10-21
  created_date: 2019-11-07
  last_modified_date: 2019-11-07
  credit:
  - Daniel Hoffmann
  references:
  - https://github.com/PHPOffice/PhpSpreadsheet/blob/master/CHANGELOG.md#180---2019-07-01
  - https://herolab.usd.de/security-advisories/usd-2019-0046/
  source_url: https://snyk.io/vuln/SNYK-PHP-PHPOFFICEPHPSPREADSHEET-480564
- id: snykio:packagist:phpoffice/phpspreadsheet:72604
  title: XML External Entity (XXE) Injection
  description: |+
    [phpoffice/phpspreadsheet][1] is a library written in pure PHP and
    providing a set of classes that allow you to read from and to write to
    different spreadsheet file formats, like Excel and LibreOffice Calc.

    Affected versions of this package are vulnerable to XML External Entity
    (XXE) Injection via the `securityScan()` function. An attacker could
    bypass the protection mechanisms for XXE by using `UTF-7` encoding in a
    `.xlsx` file.



    [1]: https://packagist.org/packages/PHPOffice/PhpSpreadsheet
    \nXXE Injection is a type of attack against an application that parses XML
    input. XML is a markup language that defines a set of rules for encoding
    documents in a format that is both human-readable and machine-readable.
    By default, many XML processors allow specification of an external
    entity, a URI that is dereferenced and evaluated during XML processing.
    When an XML document is being parsed, the parser can make a request and
    include the content at the specified URI inside of the XML document.

    Attacks can include disclosing local files, which may contain sensitive
    data such as passwords or private user data, using file: schemes or
    relative paths in the system identifier.

    For example, below is a sample XML document, containing an XML element-
    username.

        <?xml version="1.0" encoding="ISO-8859-1"?>
           <username>John</username>
        </xml>
    {: .language-xml}

    An external XML entity - `xxe`, is defined using a system identifier and
    present within a DOCTYPE header. These entities can access local or
    remote content. For example the below code contains an external XML
    entity that would fetch the content of `/etc/passwd` and display it to
    the user rendered by `username`.

        <?xml version="1.0" encoding="ISO-8859-1"?>
        <!DOCTYPE foo [
           <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
           <username>&xxe;</username>
        </xml>
    {: .language-xml}

    Other XXE Injection attacks can access local resources that may not stop
    returning data, possibly impacting application availability and leading
    to Denial of Service.

  affected_package: phpoffice/phpspreadsheet
  vulnerable_versions:
  - "<1.5.1"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2018-19277
  cwe:
  - CWE-611
  disclosed_date: 2018-11-14
  created_date: 2018-11-19
  last_modified_date: 2018-11-19
  credit:
  - alxjsn
  references:
  - https://github.com/PHPOffice/PhpSpreadsheet/commit/0f8f071e24ee8b114d894ac172f77dc250e5bfa4
  - https://github.com/PHPOffice/PhpSpreadsheet/issues/771
  - https://www.exploit-db.com/exploits/46050
  source_url: https://snyk.io/vuln/SNYK-PHP-PHPOFFICEPHPSPREADSHEET-72604
