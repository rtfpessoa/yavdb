---
- id: friendsofphp:packagist:ezsystems/ezpublish-legacy:2017-08-22-1
  title: EZSA-2017-005 XSS issue in search
  affected_package: ezsystems/ezpublish-legacy
  vulnerable_versions:
  - ">=5.3.0 <5.3.12.1"
  - ">=5.4.0 <5.4.10"
  package_manager: packagist
  cve:
  - CVE-2017-1000431
  disclosed_date: 2017-08-18
  created_date: 2017-08-18
  last_modified_date: 2017-08-18
  credit:
  - FriendsOfPHP
  references:
  - http://share.ez.no/community-project/security-advisories/ezsa-2017-005-xss-issue-in-search
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/ezsystems/ezpublish-legacy/2017-08-22-1.yaml
- id: friendsofphp:packagist:ezsystems/ezpublish-legacy:2017-09-11-1
  title: EZSA-2017-006 Information disclosure in backend content tree menu
  affected_package: ezsystems/ezpublish-legacy
  vulnerable_versions:
  - ">=2011.0.0 <2017.8.1.1"
  - ">=5.3.0 <5.3.12.2"
  - ">=5.4.0 <5.4.10.1"
  package_manager: packagist
  disclosed_date: 2017-08-21
  created_date: 2017-08-21
  last_modified_date: 2017-08-21
  credit:
  - FriendsOfPHP
  references:
  - http://share.ez.no/community-project/security-advisories/ezsa-2017-006-information-disclosure-in-backend-content-tree-menu
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/ezsystems/ezpublish-legacy/2017-09-11-1.yaml
- id: friendsofphp:packagist:ezsystems/ezpublish-legacy:2018-02-26-1
  title: EZSA-2018-001 Several vulnerabilities in Forgot password, Information collector,
    XML text, and Matrix field type features
  affected_package: ezsystems/ezpublish-legacy
  vulnerable_versions:
  - ">=2011.0.0 <2017.12.2.1"
  - ">=5.3.0 <5.3.12.3"
  - ">=5.4.0 <5.4.11.3"
  package_manager: packagist
  disclosed_date: 2018-02-06
  created_date: 2018-02-06
  last_modified_date: 2018-02-06
  credit:
  - FriendsOfPHP
  references:
  - http://share.ez.no/community-project/security-advisories/ezsa-2018-001-several-vulnerabilities-in-forgot-password-information-collector-xml-text-and-matrix-field-type-features
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/ezsystems/ezpublish-legacy/2018-02-26-1.yaml
- id: friendsofphp:packagist:ezsystems/ezpublish-legacy:2018-10-31-1
  title: EZSA-2018-005 Passwordless login for LDAP users
  affected_package: ezsystems/ezpublish-legacy
  vulnerable_versions:
  - ">=2011.0.0 <2017.12.4.1"
  - ">=2018.6.0 <2018.6.1.2"
  - ">=2018.9.0 <2018.9.1.1"
  - ">=5.3.0 <5.3.12.4"
  - ">=5.4.0 <5.4.12.1"
  package_manager: packagist
  disclosed_date: 2018-10-17
  created_date: 2018-10-17
  last_modified_date: 2018-10-17
  credit:
  - FriendsOfPHP
  references:
  - http://share.ez.no/community-project/security-advisories/ezsa-2018-005-passwordless-login-for-ldap-users
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/ezsystems/ezpublish-legacy/2018-10-31-1.yaml
- id: friendsofphp:packagist:ezsystems/ezpublish-legacy:2018-11-01-1
  title: EZSA-2018-006 XSS vulnerability in 'disabled module' error template
  affected_package: ezsystems/ezpublish-legacy
  vulnerable_versions:
  - ">=2011.0.0 <2017.12.4.2"
  - ">=2018.6.0 <2018.6.1.3"
  - ">=2018.9.0 <2018.9.1.2"
  - ">=5.3.0 <5.3.12.5"
  - ">=5.4.0 <5.4.12.2"
  package_manager: packagist
  disclosed_date: 2018-10-17
  created_date: 2018-10-17
  last_modified_date: 2018-10-17
  credit:
  - FriendsOfPHP
  references:
  - http://share.ez.no/community-project/security-advisories/ezsa-2018-006-xss-vulnerability-in-disabled-module-error-template
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/ezsystems/ezpublish-legacy/2018-11-01-1.yaml
- id: friendsofphp:packagist:ezsystems/ezpublish-legacy:2018-11-21-1
  title: EZSA-2018-009 Do not interpret PHP/PHAR uploads
  affected_package: ezsystems/ezpublish-legacy
  vulnerable_versions:
  - ">=2011.0.0 <2017.12.4.3"
  - ">=2018.6.0 <2018.6.1.4"
  - ">=2018.9.0 <2018.9.1.3"
  - ">=5.3.0 <5.3.12.6"
  - ">=5.4.0 <5.4.12.3"
  package_manager: packagist
  disclosed_date: 2018-10-30
  created_date: 2018-10-30
  last_modified_date: 2018-10-30
  credit:
  - FriendsOfPHP
  references:
  - http://share.ez.no/community-project/security-advisories/ezsa-2018-009-do-not-interpret-php-phar-uploads
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/ezsystems/ezpublish-legacy/2018-11-21-1.yaml
- id: friendsofphp:packagist:ezsystems/ezpublish-legacy:2020-03-03-1
  title: EZSA-2020-001 Remote code execution in file uploads
  affected_package: ezsystems/ezpublish-legacy
  vulnerable_versions:
  - ">=2017.12.0 <2017.12.7.2"
  - ">=2019.3.0 <2019.3.4.2"
  - ">=5.4.0 <5.4.14.1"
  package_manager: packagist
  disclosed_date: 2020-02-20
  created_date: 2020-02-20
  last_modified_date: 2020-02-20
  credit:
  - FriendsOfPHP
  references:
  - https://ezplatform.com/security-advisories/ezsa-2020-001-remote-code-execution-in-file-uploads
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/ezsystems/ezpublish-legacy/2020-03-03-1.yaml
- id: friendsofphp:packagist:ezsystems/ezpublish-legacy:CVE-2017-1000431
  title: EZSA-2017-005 XSS issue in search
  affected_package: ezsystems/ezpublish-legacy
  vulnerable_versions:
  - ">=5.3.0 <5.3.12.1"
  - ">=5.4.0 <5.4.10"
  package_manager: packagist
  cve:
  - CVE-2017-1000431
  disclosed_date: 2017-08-18
  created_date: 2017-08-18
  last_modified_date: 2017-08-18
  credit:
  - FriendsOfPHP
  references:
  - http://share.ez.no/community-project/security-advisories/ezsa-2017-005-xss-issue-in-search
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/ezsystems/ezpublish-legacy/CVE-2017-1000431.yaml
- id: snykio:packagist:ezsystems/ezpublish-legacy:1015817
  title: Object Injection
  description: |
    [ezsystems/ezpublish-legacy][1] is a professional PHP application
    framework with advanced CMS functionality.

    Affected versions of this package are vulnerable to Object Injection via
    discount rules. This would require backend access and permission to edit
    discount rules.



    [1]: https://github.com/ezsystems/ezpublish-legacy
  affected_package: ezsystems/ezpublish-legacy
  vulnerable_versions:
  - ">=2017.12.0  <2017.12.7.3"
  - ">=2019.3.0  <2019.3.5.1"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-94
  disclosed_date: 2020-10-06
  created_date: 2020-10-06
  last_modified_date: 2020-10-06
  credit:
  - Unknown
  references:
  - https://ezplatform.com/security-advisories/ibexa-sa-2020-006-object-injection-in-legacy-shop-module
  source_url: https://snyk.io/vuln/SNYK-PHP-EZSYSTEMSEZPUBLISHLEGACY-1015817
- id: snykio:packagist:ezsystems/ezpublish-legacy:559152
  title: Remote Code Execution (RCE)
  description: |
    [ezsystems/ezpublish-legacy][1] is a professional PHP application
    framework with advanced CMS functionality.

    Affected versions of this package are vulnerable to Remote Code
    Execution (RCE) in the way it handles file uploads. An attacker would
    need access to uploading files to be able to exploit the vulnerability.



    [1]: https://github.com/ezsystems/ezpublish-legacy
  affected_package: ezsystems/ezpublish-legacy
  vulnerable_versions:
  - ">=2017.12.0  <2017.12.7.2"
  - ">=2019.3.0  <2019.3.4.2"
  - ">=5.4.0  <5.4.14.1"
  severity: high
  package_manager: packagist
  cwe:
  - CWE-94
  disclosed_date: 2020-03-03
  created_date: 2020-03-04
  last_modified_date: 2020-03-04
  credit:
  - Maxime Ropelewski
  references:
  - https://ezplatform.com/security-advisories/ezsa-2020-001-remote-code-execution-in-file-uploads
  source_url: https://snyk.io/vuln/SNYK-PHP-EZSYSTEMSEZPUBLISHLEGACY-559152
- id: snykio:packagist:ezsystems/ezpublish-legacy:70095
  title: Cross-site Scripting (XSS)
  description: |+
    Affected versions of [`ezsystems/ezpublish-legacy`][1] are vulnerable to
    Cross-site Scripting (XSS).



    [1]: https://packagist.org/packages/ezsystems/ezpublish-legacy
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: ezsystems/ezpublish-legacy
  vulnerable_versions:
  - ">=5.3.0  <5.3.12.1"
  - ">=5.4.0  <5.4.10"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-79
  disclosed_date: 2017-08-18
  created_date: 2017-08-18
  last_modified_date: 2017-08-18
  credit:
  - Unknown
  references:
  - http://share.ez.no/community-project/security-advisories/ezsa-2017-005-xss-issue-in-search
  source_url: https://snyk.io/vuln/SNYK-PHP-EZSYSTEMSEZPUBLISHLEGACY-70095
- id: snykio:packagist:ezsystems/ezpublish-legacy:70096
  title: Information Exposure
  description: |
    Affected versions of [`ezsystems/ezpublish-legacy`][1] are vulnerable to
    Information Exposure in the backend content tree menu. If a view has
    been disabled in `site.ini` Rules, and an attacker accesses the backend
    with the URL to this module, then the tree menu may be displayed. Since
    the tree menu may contain hidden items, this may lead to information
    disclosure



    [1]: https://packagist.org/packages/ezsystems/ezpublish-legacy
  affected_package: ezsystems/ezpublish-legacy
  vulnerable_versions:
  - ">=2017.8.0  <2017.8.1.1"
  - ">=5.3.0  <5.3.12.2"
  - ">=5.4.0  <5.4.10.1"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-200
  disclosed_date: 2017-08-21
  created_date: 2017-08-21
  last_modified_date: 2017-08-21
  credit:
  - Unknown
  references:
  - http://share.ez.no/community-project/security-advisories/ezsa-2017-006-information-disclosure-in-backend-content-tree-menu
  - https://github.com/ezsystems/ezpublish-legacy/commit/a4a0470f8d80f012fe14e4f8ab11c7d14375986c
  source_url: https://snyk.io/vuln/SNYK-PHP-EZSYSTEMSEZPUBLISHLEGACY-70096
- id: snykio:packagist:ezsystems/ezpublish-legacy:72008
  title: Cross-site Scripting (XSS)
  description: |+
    [ezsystems/ezpublish-legacy][1] is a PHP application framework with
    advanced CMS (content management system) functionality.

    Affected versions of this project are vulnerable to Cross-Site Scripting
    (XSS) attacks via the search module.



    [1]: https://packagist.org/packages/ezsystems/ezpublish-legacy
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: ezsystems/ezpublish-legacy
  vulnerable_versions:
  - "<2017.08.0"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2017-1000431
  cwe:
  - CWE-79
  disclosed_date: 2016-02-24
  created_date: 2018-02-06
  last_modified_date: 2018-02-06
  credit:
  - Unknown
  references:
  - http://share.ez.no/community-project/security-advisories/ezsa-2017-005-xss-issue-in-search
  - https://github.com/ezsystems/ezpublish-legacy/commit/c7174295fa0b9bd81bd4af908082464b0b80f278
  source_url: https://snyk.io/vuln/SNYK-PHP-EZSYSTEMSEZPUBLISHLEGACY-72008
- id: snykio:packagist:ezsystems/ezpublish-legacy:72554
  title: Authentication Bypass
  description: |
    [ezsystems/ezpublish-legacy][1] is a PHP application framework with
    advanced CMS (content management system) functionality.

    Affected versions of this package are vulnerable to Authentication
    Bypass. Installations that are using the legacy `LDAP` login handler or
    the `TextFile` login handler in combination with the standard legacy
    login handler, may in fail to verify passwords correctly, allowing
    unauthorised access.



    [1]: https://packagist.org/packages/ezsystems/ezpublish-legacy
  affected_package: ezsystems/ezpublish-legacy
  vulnerable_versions:
  - ">=2017.12.0  <2017.12.4.1"
  - ">=2018.6.0  <2018.6.1.2"
  - ">=2018.9.0  <2018.9.1.1"
  - ">=5.3.0  <5.3.12.4"
  - ">=5.4.0  <5.4.12.1"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-288
  disclosed_date: 2018-10-05
  created_date: 2018-11-04
  last_modified_date: 2018-11-04
  credit:
  - Unknown
  references:
  - http://share.ez.no/community-project/security-advisories/ezsa-2018-005-passwordless-login-for-ldap-users
  - https://github.com/ezsystems/ezpublish-legacy/commit/13f03a2be6c0ee4d0caaafaef05904ea9b0c4d9d
  source_url: https://snyk.io/vuln/SNYK-PHP-EZSYSTEMSEZPUBLISHLEGACY-72554
- id: snykio:packagist:ezsystems/ezpublish-legacy:72561
  title: Cross-site Scripting (XSS)
  description: |+
    [ezsystems/ezpublish-legacy][1] is a PHP application framework with
    advanced CMS (content management system) functionality.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks via the `'disabled module` error template.



    [1]: https://packagist.org/packages/ezsystems/ezpublish-legacy
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: ezsystems/ezpublish-legacy
  vulnerable_versions:
  - ">=2017.12.0  <2017.12.4.2"
  - ">=2018.6.0   <2018.6.1.3"
  - ">=2018.9.0  <2018.9.1.2"
  - ">=5.3.0  <5.3.12.5"
  - ">=5.4.0  <5.4.12.2"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-79
  disclosed_date: 2018-11-01
  created_date: 2018-11-04
  last_modified_date: 2018-11-04
  credit:
  - Unknown
  references:
  - http://share.ez.no/community-project/security-advisories/ezsa-2018-006-xss-vulnerability-in-disabled-module-error-template
  source_url: https://snyk.io/vuln/SNYK-PHP-EZSYSTEMSEZPUBLISHLEGACY-72561
- id: snykio:packagist:ezsystems/ezpublish-legacy:72645
  title: Deserialization of Untrusted Data
  description: |
    [ezsystems/ezpublish-legacy][1] is a professional PHP application
    framework with advanced CMS (content management system) functionality.

    Affected versions of this package are vulnerable to Deserialization of
    Untrusted Data. PHAR archives may be crafted such that its stream
    wrapper will execute them without being specifically asked to. With such
    files, any PHP file operation may cause deserialisation and execution.



    [1]: https://packagist.org/packages/ezsystems/ezpublish-legacy
  affected_package: ezsystems/ezpublish-legacy
  vulnerable_versions:
  - ">=2011.0.0  <2017.12.4.3"
  - ">=2018.6.0  <2018.6.1.4"
  - ">=2018.9.0  <2018.9.1.3"
  - ">=5.3.0  <5.3.12.6"
  - ">=5.4.0  <5.4.12.3"
  severity: high
  package_manager: packagist
  cwe:
  - CWE-502
  disclosed_date: 2018-11-26
  created_date: 2018-11-29
  last_modified_date: 2018-11-29
  credit:
  - Unknown
  references:
  - http://share.ez.no/community-project/security-advisories/ezsa-2018-009-do-not-interpret-php-phar-uploads
  - https://github.com/ezsystems/ezplatform/commit/9a0c52dc4535e4b3ce379f80222dc53f705a2cfd
  source_url: https://snyk.io/vuln/SNYK-PHP-EZSYSTEMSEZPUBLISHLEGACY-72645
