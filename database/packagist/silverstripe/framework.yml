---
- id: friendsofphp:packagist:silverstripe/framework:CVE-2019-12203
  title: 'CVE-2019-12203: Session fixation in "change password" form'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.6.0 <3.6.8"
  - ">=3.7.0 <3.7.4"
  - ">=4.0.0 <4.3.5"
  - ">=4.4.0 <4.4.4"
  package_manager: packagist
  cve:
  - CVE-2019-12203
  disclosed_date: 2019-09-24
  created_date: 2019-09-24
  last_modified_date: 2019-09-24
  credit:
  - FriendsOfPHP
  references:
  - https://www.silverstripe.org/download/security-releases/cve-2019-12203/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/CVE-2019-12203.yaml
- id: friendsofphp:packagist:silverstripe/framework:CVE-2019-12204
  title: 'CVE-2019-12204: Missing warning on install.php on public webroot can lead
    to unauthenticated admin access'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=4.1.0 <4.3.5"
  - ">=4.4.0 <4.4.4"
  package_manager: packagist
  cve:
  - CVE-2019-12204
  disclosed_date: 2019-09-24
  created_date: 2019-09-24
  last_modified_date: 2019-09-24
  credit:
  - FriendsOfPHP
  references:
  - https://www.silverstripe.org/download/security-releases/cve-2019-12204/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/CVE-2019-12204.yaml
- id: friendsofphp:packagist:silverstripe/framework:CVE-2019-12205
  title: 'CVE-2019-12205: Clipboard Reflected XSS'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.0.0 <3.9.99"
  - ">=4.3.0 <4.3.5"
  - ">=4.4.0 <4.4.4"
  package_manager: packagist
  cve:
  - CVE-2019-12205
  disclosed_date: 2019-09-24
  created_date: 2019-09-24
  last_modified_date: 2019-09-24
  credit:
  - FriendsOfPHP
  references:
  - https://www.silverstripe.org/download/security-releases/cve-2019-12205/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/CVE-2019-12205.yaml
- id: friendsofphp:packagist:silverstripe/framework:CVE-2019-12246
  title: 'CVE-2019-12246: Denial of Service on flush and development URL tools'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=4.0.0 <4.4.0"
  - ">=4.1.0 <4.4.0"
  - ">=4.2.0 <4.4.0"
  - ">=4.3.0 <4.4.0"
  package_manager: packagist
  cve:
  - CVE-2019-12246
  disclosed_date: 2019-06-11
  created_date: 2019-06-11
  last_modified_date: 2019-06-11
  credit:
  - FriendsOfPHP
  references:
  - https://www.silverstripe.org/download/security-releases/cve-2019-12246
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/CVE-2019-12246.yaml
- id: friendsofphp:packagist:silverstripe/framework:CVE-2019-12617
  title: 'CVE-2019-12617: Access escalation for CMS users with limited access through
    permission cache pollution'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=4.3.0 <4.3.5"
  - ">=4.4.0 <4.4.4"
  package_manager: packagist
  cve:
  - CVE-2019-12617
  disclosed_date: 2019-09-24
  created_date: 2019-09-24
  last_modified_date: 2019-09-24
  credit:
  - FriendsOfPHP
  references:
  - https://www.silverstripe.org/download/security-releases/cve-2019-12617/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/CVE-2019-12617.yaml
- id: friendsofphp:packagist:silverstripe/framework:CVE-2019-14272
  title: 'CVE-2019-14272: XSS in file titles managed through the CMS'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=4.0.0 <4.3.5"
  - ">=4.4.0 <4.4.4"
  package_manager: packagist
  cve:
  - CVE-2019-14272
  disclosed_date: 2019-09-24
  created_date: 2019-09-24
  last_modified_date: 2019-09-24
  credit:
  - FriendsOfPHP
  references:
  - https://www.silverstripe.org/download/security-releases/cve-2019-14272/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/CVE-2019-14272.yaml
- id: friendsofphp:packagist:silverstripe/framework:CVE-2019-14273
  title: 'CVE-2019-14273: Broken Access control on files'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=4.0.0 <4.3.5"
  - ">=4.4.0 <4.4.4"
  package_manager: packagist
  cve:
  - CVE-2019-14273
  disclosed_date: 2019-09-24
  created_date: 2019-09-24
  last_modified_date: 2019-09-24
  credit:
  - FriendsOfPHP
  references:
  - https://www.silverstripe.org/download/security-releases/cve-2019-14273/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/CVE-2019-14273.yaml
- id: friendsofphp:packagist:silverstripe/framework:CVE-2019-16409
  title: 'CVE-2019-16409: Secureassets and versionedfiles modules can expose versions
    of protected files'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=4.0.0 <4.3.5"
  - ">=4.4.0 <4.4.4"
  package_manager: packagist
  cve:
  - CVE-2019-16409
  disclosed_date: 2019-09-24
  created_date: 2019-09-24
  last_modified_date: 2019-09-24
  credit:
  - FriendsOfPHP
  references:
  - https://www.silverstripe.org/download/security-releases/cve-2019-16409/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/CVE-2019-16409.yaml
- id: friendsofphp:packagist:silverstripe/framework:CVE-2019-5715
  title: 'CVE-2019-5715: Reflected SQL Injection through Form and DataObject'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.0.0 <3.6.7"
  - ">=3.7.0 <3.7.3"
  - ">=4.0.0 <4.0.7"
  - ">=4.1.0 <4.1.5"
  - ">=4.2.0 <4.2.4"
  - ">=4.3.0 <4.3.1"
  package_manager: packagist
  cve:
  - CVE-2019-5715
  disclosed_date: 2019-02-19
  created_date: 2019-02-19
  last_modified_date: 2019-02-19
  credit:
  - FriendsOfPHP
  references:
  - https://www.silverstripe.org/download/security-releases/ss-2018-021
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/CVE-2019-5715.yaml
- id: friendsofphp:packagist:silverstripe/framework:SS-2014-015-1
  title: 'SS-2014-015: IE requests not properly behaving with rewritehashlinks'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.0.0 <=3.0.12"
  - ">=3.1.0 <=3.1.11"
  package_manager: packagist
  disclosed_date: 2015-03-20
  created_date: 2015-03-20
  last_modified_date: 2015-03-20
  credit:
  - FriendsOfPHP
  references:
  - https://www.silverstripe.org/software/download/security-releases/ss-2014-015-ie-requests-not-properly-behaving-with-rewritehashlinks/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2014-015-1.yaml
- id: friendsofphp:packagist:silverstripe/framework:SS-2014-017-1
  title: 'SS-2014-017: XML Quadratic Blowup Attack'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.1.0 <=3.1.11"
  package_manager: packagist
  disclosed_date: 2014-08-12
  created_date: 2014-08-12
  last_modified_date: 2014-08-12
  credit:
  - FriendsOfPHP
  references:
  - https://www.silverstripe.org/software/download/security-releases/ss-2014-017-xml-quadratic-blowup-attack/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2014-017-1.yaml
- id: friendsofphp:packagist:silverstripe/framework:SS-2015-004-1
  title: 'SS-2015-004: TreeDropdownField and TreeMultiSelectField XSS'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.1.0 <=3.1.9"
  package_manager: packagist
  disclosed_date: 2015-02-12
  created_date: 2015-02-12
  last_modified_date: 2015-02-12
  credit:
  - FriendsOfPHP
  references:
  - https://www.silverstripe.org/software/download/security-releases/ss-2015-004/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2015-004-1.yaml
- id: friendsofphp:packagist:silverstripe/framework:SS-2015-006-1
  title: 'SS-2015-006: XSS In GridField print'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.1.0 <3.1.10"
  package_manager: packagist
  disclosed_date: 2015-02-12
  created_date: 2015-02-12
  last_modified_date: 2015-02-12
  credit:
  - FriendsOfPHP
  references:
  - https://www.silverstripe.org/software/download/security-releases/ss-2015-006/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2015-006-1.yaml
- id: friendsofphp:packagist:silverstripe/framework:SS-2015-007-1
  title: 'SS-2015-007: XSS In FormAction'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.1.0 <=3.1.9"
  package_manager: packagist
  disclosed_date: 2015-02-12
  created_date: 2015-02-12
  last_modified_date: 2015-02-12
  credit:
  - FriendsOfPHP
  references:
  - https://www.silverstripe.org/software/download/security-releases/ss-2015-007/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2015-007-1.yaml
- id: friendsofphp:packagist:silverstripe/framework:SS-2015-009-1
  title: 'SS-2015-009: XSS In rewritten hash links'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.0.0 <=3.0.12"
  - ">=3.1.0 <=3.1.11"
  package_manager: packagist
  disclosed_date: 2015-03-20
  created_date: 2015-03-20
  last_modified_date: 2015-03-20
  credit:
  - FriendsOfPHP
  references:
  - https://www.silverstripe.org/software/download/security-releases/ss-2015-009-xss-in-rewritten-hash-links/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2015-009-1.yaml
- id: friendsofphp:packagist:silverstripe/framework:SS-2015-010-1
  title: 'SS-2015-010: XSS in Director::force_redirect()'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.1.0 <3.1.12"
  package_manager: packagist
  disclosed_date: 2015-03-20
  created_date: 2015-03-20
  last_modified_date: 2015-03-20
  credit:
  - FriendsOfPHP
  references:
  - https://www.silverstripe.org/software/download/security-releases/ss-2015-010-xss-in-directorforce-redirect/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2015-010-1.yaml
- id: friendsofphp:packagist:silverstripe/framework:SS-2015-011-1
  title: 'SS-2015-011: Potential SQL Injection Vulnerability'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.0.0 <=3.0.13"
  - ">=3.1.0 <3.1.13"
  package_manager: packagist
  disclosed_date: 2015-05-25
  created_date: 2015-05-25
  last_modified_date: 2015-05-25
  credit:
  - FriendsOfPHP
  references:
  - https://www.silverstripe.org/software/download/security-releases/ss-2015-011/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2015-011-1.yaml
- id: friendsofphp:packagist:silverstripe/framework:SS-2015-012-1
  title: 'SS-2015-012: External redirection risk in Security?ReturnURL'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.0.0 <=3.0.13"
  - ">=3.1.0 <=3.1.12"
  package_manager: packagist
  disclosed_date: 2015-05-25
  created_date: 2015-05-25
  last_modified_date: 2015-05-25
  credit:
  - FriendsOfPHP
  references:
  - https://www.silverstripe.org/software/download/security-releases/ss-2015-012/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2015-012-1.yaml
- id: friendsofphp:packagist:silverstripe/framework:SS-2015-013-1
  title: 'SS-2015-013: X-Forwarded-Host request hostname injection'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.1.0 <3.1.13"
  package_manager: packagist
  disclosed_date: 2015-05-29
  created_date: 2015-05-29
  last_modified_date: 2015-05-29
  credit:
  - FriendsOfPHP
  references:
  - https://www.silverstripe.org/software/download/security-releases/ss-2015-013/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2015-013-1.yaml
- id: friendsofphp:packagist:silverstripe/framework:SS-2015-014-1
  title: 'SS-2015-014: Vulnerability on ''isDev'', ''isTest'' and ''flush'' $_GET
    validation'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.0.0 <=3.0.13"
  - ">=3.1.0 <3.1.13"
  package_manager: packagist
  disclosed_date: 2015-05-28
  created_date: 2015-05-28
  last_modified_date: 2015-05-28
  credit:
  - FriendsOfPHP
  references:
  - https://www.silverstripe.org/software/download/security-releases/ss-2015-014/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2015-014-1.yaml
- id: friendsofphp:packagist:silverstripe/framework:SS-2015-015-1
  title: 'SS-2015-015: XSS in dev/build returnURL Parameter'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.1.0 <3.1.14"
  package_manager: packagist
  disclosed_date: 2015-09-14
  created_date: 2015-09-14
  last_modified_date: 2015-09-14
  credit:
  - FriendsOfPHP
  references:
  - https://www.silverstripe.org/software/download/security-releases/ss-2015-015/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2015-015-1.yaml
- id: friendsofphp:packagist:silverstripe/framework:SS-2015-016-1
  title: 'SS-2015-016: XSS in install.php'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.1.0 <3.1.14"
  package_manager: packagist
  disclosed_date: 2015-09-14
  created_date: 2015-09-14
  last_modified_date: 2015-09-14
  credit:
  - FriendsOfPHP
  references:
  - https://www.silverstripe.org/software/download/security-releases/ss-2015-016/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2015-016-1.yaml
- id: friendsofphp:packagist:silverstripe/framework:SS-2015-026-1
  title: 'SS-2015-026: Form field validation message XSS vulnerability'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.0.0 <3.1.0"
  - ">=3.1.0 <3.1.16"
  - ">=3.2.0 <3.2.1"
  package_manager: packagist
  disclosed_date: 2015-11-11
  created_date: 2015-11-11
  last_modified_date: 2015-11-11
  credit:
  - FriendsOfPHP
  references:
  - https://www.silverstripe.org/download/security-releases/ss-2015-026/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2015-026-1.yaml
- id: friendsofphp:packagist:silverstripe/framework:SS-2015-027-1
  title: 'SS-2015-027: HtmlEditor embed url sanitisation'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.0.0 <3.1.0"
  - ">=3.1.0 <3.2.0"
  - ">=3.2.0 <3.2.1"
  package_manager: packagist
  disclosed_date: 2015-11-13
  created_date: 2015-11-13
  last_modified_date: 2015-11-13
  credit:
  - FriendsOfPHP
  references:
  - https://www.silverstripe.org/download/security-releases/ss-2015-027/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2015-027-1.yaml
- id: friendsofphp:packagist:silverstripe/framework:SS-2015-028-1
  title: 'SS-2015-028: Missing security check on dev/build/defaults'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">3.2 <3.3.0"
  - ">=3.1.0 <=3.1.16"
  - ">=3.2.0 <=3.2.1"
  package_manager: packagist
  disclosed_date: 2016-02-17
  created_date: 2016-02-17
  last_modified_date: 2016-02-17
  credit:
  - FriendsOfPHP
  references:
  - https://www.silverstripe.org/download/security-releases/ss-2015-028/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2015-028-1.yaml
- id: friendsofphp:packagist:silverstripe/framework:SS-2016-002-1
  title: 'SS-2016-002: CSRF vulnerability in GridFieldAddExistingAutocompleter'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">3.2 <3.3.0"
  - ">=3.1.0 <=3.1.16"
  - ">=3.2.0 <=3.2.1"
  package_manager: packagist
  disclosed_date: 2016-02-17
  created_date: 2016-02-17
  last_modified_date: 2016-02-17
  credit:
  - FriendsOfPHP
  references:
  - https://www.silverstripe.org/download/security-releases/ss-2016-002/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2016-002-1.yaml
- id: friendsofphp:packagist:silverstripe/framework:SS-2016-003-1
  title: 'SS-2016-003: Hostname, IP and Protocol Spoofing through HTTP Headers'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">3.2 <3.3.0"
  - ">=3.1.0 <=3.1.16"
  - ">=3.2.0 <=3.2.1"
  package_manager: packagist
  disclosed_date: 2016-02-18
  created_date: 2016-02-18
  last_modified_date: 2016-02-18
  credit:
  - FriendsOfPHP
  references:
  - https://www.silverstripe.org/download/security-releases/ss-2016-003/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2016-003-1.yaml
- id: friendsofphp:packagist:silverstripe/framework:SS-2016-004-1
  title: 'SS-2016-004: XSS in CMS Edit Page'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.1.18 <3.1.19"
  - ">=3.2.3 <3.2.4"
  - ">=3.3.1 <3.3.2"
  package_manager: packagist
  disclosed_date: 2016-08-15
  created_date: 2016-08-15
  last_modified_date: 2016-08-15
  credit:
  - FriendsOfPHP
  references:
  - https://www.silverstripe.org/download/security-releases/ss-2016-004/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2016-004-1.yaml
- id: friendsofphp:packagist:silverstripe/framework:SS-2016-005-1
  title: 'SS-2016-005: Brute force bypass on default admin'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.1.18 <3.1.19"
  - ">=3.2.3 <3.2.4"
  - ">=3.3.1 <3.3.2"
  package_manager: packagist
  disclosed_date: 2016-08-15
  created_date: 2016-08-15
  last_modified_date: 2016-08-15
  credit:
  - FriendsOfPHP
  references:
  - https://www.silverstripe.org/download/security-releases/ss-2016-005/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2016-005-1.yaml
- id: friendsofphp:packagist:silverstripe/framework:SS-2016-006-1
  title: 'SS-2016-006: Missing CSRF protection in login form'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.1.18 <3.1.19"
  - ">=3.2.3 <3.2.4"
  - ">=3.3.1 <3.3.2"
  package_manager: packagist
  disclosed_date: 2016-08-15
  created_date: 2016-08-15
  last_modified_date: 2016-08-15
  credit:
  - FriendsOfPHP
  references:
  - https://www.silverstripe.org/download/security-releases/ss-2016-006/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2016-006-1.yaml
- id: friendsofphp:packagist:silverstripe/framework:SS-2016-007-1
  title: 'SS-2016-007: VersionedRequestFilter vulnerability'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.3.2 <3.3.3"
  - ">=3.4.0 <3.4.1"
  package_manager: packagist
  disclosed_date: 2016-08-15
  created_date: 2016-08-15
  last_modified_date: 2016-08-15
  credit:
  - FriendsOfPHP
  references:
  - https://www.silverstripe.org/download/security-releases/ss-2016-007/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2016-007-1.yaml
- id: friendsofphp:packagist:silverstripe/framework:SS-2016-008-1
  title: 'SS-2016-008: Password encryption salt expiry'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.1.19 <3.1.20"
  - ">=3.2.4 <3.2.5"
  - ">=3.3.2 <3.3.3"
  - ">=3.4.0 <3.4.1"
  package_manager: packagist
  disclosed_date: 2016-08-15
  created_date: 2016-08-15
  last_modified_date: 2016-08-15
  credit:
  - FriendsOfPHP
  references:
  - https://www.silverstripe.org/download/security-releases/ss-2016-008/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2016-008-1.yaml
- id: friendsofphp:packagist:silverstripe/framework:SS-2016-010-1
  title: 'SS-2016-010: ReadOnly transformation for formfields exploitable'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.1.0 <3.1.21"
  - ">=3.2.0 <3.2.6"
  - ">=3.3.0 <3.3.4"
  - ">=3.4.0 <3.4.2"
  package_manager: packagist
  disclosed_date: 2016-11-22
  created_date: 2016-11-22
  last_modified_date: 2016-11-22
  credit:
  - FriendsOfPHP
  references:
  - https://www.silverstripe.org/download/security-releases/ss-2016-010/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2016-010-1.yaml
- id: friendsofphp:packagist:silverstripe/framework:SS-2016-011-1
  title: 'SS-2016-011: ChangePasswordForm does not check Member::canLogIn()'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.1.19 <3.1.20"
  - ">=3.2.4 <3.2.5"
  - ">=3.3.2 <3.3.3"
  - ">=3.4.0 <3.4.1"
  package_manager: packagist
  disclosed_date: 2016-08-15
  created_date: 2016-08-15
  last_modified_date: 2016-08-15
  credit:
  - FriendsOfPHP
  references:
  - https://www.silverstripe.org/download/security-releases/ss-2016-011/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2016-011-1.yaml
- id: friendsofphp:packagist:silverstripe/framework:SS-2016-012-1
  title: 'SS-2016-012: Missing ACL on reports'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.1.19 <3.1.20"
  - ">=3.2.4 <3.2.5"
  - ">=3.3.2 <3.3.3"
  - ">=3.4.0 <3.4.1"
  package_manager: packagist
  disclosed_date: 2016-08-15
  created_date: 2016-08-15
  last_modified_date: 2016-08-15
  credit:
  - FriendsOfPHP
  references:
  - https://www.silverstripe.org/download/security-releases/ss-2016-012/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2016-012-1.yaml
- id: friendsofphp:packagist:silverstripe/framework:SS-2016-013-1
  title: 'SS-2016-013: Member.Name is not escaped'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.1.9 <3.1.20"
  - ">=3.2.4 <3.2.5"
  - ">=3.3.2 <3.3.3"
  - ">=3.4.0 <3.4.1"
  package_manager: packagist
  disclosed_date: 2016-08-15
  created_date: 2016-08-15
  last_modified_date: 2016-08-15
  credit:
  - FriendsOfPHP
  references:
  - https://www.silverstripe.org/download/security-releases/ss-2016-013/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2016-013-1.yaml
- id: friendsofphp:packagist:silverstripe/framework:SS-2016-014-1
  title: 'SS-2016-014: Pre-existing alc_enc cookies log users in if remember me is
    disabled'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.1.19 <3.1.20"
  - ">=3.2.4 <3.2.5"
  - ">=3.3.2 <3.3.3"
  - ">=3.4.0 <3.4.1"
  package_manager: packagist
  disclosed_date: 2016-08-15
  created_date: 2016-08-15
  last_modified_date: 2016-08-15
  credit:
  - FriendsOfPHP
  references:
  - https://www.silverstripe.org/download/security-releases/ss-2016-014/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2016-014-1.yaml
- id: friendsofphp:packagist:silverstripe/framework:SS-2016-015-1
  title: 'SS-2016-015: XSS In OptionsetField and CheckboxSetField'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.1.19 <3.1.20"
  - ">=3.2.4 <3.2.5"
  - ">=3.3.2 <3.3.3"
  - ">=3.4.0 <3.4.1"
  package_manager: packagist
  disclosed_date: 2016-08-15
  created_date: 2016-08-15
  last_modified_date: 2016-08-15
  credit:
  - FriendsOfPHP
  references:
  - https://www.silverstripe.org/download/security-releases/ss-2016-015/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2016-015-1.yaml
- id: friendsofphp:packagist:silverstripe/framework:SS-2016-016-1
  title: 'SS-2016-016: XSS In CMSSecurity BackURL'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.1.0 <3.1.21"
  - ">=3.2.0 <3.2.6"
  - ">=3.3.0 <3.3.4"
  - ">=3.4.0 <3.4.2"
  package_manager: packagist
  disclosed_date: 2016-11-22
  created_date: 2016-11-22
  last_modified_date: 2016-11-22
  credit:
  - FriendsOfPHP
  references:
  - https://www.silverstripe.org/download/security-releases/ss-2016-016/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2016-016-1.yaml
- id: friendsofphp:packagist:silverstripe/framework:SS-2017-001-1
  title: 'SS-2017-001: XSS In page name'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.4.0 <3.4.4"
  - ">=3.5.0 <3.5.2"
  package_manager: packagist
  disclosed_date: 2017-01-31
  created_date: 2017-01-31
  last_modified_date: 2017-01-31
  credit:
  - FriendsOfPHP
  references:
  - https://www.silverstripe.org/download/security-releases/ss-2017-001/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2017-001-1.yaml
- id: friendsofphp:packagist:silverstripe/framework:SS-2017-002-1
  title: 'SS-2017-002: Member disclosure in login form'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.4.0 <3.4.6"
  - ">=3.5.0 <3.5.4"
  package_manager: packagist
  disclosed_date: 2017-05-30
  created_date: 2017-05-30
  last_modified_date: 2017-05-30
  credit:
  - FriendsOfPHP
  references:
  - https://www.silverstripe.org/download/security-releases/ss-2017-002/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2017-002-1.yaml
- id: friendsofphp:packagist:silverstripe/framework:SS-2017-003-1
  title: 'SS-2017-003: XSS in RedirectorPage'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.4.0 <3.4.6"
  - ">=3.5.0 <3.5.4"
  package_manager: packagist
  disclosed_date: 2017-05-30
  created_date: 2017-05-30
  last_modified_date: 2017-05-30
  credit:
  - FriendsOfPHP
  references:
  - https://www.silverstripe.org/download/security-releases/ss-2017-003/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2017-003-1.yaml
- id: friendsofphp:packagist:silverstripe/framework:SS-2017-004-1
  title: 'SS-2017-004: XSS in page history comparison'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.4.0 <3.4.6"
  - ">=3.5.0 <3.5.4"
  package_manager: packagist
  disclosed_date: 2017-05-30
  created_date: 2017-05-30
  last_modified_date: 2017-05-30
  credit:
  - FriendsOfPHP
  references:
  - https://www.silverstripe.org/download/security-releases/ss-2017-004/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2017-004-1.yaml
- id: friendsofphp:packagist:silverstripe/framework:SS-2017-005-1
  title: 'SS-2017-005: User enumeration via timing attack on login and password reset
    forms'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.5.0 <3.5.5"
  - ">=3.6.0 <3.6.2"
  package_manager: packagist
  disclosed_date: 2017-09-28
  created_date: 2017-09-28
  last_modified_date: 2017-09-28
  credit:
  - FriendsOfPHP
  references:
  - https://www.silverstripe.org/download/security-releases/ss-2017-005/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2017-005-1.yaml
- id: friendsofphp:packagist:silverstripe/framework:SS-2017-006-1
  title: 'SS-2017-006: Session user agent change detection'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.5.0 <3.5.6"
  - ">=3.6.0 <3.6.3"
  package_manager: packagist
  disclosed_date: 2017-12-07
  created_date: 2017-12-07
  last_modified_date: 2017-12-07
  credit:
  - FriendsOfPHP
  references:
  - https://www.silverstripe.org/download/security-releases/ss-2017-006/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2017-006-1.yaml
- id: friendsofphp:packagist:silverstripe/framework:SS-2017-007-1
  title: 'SS-2017-007: CSV Excel Macro Injection'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.5.0 <3.5.6"
  - ">=3.6.0 <3.6.3"
  - ">=4.0.0 <4.0.1"
  package_manager: packagist
  disclosed_date: 2017-12-07
  created_date: 2017-12-07
  last_modified_date: 2017-12-07
  credit:
  - FriendsOfPHP
  references:
  - https://www.silverstripe.org/download/security-releases/ss-2017-007/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2017-007-1.yaml
- id: friendsofphp:packagist:silverstripe/framework:SS-2017-008-1
  title: 'SS-2017-008: SQL injection in full text search of SilverStripe 4'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.5.0 <3.5.6"
  - ">=3.6.0 <3.6.3"
  - ">=4.0.0 <4.0.1"
  package_manager: packagist
  disclosed_date: 2017-12-07
  created_date: 2017-12-07
  last_modified_date: 2017-12-07
  credit:
  - FriendsOfPHP
  references:
  - https://www.silverstripe.org/download/security-releases/ss-2017-008/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2017-008-1.yaml
- id: friendsofphp:packagist:silverstripe/framework:SS-2017-009-1
  title: 'SS-2017-009: Users inadvertently passing sensitive data to LoginAttempt'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.5.0 <3.5.6"
  - ">=3.6.0 <3.6.3"
  - ">=4.0.0 <4.0.1"
  package_manager: packagist
  disclosed_date: 2017-12-07
  created_date: 2017-12-07
  last_modified_date: 2017-12-07
  credit:
  - FriendsOfPHP
  references:
  - https://www.silverstripe.org/download/security-releases/ss-2017-009/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2017-009-1.yaml
- id: friendsofphp:packagist:silverstripe/framework:SS-2017-010-1
  title: 'SS-2017-010: install.php discloses sensitive data by pre-populating DB credential
    forms'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=4.0.0 <4.0.1"
  package_manager: packagist
  disclosed_date: 2017-12-07
  created_date: 2017-12-07
  last_modified_date: 2017-12-07
  credit:
  - FriendsOfPHP
  references:
  - https://www.silverstripe.org/download/security-releases/ss-2017-010/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2017-010-1.yaml
- id: friendsofphp:packagist:silverstripe/framework:SS-2018-001-1
  title: 'SS-2018-001: Privilege Escalation Risk in Member Edit form'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.5.7 <3.5.8"
  - ">=3.6.0 <3.6.6"
  - ">=4.0.0 <4.0.4"
  - ">=4.1.0 <4.1.1"
  package_manager: packagist
  disclosed_date: 2018-05-24
  created_date: 2018-05-24
  last_modified_date: 2018-05-24
  credit:
  - FriendsOfPHP
  references:
  - https://www.silverstripe.org/download/security-releases/ss-2018-001/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2018-001-1.yaml
- id: friendsofphp:packagist:silverstripe/framework:SS-2018-005-1
  title: 'SS-2018-005: isDev and isTest unguarded'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=4.0.0 <4.0.4"
  - ">=4.1.0 <4.1.1"
  package_manager: packagist
  disclosed_date: 2018-05-24
  created_date: 2018-05-24
  last_modified_date: 2018-05-24
  credit:
  - FriendsOfPHP
  references:
  - https://www.silverstripe.org/download/security-releases/ss-2018-005/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2018-005-1.yaml
- id: friendsofphp:packagist:silverstripe/framework:SS-2018-006-1
  title: 'SS-2018-006: Code execution vulnerability'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=4.0.3 <4.0.4"
  - ">=4.1.0 <4.1.1"
  package_manager: packagist
  disclosed_date: 2018-05-24
  created_date: 2018-05-24
  last_modified_date: 2018-05-24
  credit:
  - FriendsOfPHP
  references:
  - https://www.silverstripe.org/download/security-releases/ss-2018-006/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2018-006-1.yaml
- id: friendsofphp:packagist:silverstripe/framework:SS-2018-008-1
  title: 'SS-2018-008: BackURL validation bypass with malformed URLs'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=4.0.0 <4.0.4"
  - ">=4.1.0 <4.1.1"
  package_manager: packagist
  disclosed_date: 2018-05-24
  created_date: 2018-05-24
  last_modified_date: 2018-05-24
  credit:
  - FriendsOfPHP
  references:
  - https://www.silverstripe.org/download/security-releases/ss-2018-008/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2018-008-1.yaml
- id: friendsofphp:packagist:silverstripe/framework:SS-2018-010-1
  title: 'SS-2018-010: Member disclosure in login form'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=4.0.0 <4.0.4"
  - ">=4.1.0 <4.1.1"
  package_manager: packagist
  disclosed_date: 2018-05-24
  created_date: 2018-05-24
  last_modified_date: 2018-05-24
  credit:
  - FriendsOfPHP
  references:
  - https://www.silverstripe.org/download/security-releases/ss-2018-010/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2018-010-1.yaml
- id: friendsofphp:packagist:silverstripe/framework:SS-2018-012-1
  title: 'SS-2018-012: Uploaded PHP script execution in assets'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=4.0.0 <4.0.4"
  - ">=4.1.0 <4.1.1"
  package_manager: packagist
  disclosed_date: 2018-05-24
  created_date: 2018-05-24
  last_modified_date: 2018-05-24
  credit:
  - FriendsOfPHP
  references:
  - https://www.silverstripe.org/download/security-releases/ss-2018-012/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2018-012-1.yaml
- id: friendsofphp:packagist:silverstripe/framework:SS-2018-013-1
  title: 'SS-2018-013: Passwords sent back to browsers under some circumstances'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.5.5 <3.7.0"
  - ">=4.0.3 <4.0.4"
  - ">=4.1.0 <4.1.1"
  package_manager: packagist
  disclosed_date: 2018-05-24
  created_date: 2018-05-24
  last_modified_date: 2018-05-24
  credit:
  - FriendsOfPHP
  references:
  - https://www.silverstripe.org/download/security-releases/ss-2018-013/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2018-013-1.yaml
- id: friendsofphp:packagist:silverstripe/framework:SS-2018-014-1
  title: 'SS-2018-014: Dangerous file types in allowed upload'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.6.5 <3.6.6"
  - ">=4.0.3 <4.0.4"
  - ">=4.1.0 <4.1.1"
  package_manager: packagist
  disclosed_date: 2018-05-24
  created_date: 2018-05-24
  last_modified_date: 2018-05-24
  credit:
  - FriendsOfPHP
  references:
  - https://www.silverstripe.org/download/security-releases/ss-2018-014/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2018-014-1.yaml
- id: friendsofphp:packagist:silverstripe/framework:SS-2018-018-1
  title: 'SS-2018-018: Database credentials disclosure during connection failure'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.7.0 <3.7.1"
  - ">=4.0.0 <4.0.5"
  - ">=4.1.0 <4.1.3"
  - ">=4.2.0 <4.2.2"
  package_manager: packagist
  disclosed_date: 2018-11-07
  created_date: 2018-11-07
  last_modified_date: 2018-11-07
  credit:
  - FriendsOfPHP
  references:
  - https://www.silverstripe.org/download/security-releases/ss-2018-018/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2018-018-1.yaml
- id: friendsofphp:packagist:silverstripe/framework:SS-2018-019-1
  title: 'SS-2018-019: Possible denial of service attack vector when flushing'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=4.0.0 <4.0.5"
  - ">=4.1.0 <4.1.3"
  - ">=4.2.0 <4.2.2"
  package_manager: packagist
  disclosed_date: 2018-12-12
  created_date: 2018-12-12
  last_modified_date: 2018-12-12
  credit:
  - FriendsOfPHP
  references:
  - https://www.silverstripe.org/download/security-releases/ss-2018-019/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2018-019-1.yaml
- id: friendsofphp:packagist:silverstripe/framework:SS-2018-020-1
  title: 'SS-2018-020: Potential SQL vulnerability in PostgreSQL database connector'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=4.0.0 <4.0.6"
  - ">=4.1.0 <4.1.4"
  - ">=4.2.0 <4.2.3"
  package_manager: packagist
  disclosed_date: 2018-12-12
  created_date: 2018-12-12
  last_modified_date: 2018-12-12
  credit:
  - FriendsOfPHP
  references:
  - https://www.silverstripe.org/download/security-releases/ss-2018-020/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2018-020-1.yaml
- id: ossindex:packagist:silverstripe/framework:8399183280
  title: '"SS-2014-015: IE requests not properly behaving with rewritehashlinks"'
  description: '"SS-2014-015: IE requests not properly behaving with rewritehashlinks"'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.0.0 <=3.0.12"
  - ">=3.1.0 <=3.1.11"
  package_manager: packagist
  disclosed_date: 2016-06-05
  created_date: 2016-06-05
  last_modified_date: 2016-06-05
  credit:
  - OSSIndex
  references:
  - http://www.silverstripe.org/software/download/security-releases/ss-2014-015-ie-requests-not-properly-behaving-with-rewritehashlinks/
  - https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2014-015-1.yaml
  source_url: https://ossindex.net/resource/package/8397594290/vulnerabilities
- id: ossindex:packagist:silverstripe/framework:8399183281
  title: '"SS-2014-017: XML Quadratic Blowup Attack"'
  description: '"SS-2014-017: XML Quadratic Blowup Attack"'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.1.0 <=3.1.11"
  package_manager: packagist
  disclosed_date: 2016-06-05
  created_date: 2016-06-05
  last_modified_date: 2016-06-05
  credit:
  - OSSIndex
  references:
  - http://www.silverstripe.org/software/download/security-releases/ss-2014-017-xml-quadratic-blowup-attack/
  - https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2014-017-1.yaml
  source_url: https://ossindex.net/resource/package/8397594290/vulnerabilities
- id: ossindex:packagist:silverstripe/framework:8399183282
  title: '"SS-2015-004: TreeDropdownField and TreeMultiSelectField XSS"'
  description: '"SS-2015-004: TreeDropdownField and TreeMultiSelectField XSS"'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.1.0 <=3.1.9"
  package_manager: packagist
  disclosed_date: 2016-06-05
  created_date: 2016-06-05
  last_modified_date: 2016-06-05
  credit:
  - OSSIndex
  references:
  - http://www.silverstripe.org/software/download/security-releases/ss-2015-004/
  - https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2015-004-1.yaml
  source_url: https://ossindex.net/resource/package/8397594290/vulnerabilities
- id: ossindex:packagist:silverstripe/framework:8399183283
  title: '"SS-2015-006: XSS In GridField print"'
  description: '"SS-2015-006: XSS In GridField print"'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.1.0 <3.1.10"
  package_manager: packagist
  disclosed_date: 2016-06-05
  created_date: 2016-06-05
  last_modified_date: 2016-06-05
  credit:
  - OSSIndex
  references:
  - http://www.silverstripe.org/software/download/security-releases/ss-2015-006/
  - https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2015-006-1.yaml
  source_url: https://ossindex.net/resource/package/8397594290/vulnerabilities
- id: ossindex:packagist:silverstripe/framework:8399183284
  title: '"SS-2015-007: XSS In FormAction"'
  description: '"SS-2015-007: XSS In FormAction"'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.1.0 <=3.1.9"
  package_manager: packagist
  disclosed_date: 2016-06-05
  created_date: 2016-06-05
  last_modified_date: 2016-06-05
  credit:
  - OSSIndex
  references:
  - http://www.silverstripe.org/software/download/security-releases/ss-2015-007/
  - https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2015-007-1.yaml
  source_url: https://ossindex.net/resource/package/8397594290/vulnerabilities
- id: ossindex:packagist:silverstripe/framework:8399183285
  title: '"SS-2015-009: XSS In rewritten hash links"'
  description: '"SS-2015-009: XSS In rewritten hash links"'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.0.0 <=3.0.12"
  - ">=3.1.0 <=3.1.11"
  package_manager: packagist
  disclosed_date: 2016-06-05
  created_date: 2016-06-05
  last_modified_date: 2016-06-05
  credit:
  - OSSIndex
  references:
  - http://www.silverstripe.org/software/download/security-releases/ss-2015-009-xss-in-rewritten-hash-links/
  - https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2015-009-1.yaml
  source_url: https://ossindex.net/resource/package/8397594290/vulnerabilities
- id: ossindex:packagist:silverstripe/framework:8399183286
  title: '"SS-2015-010: XSS in Director::force_redirect()"'
  description: '"SS-2015-010: XSS in Director::force_redirect()"'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.1.0 <3.1.12"
  package_manager: packagist
  disclosed_date: 2016-06-05
  created_date: 2016-06-05
  last_modified_date: 2016-06-05
  credit:
  - OSSIndex
  references:
  - http://www.silverstripe.org/software/download/security-releases/ss-2015-010-xss-in-directorforce-redirect/
  - https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2015-010-1.yaml
  source_url: https://ossindex.net/resource/package/8397594290/vulnerabilities
- id: ossindex:packagist:silverstripe/framework:8399183287
  title: '"SS-2015-011: Potential SQL Injection Vulnerability"'
  description: '"SS-2015-011: Potential SQL Injection Vulnerability"'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.0.0 <=3.0.13"
  - ">=3.1.0 <3.1.13"
  package_manager: packagist
  disclosed_date: 2016-06-05
  created_date: 2016-06-05
  last_modified_date: 2016-06-05
  credit:
  - OSSIndex
  references:
  - http://www.silverstripe.org/software/download/security-releases/ss-2015-011/
  - https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2015-011-1.yaml
  source_url: https://ossindex.net/resource/package/8397594290/vulnerabilities
- id: ossindex:packagist:silverstripe/framework:8399183288
  title: '"SS-2015-012: External redirection risk in Security?ReturnURL"'
  description: '"SS-2015-012: External redirection risk in Security?ReturnURL"'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.0.0 <=3.0.13"
  - ">=3.1.0 <=3.1.12"
  package_manager: packagist
  disclosed_date: 2016-06-05
  created_date: 2016-06-05
  last_modified_date: 2016-06-05
  credit:
  - OSSIndex
  references:
  - http://www.silverstripe.org/software/download/security-releases/ss-2015-012/
  - https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2015-012-1.yaml
  source_url: https://ossindex.net/resource/package/8397594290/vulnerabilities
- id: ossindex:packagist:silverstripe/framework:8399183289
  title: '"SS-2015-013: X-Forwarded-Host request hostname injection"'
  description: '"SS-2015-013: X-Forwarded-Host request hostname injection"'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.1.0 <3.1.13"
  package_manager: packagist
  disclosed_date: 2016-06-05
  created_date: 2016-06-05
  last_modified_date: 2016-06-05
  credit:
  - OSSIndex
  references:
  - http://www.silverstripe.org/software/download/security-releases/ss-2015-013/
  - https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2015-013-1.yaml
  source_url: https://ossindex.net/resource/package/8397594290/vulnerabilities
- id: ossindex:packagist:silverstripe/framework:8399183290
  title: '"SS-2015-014: Vulnerability on ''isDev'', ''isTest'' and ''flush'' $_GET
    validation"'
  description: '"SS-2015-014: Vulnerability on ''isDev'', ''isTest'' and ''flush''
    $_GET validation"'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.0.0 <=3.0.13"
  - ">=3.1.0 <3.1.13"
  package_manager: packagist
  disclosed_date: 2016-06-05
  created_date: 2016-06-05
  last_modified_date: 2016-06-05
  credit:
  - OSSIndex
  references:
  - http://www.silverstripe.org/software/download/security-releases/ss-2015-014/
  - https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2015-014-1.yaml
  source_url: https://ossindex.net/resource/package/8397594290/vulnerabilities
- id: ossindex:packagist:silverstripe/framework:8399183291
  title: '"SS-2015-015: XSS in dev/build returnURL Parameter"'
  description: '"SS-2015-015: XSS in dev/build returnURL Parameter"'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.1.0 <3.1.14"
  package_manager: packagist
  disclosed_date: 2016-06-05
  created_date: 2016-06-05
  last_modified_date: 2016-06-05
  credit:
  - OSSIndex
  references:
  - http://www.silverstripe.org/software/download/security-releases/ss-2015-015/
  - https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2015-015-1.yaml
  source_url: https://ossindex.net/resource/package/8397594290/vulnerabilities
- id: ossindex:packagist:silverstripe/framework:8399183292
  title: '"SS-2015-016: XSS in install.php"'
  description: '"SS-2015-016: XSS in install.php"'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.1.0 <3.1.14"
  package_manager: packagist
  disclosed_date: 2016-06-05
  created_date: 2016-06-05
  last_modified_date: 2016-06-05
  credit:
  - OSSIndex
  references:
  - http://www.silverstripe.org/software/download/security-releases/ss-2015-016/
  - https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2015-016-1.yaml
  source_url: https://ossindex.net/resource/package/8397594290/vulnerabilities
- id: ossindex:packagist:silverstripe/framework:8399183293
  title: 'SS-2015-026: Form field validation message XSS vulnerability'
  description: 'SS-2015-026: Form field validation message XSS vulnerability'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.0.0 <3.1.0"
  - ">=3.1.0 <3.1.16"
  - ">=3.2.0 <3.2.1"
  package_manager: packagist
  disclosed_date: 2016-06-05
  created_date: 2016-06-05
  last_modified_date: 2016-06-05
  credit:
  - OSSIndex
  references:
  - http://www.silverstripe.org/download/security-releases/ss-2015-026/
  - https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2015-026-1.yaml
  source_url: https://ossindex.net/resource/package/8397594290/vulnerabilities
- id: ossindex:packagist:silverstripe/framework:8399183294
  title: 'SS-2015-027: HtmlEditor embed url sanitisation'
  description: 'SS-2015-027: HtmlEditor embed url sanitisation'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.0.0 <3.1.0"
  - ">=3.1.0 <3.2.0"
  - ">=3.2.0 <3.2.1"
  package_manager: packagist
  disclosed_date: 2016-06-05
  created_date: 2016-06-05
  last_modified_date: 2016-06-05
  credit:
  - OSSIndex
  references:
  - http://www.silverstripe.org/download/security-releases/ss-2015-027/
  - https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2015-027-1.yaml
  source_url: https://ossindex.net/resource/package/8397594290/vulnerabilities
- id: ossindex:packagist:silverstripe/framework:8399183295
  title: 'SS-2015-028: Missing security check on dev/build/defaults'
  description: 'SS-2015-028: Missing security check on dev/build/defaults'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">3.2 <3.3.0"
  - ">=3.1.0 <=3.1.16"
  - ">=3.2.0 <=3.2.1"
  package_manager: packagist
  disclosed_date: 2016-06-05
  created_date: 2016-06-05
  last_modified_date: 2016-06-05
  credit:
  - OSSIndex
  references:
  - http://www.silverstripe.org/download/security-releases/ss-2015-028/
  - https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2015-028-1.yaml
  source_url: https://ossindex.net/resource/package/8397594290/vulnerabilities
- id: ossindex:packagist:silverstripe/framework:8399183296
  title: 'SS-2016-002: CSRF vulnerability in GridFieldAddExistingAutocompleter'
  description: 'SS-2016-002: CSRF vulnerability in GridFieldAddExistingAutocompleter'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">3.2 <3.3.0"
  - ">=3.1.0 <=3.1.16"
  - ">=3.2.0 <=3.2.1"
  package_manager: packagist
  disclosed_date: 2016-06-05
  created_date: 2016-06-05
  last_modified_date: 2016-06-05
  credit:
  - OSSIndex
  references:
  - http://www.silverstripe.org/download/security-releases/ss-2016-002/
  - https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2016-002-1.yaml
  source_url: https://ossindex.net/resource/package/8397594290/vulnerabilities
- id: ossindex:packagist:silverstripe/framework:8399183297
  title: 'SS-2016-003: Hostname, IP and Protocol Spoofing through HTTP Headers'
  description: 'SS-2016-003: Hostname, IP and Protocol Spoofing through HTTP Headers'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">3.2 <3.3.0"
  - ">=3.1.0 <=3.1.16"
  - ">=3.2.0 <=3.2.1"
  package_manager: packagist
  disclosed_date: 2016-06-05
  created_date: 2016-06-05
  last_modified_date: 2016-06-05
  credit:
  - OSSIndex
  references:
  - http://www.silverstripe.org/download/security-releases/ss-2016-003/
  - https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2016-003-1.yaml
  source_url: https://ossindex.net/resource/package/8397594290/vulnerabilities
- id: snykio:packagist:silverstripe/framework:173709
  title: SQL Injection
  description: |
    [silverstripe/framework][1] is PHP framework forming the base for the
    SilverStripe CMS.

    Affected versions of this package are vulnerable to SQL Injection via
    `Form` and `DataObject` when a specifically crafted user input is
    executed as `SQL SELECT` statements in the process of writing this input
    to a database record. It requires a specific `SilverStripe`
    implementation to accept user input for this purpose.



    [1]: https://packagist.org/packages/silverstripe/framework
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.6.0  <3.6.7"
  - ">=3.7.0  <3.7.3"
  - ">=4.0.0  <4.0.7"
  - ">=4.1.0  <4.1.5"
  - ">=4.2.0  <4.2.4"
  - ">=4.3.0  <4.3.1"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2019-5715
  cwe:
  - CWE-89
  disclosed_date: 2019-02-19
  created_date: 2019-02-19
  last_modified_date: 2019-02-19
  credit:
  - James Turner
  references:
  - https://www.silverstripe.org/download/security-releases/ss-2018-021/
  source_url: https://snyk.io/vuln/SNYK-PHP-SILVERSTRIPEFRAMEWORK-173709
- id: snykio:packagist:silverstripe/framework:449594
  title: Cross-Site Request Forgery (CSRF)
  description: |
    [silverstripe/framework][1] is a PHP framework forming the base for the
    SilverStripe CMS.

    Affected versions of this package are vulnerable to Cross-Site Request
    Forgery (CSRF). The Cross Site Request Forgery protection for GraphQL
    mutation queries does not adequately protect against CSRF attacks on
    GraphQL endpoints. When a GraphQL query is formed with a fragment
    portion, it needs to check whether the query is a mutation and, so the
    `X-CSRF-TOKEN` header, the token header that is required for the CSRF
    protection module, is not required with the HTTP request and therefore
    is able to bypass the CSRF protection.



    [1]: https://packagist.org/packages/silverstripe/framework
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=4.0.0  <4.4.0"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2019-12246
  cwe:
  - CWE-352
  disclosed_date: 2019-06-10
  created_date: 2019-06-11
  last_modified_date: 2019-06-11
  credit:
  - Unknown
  references:
  - https://www.silverstripe.org/download/security-releases/cve-2019-12246
  source_url: https://snyk.io/vuln/SNYK-PHP-SILVERSTRIPEFRAMEWORK-449594
- id: snykio:packagist:silverstripe/framework:469154
  title: Session Fixation
  description: |
    [silverstripe/framework][1] is a PHP framework forming the base for the
    SilverStripe CMS.

    Affected versions of this package are vulnerable to Session Fixation.
    Session Fixation possible in the \"change password\" form. A potential
    account hijacking may happen if an attacker has physical access to
    victim\'s computer to perform session fixation.



    [1]: https://packagist.org/packages/silverstripe/framework
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.6.0  <3.6.8"
  - ">=3.7.0  <3.7.4"
  - ">=4.3.0  <4.3.6"
  - ">=4.4.0  <4.4.4"
  severity: low
  package_manager: packagist
  cve:
  - CVE-2019-12203
  cwe:
  - CWE-384
  disclosed_date: 2019-09-25
  created_date: 2019-09-25
  last_modified_date: 2019-09-25
  credit:
  - Unknown
  references:
  - https://github.com/silverstripe/silverstripe-framework/commit/eccfa9b10d246d741de2fa83d502339d45068983
  - https://www.silverstripe.org/download/security-releases/CVE-2019-12203
  source_url: https://snyk.io/vuln/SNYK-PHP-SILVERSTRIPEFRAMEWORK-469154
- id: snykio:packagist:silverstripe/framework:469155
  title: Incorrect Access Control
  description: |
    [silverstripe/framework][1] is a PHP framework forming the base for the
    SilverStripe CMS.

    Affected versions of this package are vulnerable to Incorrect Access
    Control. None



    [1]: https://packagist.org/packages/silverstripe/framework
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=4.1.0  <4.3.6"
  - ">=4.4.0  <4.4.4"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2019-12204
  cwe:
  - CWE-284
  disclosed_date: 2019-09-24
  created_date: 2019-09-26
  last_modified_date: 2019-09-26
  credit:
  - Steve Boyd
  references:
  - https://github.com/silverstripe/silverstripe-cms/commit/f98a59deb58d3c9c739f5b32de16472f6ef4a69c
  - https://www.silverstripe.org/download/security-releases/CVE-2019-12204
  source_url: https://snyk.io/vuln/SNYK-PHP-SILVERSTRIPEFRAMEWORK-469155
- id: snykio:packagist:silverstripe/framework:469236
  title: Improper Access Control
  description: |
    [silverstripe/framework][1] is a PHP framework forming the base for the
    SilverStripe CMS.

    Affected versions of this package are vulnerable to Improper Access
    Control. Access escalation is possible for CMS users with limited access
    through permission cache pollution.



    [1]: https://packagist.org/packages/silverstripe/framework
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=4.3.0  <4.3.6"
  - ">=4.4.0  <4.4.4"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2019-12617
  cwe:
  - CWE-284
  disclosed_date: 2019-09-26
  created_date: 2019-09-26
  last_modified_date: 2019-09-26
  credit:
  - Serge Latyntcev
  references:
  - https://github.com/silverstripe/silverstripe-framework/commit/8b7063a8e2773e2bbec3cabf94ed86e11f607071
  - https://www.silverstripe.org/download/security-releases/CVE-2019-12617
  source_url: https://snyk.io/vuln/SNYK-PHP-SILVERSTRIPEFRAMEWORK-469236
- id: snykio:packagist:silverstripe/framework:546481
  title: Cross-site Scripting (XSS)
  description: |+
    [silverstripe/framework][1] is a PHP framework forming the base for the
    SilverStripe CMS.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) in CMSSecurity BackURL.



    [1]: https://packagist.org/packages/silverstripe/framework
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.1.18  <3.1.19"
  - ">=3.2.3  <3.2.4"
  - ">=3.3.1  <3.3.2"
  severity: high
  package_manager: packagist
  cwe:
  - CWE-79
  disclosed_date: 2020-02-05
  created_date: 2020-02-05
  last_modified_date: 2020-02-05
  credit:
  - David Julio
  references:
  - https://www.silverstripe.org/download/security-releases/ss-2016-016/
  source_url: https://snyk.io/vuln/SNYK-PHP-SILVERSTRIPEFRAMEWORK-546481
- id: snykio:packagist:silverstripe/framework:546483
  title: Cross-site Scripting (XSS)
  description: |+
    [silverstripe/framework][1] is a PHP framework forming the base for the
    SilverStripe CMS.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). A third party library their own documentation, which in turn
    included a vulnerable SWF file. This file was accessible on SilverStripe
    websites by default. Older browsers executed SWF directly, and in
    certain circumstances can expose the document object and associated data
    (e.g. cookies).



    [1]: https://packagist.org/packages/silverstripe/framework
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.0.0  <4.3.5"
  - ">=4.4.0  <4.4.4"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2019-12205
  cwe:
  - CWE-79
  disclosed_date: 2020-02-05
  created_date: 2020-02-05
  last_modified_date: 2020-02-05
  credit:
  - Jay Richardson
  references:
  - https://www.silverstripe.org/download/security-releases/cve-2019-12205/
  source_url: https://snyk.io/vuln/SNYK-PHP-SILVERSTRIPEFRAMEWORK-546483
- id: snykio:packagist:silverstripe/framework:546485
  title: Cross-site Scripting (XSS)
  description: |+
    [silverstripe/framework][1] is a PHP framework forming the base for the
    SilverStripe CMS.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). It allows XSS by authenicated users through editing file titles
    through the CMS. This can lead to privilege escalation by malicious
    authenticated users with otherwise more limited access.



    [1]: https://packagist.org/packages/silverstripe/framework
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=4.0.0  <4.3.5"
  - ">=4.4.0  <4.4.4"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2019-14272
  cwe:
  - CWE-79
  disclosed_date: 2020-02-05
  created_date: 2020-02-05
  last_modified_date: 2020-02-05
  credit:
  - Bot Kotatu
  references:
  - https://www.silverstripe.org/download/security-releases/cve-2019-14272/
  source_url: https://snyk.io/vuln/SNYK-PHP-SILVERSTRIPEFRAMEWORK-546485
- id: snykio:packagist:silverstripe/framework:546487
  title: Cross-site Scripting (XSS)
  description: |+
    [silverstripe/framework][1] is a PHP framework forming the base for the
    SilverStripe CMS.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). Setting a page name to `"><svg/onload=alert(/xss/)>` will trigger
    an XSS alert.



    [1]: https://packagist.org/packages/silverstripe/framework
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: silverstripe/framework
  vulnerable_versions:
  - "<3.4.4"
  - ">=3.5.0  <3.5.2"
  severity: high
  package_manager: packagist
  cwe:
  - CWE-79
  disclosed_date: 2020-02-05
  created_date: 2020-02-05
  last_modified_date: 2020-02-05
  credit:
  - Edric Teo
  references:
  - https://www.silverstripe.org/download/security-releases/ss-2017-001/
  source_url: https://snyk.io/vuln/SNYK-PHP-SILVERSTRIPEFRAMEWORK-546487
- id: snykio:packagist:silverstripe/framework:546488
  title: Cross-site Scripting (XSS)
  description: |+
    [silverstripe/framework][1] is a PHP framework forming the base for the
    SilverStripe CMS.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). An authenticated user with page edit permission can craft HTML,
    which when rendered in a page history comparison can execute client
    scripts.



    [1]: https://packagist.org/packages/silverstripe/framework
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: silverstripe/framework
  vulnerable_versions:
  - "<3.4.6"
  - ">=3.5.0  <3.5.4"
  severity: high
  package_manager: packagist
  cwe:
  - CWE-79
  disclosed_date: 2020-02-05
  created_date: 2020-02-05
  last_modified_date: 2020-02-05
  credit:
  - Anti Rais
  references:
  - https://www.silverstripe.org/download/security-releases/ss-2017-004/
  source_url: https://snyk.io/vuln/SNYK-PHP-SILVERSTRIPEFRAMEWORK-546488
- id: snykio:packagist:silverstripe/framework:546489
  title: Cross-site Scripting (XSS)
  description: |
    [silverstripe/framework][1] is a PHP framework forming the base for the
    SilverStripe CMS.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). List of key / value pairs assigned to `OptionsetField` or
    `CheckboxSetField` do not have a default casting assigned to them. The
    effect of this is a potential XSS vulnerability in lists where either
    key or value contain unescaped HTML.



    [1]: https://packagist.org/packages/silverstripe/framework
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.1.19  <3.1.20"
  - ">=3.2.4  <3.2.5"
  - ">=3.3.2  <3.3.3"
  - ">=3.4.0  <3.4.1"
  severity: high
  package_manager: packagist
  cwe:
  - CWE-79
  disclosed_date: 2020-02-05
  created_date: 2020-02-05
  last_modified_date: 2020-02-05
  credit:
  - Unknown
  source_url: https://snyk.io/vuln/SNYK-PHP-SILVERSTRIPEFRAMEWORK-546489
- id: snykio:packagist:silverstripe/framework:546492
  title: Cross-site Scripting (XSS)
  description: |+
    [silverstripe/framework][1] is a PHP framework forming the base for the
    SilverStripe CMS.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). Due to a lack of parameter sanitisation a carefully crafted URL
    could be used to inject arbitrary HTML into the CMS Edit page. An
    attacker could create a URL and share it with a site administrator to
    perform an attack.



    [1]: https://packagist.org/packages/silverstripe/framework
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.1.18  <3.1.19"
  - ">=3.2.3  <3.2.4"
  - ">=3.3.1  <3.3.2"
  severity: high
  package_manager: packagist
  cwe:
  - CWE-79
  disclosed_date: 2020-02-05
  created_date: 2020-02-05
  last_modified_date: 2020-02-05
  credit:
  - Eric Flokstra
  references:
  - https://www.silverstripe.org/download/security-releases/ss-2016-004/
  source_url: https://snyk.io/vuln/SNYK-PHP-SILVERSTRIPEFRAMEWORK-546492
- id: snykio:packagist:silverstripe/framework:546493
  title: Cross-site Scripting (XSS)
  description: |+
    [silverstripe/framework][1] is a PHP framework forming the base for the
    SilverStripe CMS.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). `RedirectorPage` will allow users to specify a non-url malicious
    script as the redirection path without validation. Users which follow
    this url may allow this script to execute within their browser.



    [1]: https://packagist.org/packages/silverstripe/framework
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: silverstripe/framework
  vulnerable_versions:
  - "<3.4.6"
  - ">=3.5.0  <3.5.4"
  severity: high
  package_manager: packagist
  cwe:
  - CWE-79
  disclosed_date: 2020-02-05
  created_date: 2020-02-05
  last_modified_date: 2020-02-05
  credit:
  - Wester
  references:
  - https://www.silverstripe.org/download/security-releases/ss-2017-003/
  source_url: https://snyk.io/vuln/SNYK-PHP-SILVERSTRIPEFRAMEWORK-546493
- id: snykio:packagist:silverstripe/framework:546494
  title: SQL Injection
  description: |
    [silverstripe/framework][1] is a PHP framework forming the base for the
    SilverStripe CMS.

    Affected versions of this package are vulnerable to SQL Injection. When
    performing a fulltext search the \'start\' querystring parameter is
    never escaped safely.



    [1]: https://packagist.org/packages/silverstripe/framework
  affected_package: silverstripe/framework
  vulnerable_versions:
  - "<3.5.6"
  - ">=3.6.0  <3.6.3"
  - ">=4.0.0  <4.0.1"
  severity: high
  package_manager: packagist
  cwe:
  - CWE-89
  disclosed_date: 2020-02-05
  created_date: 2020-02-05
  last_modified_date: 2020-02-05
  credit:
  - Stephan Bauer
  references:
  - https://www.silverstripe.org/download/security-releases/ss-2017-008/
  source_url: https://snyk.io/vuln/SNYK-PHP-SILVERSTRIPEFRAMEWORK-546494
- id: snykio:packagist:silverstripe/framework:546495
  title: Privilege Escalation
  description: |
    [silverstripe/framework][1] is a PHP framework forming the base for the
    SilverStripe CMS.

    Affected versions of this package are vulnerable to Privilege
    Escalation. A member with the permission `EDIT_PERMISSIONS` and access
    to the \"Security\" section is able to re-assign themselves (or another
    member) to `ADMIN` level. CMS Fields for the member are constructed
    using DirectGroups instead of Groups relation which results in bypassing
    security logic preventing privilege escalation.



    [1]: https://packagist.org/packages/silverstripe/framework
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.5.7  <3.5.8"
  - ">=3.6.0  <3.6.6"
  - ">=4.0.0  <4.0.4"
  - ">=4.1.0  <4.1.1"
  severity: high
  package_manager: packagist
  cwe:
  - CWE-264
  disclosed_date: 2020-02-05
  created_date: 2020-02-05
  last_modified_date: 2020-02-05
  credit:
  - Worik Stanton
  references:
  - https://www.silverstripe.org/download/security-releases/ss-2018-001/
  source_url: https://snyk.io/vuln/SNYK-PHP-SILVERSTRIPEFRAMEWORK-546495
- id: snykio:packagist:silverstripe/framework:546496
  title: Open Redirect
  description: |
    [silverstripe/framework][1] is a PHP framework forming the base for the
    SilverStripe CMS.

    Affected versions of this package are vulnerable to Open Redirect. A
    carefully constructed malformed URL can be used to circumvent the
    offsite redirection protection used on BackURL parameters. This could
    lead to users entering sensitive data in malicious websites instead of
    the intended one.



    [1]: https://packagist.org/packages/silverstripe/framework
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=4.0.0  <4.0.4"
  severity: high
  package_manager: packagist
  cwe:
  - CWE-601
  disclosed_date: 2020-02-05
  created_date: 2020-02-05
  last_modified_date: 2020-02-05
  credit:
  - Mustafa Hasan
  references:
  - https://www.silverstripe.org/download/security-releases/ss-2018-008/
  source_url: https://snyk.io/vuln/SNYK-PHP-SILVERSTRIPEFRAMEWORK-546496
- id: snykio:packagist:silverstripe/framework:546497
  title: Arbitrary Code Execution
  description: |
    [silverstripe/framework][1] is a PHP framework forming the base for the
    SilverStripe CMS.

    Affected versions of this package are vulnerable to Arbitrary Code
    Execution. There is a vulnerability whereby arbitrary global functions
    may be executed if malicious user input is passed through to in the
    second argument of `ViewableData::renderWith`. This argument resolves
    associative arrays as template placehoders. This exploit requires that
    user code has been written which makes use of the second argument in
    `renderWith` and where user input is passed directly as a value in an
    associative array without sanitisation such as `Convert::raw2xml()`.

    `ViewableData::customise` is not vulnerable.



    [1]: https://packagist.org/packages/silverstripe/framework
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=4.0.3  <4.0.4"
  - ">=4.1.0  <4.1.1"
  severity: high
  package_manager: packagist
  cwe:
  - CWE-94
  disclosed_date: 2020-02-05
  created_date: 2020-02-05
  last_modified_date: 2020-02-05
  credit:
  - Logan Woods and Josh Leroux
  references:
  - https://www.silverstripe.org/download/security-releases/ss-2018-006/
  source_url: https://snyk.io/vuln/SNYK-PHP-SILVERSTRIPEFRAMEWORK-546497
- id: snykio:packagist:silverstripe/framework:546498
  title: Information Exposure
  description: |
    [silverstripe/framework][1] is a PHP framework forming the base for the
    SilverStripe CMS.

    Affected versions of this package are vulnerable to Information
    Exposure. There is a user ID enumeration vulnerability in the brute
    force error messages. Users that don\'t exist in will never get a locked
    out message, while users that do exist, will get a locked out message.
    This means an attacker can infer or confirm user details that exist in
    the member table.



    [1]: https://packagist.org/packages/silverstripe/framework
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=4.0.0  <4.0.4"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-200
  disclosed_date: 2020-02-05
  created_date: 2020-02-05
  last_modified_date: 2020-02-05
  credit:
  - Dan Hensby
  references:
  - https://www.silverstripe.org/download/security-releases/ss-2018-010/
  source_url: https://snyk.io/vuln/SNYK-PHP-SILVERSTRIPEFRAMEWORK-546498
- id: snykio:packagist:silverstripe/framework:546499
  title: Denial of Service (DoS)
  description: |+
    [silverstripe/framework][1] is a PHP framework forming the base for the
    SilverStripe CMS.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS) in the dev/build system controller.



    [1]: https://packagist.org/packages/silverstripe/framework
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=4.0.0  <4.0.5"
  - ">=4.1.0  <4.1.3"
  - ">=4.2.0  <4.2.2"
  severity: high
  package_manager: packagist
  cwe:
  - CWE-400
  disclosed_date: 2020-02-05
  created_date: 2020-02-05
  last_modified_date: 2020-02-05
  credit:
  - Michael Strong
  references:
  - https://www.silverstripe.org/download/security-releases/ss-2018-019/
  source_url: https://snyk.io/vuln/SNYK-PHP-SILVERSTRIPEFRAMEWORK-546499
- id: snykio:packagist:silverstripe/framework:546500
  title: Information Exposure
  description: |
    [silverstripe/framework][1] is a PHP framework forming the base for the
    SilverStripe CMS.

    Affected versions of this package are vulnerable to Information
    Exposure. The URL parameters isDev and isTest are accessible to
    unauthenticated users who access a SilverStripe website or application.
    This allows unauthorised users to expose information that is usually
    hidden on production environments such as verbose errors (including
    backtraces) and other debugging tools only available to sites running in
    \"dev mode\". Core functionality does not expose user data through these
    methods. Depending on your website configuration, community modules
    might have added more specific functionality which can be used to either
    access or alter user data.



    [1]: https://packagist.org/packages/silverstripe/framework
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=4.0.0  <4.0.4"
  - ">=4.1.0  <4.1.1"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-200
  disclosed_date: 2020-02-05
  created_date: 2020-02-05
  last_modified_date: 2020-02-05
  credit:
  - Will Barker
  references:
  - https://www.silverstripe.org/download/security-releases/ss-2018-005/
  source_url: https://snyk.io/vuln/SNYK-PHP-SILVERSTRIPEFRAMEWORK-546500
- id: snykio:packagist:silverstripe/framework:546501
  title: Cross-site Scripting (XSS)
  description: |+
    [silverstripe/framework][1] is a PHP framework forming the base for the
    SilverStripe CMS.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) via the `Member.Name` field. If the currently logged in members
    first name or surname contain XSS, this prints the raw HTML out, because
    `Member->getName()` just returns the raw FirstName + Surname as a
    string, which is injected directly.



    [1]: https://packagist.org/packages/silverstripe/framework
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.1.9  <3.1.20"
  - ">=3.2.4  <3.2.5"
  - ">=3.3.2  <3.3.3"
  - ">=3.4.0  <3.4.1"
  severity: high
  package_manager: packagist
  cwe:
  - CWE-79
  disclosed_date: 2020-02-05
  created_date: 2020-02-05
  last_modified_date: 2020-02-05
  credit:
  - Matt Peel
  references:
  - https://www.silverstripe.org/download/security-releases/ss-2016-013/
  source_url: https://snyk.io/vuln/SNYK-PHP-SILVERSTRIPEFRAMEWORK-546501
- id: snykio:packagist:silverstripe/framework:546502
  title: Information Exposure
  description: |
    [silverstripe/framework][1] is a PHP framework forming the base for the
    SilverStripe CMS.

    Affected versions of this package are vulnerable to Information
    Exposure. User enumeration is possible by performing a timing attack on
    the login or password reset pages with user credentials.



    [1]: https://packagist.org/packages/silverstripe/framework
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.5.0  <3.5.5"
  - ">=3.6.0  <3.6.2"
  severity: high
  package_manager: packagist
  cwe:
  - CWE-200
  disclosed_date: 2020-02-05
  created_date: 2020-02-05
  last_modified_date: 2020-02-05
  credit:
  - Daniel Hensby
  - Erez Yalon
  references:
  - https://www.silverstripe.org/download/security-releases/ss-2017-005/
  source_url: https://snyk.io/vuln/SNYK-PHP-SILVERSTRIPEFRAMEWORK-546502
- id: snykio:packagist:silverstripe/framework:546503
  title: CSV Injection
  description: |
    [silverstripe/framework][1] is a PHP framework forming the base for the
    SilverStripe CMS.

    Affected versions of this package are vulnerable to CSV Injection. In
    the CSV export feature of the CMS it\'s possible for the output to
    contain macros and scripts, which if imported without sanitisation into
    software (including Microsoft Excel) may be executed.



    [1]: https://packagist.org/packages/silverstripe/framework
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.5.0  <3.5.6"
  - ">=3.6.0  <3.6.3"
  - ">=4.0.0  <4.0.1"
  severity: high
  package_manager: packagist
  cwe:
  - CWE-20
  disclosed_date: 2020-02-05
  created_date: 2020-02-05
  last_modified_date: 2020-02-05
  credit:
  - Ishaq Mohammed
  references:
  - https://www.silverstripe.org/download/security-releases/ss-2017-007/
  source_url: https://snyk.io/vuln/SNYK-PHP-SILVERSTRIPEFRAMEWORK-546503
- id: snykio:packagist:silverstripe/framework:546504
  title: Information Exposure
  description: |
    [silverstripe/framework][1] is a PHP framework forming the base for the
    SilverStripe CMS.

    Affected versions of this package are vulnerable to Information
    Exposure. There is a user ID enumeration vulnerability in the brute
    force error messages. Users that don\'t exist in will never get a locked
    out message, while users that do exist, will get a locked out message
    This means an attacker can infer or confirm user details that exist in
    the member table.



    [1]: https://packagist.org/packages/silverstripe/framework
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.4.0  <3.4.6"
  - ">=3.5.0  <3.5.4"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-200
  disclosed_date: 2020-02-05
  created_date: 2020-02-05
  last_modified_date: 2020-02-05
  credit:
  - Unknown
  references:
  - https://www.silverstripe.org/download/security-releases/ss-2017-002/
  source_url: https://snyk.io/vuln/SNYK-PHP-SILVERSTRIPEFRAMEWORK-546504
- id: snykio:packagist:silverstripe/framework:546505
  title: Cross-site Request Forgery (CSRF)
  description: |
    [silverstripe/framework][1] is a PHP framework forming the base for the
    SilverStripe CMS.

    Affected versions of this package are vulnerable to Cross-site Request
    Forgery (CSRF). `LoginForm` method calls `disableSecurityToken()`, which
    causes a \"shared host domain\" vulnerability.



    [1]: https://packagist.org/packages/silverstripe/framework
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.1.18  <3.1.19"
  - ">=3.2.3  <3.2.4"
  - ">=3.3.1  <3.3.2"
  severity: high
  package_manager: packagist
  cwe:
  - CWE-352
  disclosed_date: 2020-02-05
  created_date: 2020-02-05
  last_modified_date: 2020-02-05
  credit:
  - Anthony Thorpe
  references:
  - https://www.silverstripe.org/download/security-releases/ss-2016-006/
  source_url: https://snyk.io/vuln/SNYK-PHP-SILVERSTRIPEFRAMEWORK-546505
- id: snykio:packagist:silverstripe/framework:546506
  title: Information Exposure
  description: |
    [silverstripe/framework][1] is a PHP framework forming the base for the
    SilverStripe CMS.

    Affected versions of this package are vulnerable to Information
    Exposure. When running SilverStripe in dev mode with the mysqli database
    driver, there is a potential to disclose the connection details.



    [1]: https://packagist.org/packages/silverstripe/framework
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.7.0  <3.7.1"
  - ">=4.0.0  <4.0.5"
  - ">=4.1.0  <4.1.3"
  - ">=4.2.0  <4.2.2"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-200
  disclosed_date: 2020-02-05
  created_date: 2020-02-05
  last_modified_date: 2020-02-05
  credit:
  - Dylan Wagstaff
  - Lukas Erni
  references:
  - https://www.silverstripe.org/download/security-releases/ss-2018-018/
  source_url: https://snyk.io/vuln/SNYK-PHP-SILVERSTRIPEFRAMEWORK-546506
- id: snykio:packagist:silverstripe/framework:546507
  title: Cross-site Scripting (XSS)
  description: |+
    [silverstripe/framework][1] is a PHP framework forming the base for the
    SilverStripe CMS.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). Form fields returning `isReadonly()` as true are vulnerable to
    reflected XSS injections. This includes `ReadonlyField`, `LookupField`,
    `HTMLReadonlyField`, as well as special purpose fields like
    `TimeField_Readonly`. Values submitted to through these form fields are
    not filtered out from the form session data, and might be shown to the
    user depending on the form behaviour. For example, form validation
    errors cause the form to re-render with previously submitted values by
    default.

    SilverStripe forms automatically load values from request data (GET and
    POST), which enables malicious use of URLs if your form uses these
    fields and doesn\'t overwrite data on form construction.

    `Readonly` and `disabled` form fields are already filtered out in
    `Form->saveInto()`, so maliciously submitted data on these fields
    doesn\'t make it into the database unless you are accessing form values
    directly in your saving logic.



    [1]: https://packagist.org/packages/silverstripe/framework
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.1.0  <3.1.21"
  - ">=3.2.0  <3.2.6"
  - ">=3.3.0  <3.3.4"
  - ">=3.4.0  <3.4.2"
  severity: high
  package_manager: packagist
  cwe:
  - CWE-79
  disclosed_date: 2020-02-05
  created_date: 2020-02-05
  last_modified_date: 2020-02-05
  credit:
  - securityassessment.com
  references:
  - https://www.silverstripe.org/download/security-releases/ss-2016-010/
  source_url: https://snyk.io/vuln/SNYK-PHP-SILVERSTRIPEFRAMEWORK-546507
- id: snykio:packagist:silverstripe/framework:546508
  title: Cross-site Scripting (XSS)
  description: |+
    [silverstripe/framework][1] is a PHP framework forming the base for the
    SilverStripe CMS.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). If an incoming user request should not be able to access the
    requested stage, an error message is created for display on the CMS
    login page that they are redirected to. In this error message, the URL
    of the requested page is interpolated into the error message without
    being escaped; hence, arbitrary HTML can be injected into the CMS login
    page.



    [1]: https://packagist.org/packages/silverstripe/framework
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.3.2  <3.3.3"
  - ">=3.4.0  <3.4.1"
  severity: high
  package_manager: packagist
  cwe:
  - CWE-79
  disclosed_date: 2020-02-05
  created_date: 2020-02-05
  last_modified_date: 2020-02-05
  credit:
  - Matthew Daley
  references:
  - https://www.silverstripe.org/download/security-releases/ss-2016-007/
  source_url: https://snyk.io/vuln/SNYK-PHP-SILVERSTRIPEFRAMEWORK-546508
- id: snykio:packagist:silverstripe/framework:546509
  title: Information Exposure
  description: |
    [silverstripe/framework][1] is a PHP framework forming the base for the
    SilverStripe CMS.

    Affected versions of this package are vulnerable to Information
    Exposure. When accessing the `install.php` script it is possible to
    extract any pre-configured database or default admin account password by
    viewing the source of the page, and inspecting the `value` property of
    the password fields.



    [1]: https://packagist.org/packages/silverstripe/framework
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=4.0.0  <4.0.1"
  severity: high
  package_manager: packagist
  cwe:
  - CWE-200
  disclosed_date: 2020-02-05
  created_date: 2020-02-05
  last_modified_date: 2020-02-05
  credit:
  - Unknown
  references:
  - https://www.silverstripe.org/download/security-releases/ss-2017-010/
  source_url: https://snyk.io/vuln/SNYK-PHP-SILVERSTRIPEFRAMEWORK-546509
- id: snykio:packagist:silverstripe/framework:546514
  title: Improper Access Control
  description: |
    [silverstripe/framework][1] is a PHP framework forming the base for the
    SilverStripe CMS.

    Affected versions of this package are vulnerable to Improper Access
    Control. The `SS_Report`, and the reports CMS section only checks
    `canView()` when listing the reports that can be viewed by the current
    user. It does not (and should) perform `canView` checks when the report
    is actually viewed, so if you know the URL to a report and can otherwise
    access the Reports section of the CMS, you can view any report.



    [1]: https://packagist.org/packages/silverstripe/framework
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.1.19  <3.1.20"
  - ">=3.2.4  <3.2.5"
  - ">=3.3.2  <3.3.3"
  - ">=3.4.0  <3.4.1"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-284
  disclosed_date: 2020-02-05
  created_date: 2020-02-05
  last_modified_date: 2020-02-05
  credit:
  - Matt Peel
  references:
  - https://www.silverstripe.org/download/security-releases/ss-2016-012/
  source_url: https://snyk.io/vuln/SNYK-PHP-SILVERSTRIPEFRAMEWORK-546514
- id: snykio:packagist:silverstripe/framework:546515
  title: Improper Authentication
  description: |
    [silverstripe/framework][1] is a PHP framework forming the base for the
    SilverStripe CMS.

    Affected versions of this package are vulnerable to Improper
    Authentication. If remember me is on and users log in with the box
    checked, if the developer then disabled \"remember me\" function, any
    pre-existing cookies will continue to authenticate users.



    [1]: https://packagist.org/packages/silverstripe/framework
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.1.19  <3.1.20"
  - ">=3.2.4  <3.2.5"
  - ">=3.3.2  <3.3.3"
  - ">=3.4.0  <3.4.1"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-287
  disclosed_date: 2020-02-05
  created_date: 2020-02-05
  last_modified_date: 2020-02-05
  credit:
  - Patrick Nelson
  references:
  - https://www.silverstripe.org/download/security-releases/ss-2016-014/
  source_url: https://snyk.io/vuln/SNYK-PHP-SILVERSTRIPEFRAMEWORK-546515
- id: snykio:packagist:silverstripe/framework:546516
  title: Unrestricted Upload
  description: |
    [silverstripe/framework][1] is a PHP framework forming the base for the
    SilverStripe CMS.

    Affected versions of this package are vulnerable to Unrestricted Upload.
    Some potentially dangerous file types exist in `File.allowed_extensions`
    which could allow a malicious CMS user to upload files that then get
    executed in the security context of the website. We have removed the
    ability to upload `.css, .js, .potm, .dotm, .xltm and .jar` files in the
    default configuration. Since `allowed_extensions` are synced to
    webserver configuration (in `assets/.htaccess`) automatically, this will
    also deny access to any existing uploads with these extensions.



    [1]: https://packagist.org/packages/silverstripe/framework
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.6.5  <3.6.6"
  - ">=4.0.3  <4.0.4"
  - ">=4.1.0  <4.1.1"
  severity: high
  package_manager: packagist
  cwe:
  - CWE-434
  disclosed_date: 2020-02-05
  created_date: 2020-02-05
  last_modified_date: 2020-02-05
  credit:
  - Insomnia Security
  references:
  - https://www.silverstripe.org/download/security-releases/ss-2018-014/
  source_url: https://snyk.io/vuln/SNYK-PHP-SILVERSTRIPEFRAMEWORK-546516
- id: snykio:packagist:silverstripe/framework:546519
  title: Improper Restriction of Excessive Authentication Attempts
  description: |
    [silverstripe/framework][1] is a PHP framework forming the base for the
    SilverStripe CMS.

    Affected versions of this package are vulnerable to Improper Restriction
    of Excessive Authentication Attempts. `Default Administrator` accounts
    were not subject to the same brute force protection afforded to other
    Member accounts. Failed login counts were not logged for default admins
    resulting in unlimited attempts on the default admin username and
    password.



    [1]: https://packagist.org/packages/silverstripe/framework
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.1.18  <3.1.19"
  - ">=3.2.3  <3.2.4"
  - ">=3.3.1  <3.3.2"
  severity: low
  package_manager: packagist
  cwe:
  - CWE-307
  disclosed_date: 2020-02-05
  created_date: 2020-02-05
  last_modified_date: 2020-02-05
  credit:
  - Will Rossiter
  references:
  - https://www.silverstripe.org/download/security-releases/ss-2016-005/
  source_url: https://snyk.io/vuln/SNYK-PHP-SILVERSTRIPEFRAMEWORK-546519
- id: snykio:packagist:silverstripe/framework:546520
  title: Session Hijacking
  description: |
    [silverstripe/framework][1] is a PHP framework forming the base for the
    SilverStripe CMS.

    Affected versions of this package are vulnerable to Session Hijacking. A
    security protection device in Session designed to protect session
    hijacking was not correctly functioning. This function intended to
    protect user sessions by detecting changes in the User-Agent header, but
    modifications to this header were not correctly invalidating the user
    session.



    [1]: https://packagist.org/packages/silverstripe/framework
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.5.0  <3.5.6"
  - ">=3.6.0  <3.6.3"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-287
  disclosed_date: 2020-02-05
  created_date: 2020-02-05
  last_modified_date: 2020-02-05
  credit:
  - Patrick Nelson
  references:
  - https://www.silverstripe.org/download/security-releases/ss-2017-006/
  source_url: https://snyk.io/vuln/SNYK-PHP-SILVERSTRIPEFRAMEWORK-546520
- id: snykio:packagist:silverstripe/framework:548933
  title: Cross-site Scripting (XSS)
  description: |+
    [silverstripe/framework][1] is a PHP framework forming the base for the
    SilverStripe CMS.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) via the login form and custom forms, through non-scalar FormField
    attributes.



    [1]: https://packagist.org/packages/silverstripe/framework
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=4.4.0  <4.4.5"
  - ">=4.5.0  <4.5.2"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2019-19325
  cwe:
  - CWE-79
  disclosed_date: 2020-02-17
  created_date: 2020-02-17
  last_modified_date: 2020-02-17
  credit:
  - Unknown
  references:
  - https://github.com/silverstripe/silverstripe-framework/commit/ad1b00ec7dc1589a05bfc7f5f8207489797ef714
  - https://www.silverstripe.org/download/security-releases/cve-2019-19325
  source_url: https://snyk.io/vuln/SNYK-PHP-SILVERSTRIPEFRAMEWORK-548933
- id: snykio:packagist:silverstripe/framework:70140
  title: Arbitrary Code Injection
  description: |
    Affected versions of [`silverstripe/framework`][1] are vulnerable to
    Arbitrary Code Injection.



    [1]: https://packagist.org/packages/silverstripe/framework
  affected_package: silverstripe/framework
  vulnerable_versions:
  - "<3.0.13"
  - ">=3.1.0  <3.1.12"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-94
  disclosed_date: 2015-03-20
  created_date: 2015-03-20
  last_modified_date: 2015-03-20
  credit:
  - Unknown
  references:
  - http://www.silverstripe.org/software/download/security-releases/ss-2014-015-ie-requests-not-properly-behaving-with-rewritehashlinks/
  source_url: https://snyk.io/vuln/SNYK-PHP-SILVERSTRIPEFRAMEWORK-70140
- id: snykio:packagist:silverstripe/framework:70141
  title: Quadratic Blowup Attack
  description: |
    Affected versions of [`silverstripe/framework`][1] are vulnerable to
    Quadratic Blowup Attack.



    [1]: https://packagist.org/packages/silverstripe/framework
  affected_package: silverstripe/framework
  vulnerable_versions:
  - "<3.1.12"
  severity: low
  package_manager: packagist
  cwe:
  - CWE-400
  disclosed_date: 2014-08-12
  created_date: 2014-08-12
  last_modified_date: 2014-08-12
  credit:
  - Jamie Totten
  references:
  - http://www.silverstripe.org/software/download/security-releases/ss-2014-017-xml-quadratic-blowup-attack/
  source_url: https://snyk.io/vuln/SNYK-PHP-SILVERSTRIPEFRAMEWORK-70141
- id: snykio:packagist:silverstripe/framework:70142
  title: Cross-site Scripting (XSS)
  description: |+
    Affected versions of [`silverstripe/framework`][1] are vulnerable to
    Cross-site Scripting (XSS).



    [1]: https://packagist.org/packages/silverstripe/framework
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: silverstripe/framework
  vulnerable_versions:
  - "<3.1.10"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-79
  disclosed_date: 2015-02-12
  created_date: 2015-02-12
  last_modified_date: 2015-02-12
  credit:
  - Unknown
  references:
  - http://www.silverstripe.org/software/download/security-releases/ss-2015-004/
  source_url: https://snyk.io/vuln/SNYK-PHP-SILVERSTRIPEFRAMEWORK-70142
- id: snykio:packagist:silverstripe/framework:70143
  title: Cross-site Scripting (XSS)
  description: |+
    Affected versions of [`silverstripe/framework`][1] are vulnerable to
    Cross-site Scripting (XSS).



    [1]: https://packagist.org/packages/silverstripe/framework
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: silverstripe/framework
  vulnerable_versions:
  - "<3.1.10"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-79
  disclosed_date: 2015-02-12
  created_date: 2015-02-12
  last_modified_date: 2015-02-12
  credit:
  - Unknown
  references:
  - http://www.silverstripe.org/software/download/security-releases/ss-2015-006/
  source_url: https://snyk.io/vuln/SNYK-PHP-SILVERSTRIPEFRAMEWORK-70143
- id: snykio:packagist:silverstripe/framework:70144
  title: Cross-site Scripting (XSS)
  description: |+
    Affected versions of [`silverstripe/framework`][1] are vulnerable to
    Cross-site Scripting (XSS).



    [1]: https://packagist.org/packages/silverstripe/framework
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: silverstripe/framework
  vulnerable_versions:
  - "<3.1.10"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-79
  disclosed_date: 2015-02-12
  created_date: 2015-02-12
  last_modified_date: 2015-02-12
  credit:
  - Unknown
  references:
  - http://www.silverstripe.org/software/download/security-releases/ss-2015-007/
  source_url: https://snyk.io/vuln/SNYK-PHP-SILVERSTRIPEFRAMEWORK-70144
- id: snykio:packagist:silverstripe/framework:70145
  title: Cross-site Scripting (XSS)
  description: |+
    Affected versions of [`silverstripe/framework`][1] are vulnerable to
    Cross-site Scripting (XSS).



    [1]: https://packagist.org/packages/silverstripe/framework
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: silverstripe/framework
  vulnerable_versions:
  - "<3.0.13"
  - ">=3.1.0  <3.1.12"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-79
  disclosed_date: 2015-03-20
  created_date: 2015-03-20
  last_modified_date: 2015-03-20
  credit:
  - Unknown
  references:
  - http://www.silverstripe.org/software/download/security-releases/ss-2015-009-xss-in-rewritten-hash-links/
  source_url: https://snyk.io/vuln/SNYK-PHP-SILVERSTRIPEFRAMEWORK-70145
- id: snykio:packagist:silverstripe/framework:70146
  title: Cross-site Scripting (XSS)
  description: |+
    Affected versions of [`silverstripe/framework`][1] are vulnerable to
    Cross-site Scripting (XSS).



    [1]: https://packagist.org/packages/silverstripe/framework
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: silverstripe/framework
  vulnerable_versions:
  - "<3.1.12"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-79
  disclosed_date: 2015-03-20
  created_date: 2015-03-20
  last_modified_date: 2015-03-20
  credit:
  - Unknown
  references:
  - http://www.silverstripe.org/software/download/security-releases/ss-2015-010-xss-in-directorforce-redirect/
  source_url: https://snyk.io/vuln/SNYK-PHP-SILVERSTRIPEFRAMEWORK-70146
- id: snykio:packagist:silverstripe/framework:70147
  title: SQL Injection
  description: |
    Affected versions of [`silverstripe/framework`][1] are vulnerable to SQL
    Injection.



    [1]: https://packagist.org/packages/silverstripe/framework
  affected_package: silverstripe/framework
  vulnerable_versions:
  - "<3.0.14"
  - ">=3.1.0  <3.1.13"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-89
  disclosed_date: 2015-05-25
  created_date: 2015-05-25
  last_modified_date: 2015-05-25
  credit:
  - Unknown
  references:
  - http://www.silverstripe.org/software/download/security-releases/ss-2015-011/
  source_url: https://snyk.io/vuln/SNYK-PHP-SILVERSTRIPEFRAMEWORK-70147
- id: snykio:packagist:silverstripe/framework:70148
  title: Open Redirect
  description: |
    Affected versions of [`silverstripe/framework`][1] are vulnerable to
    Open Redirect.



    [1]: https://packagist.org/packages/silverstripe/framework
  affected_package: silverstripe/framework
  vulnerable_versions:
  - "<3.0.14"
  - ">=3.1.0  <3.1.13"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-601
  disclosed_date: 2015-05-25
  created_date: 2015-05-25
  last_modified_date: 2015-05-25
  credit:
  - Unknown
  references:
  - http://www.silverstripe.org/software/download/security-releases/ss-2015-012/
  source_url: https://snyk.io/vuln/SNYK-PHP-SILVERSTRIPEFRAMEWORK-70148
- id: snykio:packagist:silverstripe/framework:70149
  title: HTTP Hostname Injection
  description: |
    Affected versions of [`silverstripe/framework`][1] are vulnerable to
    HTTP Hostname Injection.



    [1]: https://packagist.org/packages/silverstripe/framework
  affected_package: silverstripe/framework
  vulnerable_versions:
  - "<3.1.13"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-74
  disclosed_date: 2015-05-29
  created_date: 2015-05-29
  last_modified_date: 2015-05-29
  credit:
  - Unknown
  references:
  - http://www.silverstripe.org/software/download/security-releases/ss-2015-013/
  source_url: https://snyk.io/vuln/SNYK-PHP-SILVERSTRIPEFRAMEWORK-70149
- id: snykio:packagist:silverstripe/framework:70150
  title: Access Restriction Bypass
  description: |
    Affected versions of [`silverstripe/framework`][1] are vulnerable to
    Access Restriction Bypass.



    [1]: https://packagist.org/packages/silverstripe/framework
  affected_package: silverstripe/framework
  vulnerable_versions:
  - "<3.0.14"
  - ">=3.1.0  <3.1.13"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-284
  disclosed_date: 2015-05-28
  created_date: 2015-05-28
  last_modified_date: 2015-05-28
  credit:
  - Unknown
  references:
  - http://www.silverstripe.org/software/download/security-releases/ss-2015-014/
  source_url: https://snyk.io/vuln/SNYK-PHP-SILVERSTRIPEFRAMEWORK-70150
- id: snykio:packagist:silverstripe/framework:70151
  title: Cross-site Scripting (XSS)
  description: |+
    Affected versions of [`silverstripe/framework`][1] are vulnerable to
    Cross-site Scripting (XSS).



    [1]: https://packagist.org/packages/silverstripe/framework
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: silverstripe/framework
  vulnerable_versions:
  - "<3.1.14"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-79
  disclosed_date: 2015-09-14
  created_date: 2015-09-14
  last_modified_date: 2015-09-14
  credit:
  - Unknown
  references:
  - http://www.silverstripe.org/software/download/security-releases/ss-2015-015/
  source_url: https://snyk.io/vuln/SNYK-PHP-SILVERSTRIPEFRAMEWORK-70151
- id: snykio:packagist:silverstripe/framework:70152
  title: Cross-site Scripting (XSS)
  description: |+
    Affected versions of [`silverstripe/framework`][1] are vulnerable to
    Cross-site Scripting (XSS).



    [1]: https://packagist.org/packages/silverstripe/framework
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: silverstripe/framework
  vulnerable_versions:
  - "<3.1.14"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-79
  disclosed_date: 2015-09-14
  created_date: 2015-09-14
  last_modified_date: 2015-09-14
  credit:
  - Unknown
  references:
  - http://www.silverstripe.org/software/download/security-releases/ss-2015-016/
  source_url: https://snyk.io/vuln/SNYK-PHP-SILVERSTRIPEFRAMEWORK-70152
- id: snykio:packagist:silverstripe/framework:70153
  title: Cross-site Scripting (XSS)
  description: |+
    Affected versions of [`silverstripe/framework`][1] are vulnerable to
    Cross-site Scripting (XSS).



    [1]: https://packagist.org/packages/silverstripe/framework
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: silverstripe/framework
  vulnerable_versions:
  - "<3.1.16"
  - ">=3.2.0  <3.2.1"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-79
  disclosed_date: 2015-11-11
  created_date: 2015-11-11
  last_modified_date: 2015-11-11
  credit:
  - Unknown
  references:
  - http://www.silverstripe.org/download/security-releases/ss-2015-026/
  source_url: https://snyk.io/vuln/SNYK-PHP-SILVERSTRIPEFRAMEWORK-70153
- id: snykio:packagist:silverstripe/framework:70154
  title: Cross-site Scripting (XSS)
  description: |+
    Affected versions of [`silverstripe/framework`][1] are vulnerable to
    Cross-site Scripting (XSS).



    [1]: https://packagist.org/packages/silverstripe/framework
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: silverstripe/framework
  vulnerable_versions:
  - "<3.2.1"
  severity: low
  package_manager: packagist
  cwe:
  - CWE-79
  disclosed_date: 2015-11-13
  created_date: 2015-11-13
  last_modified_date: 2015-11-13
  credit:
  - Unknown
  references:
  - http://www.silverstripe.org/download/security-releases/ss-2015-027/
  source_url: https://snyk.io/vuln/SNYK-PHP-SILVERSTRIPEFRAMEWORK-70154
- id: snykio:packagist:silverstripe/framework:70155
  title: Access Restriction Bypass
  description: |
    Affected versions of [`silverstripe/framework`][1] are vulnerable to
    Access Restriction Bypass.



    [1]: https://packagist.org/packages/silverstripe/framework
  affected_package: silverstripe/framework
  vulnerable_versions:
  - "<3.1.17"
  - ">=3.2.0  <3.2.2"
  - ">=3.3-alpha  <3.3.0"
  severity: low
  package_manager: packagist
  cwe:
  - CWE-284
  disclosed_date: 2016-02-17
  created_date: 2016-02-17
  last_modified_date: 2016-02-17
  credit:
  - Unknown
  references:
  - http://www.silverstripe.org/download/security-releases/ss-2015-028/
  source_url: https://snyk.io/vuln/SNYK-PHP-SILVERSTRIPEFRAMEWORK-70155
- id: snykio:packagist:silverstripe/framework:70156
  title: Cross-site Request Forgery (CSRF)
  description: |
    Affected versions of [`silverstripe/framework`][1] are vulnerable to
    Cross-site Request Forgery (CSRF).



    [1]: https://packagist.org/packages/silverstripe/framework
  affected_package: silverstripe/framework
  vulnerable_versions:
  - "<3.1.17"
  - ">=3.2.0  <3.2.2"
  - ">=3.3-alpha  <3.3.0"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-352
  disclosed_date: 2016-02-17
  created_date: 2016-02-17
  last_modified_date: 2016-02-17
  credit:
  - Unknown
  references:
  - http://www.silverstripe.org/download/security-releases/ss-2016-002/
  source_url: https://snyk.io/vuln/SNYK-PHP-SILVERSTRIPEFRAMEWORK-70156
- id: snykio:packagist:silverstripe/framework:70157
  title: IP and Protocol Spoofing
  description: |
    Affected versions of [`silverstripe/framework`][1] are vulnerable to
    SS-2016-003: Hostname, IP and Protocol Spoofing through HTTP Headers.



    [1]: https://packagist.org/packages/silverstripe/framework
  affected_package: silverstripe/framework
  vulnerable_versions:
  - "<3.1.17"
  - ">=3.2.0  <3.2.2"
  - ">=3.3-alpha  <3.3.0"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-290
  disclosed_date: 2016-02-18
  created_date: 2016-02-18
  last_modified_date: 2016-02-18
  credit:
  - Unknown
  references:
  - http://www.silverstripe.org/download/security-releases/ss-2016-003/
  source_url: https://snyk.io/vuln/SNYK-PHP-SILVERSTRIPEFRAMEWORK-70157
- id: snykio:packagist:silverstripe/framework:72209
  title: Access Restriction Bypass
  description: |
    [silverstripe/framework][1] is The SilverStripe framework.

    Affected versions of this package are vulnerable to Access Restriction
    Bypass. It uses weak entropy when generating tokens for the CSRF
    protection mechanism.



    [1]: https://packagist.org/packages/silverstripe/framework
  affected_package: silverstripe/framework
  vulnerable_versions:
  - "<2.3.10"
  - ">=2.4.0  <2.4.4"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2010-5079
  cwe:
  - CWE-310
  disclosed_date: 2010-09-17
  created_date: 2018-06-17
  last_modified_date: 2018-06-17
  credit:
  - Unknown
  references:
  - https://nvd.nist.gov/vuln/detail/CVE-2010-5079
  source_url: https://snyk.io/vuln/SNYK-PHP-SILVERSTRIPEFRAMEWORK-72209
