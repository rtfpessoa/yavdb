---
- id: snykio:packagist:mediawiki/core:1013531
  title: Cross-site Scripting (XSS)
  description: |+
    [mediawiki/core][1] is a Free software wiki application developed by the
    Wikimedia Foundation and others

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). `LogEventList::getFiltersDesc` is insecurely using message text
    to build options names for an HTML multi-select field. The relevant code
    should use `escaped()` instead of `text()`.



    [1]: https://github.com/wikimedia/mediawiki
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: mediawiki/core
  vulnerable_versions:
  - ">=1.31.0  <1.31.9"
  - ">=1.32.0  <1.34.4"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2020-25815
  cwe:
  - CWE-79
  disclosed_date: 2020-09-28
  created_date: 2020-09-28
  last_modified_date: 2020-09-28
  credit:
  - Unknown
  references:
  - https://gerrit.wikimedia.org/g/mediawiki/core/+/ec76e14be658187544f07c1a249a047e1a75eaf8/includes/logging/LogEventsList.php#214
  - https://github.com/wikimedia/mediawiki/commit/ad21a02e163384edcad14cce3b27ab6d3372d5e3
  - https://lists.wikimedia.org/pipermail/mediawiki-l/2020-September/048480.html
  source_url: https://snyk.io/vuln/SNYK-PHP-MEDIAWIKICORE-1013531
- id: snykio:packagist:mediawiki/core:1013532
  title: Cross-site Scripting (XSS)
  description: |+
    [mediawiki/core][1] is a Free software wiki application developed by the
    Wikimedia Foundation and others

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). The n`on-jqueryMsg` version of` mw.message().parse()` doesn\'t
    escape HTML. This affects both message contents (which are generally
    safe) and the parameters (which can be based on user input). When
    `jqueryMsg` is loaded, it correctly accepts only whitelisted tags in
    message contents, and escapes all parameters. Situations with an
    unloaded `jqueryMsg` are rare in practice, but can for example occur for
    `Special:SpecialPages` on a wiki with no extensions installed.



    [1]: https://github.com/wikimedia/mediawiki
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: mediawiki/core
  vulnerable_versions:
  - ">=1.31.0  <1.31.10"
  - ">=1.32.0  <1.34.4"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2020-25828
  cwe:
  - CWE-79
  disclosed_date: 2020-09-28
  created_date: 2020-09-28
  last_modified_date: 2020-09-28
  credit:
  - Unknown
  references:
  - https://github.com/wikimedia/mediawiki/commit/d0b7fb495c9d5446607672ad6a93a5491efe7337
  - https://lists.wikimedia.org/pipermail/mediawiki-l/2020-September/048480.html
  source_url: https://snyk.io/vuln/SNYK-PHP-MEDIAWIKICORE-1013532
- id: snykio:packagist:mediawiki/core:1013533
  title: Cross-site Scripting (XSS)
  description: |+
    [mediawiki/core][1] is a Free software wiki application developed by the
    Wikimedia Foundation and others

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). On `Special:Contributions`, the NS filter uses unescaped messages
    as keys in the option key for an HTMLForm specifier. This is vulnerable
    to a mild XSS if one of those messages is changed to include raw HTML.



    [1]: https://github.com/wikimedia/mediawiki
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: mediawiki/core
  vulnerable_versions:
  - ">=1.31.0  <1.31.10"
  - ">=1.32.0  <1.34.4"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2020-25812
  cwe:
  - CWE-79
  disclosed_date: 2020-09-28
  created_date: 2020-09-28
  last_modified_date: 2020-09-28
  credit:
  - Unknown
  references:
  - https://github.com/wikimedia/mediawiki/commit/358c1ec070d4f989e049550d88b629ab166c6f15
  - https://lists.wikimedia.org/pipermail/mediawiki-l/2020-September/048480.html
  source_url: https://snyk.io/vuln/SNYK-PHP-MEDIAWIKICORE-1013533
- id: snykio:packagist:mediawiki/core:1013534
  title: Cross-site Scripting (XSS)
  description: |+
    [mediawiki/core][1] is a Free software wiki application developed by the
    Wikimedia Foundation and others

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). On `Special:Contributions`, the NS filter uses unescaped messages
    as keys in the option key for an HTMLForm specifier. This is vulnerable
    to a mild XSS if one of those messages is changed to include raw HTML.



    [1]: https://github.com/wikimedia/mediawiki
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: mediawiki/core
  vulnerable_versions:
  - ">=1.31.0  <1.31.10"
  - ">=1.32.0  <1.34.4"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2020-25812
  cwe:
  - CWE-79
  disclosed_date: 2020-09-28
  created_date: 2020-09-28
  last_modified_date: 2020-09-28
  credit:
  - Unknown
  references:
  - https://github.com/wikimedia/mediawiki/commit/358c1ec070d4f989e049550d88b629ab166c6f15
  - https://lists.wikimedia.org/pipermail/mediawiki-l/2020-September/048480.html
  source_url: https://snyk.io/vuln/SNYK-PHP-MEDIAWIKICORE-1013534
- id: snykio:packagist:mediawiki/core:1013841
  title: Access Restriction Bypass
  description: |
    [mediawiki/core][1] is a Free software wiki application developed by the
    Wikimedia Foundation and others

    Affected versions of this package are vulnerable to Access Restriction
    Bypass via the `OATHAuth` extension. For Wikis using OATHAuth on a
    farm/cluster, rate limiting of OATH tokens is only done on a single site
    level. Thus, multiple requests can be made across many wikis/sites
    concurrently.

    **Note:** The issue was fixed in versions 1.31.10 and 1.34.4 but the
    package is no longer maintained and doesn\'t include the fixed versions.



    [1]: https://github.com/wikimedia/mediawiki
  affected_package: mediawiki/core
  vulnerable_versions:
  - ">=0.0.0"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2020-25827
  cwe:
  - CWE-284
  disclosed_date: 2020-09-29
  created_date: 2020-09-29
  last_modified_date: 2020-09-29
  credit:
  - Unknown
  references:
  - https://lists.wikimedia.org/pipermail/mediawiki-l/2020-September/048488.html
  - https://phabricator.wikimedia.org/T251661
  source_url: https://snyk.io/vuln/SNYK-PHP-MEDIAWIKICORE-1013841
- id: snykio:packagist:mediawiki/core:1013844
  title: Information Exposure
  description: |
    [mediawiki/core][1] is a Free software wiki application developed by the
    Wikimedia Foundation and others

    Affected versions of this package are vulnerable to Information
    Exposure. `Special:UserRights` exposes the existence of hidden users.

    **Note:** The issue was fixed in versions 1.31.10 and 1.34.4 but the
    package is no longer maintained and doesn\'t include the fixed versions.



    [1]: https://github.com/wikimedia/mediawiki
  affected_package: mediawiki/core
  vulnerable_versions:
  - ">=0.0.0"
  severity: low
  package_manager: packagist
  cve:
  - CVE-2020-25813
  cwe:
  - CWE-200
  disclosed_date: 2020-09-29
  created_date: 2020-09-29
  last_modified_date: 2020-09-29
  credit:
  - Unknown
  references:
  - https://lists.wikimedia.org/pipermail/mediawiki-l/2020-September/048480.html
  source_url: https://snyk.io/vuln/SNYK-PHP-MEDIAWIKICORE-1013844
- id: snykio:packagist:mediawiki/core:1019378
  title: Information Disclosure
  description: |
    [mediawiki/core][1] is a Free software wiki application developed by the
    Wikimedia Foundation and others

    Affected versions of this package are vulnerable to Information
    Disclosure. `Special:Redirect` allows information disclosure of
    suppressed usernames via a User ID Lookup.



    [1]: https://github.com/wikimedia/mediawiki
  affected_package: mediawiki/core
  vulnerable_versions:
  - ">=1.31.0  <1.31.4"
  - ">=1.32.0  <1.32.4"
  - ">=1.33.0  <1.33.1"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2019-16738
  cwe:
  - CWE-200
  disclosed_date: 2020-10-19
  created_date: 2020-10-19
  last_modified_date: 2020-10-19
  credit:
  - Unknown
  references:
  - https://github.com/FriendsOfPHP/security-advisories/commit/f7a4dde1299a33c611b094c189526275b8235261
  - https://phabricator.wikimedia.org/T230402
  source_url: https://snyk.io/vuln/SNYK-PHP-MEDIAWIKICORE-1019378
- id: snykio:packagist:mediawiki/core:1019460
  title: Improper Encoding or Escaping of Output
  description: |
    [mediawiki/core][1] is a Free software wiki application developed by the
    Wikimedia Foundation and others

    Affected versions of this package are vulnerable to Improper Encoding or
    Escaping of Output. Users can add various Cascading Style Sheets (CSS)
    classes (which can affect what content is shown or hidden in the user
    interface) to arbitrary DOM nodes via HTML content within a MediaWiki
    page. This occurs because `jquery.makeCollapsible` allows applying an
    event handler to any Cascading Style Sheets (CSS) selector.



    [1]: https://github.com/wikimedia/mediawiki
  affected_package: mediawiki/core
  vulnerable_versions:
  - ">=1.31.0  <1.31.7"
  - ">=1.33.0  <1.33.3"
  - ">=1.34.0  <1.34.1"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2020-10960
  cwe:
  - CWE-116
  disclosed_date: 2020-10-20
  created_date: 2020-10-20
  last_modified_date: 2020-10-20
  credit:
  - Unknown
  references:
  - https://phabricator.wikimedia.org/T246602
  source_url: https://snyk.io/vuln/SNYK-PHP-MEDIAWIKICORE-1019460
- id: snykio:packagist:mediawiki/core:1019477
  title: Open Redirect
  description: |
    [mediawiki/core][1] is a Free software wiki application developed by the
    Wikimedia Foundation and others

    Affected versions of this package are vulnerable to Open Redirect. It
    allows remote attackers to force a logout and external redirection via
    HTML content in a MediaWiki page.



    [1]: https://github.com/wikimedia/mediawiki
  affected_package: mediawiki/core
  vulnerable_versions:
  - ">=1.34.0  <1.34.1"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2020-10959
  cwe:
  - CWE-601
  disclosed_date: 2020-10-20
  created_date: 2020-10-20
  last_modified_date: 2020-10-20
  credit:
  - Unknown
  references:
  - https://gerrit.wikimedia.org/r/c/mediawiki/core/+/536725
  source_url: https://snyk.io/vuln/SNYK-PHP-MEDIAWIKICORE-1019477
- id: snykio:packagist:mediawiki/core:1019478
  title: Cross-site Scripting (XSS)
  description: |+
    [mediawiki/core][1] is a Free software wiki application developed by the
    Wikimedia Foundation and others

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). An attacker could create a message with \[javascript:payload
    xss\] and turns it into a jQuery object with `mw.message().parse().` The
    expected result is that the jQuery object does not contain an `<a>` tag
    (or it does not have a href attribute, or it\'s empty, etc.). The actual
    result is that the object contains an `<a href ="javascript...` that
    executes when clicked.



    [1]: https://github.com/wikimedia/mediawiki
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: mediawiki/core
  vulnerable_versions:
  - ">=1.31.0  <1.31.9"
  - ">=1.34.0  <1.34.3"
  - ">=1.34.99  <1.35.0"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2020-25814
  cwe:
  - CWE-79
  disclosed_date: 2020-10-20
  created_date: 2020-10-20
  last_modified_date: 2020-10-20
  credit:
  - Unknown
  references:
  - https://phabricator.wikimedia.org/T86738
  source_url: https://snyk.io/vuln/SNYK-PHP-MEDIAWIKICORE-1019478
- id: snykio:packagist:mediawiki/core:1041726
  title: Authentication Bypass
  description: |
    [mediawiki/core][1] is a Free software wiki application developed by the
    Wikimedia Foundation and others

    Affected versions of this package are vulnerable to Authentication
    Bypass. It is possible to bypass the CentralAuth\'s account lock due to
    a flaw in `BotPasswords`.



    [1]: https://github.com/wikimedia/mediawiki
  affected_package: mediawiki/core
  vulnerable_versions:
  - ">=1.27.0  <1.27.5"
  - ">=1.29.0  <1.29.3"
  - ">=1.30.0  <1.30.1"
  - ">=1.31.0  <1.31.1"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2018-0505
  cwe:
  - CWE-287
  disclosed_date: 2020-11-19
  created_date: 2020-11-19
  last_modified_date: 2020-11-19
  credit:
  - Unknown
  references:
  - https://phabricator.wikimedia.org/T194605
  source_url: https://snyk.io/vuln/SNYK-PHP-MEDIAWIKICORE-1041726
- id: snykio:packagist:mediawiki/core:1041727
  title: Improper Input Validation
  description: |
    [mediawiki/core][1] is a Free software wiki application developed by the
    Wikimedia Foundation and others

    Affected versions of this package are vulnerable to Improper Input
    Validation. Contrary to the documentation, `$wgRateLimits` entry for
    `user` overrides that for `newbie`.



    [1]: https://github.com/wikimedia/mediawiki
  affected_package: mediawiki/core
  vulnerable_versions:
  - ">=1.27.0  <1.27.5"
  - ">=1.29.0  <1.29.3"
  - ">=1.30.0  <1.30.1"
  - ">=1.31.0  <1.31.1"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2018-0503
  cwe:
  - CWE-20
  disclosed_date: 2020-11-19
  created_date: 2020-11-19
  last_modified_date: 2020-11-19
  credit:
  - Unknown
  references:
  - https://phabricator.wikimedia.org/T169545
  source_url: https://snyk.io/vuln/SNYK-PHP-MEDIAWIKICORE-1041727
- id: snykio:packagist:mediawiki/core:1041728
  title: Information Exposure
  description: |
    [mediawiki/core][1] is a Free software wiki application developed by the
    Wikimedia Foundation and others

    Affected versions of this package are vulnerable to Information
    Exposure. When a log event is partially hidden, `Special:Redirect/logid`
    can link to the incorrect log and reveal hidden information



    [1]: https://github.com/wikimedia/mediawiki
  affected_package: mediawiki/core
  vulnerable_versions:
  - ">=1.27.0  <1.27.5"
  - ">=1.29.0  <1.29.3"
  - ">=1.30.0  <1.30.1"
  - ">=1.31.0  <1.31.1"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2018-0504
  cwe:
  - CWE-200
  disclosed_date: 2020-11-19
  created_date: 2020-11-19
  last_modified_date: 2020-11-19
  credit:
  - Unknown
  references:
  - https://phabricator.wikimedia.org/T187638
  source_url: https://snyk.io/vuln/SNYK-PHP-MEDIAWIKICORE-1041728
- id: snykio:packagist:mediawiki/core:1041729
  title: Improper Input Validation
  description: |
    [mediawiki/core][1] is a Free software wiki application developed by the
    Wikimedia Foundation and others

    Affected versions of this package are vulnerable to Improper Input
    Validation. MediaWiki allows attackers to bypass the Title\_blacklist
    protection mechanism by starting with an arbitrary title, establishing a
    non-resolvable redirect for the associated page, and using redirect=1 in
    the action API when editing that page.



    [1]: https://github.com/wikimedia/mediawiki
  affected_package: mediawiki/core
  vulnerable_versions:
  - ">=1.31.0  <1.31.6"
  - ">=1.32.0  <1.32.6"
  - ">=1.33.0  <1.33.2"
  - ">=1.33.99  <1.34.0"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2019-19709
  cwe:
  - CWE-20
  disclosed_date: 2020-11-19
  created_date: 2020-11-19
  last_modified_date: 2020-11-19
  credit:
  - Unknown
  references:
  - https://phabricator.wikimedia.org/T239466
  source_url: https://snyk.io/vuln/SNYK-PHP-MEDIAWIKICORE-1041729
- id: snykio:packagist:mediawiki/core:1041733
  title: Cross-site Request Forgery (CSRF)
  description: |
    [mediawiki/core][1] is a Free software wiki application developed by the
    Wikimedia Foundation and others

    Affected versions of this package are vulnerable to Cross-site Request
    Forgery (CSRF). It is possible to conduct CSRF during log out using
    `Special:Userlogout` and `api.php?action=logout` to steal a user\'s
    token.



    [1]: https://github.com/wikimedia/mediawiki
  affected_package: mediawiki/core
  vulnerable_versions:
  - ">=1.27.0  <1.27.6"
  - ">=1.30.0  <1.30.2"
  - ">=1.31.0. <1.31.2"
  - ">=1.32.0  <1.32.2"
  - ">=1.32.99  <1.33.0"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2019-12466
  cwe:
  - CWE-352
  disclosed_date: 2020-11-19
  created_date: 2020-11-19
  last_modified_date: 2020-11-19
  credit:
  - Unknown
  references:
  - https://phabricator.wikimedia.org/T25227
  source_url: https://snyk.io/vuln/SNYK-PHP-MEDIAWIKICORE-1041733
- id: snykio:packagist:mediawiki/core:1041738
  title: Insecure Permissions
  description: |
    [mediawiki/core][1] is a Free software wiki application developed by the
    Wikimedia Foundation and others

    Affected versions of this package are vulnerable to Insecure
    Permissions. The `.htaccess` files are used to protect some directories
    that shouldn\'t be web accessible.



    [1]: https://github.com/wikimedia/mediawiki
  affected_package: mediawiki/core
  vulnerable_versions:
  - ">=1.31.0  <1.31.1"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2018-13258
  cwe:
  - CWE-275
  disclosed_date: 2020-11-19
  created_date: 2020-11-19
  last_modified_date: 2020-11-19
  credit:
  - Unknown
  references:
  - https://phabricator.wikimedia.org/T199029
  source_url: https://snyk.io/vuln/SNYK-PHP-MEDIAWIKICORE-1041738
- id: snykio:packagist:mediawiki/core:1041739
  title: Improper Access Control
  description: |
    [mediawiki/core][1] is a Free software wiki application developed by the
    Wikimedia Foundation and others

    Affected versions of this package are vulnerable to Improper Access
    Control. An insecure access control issue exists where the suppressed
    log in `RevisionDelete` page is exposed.



    [1]: https://github.com/wikimedia/mediawiki
  affected_package: mediawiki/core
  vulnerable_versions:
  - ">=1.27.0  <1.27.6"
  - ">=1.30.0  <1.30.2"
  - ">=1.31.0  <1.31.2"
  - ">=1.32.0  <1.32.2"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2019-12470
  cwe:
  - CWE-284
  disclosed_date: 2020-11-19
  created_date: 2020-11-19
  last_modified_date: 2020-11-19
  credit:
  - Unknown
  references:
  - https://phabricator.wikimedia.org/T222038
  source_url: https://snyk.io/vuln/SNYK-PHP-MEDIAWIKICORE-1041739
- id: snykio:packagist:mediawiki/core:1041740
  title: Information Exposure
  description: |
    [mediawiki/core][1] is a Free software wiki application developed by the
    Wikimedia Foundation and others

    Affected versions of this package are vulnerable to Information
    Exposure. Privileged API responses that include whether a recent change
    has been patrolled may be cached publicly.



    [1]: https://github.com/wikimedia/mediawiki
  affected_package: mediawiki/core
  vulnerable_versions:
  - ">=1.27.0  <1.27.6"
  - ">=1.30.0  <1.30.2"
  - ">=1.31.0  <1.31.2"
  - ">=1.32.0  <1.32.2"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2019-12474
  cwe:
  - CWE-200
  disclosed_date: 2020-11-19
  created_date: 2020-11-19
  last_modified_date: 2020-11-19
  credit:
  - Unknown
  references:
  - https://phabricator.wikimedia.org/T212118
  source_url: https://snyk.io/vuln/SNYK-PHP-MEDIAWIKICORE-1041740
- id: snykio:packagist:mediawiki/core:1041742
  title: Cross-site Scripting (XSS)
  description: |+
    [mediawiki/core][1] is a Free software wiki application developed by the
    Wikimedia Foundation and others

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). Loading user JavaScript from a non-existent account allows anyone
    to create the account, and perform XSS on users loading that script.



    [1]: https://github.com/wikimedia/mediawiki
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: mediawiki/core
  vulnerable_versions:
  - ">=1.27.0  <1.27.6"
  - ">=1.30.0  <1.30.2"
  - ">=1.31.0  <1.31.2"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2019-12471
  cwe:
  - CWE-79
  disclosed_date: 2020-11-19
  created_date: 2020-11-19
  last_modified_date: 2020-11-19
  credit:
  - Unknown
  references:
  - https://phabricator.wikimedia.org/T207603
  source_url: https://snyk.io/vuln/SNYK-PHP-MEDIAWIKICORE-1041742
- id: snykio:packagist:mediawiki/core:1041743
  title: Authentication Bypass
  description: |
    [mediawiki/core][1] is a Free software wiki application developed by the
    Wikimedia Foundation and others

    Affected versions of this package are vulnerable to Authentication
    Bypass. Directly POSTing to `Special:ChangeEmail` would allow for
    bypassing re-authentication, allowing for potential account takeover.



    [1]: https://github.com/wikimedia/mediawiki
  affected_package: mediawiki/core
  vulnerable_versions:
  - ">=1.27.0  <1.27.6"
  - ">=1.30.0  <1.30.2"
  - ">=1.31.0  <1.31.2"
  - ">=1.32.0  <1.32.2"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2019-12468
  cwe:
  - CWE-287
  disclosed_date: 2020-11-19
  created_date: 2020-11-19
  last_modified_date: 2020-11-19
  credit:
  - Unknown
  references:
  - https://phabricator.wikimedia.org/T197279
  source_url: https://snyk.io/vuln/SNYK-PHP-MEDIAWIKICORE-1041743
- id: snykio:packagist:mediawiki/core:1041744
  title: No Rate Limit or Throttling
  description: |
    [mediawiki/core][1] is a Free software wiki application developed by the
    Wikimedia Foundation and others

    Affected versions of this package are vulnerable to No Rate Limit or
    Throttling. A spammer can use `Special:ChangeEmail` to send out spam
    with no rate limiting or ability to block them



    [1]: https://github.com/wikimedia/mediawiki
  affected_package: mediawiki/core
  vulnerable_versions:
  - ">=1.27.0  <1.27.6"
  - ">=1.30.0  <1.30.2"
  - ">=1.31.0  <1.31.2"
  - ">=1.32.0  <1.32.2"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2019-12467
  cwe:
  - CWE-770
  disclosed_date: 2020-11-19
  created_date: 2020-11-19
  last_modified_date: 2020-11-19
  credit:
  - Unknown
  references:
  - https://phabricator.wikimedia.org/T209794
  source_url: https://snyk.io/vuln/SNYK-PHP-MEDIAWIKICORE-1041744
- id: snykio:packagist:mediawiki/core:1041747
  title: Information Exposure
  description: |
    [mediawiki/core][1] is a Free software wiki application developed by the
    Wikimedia Foundation and others

    Affected versions of this package are vulnerable to Information
    Exposure. Suppressed username or log in `Special:EditTags` are exposed.



    [1]: https://github.com/wikimedia/mediawiki
  affected_package: mediawiki/core
  vulnerable_versions:
  - ">=1.27.0  <1.27.6"
  - ">=1.30.0  <1.30.2"
  - ">=1.31.0  <1.31.2"
  - ">=1.32.0  <1.32.2"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2019-12469
  cwe:
  - CWE-200
  disclosed_date: 2020-11-19
  created_date: 2020-11-19
  last_modified_date: 2020-11-19
  credit:
  - Unknown
  references:
  - https://phabricator.wikimedia.org/T222036
  source_url: https://snyk.io/vuln/SNYK-PHP-MEDIAWIKICORE-1041747
- id: snykio:packagist:mediawiki/core:1041748
  title: Denial of Service (DoS)
  description: |
    [mediawiki/core][1] is a Free software wiki application developed by the
    Wikimedia Foundation and others

    Affected versions of this package are vulnerable to Denial of Service
    (DoS). Potential enwiki denial of service is possible due to slow
    `WatchedItemStore::countVisitingWatchersMultiple` usage.



    [1]: https://github.com/wikimedia/mediawiki
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package][1]



    [1]: https://snyk.io/vuln/npm:ws:20171108
  affected_package: mediawiki/core
  vulnerable_versions:
  - ">=1.27.0  <1.27.6"
  - ">=1.30.0  <1.30.2"
  - ">=1.31.0  <1.31.2"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2019-12473
  cwe:
  - CWE-400
  disclosed_date: 2020-11-19
  created_date: 2020-11-19
  last_modified_date: 2020-11-19
  credit:
  - Unknown
  references:
  - https://phabricator.wikimedia.org/T204729
  source_url: https://snyk.io/vuln/SNYK-PHP-MEDIAWIKICORE-1041748
- id: snykio:packagist:mediawiki/core:1041749
  title: Improper Access Control
  description: |
    [mediawiki/core][1] is a Free software wiki application developed by the
    Wikimedia Foundation and others

    Affected versions of this package are vulnerable to Improper Access
    Control. It is possible to bypass the limits on IP range blocks
    `($wgBlockCIDRLimit)` by using the API.



    [1]: https://github.com/wikimedia/mediawiki
  affected_package: mediawiki/core
  vulnerable_versions:
  - ">=1.27.0  <1.27.6"
  - ">=1.30.0  <1.30.2"
  - ">=1.31.0  <1.31.2"
  - ">=1.32.0  <1.32.2"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2019-12472
  cwe:
  - CWE-284
  disclosed_date: 2020-11-19
  created_date: 2020-11-19
  last_modified_date: 2020-11-19
  credit:
  - Unknown
  references:
  - https://phabricator.wikimedia.org/T199540
  source_url: https://snyk.io/vuln/SNYK-PHP-MEDIAWIKICORE-1041749
