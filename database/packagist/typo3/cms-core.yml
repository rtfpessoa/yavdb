---
- id: friendsofphp:packagist:typo3/cms-core:2018-07-12-1
  title: Authentication Bypass in TYPO3 CMS
  affected_package: typo3/cms-core
  vulnerable_versions:
  - ">=8.0.0 <8.7.17"
  - ">=9.0.0 <9.3.2"
  package_manager: packagist
  disclosed_date: 2018-07-12
  created_date: 2018-07-12
  last_modified_date: 2018-07-12
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2018-001/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms-core/2018-07-12-1.yaml
- id: friendsofphp:packagist:typo3/cms-core:2018-07-12-2
  title: Insecure Deserialization & Arbitrary Code Execution in TYPO3 CMS
  affected_package: typo3/cms-core
  vulnerable_versions:
  - ">=8.0.0 <8.7.17"
  - ">=9.0.0 <9.3.2"
  package_manager: packagist
  disclosed_date: 2018-07-12
  created_date: 2018-07-12
  last_modified_date: 2018-07-12
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2018-002/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms-core/2018-07-12-2.yaml
- id: friendsofphp:packagist:typo3/cms-core:2018-07-12-3
  title: Privilege Escalation & SQL Injection in TYPO3 CMS
  affected_package: typo3/cms-core
  vulnerable_versions:
  - ">=8.5.0 <8.7.17"
  - ">=9.0.0 <9.3.2"
  package_manager: packagist
  disclosed_date: 2018-07-12
  created_date: 2018-07-12
  last_modified_date: 2018-07-12
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2018-003/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms-core/2018-07-12-3.yaml
- id: friendsofphp:packagist:typo3/cms-core:2018-07-12-4
  title: Insecure Deserialization in TYPO3 CMS
  affected_package: typo3/cms-core
  vulnerable_versions:
  - ">=8.5.0 <8.7.17"
  - ">=9.0.0 <9.3.2"
  package_manager: packagist
  disclosed_date: 2018-07-12
  created_date: 2018-07-12
  last_modified_date: 2018-07-12
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2018-004/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms-core/2018-07-12-4.yaml
- id: friendsofphp:packagist:typo3/cms-core:2018-12-11-1
  title: Cross-Site Scripting in Online Media Asset Rendering
  affected_package: typo3/cms-core
  vulnerable_versions:
  - ">=8.0.0 <8.7.21"
  - ">=9.0.0 <9.5.2"
  package_manager: packagist
  disclosed_date: 2018-12-11
  created_date: 2018-12-11
  last_modified_date: 2018-12-11
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2018-006/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms-core/2018-12-11-1.yaml
- id: friendsofphp:packagist:typo3/cms-core:2018-12-11-2
  title: Cross-Site Scripting in Backend Modal Component
  affected_package: typo3/cms-core
  vulnerable_versions:
  - ">=8.0.0 <8.7.21"
  - ">=9.0.0 <9.5.2"
  package_manager: packagist
  disclosed_date: 2018-12-11
  created_date: 2018-12-11
  last_modified_date: 2018-12-11
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2018-007/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms-core/2018-12-11-2.yaml
- id: friendsofphp:packagist:typo3/cms-core:2018-12-11-3
  title: Cross-Site Scripting in Frontend User Login
  affected_package: typo3/cms-core
  vulnerable_versions:
  - ">=8.0.0 <8.7.21"
  - ">=9.0.0 <9.5.2"
  package_manager: packagist
  disclosed_date: 2018-12-11
  created_date: 2018-12-11
  last_modified_date: 2018-12-11
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2018-008/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms-core/2018-12-11-3.yaml
- id: friendsofphp:packagist:typo3/cms-core:2018-12-11-4
  title: Security Misconfiguration in Install Tool Cookie
  affected_package: typo3/cms-core
  vulnerable_versions:
  - ">=8.0.0 <8.7.21"
  - ">=9.0.0 <9.5.2"
  package_manager: packagist
  disclosed_date: 2018-12-11
  created_date: 2018-12-11
  last_modified_date: 2018-12-11
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2018-009/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms-core/2018-12-11-4.yaml
- id: friendsofphp:packagist:typo3/cms-core:2018-12-11-5
  title: Information Disclosure in Install Tool
  affected_package: typo3/cms-core
  vulnerable_versions:
  - ">=8.0.0 <8.7.21"
  - ">=9.0.0 <9.5.2"
  package_manager: packagist
  disclosed_date: 2018-12-11
  created_date: 2018-12-11
  last_modified_date: 2018-12-11
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2018-010/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms-core/2018-12-11-5.yaml
- id: friendsofphp:packagist:typo3/cms-core:2018-12-11-6
  title: Denial of Service in Online Media Asset Handling
  affected_package: typo3/cms-core
  vulnerable_versions:
  - ">=8.0.0 <8.7.21"
  - ">=9.0.0 <9.5.2"
  package_manager: packagist
  disclosed_date: 2018-12-11
  created_date: 2018-12-11
  last_modified_date: 2018-12-11
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2018-011/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms-core/2018-12-11-6.yaml
- id: friendsofphp:packagist:typo3/cms-core:2018-12-11-7
  title: Denial of Service in Frontend Record Registration
  affected_package: typo3/cms-core
  vulnerable_versions:
  - ">=8.0.0 <8.7.21"
  package_manager: packagist
  disclosed_date: 2018-12-11
  created_date: 2018-12-11
  last_modified_date: 2018-12-11
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2018-012/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms-core/2018-12-11-7.yaml
- id: friendsofphp:packagist:typo3/cms-core:2018-12-11-8
  title: Cross-Site Scripting in CKEditor
  affected_package: typo3/cms-core
  vulnerable_versions:
  - ">=8.0.0 <8.7.21"
  - ">=9.0.0 <9.5.2"
  package_manager: packagist
  disclosed_date: 2018-12-11
  created_date: 2018-12-11
  last_modified_date: 2018-12-11
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2018-005/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms-core/2018-12-11-8.yaml
- id: friendsofphp:packagist:typo3/cms-core:2019-01-22-1
  title: Information Disclosure of Installed Extensions
  affected_package: typo3/cms-core
  vulnerable_versions:
  - ">=8.0.0 <8.7.23"
  - ">=9.0.0 <9.5.4"
  package_manager: packagist
  disclosed_date: 2019-01-22
  created_date: 2019-01-22
  last_modified_date: 2019-01-22
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2019-001/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms-core/2019-01-22-1.yaml
- id: friendsofphp:packagist:typo3/cms-core:2019-01-22-2
  title: Security Misconfiguration for Backend User Accounts
  affected_package: typo3/cms-core
  vulnerable_versions:
  - ">=8.0.0 <8.7.23"
  - ">=9.0.0 <9.5.4"
  package_manager: packagist
  disclosed_date: 2019-01-22
  created_date: 2019-01-22
  last_modified_date: 2019-01-22
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2019-002/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms-core/2019-01-22-2.yaml
- id: friendsofphp:packagist:typo3/cms-core:2019-01-22-3
  title: Broken Access Control in Localization Handling
  affected_package: typo3/cms-core
  vulnerable_versions:
  - ">=8.0.0 <8.7.23"
  package_manager: packagist
  disclosed_date: 2019-01-22
  created_date: 2019-01-22
  last_modified_date: 2019-01-22
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2019-003/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms-core/2019-01-22-3.yaml
- id: friendsofphp:packagist:typo3/cms-core:2019-01-22-4
  title: Cross-Site Scripting in Fluid ViewHelpers
  affected_package: typo3/cms-core
  vulnerable_versions:
  - ">=8.0.0 <8.7.23"
  - ">=9.0.0 <9.5.4"
  package_manager: packagist
  disclosed_date: 2019-01-22
  created_date: 2019-01-22
  last_modified_date: 2019-01-22
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2019-005/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms-core/2019-01-22-4.yaml
- id: friendsofphp:packagist:typo3/cms-core:2019-01-22-5
  title: Cross-Site Scripting in Bootstrap CSS toolkit
  affected_package: typo3/cms-core
  vulnerable_versions:
  - ">=8.0.0 <8.7.23"
  - ">=9.0.0 <9.5.4"
  package_manager: packagist
  disclosed_date: 2019-01-22
  created_date: 2019-01-22
  last_modified_date: 2019-01-22
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2019-006/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms-core/2019-01-22-5.yaml
- id: friendsofphp:packagist:typo3/cms-core:2019-01-22-6
  title: Cross-Site Scripting in Form Framework
  affected_package: typo3/cms-core
  vulnerable_versions:
  - ">=8.0.0 <8.7.23"
  - ">=9.0.0 <9.5.4"
  package_manager: packagist
  disclosed_date: 2019-01-22
  created_date: 2019-01-22
  last_modified_date: 2019-01-22
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2019-007/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms-core/2019-01-22-6.yaml
- id: friendsofphp:packagist:typo3/cms-core:2019-01-22-7
  title: Arbitrary Code Execution via File List Module
  affected_package: typo3/cms-core
  vulnerable_versions:
  - ">=8.0.0 <8.7.23"
  - ">=9.0.0 <9.5.4"
  package_manager: packagist
  disclosed_date: 2019-01-22
  created_date: 2019-01-22
  last_modified_date: 2019-01-22
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2019-008/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms-core/2019-01-22-7.yaml
- id: friendsofphp:packagist:typo3/cms-core:2019-01-22-8
  title: Cross-Site Scripting in Language Pack Handling
  affected_package: typo3/cms-core
  vulnerable_versions:
  - ">=9.0.0 <9.5.4"
  package_manager: packagist
  disclosed_date: 2019-01-22
  created_date: 2019-01-22
  last_modified_date: 2019-01-22
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2019-004/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms-core/2019-01-22-8.yaml
- id: friendsofphp:packagist:typo3/cms-core:2019-05-07-1
  title: Cross-Site Scripting in Fluid Engine
  affected_package: typo3/cms-core
  vulnerable_versions:
  - ">=8.0.0 <8.7.25"
  - ">=9.0.0 <9.5.6"
  package_manager: packagist
  disclosed_date: 2019-05-07
  created_date: 2019-05-07
  last_modified_date: 2019-05-07
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2019-013/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms-core/2019-05-07-1.yaml
- id: friendsofphp:packagist:typo3/cms-core:2019-05-07-2
  title: Security Misconfiguration in User Session Handling
  affected_package: typo3/cms-core
  vulnerable_versions:
  - ">=8.0.0 <8.7.25"
  - ">=9.0.0 <9.5.6"
  package_manager: packagist
  disclosed_date: 2019-05-07
  created_date: 2019-05-07
  last_modified_date: 2019-05-07
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2019-011/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms-core/2019-05-07-2.yaml
- id: friendsofphp:packagist:typo3/cms-core:2019-05-07-3
  title: Possible Arbitrary Code Execution in Image Processing
  affected_package: typo3/cms-core
  vulnerable_versions:
  - ">=8.0.0 <8.7.25"
  - ">=9.0.0 <9.5.6"
  package_manager: packagist
  disclosed_date: 2019-05-07
  created_date: 2019-05-07
  last_modified_date: 2019-05-07
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2019-012/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms-core/2019-05-07-3.yaml
- id: friendsofphp:packagist:typo3/cms-core:2019-05-07-4
  title: Information Disclosure in Page Tree
  affected_package: typo3/cms-core
  vulnerable_versions:
  - ">=9.0.0 <9.5.6"
  package_manager: packagist
  disclosed_date: 2019-05-07
  created_date: 2019-05-07
  last_modified_date: 2019-05-07
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2019-009/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms-core/2019-05-07-4.yaml
- id: friendsofphp:packagist:typo3/cms-core:2019-05-07-5
  title: Information Disclosure in User Authentication
  affected_package: typo3/cms-core
  vulnerable_versions:
  - ">=9.0.0 <9.5.6"
  package_manager: packagist
  disclosed_date: 2019-05-07
  created_date: 2019-05-07
  last_modified_date: 2019-05-07
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2019-010/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms-core/2019-05-07-5.yaml
- id: friendsofphp:packagist:typo3/cms-core:2019-06-25-1
  title: Information Disclosure in Backend User Interface
  affected_package: typo3/cms-core
  vulnerable_versions:
  - ">=8.0.0 <8.7.27"
  - ">=9.0.0 <9.5.8"
  package_manager: packagist
  disclosed_date: 2019-06-25
  created_date: 2019-06-25
  last_modified_date: 2019-06-25
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2019-014/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms-core/2019-06-25-1.yaml
- id: friendsofphp:packagist:typo3/cms-core:2019-06-25-2
  title: Cross-Site Scripting in Link Handling
  affected_package: typo3/cms-core
  vulnerable_versions:
  - ">=8.0.0 <8.7.27"
  - ">=9.0.0 <9.5.8"
  package_manager: packagist
  disclosed_date: 2019-06-25
  created_date: 2019-06-25
  last_modified_date: 2019-06-25
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2019-015/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms-core/2019-06-25-2.yaml
- id: friendsofphp:packagist:typo3/cms-core:2019-06-25-3
  title: Security Misconfiguration in Frontend Session Handling
  affected_package: typo3/cms-core
  vulnerable_versions:
  - ">=8.0.0 <8.7.27"
  - ">=9.0.0 <9.5.8"
  package_manager: packagist
  disclosed_date: 2019-06-25
  created_date: 2019-06-25
  last_modified_date: 2019-06-25
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2019-018/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms-core/2019-06-25-3.yaml
- id: friendsofphp:packagist:typo3/cms-core:2019-06-25-4
  title: Arbitrary Code Execution and Cross-Site Scripting in Backend API
  affected_package: typo3/cms-core
  vulnerable_versions:
  - ">=8.0.0 <8.7.27"
  - ">=9.0.0 <9.5.8"
  package_manager: packagist
  disclosed_date: 2019-06-25
  created_date: 2019-06-25
  last_modified_date: 2019-06-25
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2019-019/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms-core/2019-06-25-4.yaml
- id: friendsofphp:packagist:typo3/cms-core:2019-06-25-5
  title: Insecure Deserialization in TYPO3 CMS
  affected_package: typo3/cms-core
  vulnerable_versions:
  - ">=8.0.0 <8.7.27"
  - ">=9.0.0 <9.5.8"
  package_manager: packagist
  disclosed_date: 2019-06-25
  created_date: 2019-06-25
  last_modified_date: 2019-06-25
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2019-020/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms-core/2019-06-25-5.yaml
- id: friendsofphp:packagist:typo3/cms-core:2019-06-25-6
  title: Possible deserialization side-effects in symfony/cache
  affected_package: typo3/cms-core
  vulnerable_versions:
  - ">=9.0.0 <9.5.8"
  package_manager: packagist
  disclosed_date: 2019-06-25
  created_date: 2019-06-25
  last_modified_date: 2019-06-25
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2019-016/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms-core/2019-06-25-6.yaml
- id: friendsofphp:packagist:typo3/cms-core:2019-06-25-7
  title: Broken Access Control in Import Module
  affected_package: typo3/cms-core
  vulnerable_versions:
  - ">=9.0.0 <9.5.8"
  package_manager: packagist
  disclosed_date: 2019-06-25
  created_date: 2019-06-25
  last_modified_date: 2019-06-25
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2019-017/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms-core/2019-06-25-7.yaml
- id: friendsofphp:packagist:typo3/cms-core:2019-12-17-1
  title: Cross-Site Scripting in Form Framework validation handling
  affected_package: typo3/cms-core
  vulnerable_versions:
  - ">=10.0.0 <10.2.1"
  - ">=8.0.0 <8.7.30"
  - ">=9.0.0 <9.5.12"
  package_manager: packagist
  disclosed_date: 2019-12-17
  created_date: 2019-12-17
  last_modified_date: 2019-12-17
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2019-021/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms-core/2019-12-17-1.yaml
- id: friendsofphp:packagist:typo3/cms-core:2019-12-17-2
  title: Cross-Site Scripting in Link Handling
  affected_package: typo3/cms-core
  vulnerable_versions:
  - ">=10.0.0 <10.2.1"
  - ">=8.0.0 <8.7.30"
  - ">=9.0.0 <9.5.12"
  package_manager: packagist
  disclosed_date: 2019-12-17
  created_date: 2019-12-17
  last_modified_date: 2019-12-17
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2019-022/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms-core/2019-12-17-2.yaml
- id: friendsofphp:packagist:typo3/cms-core:2019-12-17-3
  title: Cross-Site Scripting in Filelist Module
  affected_package: typo3/cms-core
  vulnerable_versions:
  - ">=10.0.0 <10.2.1"
  - ">=8.0.0 <8.7.30"
  - ">=9.0.0 <9.5.12"
  package_manager: packagist
  disclosed_date: 2019-12-17
  created_date: 2019-12-17
  last_modified_date: 2019-12-17
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2019-023/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms-core/2019-12-17-3.yaml
- id: friendsofphp:packagist:typo3/cms-core:2019-12-17-4
  title: Directory Traversal on ZIP extraction
  affected_package: typo3/cms-core
  vulnerable_versions:
  - ">=10.0.0 <10.2.1"
  - ">=8.0.0 <8.7.30"
  - ">=9.0.0 <9.5.12"
  package_manager: packagist
  disclosed_date: 2019-12-17
  created_date: 2019-12-17
  last_modified_date: 2019-12-17
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2019-024/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms-core/2019-12-17-4.yaml
- id: friendsofphp:packagist:typo3/cms-core:2019-12-17-5
  title: SQL Injection in low-level Query Generator
  affected_package: typo3/cms-core
  vulnerable_versions:
  - ">=10.0.0 <10.2.1"
  - ">=8.0.0 <8.7.30"
  - ">=9.0.0 <9.5.12"
  package_manager: packagist
  disclosed_date: 2019-12-17
  created_date: 2019-12-17
  last_modified_date: 2019-12-17
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2019-025/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms-core/2019-12-17-5.yaml
- id: friendsofphp:packagist:typo3/cms-core:2019-12-17-6
  title: Insecure Deserialization in Query Generator &amp; Query View
  affected_package: typo3/cms-core
  vulnerable_versions:
  - ">=10.0.0 <10.2.1"
  - ">=8.0.0 <8.7.30"
  - ">=9.0.0 <9.5.12"
  package_manager: packagist
  disclosed_date: 2019-12-17
  created_date: 2019-12-17
  last_modified_date: 2019-12-17
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2019-026/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms-core/2019-12-17-6.yaml
- id: friendsofphp:packagist:typo3/cms-core:2019-12-17-7
  title: Possible Insecure Deserialization in Extbase Request Handling
  affected_package: typo3/cms-core
  vulnerable_versions:
  - ">=8.0.0 <8.7.30"
  - ">=9.0.0 <9.5.12"
  package_manager: packagist
  disclosed_date: 2019-12-17
  created_date: 2019-12-17
  last_modified_date: 2019-12-17
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/security/advisory/typo3-psa-2019-011/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms-core/2019-12-17-7.yaml
- id: snykio:packagist:typo3/cms-core:174604
  title: Cross-site Scripting (XSS)
  description: |+
    [typo3/cms-core][1] is a free open source enterprise content management
    system.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) when making use of the ternary conditional operator in templates
    like the following.



    [1]: https://packagist.org/packages/typo3/cms-core
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: typo3/cms-core
  vulnerable_versions:
  - ">=8.0.0  <8.7.25"
  - ">=9.0.0  <9.5.6"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-79
  disclosed_date: 2019-05-07
  created_date: 2019-05-08
  last_modified_date: 2019-05-08
  credit:
  - Bill Dagou
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2019-013/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMSCORE-174604
- id: snykio:packagist:typo3/cms-core:174605
  title: Information Exposure
  description: |
    [typo3/cms-core][1] is a free open source enterprise content management
    system.

    Affected versions of this package are vulnerable to Information Exposure
    via user authentication. Login failures have been logged on the default
    stream with log level `warning` including plain-text user credentials.



    [1]: https://packagist.org/packages/typo3/cms-core
  affected_package: typo3/cms-core
  vulnerable_versions:
  - ">=9.0.0  <9.5.6"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-200
  disclosed_date: 2019-05-07
  created_date: 2019-05-08
  last_modified_date: 2019-05-08
  credit:
  - Helmut Hummel
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2019-010/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMSCORE-174605
- id: snykio:packagist:typo3/cms-core:174607
  title: Information Exposure
  description: |
    [typo3/cms-core][1] is a free open source enterprise content management
    system.

    Affected versions of this package are vulnerable to Information Exposure
    via the page tree. Backend users not having read access to specific
    pages still could see them in the page tree which actually should be
    disallowed.



    [1]: https://packagist.org/packages/typo3/cms-core
  affected_package: typo3/cms-core
  vulnerable_versions:
  - ">=9.0.0  <9.5.6"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-200
  disclosed_date: 2019-05-07
  created_date: 2019-05-08
  last_modified_date: 2019-05-08
  credit:
  - Unknown
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2019-009/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMSCORE-174607
- id: snykio:packagist:typo3/cms-core:174609
  title: Improper Access Control
  description: |
    [typo3/cms-core][1] is a free open source enterprise content management
    system.

    Affected versions of this package are vulnerable to Improper Access
    Control. When users change their password existing sessions for that
    particular user account are not revoked. A valid backend or frontend
    user account is required in order to make use of this vulnerability.



    [1]: https://packagist.org/packages/typo3/cms-core
  affected_package: typo3/cms-core
  vulnerable_versions:
  - ">=8.0.0  <8.7.25"
  - ">=9.0.0  <9.5.6"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-284
  disclosed_date: 2019-05-07
  created_date: 2019-05-08
  last_modified_date: 2019-05-08
  credit:
  - Unknown
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2019-011/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMSCORE-174609
- id: snykio:packagist:typo3/cms-core:174611
  title: Arbitrary Code Execution
  description: |
    [typo3/cms-core][1] is a free open source enterprise content management
    system.

    Affected versions of this package are vulnerable to Arbitrary Code
    Execution. via the image processing. Whenever `ImageMagick` is invoked
    in order to convert data the mime-type of the source is identified for
    invoking according coders when reading data. In case an attacker manages
    to upload an image file containing PostScript code it will be executed
    on the server system when generating according visual previews or
    thumbnails.



    [1]: https://packagist.org/packages/typo3/cms-core
  affected_package: typo3/cms-core
  vulnerable_versions:
  - ">=8.0.0  <8.7.25"
  - ">=9.0.0  <9.5.6"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2019-11832
  cwe:
  - CWE-94
  disclosed_date: 2019-05-07
  created_date: 2019-05-08
  last_modified_date: 2019-05-08
  credit:
  - Lauritz Holtmann
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2019-012/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMSCORE-174611
- id: snykio:packagist:typo3/cms-core:450920
  title: Session Fixation
  description: |
    [typo3/cms-core][1] is a free open source enterprise content management
    system.

    Affected versions of this package are vulnerable to Session Fixation.
    Session data of properly authenticated and logged in frontend users is
    kept and transformed into an anonymous user session during the logout
    process. This way the next user using the same client application gains
    access to previous session data.



    [1]: https://packagist.org/packages/typo3/cms-core
  affected_package: typo3/cms-core
  vulnerable_versions:
  - ">=8.0.0  <8.7.27"
  - ">=9.0.0  <9.5.8"
  severity: low
  package_manager: packagist
  cwe:
  - CWE-384
  disclosed_date: 2019-06-25
  created_date: 2019-06-25
  last_modified_date: 2019-06-25
  credit:
  - Christian Ebert
  references:
  - https://github.com/TYPO3-CMS/core/commit/8ad385fe12fbbbc7e1462b2c789555a55f2c8889
  - https://github.com/TYPO3/TYPO3.CMS/commit/3a48bb6c8a05aa861592c3fb81aa35dfa0939689
  - https://review.typo3.org/c/Packages/TYPO3.CMS/+/61144
  - https://typo3.org/security/advisory/typo3-core-sa-2019-018/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMSCORE-450920
- id: snykio:packagist:typo3/cms-core:450925
  title: Cross-site Scripting (XSS)
  description: |+
    [typo3/cms-core][1] is a free open source enterprise content management
    system.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). The `t3://` URL handling is vulnerable to Cross-Site Scripting
    when making use of `javascript:` or `data:` URI schemes in link fields.



    [1]: https://packagist.org/packages/typo3/cms-core
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: typo3/cms-core
  vulnerable_versions:
  - ">=8.3.0  <8.7.27"
  - ">=9.0.0  <9.5.8"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2019-12748
  cwe:
  - CWE-79
  disclosed_date: 2019-06-25
  created_date: 2019-06-25
  last_modified_date: 2019-06-25
  credit:
  - Robin Peraglie
  references:
  - https://github.com/TYPO3-CMS/core/commit/ea1df3fd5ba6422ce2142183c8161e128e6cc48b
  - https://github.com/TYPO3/TYPO3.CMS/commit/4c003f80b8b25def173268b8b069446c4fcc313a
  - https://typo3.org/security/advisory/typo3-core-sa-2019-015/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMSCORE-450925
- id: snykio:packagist:typo3/cms-core:450927
  title: Deserialization of Untrusted Data
  description: |
    [typo3/cms-core][1] is a free open source enterprise content management
    system.

    Affected versions of this package are vulnerable to Deserialization of
    Untrusted Data. `FormEngine` and `DataHandler` are vulnerable to
    Deserialization while authenticated with a valid backend user account.



    [1]: https://packagist.org/packages/typo3/cms-core
    \nSerialization is a process of converting an object into a sequence of
    bytes which can be persisted to a disk or database or can be sent
    through streams. The reverse process of creating object from sequence of
    bytes is called deserialization. Serialization is commonly used for
    communication (sharing objects between multiple hosts) and persistence
    (store the object state in a file or a database). It is an integral part
    of popular protocols like *Remote Method Invocation (RMI)*, *Java
    Management Extension (JMX)*, *Java Messaging System (JMS)*, *Action
    Message Format (AMF)*, *Java Server Faces (JSF) ViewState*, etc.

    *Deserialization of untrusted data* ([CWE-502][1]), is when the
    application deserializes untrusted data without sufficiently verifying
    that the resulting data will be valid, letting the attacker to control
    the state or the flow of the execution.

    Java deserialization issues have been known for years. However, interest
    in the issue intensified greatly in 2015, when classes that could be
    abused to achieve remote code execution were found in a [popular library
    (Apache Commons Collection)][2]. These classes were used in zero-days
    affecting IBM WebSphere, Oracle WebLogic and many other products.

    An attacker just needs to identify a piece of software that has both a
    vulnerable class on its path, and performs deserialization on untrusted
    data. Then all they need to do is send the payload into the
    deserializer, getting the command executed.

    > Developers put too much trust in Java Object Serialization. Some even
    > de-serialize objects pre-authentication. When deserializing an Object
    > in Java you typically cast it to an expected type, and therefore
    > Java\'s strict type system will ensure you only get valid object
    > trees. Unfortunately, by the time the type checking happens, platform
    > code has already created and executed significant logic. So, before
    > the final type is checked a lot of code is executed from the
    > readObject() methods of various objects, all of which is out of the
    > developer\'s control. By combining the readObject() methods of various
    > classes which are available on the classpath of the vulnerable
    > application an attacker can execute functions (including calling
    > Runtime.exec() to execute local OS commands).

    * Apache Blog

    The vulnerability, also know as *Mad Gadget*

    > Mad Gadget is one of the most pernicious vulnerabilities we’ve seen.
    > By merely existing on the Java classpath, seven “gadget” classes in
    > Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0)
    > make object deserialization for the entire JVM process Turing complete
    > with an exec function. Since many business applications use object
    > deserialization to send messages across the network, it would be like
    > hiring a bank teller who was trained to hand over all the money in the
    > vault if asked to do so politely, and then entrusting that teller with
    > the key. The only thing that would keep a bank safe in such a
    > circumstance is that most people wouldn’t consider asking such a
    > question.

    * Google



    [1]: https://cwe.mitre.org/data/definitions/502.html
    [2]: https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078
  affected_package: typo3/cms-core
  vulnerable_versions:
  - ">=8.0.0  <8.7.27"
  - ">=9.0.0  <9.5.8"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2019-12747
  cwe:
  - CWE-502
  disclosed_date: 2019-06-25
  created_date: 2019-06-25
  last_modified_date: 2019-06-25
  credit:
  - Robin Peraglie
  references:
  - https://github.com/TYPO3-CMS/core/commit/ea4539269f5e6d08abe78eeda40f29fd1f6ef3da
  - https://github.com/TYPO3/TYPO3.CMS/commit/647aa7afa582983cddc547fa106d31e2b1ef34fe
  - https://typo3.org/security/advisory/typo3-core-sa-2019-020/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMSCORE-450927
- id: snykio:packagist:typo3/cms-core:450930
  title: Arbitrary Code Execution
  description: |
    [typo3/cms-core][1] is a free open source enterprise content management
    system.

    Affected versions of this package are vulnerable to Arbitrary Code
    Execution. Exploited by the backend API configuration, using `TSconfig`
    fields of the page properties in backend forms, can be used to inject
    malicious sequences. Field `tsconfig_includes` is vulnerable to
    directory traversal leading to it allowing direct access to `TSconfig`
    settings as a backend user which has permissions to modify values for
    fields pages.



    [1]: https://packagist.org/packages/typo3/cms-core
  affected_package: typo3/cms-core
  vulnerable_versions:
  - ">=8.0.0  <8.7.27"
  - ">=9.0.0  <9.5.8"
  severity: high
  package_manager: packagist
  cwe:
  - CWE-94
  disclosed_date: 2019-06-25
  created_date: 2019-06-25
  last_modified_date: 2019-06-25
  credit:
  - Benjamin Kott
  - Oliver Hader
  references:
  - https://github.com/TYPO3-CMS/core/commit/6ddc919515a62f966e88820fccdde569d1a157cc
  - https://github.com/TYPO3/TYPO3.CMS/commit/75cc3d6bfedf70c2120ef8c6f6dd104e905c1569
  - https://typo3.org/security/advisory/typo3-core-sa-2019-019/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMSCORE-450930
- id: snykio:packagist:typo3/cms-core:538227
  title: Deserialization of Untrusted Data
  description: |
    [typo3/cms-core][1] is a free open source enterprise content management
    system.

    Affected versions of this package are vulnerable to Deserialization of
    Untrusted Data. User submitted payload has to be signed with a
    corresponding HMAC-SHA1 using the sensitive TYPO3 encryptionKey as
    secret - invalid or unsigned payload is not deserialized. This could
    lead to sensitive information being leaked.



    [1]: https://packagist.org/packages/typo3/cms-core
  affected_package: typo3/cms-core
  vulnerable_versions:
  - ">=8.0.0  <8.7.30"
  - ">=9.0.0  <9.5.12"
  severity: high
  package_manager: packagist
  cwe:
  - CWE-502
  disclosed_date: 2019-12-17
  created_date: 2019-12-18
  last_modified_date: 2019-12-18
  credit:
  - Oliver Hader
  references:
  - https://github.com/TYPO3-CMS/core/commit/6af9558b9cd490d9130b85f99e3fdcfad2885ec1
  - https://typo3.org/security/advisory/typo3-psa-2019-011/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMSCORE-538227
- id: snykio:packagist:typo3/cms-core:538228
  title: SQL Injection
  description: |
    [typo3/cms-core][1] is a free open source enterprise content management
    system.

    Affected versions of this package are vulnerable to SQL Injection via
    the class `QueryGenerator`. Exploitation requires having the system
    extension `ext:lowlevel` installed, and a valid backend user who has
    administrator privileges.



    [1]: https://packagist.org/packages/typo3/cms-core
  affected_package: typo3/cms-core
  vulnerable_versions:
  - ">=10.0.0  <10.2.1"
  - ">=8.0.0  <8.7.30"
  - ">=9.0.0  <9.5.12"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2019-19850
  cwe:
  - CWE-89
  disclosed_date: 2019-12-17
  created_date: 2019-12-18
  last_modified_date: 2019-12-18
  credit:
  - Dhiraj Shrikant Data
  references:
  - https://github.com/TYPO3/TYPO3.CMS/commit/948df21e45cf8beffa3d472e5c06f2f84833e432
  - https://typo3.org/security/advisory/typo3-core-sa-2019-025/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMSCORE-538228
- id: snykio:packagist:typo3/cms-core:538231
  title: Cross-site Scripting (XSS)
  description: |+
    [typo3/cms-core][1] is a free open source enterprise content management
    system.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). Output of field validation errors in the Form Framework can
    result in user input being reflected without proper output encoding.



    [1]: https://packagist.org/packages/typo3/cms-core
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: typo3/cms-core
  vulnerable_versions:
  - ">=10.0.0  <10.2.1"
  - ">=8.0.0  <8.7.30"
  - ">=9.0.0  <9.5.12"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-79
  disclosed_date: 2019-12-17
  created_date: 2019-12-18
  last_modified_date: 2019-12-18
  credit:
  - Aslam Idrisov
  references:
  - https://github.com/TYPO3/TYPO3.CMS/commit/37ed78a1988af220eeb1933bf5a3137e4e7bbf4e
  - https://typo3.org/security/advisory/typo3-core-sa-2019-021/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMSCORE-538231
- id: snykio:packagist:typo3/cms-core:538235
  title: Cross-site Scripting (XSS)
  description: |+
    [typo3/cms-core][1] is a free open source enterprise content management
    system.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). It has been discovered that the output table listing in the
    \"Files\" backend module is vulnerable to XSS when a file extension
    contains malicious sequences. Access to the file system of the server -
    either directly or through synchronization - is required to exploit the
    vulnerability.



    [1]: https://packagist.org/packages/typo3/cms-core
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: typo3/cms-core
  vulnerable_versions:
  - ">=10.0.0  <10.2.1"
  - ">=8.0.0  <8.7.30"
  - ">=9.0.0  <9.5.12"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-79
  disclosed_date: 2019-12-17
  created_date: 2019-12-17
  last_modified_date: 2019-12-17
  credit:
  - Unknown
  references:
  - https://github.com/TYPO3/TYPO3.CMS/commit/21e9e6430586b66f425dd6f93a83f597ecd20b3c
  - https://typo3.org/security/advisory/typo3-core-sa-2019-023/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMSCORE-538235
- id: snykio:packagist:typo3/cms-core:538237
  title: Arbitrary File Write via Archive Extraction (Zip Slip)
  description: "[typo3/cms-core][1] is a free open source enterprise content management\nsystem.\n\nAffected
    versions of this package are vulnerable to Arbitrary File Write\nvia Archive Extraction
    (Zip Slip). Extraction of manually uploaded ZIP\narchives in Extension Manager
    is vulnerable to directory traversal.\nAdmin privileges are required in order
    to exploit this vulnerability.\nSince TYPO3 v9 LTS, System Maintainer privileges
    are required as well.\n\n\n\n[1]: https://packagist.org/packages/typo3/cms-core\n\\nIt
    is exploited using a specially crafted zip archive, that holds path\ntraversal
    filenames. When exploited, a filename in a malicious archive\nis concatenated
    to the target extraction directory, which results in the\nfinal path ending up
    outside of the target folder. For instance, a zip\nmay hold a file with a \\\"../../file.exe\\\"
    location and thus break out of\nthe target folder. If an executable or a configuration
    file is\noverwritten with a file containing malicious code, the problem can turn\ninto
    an arbitrary code execution issue quite easily.\n\nThe following is an example
    of a zip archive with one benign file and\none malicious file. Extracting the
    malicous file will result in\ntraversing out of the target folder, ending up in
    `/root/.ssh/`\noverwriting the `authorized_keys` file:\n\n    \n    +2018-04-15
    22:04:29 ..... 19 19 good.txt\n    \n    +2018-04-15 22:04:42 ..... 20 20 ../../../../../../root/.ssh/authorized_keys\n\n"
  affected_package: typo3/cms-core
  vulnerable_versions:
  - ">=10.0.0  <10.2.1"
  - ">=8.0.0  <8.7.30"
  - ">=9.0.0  <9.5.12"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-22
  disclosed_date: 2019-12-17
  created_date: 2019-12-18
  last_modified_date: 2019-12-18
  credit:
  - Unknown
  references:
  - https://github.com/TYPO3/TYPO3.CMS/commit/0efda30ca4181898e17614a195b234954d353f2b
  - https://typo3.org/security/advisory/typo3-core-sa-2019-024/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMSCORE-538237
- id: snykio:packagist:typo3/cms-core:538239
  title: Cross-site Scripting (XSS)
  description: |+
    [typo3/cms-core][1] is a free open source enterprise content management
    system.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). `3://` URL handling and typolink functionality can be abused to
    conduct XSS attacks.



    [1]: https://packagist.org/packages/typo3/cms-core
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: typo3/cms-core
  vulnerable_versions:
  - ">=10.0.0  <10.2.1"
  - ">=8.0.0  <8.7.30"
  - ">=9.0.0  <9.5.12"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-79
  disclosed_date: 2019-12-17
  created_date: 2019-12-17
  last_modified_date: 2019-12-17
  credit:
  - Oliver Hader
  references:
  - https://github.com/TYPO3/TYPO3.CMS/commit/21e9e6430586b66f425dd6f93a83f597ecd20b3c
  - https://typo3.org/security/advisory/typo3-core-sa-2019-022/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMSCORE-538239
- id: snykio:packagist:typo3/cms-core:538241
  title: Deserialization of Untrusted Data
  description: |
    [typo3/cms-core][1] is a free open source enterprise content management
    system.

    Affected versions of this package are vulnerable to Deserialization of
    Untrusted Data. Classes `QueryGenerator` and `QueryView` are vulnerable
    to insecure deserialization and remote code execution code be achieved
    under certain circumstances by abusing these classes. Multiple
    requirements need to be satisfied in order to exploit this
    vulnerability.



    [1]: https://packagist.org/packages/typo3/cms-core
  affected_package: typo3/cms-core
  vulnerable_versions:
  - ">=10.0.0  <10.2.1"
  - ">=8.0.0  <8.7.30"
  - ">=9.0.0  <9.5.12"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2019-19849
  cwe:
  - CWE-502
  disclosed_date: 2019-12-17
  created_date: 2019-12-17
  last_modified_date: 2019-12-17
  credit:
  - Daniel Windloff
  references:
  - https://github.com/TYPO3/TYPO3.CMS/commit/fdf9cdade0da9acc970f1dd763ae23708c318293
  - https://typo3.org/security/advisory/typo3-core-sa-2019-026/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMSCORE-538241
- id: snykio:packagist:typo3/cms-core:72231
  title: Authentication Bypass
  description: |
    [typo3/cms][1] is a free open source Content Management Framework
    initially created by Kasper Skaarhoj and licensed under GNU/GPL.

    Affected versions of this package are vulnerable to Authentication
    Bypass when using hashing methods which are related by PHP class
    inheritance.



    [1]: https://packagist.org/packages/typo3/cms
  affected_package: typo3/cms-core
  vulnerable_versions:
  - ">=8.0.0  <8.7.17"
  - ">=9.0.0  <9.3.2"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-592
  disclosed_date: 2018-07-12
  created_date: 2018-07-19
  last_modified_date: 2018-07-19
  credit:
  - Oliver Hader
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2018-001/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMSCORE-72231
- id: snykio:packagist:typo3/cms-core:72232
  title: SQL Injection
  description: |
    [typo3/cms-core][1] is a free open source Content Management Framework
    initially created by Kasper Skaarhoj and licensed under GNU/GPL.

    Affected versions of this package are vulnerable to SQL Injection and
    Privilege Escalation. Instructions can be persisted to a form definition
    file that were not configured to be modified.



    [1]: https://packagist.org/packages/typo3/cms-core
  affected_package: typo3/cms-core
  vulnerable_versions:
  - ">=8.5.0  <8.7.17"
  - ">=9.0.0  <9.3.2"
  severity: high
  package_manager: packagist
  cwe:
  - CWE-89
  disclosed_date: 2018-07-12
  created_date: 2018-07-19
  last_modified_date: 2018-07-19
  credit:
  - Oliver Hader
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2018-003/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMSCORE-72232
- id: snykio:packagist:typo3/cms-core:72241
  title: Arbitrary Code Execution
  description: |
    [typo3/cms][1] is a free open source Content Management Framework
    initially created by Kasper Skaarhoj and licensed under GNU/GPL.

    Affected version so this package are vulnerable to Arbitrary Code
    Execution. Phar files can be obfuscated as image or text file which
    would not be denied from being uploaded and persisted to a TYPO3
    installation. Due to a missing sanitization of user input, those Phar
    files can be invoked by manipulated URLs in TYPO3 backend forms.



    [1]: https://packagist.org/packages/typo3/cms
  affected_package: typo3/cms-core
  vulnerable_versions:
  - ">=8.0.0  <8.7.17"
  - ">=9.0.0  <9.3.2"
  severity: high
  package_manager: packagist
  cwe:
  - CWE-94
  disclosed_date: 2018-07-12
  created_date: 2018-07-23
  last_modified_date: 2018-07-23
  credit:
  - Sam Thomas
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2018-002/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMSCORE-72241
- id: snykio:packagist:typo3/cms-core:72242
  title: Insecure Deserialization
  description: |
    [typo3/cms-core][1] is a free open source Content Management Framework
    initially created by Kasper Skaarhoj and licensed under GNU/GPL.

    Affected versions of this package are vulnerable to Insecure
    Deserialization when being used with the additional `PHP PECL` package
    `yaml`, which is capable of unserializing `YAML` contents to `PHP`
    objects.



    [1]: https://packagist.org/packages/typo3/cms
  affected_package: typo3/cms-core
  vulnerable_versions:
  - ">=8.5.0  <8.7.17"
  - ">=9.0.0  <9.3.2"
  severity: high
  package_manager: packagist
  cwe:
  - CWE-502
  disclosed_date: 2018-07-12
  created_date: 2018-07-23
  last_modified_date: 2018-07-23
  credit:
  - Oliver Hader
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2018-004/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMSCORE-72242
- id: snykio:packagist:typo3/cms-core:72679
  title: Denial of Service (DoS)
  description: |+
    [typo3/cms-core][1] is an free open source enterprise content management
    system.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS). The package fails to properly ensure that anonymous user sessions
    are valid, attackers can use this vulnerability in order to create an
    arbitrary amount of individual session-data records in the database.



    [1]: https://packagist.org/packages/typo3/cms-core
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: typo3/cms-core
  vulnerable_versions:
  - ">=8.0.0  <8.7.21"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-400
  disclosed_date: 2018-12-11
  created_date: 2018-12-12
  last_modified_date: 2018-12-12
  credit:
  - Mads Lonne Jensen
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2018-012/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMSCORE-72679
- id: snykio:packagist:typo3/cms-core:72680
  title: Cross-site Scripting (XSS)
  description: |
    [typo3/cms-core][1] is an free open source enterprise content management
    system.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). The vulnerability is due to a failure of properly encoding input.



    [1]: https://packagist.org/packages/typo3/cms-core
  affected_package: typo3/cms-core
  vulnerable_versions:
  - ">=8.5.0  <8.7.21"
  - ">=9.0.0  <9.5.2"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-79
  disclosed_date: 2018-12-11
  created_date: 2018-12-12
  last_modified_date: 2018-12-12
  credit:
  - Joshua Westerheide
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2018-007/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMSCORE-72680
- id: snykio:packagist:typo3/cms-core:72686
  title: Cross-site Scripting (XSS)
  description: |
    [typo3/cms-core][1] is an free open source enterprise content management
    system.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). An attacker having the ability to modify their user profile could
    inject malicious script via the website frontend.



    [1]: https://packagist.org/packages/typo3/cms-core
  affected_package: typo3/cms-core
  vulnerable_versions:
  - ">=7.0.0  <7.6.32"
  - ">=8.0.0  <8.7.21"
  - ">=9.0.0  <9.5.2"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-79
  disclosed_date: 2018-12-11
  created_date: 2018-12-12
  last_modified_date: 2018-12-12
  credit:
  - Thomas Loffler
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2018-008/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMSCORE-72686
- id: snykio:packagist:typo3/cms-core:72687
  title: Cross-site Scripting (XSS)
  description: |+
    [][1] is an free open source enterprise content management system.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) due to a failure to properly encode user input.



    [1]: https://packagist.org/packages/typo3/cms-core
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: typo3/cms-core
  vulnerable_versions:
  - ">=7.5.0  <7.6.32"
  - ">=8.0.0  <8.7.21"
  - ">=9.0.0  <9.5.2"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-79
  disclosed_date: 2018-12-11
  created_date: 2018-12-12
  last_modified_date: 2018-12-12
  credit:
  - Andras Otto
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2018-006/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMSCORE-72687
- id: snykio:packagist:typo3/cms-core:72688
  title: Information Exposure
  description: |
    [typo3/cms-core][1] is an free open source enterprise content management
    system.

    Affected versions of this package are vulnerable to Information
    Exposure. The Install Tool exposes the current TYPO3 version number to
    non-authenticated users.



    [1]: https://packagist.org/packages/typo3/cms-core
  affected_package: typo3/cms-core
  vulnerable_versions:
  - ">=7.0.0  <7.6.32"
  - ">=8.0.0  <8.7.21"
  - ">=9.0.0  <9.5.2"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-200
  disclosed_date: 2018-12-11
  created_date: 2018-12-12
  last_modified_date: 2018-12-12
  credit:
  - Manuel Bloch
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2018-010/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMSCORE-72688
- id: snykio:packagist:typo3/cms-core:72689
  title: Denial of Service (DoS)
  description: |
    [typo3/cms-core][1] is an free open source enterprise content management
    system.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS). Putting large files with according file extensions results in
    high consumption of system resources. This can lead to exceeding limits
    of the current PHP process.



    [1]: https://packagist.org/packages/typo3/cms-core
  affected_package: typo3/cms-core
  vulnerable_versions:
  - ">=7.0.0  <7.6.32"
  - ">=8.0.0  <8.7.21"
  - ">=9.0.0  <9.5.2"
  severity: high
  package_manager: packagist
  cwe:
  - CWE-400
  disclosed_date: 2018-12-11
  created_date: 2018-12-12
  last_modified_date: 2018-12-12
  credit:
  - Michael Schams
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2018-011/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMSCORE-72689
- id: snykio:packagist:typo3/cms-core:73574
  title: Information Exposure
  description: |
    [typo3/cms-core][1] is an free open source enterprise content management
    system.

    Affected versions of this package are vulnerable to Information Exposure
    through the mechanisms used for configuration of RequireJS package
    loading. This way a potential attack can retrieve additional information
    about installed system and third party extensions.



    [1]: https://packagist.org/packages/typo3/cms-core
  affected_package: typo3/cms-core
  vulnerable_versions:
  - ">=8.0.0  <8.7.23"
  - ">=9.0.0  <9.5.4"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-200
  disclosed_date: 2019-01-22
  created_date: 2019-01-22
  last_modified_date: 2019-01-22
  credit:
  - Sven Jürgens and Stefan Isak
  references:
  - https://github.com/TYPO3-CMS/core/commit/9453d8a8763fffa76deb6a16f6b99c0ab6f3d8f1
  - https://typo3.org/security/advisory/typo3-core-sa-2019-001/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMSCORE-73574
- id: snykio:packagist:typo3/cms-core:73580
  title: Broken Access Control
  description: |
    [typo3/cms-core][1] is a free open source enterprise content management
    system.

    Affected versions of this package are vulnerable to Broken Access
    Control. Backend users having limited access to specific languages are
    capable of modifying and creating pages in the default language which
    actually should be disallowed. A valid backend user account is needed in
    order to exploit this vulnerability.



    [1]: https://packagist.org/packages/typo3/cms-core
  affected_package: typo3/cms-core
  vulnerable_versions:
  - ">=8.0.0  <8.7.23"
  - ">=9.0.0  <9.5.4"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-284
  disclosed_date: 2019-01-22
  created_date: 2019-01-22
  last_modified_date: 2019-01-22
  credit:
  - Sascha Egerer
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2019-003/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMSCORE-73580
- id: snykio:packagist:typo3/cms-core:73581
  title: Cross-site Scripting (XSS)
  description: |+
    [typo3/cms-core][1] is an free open source enterprise content management
    system.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) due to improperly encode of user input.



    [1]: https://packagist.org/packages/typo3/cms-core
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: typo3/cms-core
  vulnerable_versions:
  - ">=8.0.0  <8.7.23"
  - ">=9.0.0  <9.5.4"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-79
  disclosed_date: 2019-01-22
  created_date: 2019-01-22
  last_modified_date: 2019-01-22
  credit:
  - Susanne Moo
  - TYPO3 core team member
  references:
  - https://github.com/TYPO3-CMS/core/compare/v9.5.3...v9.5.4
  - https://typo3.org/security/advisory/typo3-core-sa-2019-007/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMSCORE-73581
- id: snykio:packagist:typo3/cms-core:73583
  title: Cross-site Scripting (XSS)
  description: |+
    [typo3/cms-core][1] is an free open source enterprise content management
    system.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). Due to improperly encode of user input, templates using built-in
    Fluid ViewHelpers are vulnerable to cross-site scripting.



    [1]: https://packagist.org/packages/typo3/cms-core
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: typo3/cms-core
  vulnerable_versions:
  - ">=8.0.0  <8.7.23"
  - ">=9.0.0  <9.5.4"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-79
  disclosed_date: 2019-01-22
  created_date: 2019-01-22
  last_modified_date: 2019-01-22
  credit:
  - Markus Gerdes
  references:
  - https://github.com/TYPO3-CMS/core/compare/v9.5.3...v9.5.4
  - https://typo3.org/security/advisory/typo3-core-sa-2019-005/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMSCORE-73583
- id: snykio:packagist:typo3/cms-core:73587
  title: Cross-site Scripting (XSS)
  description: |+
    [typo3/cms-core][1] is an free open source enterprise content management
    system.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). Due to improperly encode information from external sources,
    language pack handling in the install tool is vulnerable to cross-site
    scripting.



    [1]: https://packagist.org/packages/typo3/cms-core
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: typo3/cms-core
  vulnerable_versions:
  - ">=9.0.0  <9.5.4"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-9
  disclosed_date: 2019-01-22
  created_date: 2019-01-22
  last_modified_date: 2019-01-22
  credit:
  - Georg Ringer
  - TYPO3 core team member
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2019-004/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMSCORE-73587
- id: snykio:packagist:typo3/cms-core:73589
  title: Arbitrary Code Execution
  description: |
    [typo3/cms-core][1] is an free open source enterprise content management
    system.

    Affected versions of this package are vulnerable to Arbitrary Code
    Execution. Due to missing file extensions in
    `$GLOBALS['TYPO3_CONF_VARS']['BE'][‘fileDenyPattern’]`, backend users
    are allowed to upload `*.phar`, `*.shtml`, `*.pl` or `*.cgi` files which
    can be executed in certain web server setups.



    [1]: https://packagist.org/packages/typo3/cms-core
  affected_package: typo3/cms-core
  vulnerable_versions:
  - ">=8.0.0  <8.7.23"
  - ">=9.0.0  <9.5.4"
  severity: high
  package_manager: packagist
  cwe:
  - CWE-79
  disclosed_date: 2019-01-22
  created_date: 2019-01-22
  last_modified_date: 2019-01-22
  credit:
  - Edgar BodaMajer and Lauritz Holtmann
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2019-008/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMSCORE-73589
- id: snykio:packagist:typo3/cms-core:73593
  title: Security Misconfiguration
  description: |
    [typo3/cms-core][1] is an free open source enterprise content management
    system.

    Affected versions of this package are vulnerable to Security
    Misconfiguration. When trying to change the type of an existing backend
    user, the backend form is reloaded in order to reflect changed
    configuration possibilities. This can lead to an account with empty
    credentials. This weakness cannot be directly exploited and requires
    interaction on purpose by some backend user having according privileges.



    [1]: https://packagist.org/packages/typo3/cms-core
  affected_package: typo3/cms-core
  vulnerable_versions:
  - ">=8.0.0  <8.7.23"
  - ">=9.0.0  <9.5.4"
  severity: high
  package_manager: packagist
  cwe:
  - CWE-288
  disclosed_date: 2019-01-22
  created_date: 2019-01-22
  last_modified_date: 2019-01-22
  credit:
  - Oliver Eglseder
  references:
  - https://github.com/TYPO3-CMS/core/commit/1e0c7a60be0f324e77cdbc2dadef46458e191d47
  - https://typo3.org/security/advisory/typo3-core-sa-2019-002/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMSCORE-73593
