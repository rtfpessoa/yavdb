---
- id: friendsofphp:packagist:typo3/cms:2014-05-22-1
  title: The ExtJS JavaScript framework that is shipped with TYPO3 is susceptible
    to XSS
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0 <6.2.3"
  package_manager: packagist
  disclosed_date: 2014-05-22
  created_date: 2014-05-22
  last_modified_date: 2014-05-22
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2014-001/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2014-05-22-1.yaml
- id: friendsofphp:packagist:typo3/cms:2014-10-22-1
  title: Denial of Service in OpenID System Extension
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0 <6.2.6"
  package_manager: packagist
  disclosed_date: 2014-10-22
  created_date: 2014-10-22
  last_modified_date: 2014-10-22
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2014-002/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2014-10-22-1.yaml
- id: friendsofphp:packagist:typo3/cms:2014-10-22-2
  title: Arbitrary Shell Execution in Swiftmailer library
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0 <6.2.6"
  package_manager: packagist
  disclosed_date: 2014-10-22
  created_date: 2014-10-22
  last_modified_date: 2014-10-22
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2014-002/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2014-10-22-2.yaml
- id: friendsofphp:packagist:typo3/cms:2014-12-09-1
  title: Possible link spoofing on the homepage when anchors are used
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0 <6.2.9"
  - ">=7.0.0 <7.0.2"
  package_manager: packagist
  disclosed_date: 2014-12-10
  created_date: 2014-12-10
  last_modified_date: 2014-12-10
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2014-003/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2014-12-09-1.yaml
- id: friendsofphp:packagist:typo3/cms:2014-12-09-2
  title: Possible cache poisining on the homepage when anchors are used
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0 <6.2.9"
  - ">=7.0.0 <7.0.2"
  package_manager: packagist
  disclosed_date: 2014-12-10
  created_date: 2014-12-10
  last_modified_date: 2014-12-10
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2014-003/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2014-12-09-2.yaml
- id: friendsofphp:packagist:typo3/cms:2015-07-01-1
  title: Access bypass when editing file metadata
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0 <6.2.14"
  - ">=7.0.0 <7.1.0"
  - ">=7.1.0 <7.2.0"
  - ">=7.2.0 <7.3.0"
  - ">=7.3.0 <7.3.1"
  package_manager: packagist
  disclosed_date: 2015-07-01
  created_date: 2015-07-01
  last_modified_date: 2015-07-01
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2015-002/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2015-07-01-1.yaml
- id: friendsofphp:packagist:typo3/cms:2015-07-01-2
  title: Frontend login Session Fixation
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0 <6.2.14"
  - ">=7.0.0 <7.1.0"
  - ">=7.1.0 <7.2.0"
  - ">=7.2.0 <7.3.0"
  - ">=7.3.0 <7.3.1"
  package_manager: packagist
  disclosed_date: 2015-07-01
  created_date: 2015-07-01
  last_modified_date: 2015-07-01
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2015-003/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2015-07-01-2.yaml
- id: friendsofphp:packagist:typo3/cms:2015-07-01-3
  title: Cross-Site Scripting exploitable by Editors
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0 <6.2.14"
  - ">=7.0.0 <7.1.0"
  - ">=7.1.0 <7.2.0"
  - ">=7.2.0 <7.3.0"
  - ">=7.3.0 <7.3.1"
  package_manager: packagist
  disclosed_date: 2015-07-01
  created_date: 2015-07-01
  last_modified_date: 2015-07-01
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2015-004/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2015-07-01-3.yaml
- id: friendsofphp:packagist:typo3/cms:2015-07-01-4
  title: Information Disclosure possibility exploitable by Editors
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0 <6.2.14"
  - ">=7.0.0 <7.1.0"
  - ">=7.1.0 <7.2.0"
  - ">=7.2.0 <7.3.0"
  - ">=7.3.0 <7.3.1"
  package_manager: packagist
  disclosed_date: 2015-07-01
  created_date: 2015-07-01
  last_modified_date: 2015-07-01
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2015-005/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2015-07-01-4.yaml
- id: friendsofphp:packagist:typo3/cms:2015-07-01-5
  title: Brute Force Protection Bypass in backend login
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0 <6.2.14"
  - ">=7.0.0 <7.1.0"
  - ">=7.1.0 <7.2.0"
  - ">=7.2.0 <7.3.0"
  - ">=7.3.0 <7.3.1"
  package_manager: packagist
  disclosed_date: 2015-07-01
  created_date: 2015-07-01
  last_modified_date: 2015-07-01
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2015-006/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2015-07-01-5.yaml
- id: friendsofphp:packagist:typo3/cms:2015-07-01-6
  title: Cross-Site Scripting in 3rd party library Flowplayer
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0 <6.2.14"
  - ">=7.0.0 <7.1.0"
  - ">=7.1.0 <7.2.0"
  - ">=7.2.0 <7.3.0"
  - ">=7.3.0 <7.3.1"
  package_manager: packagist
  disclosed_date: 2015-07-01
  created_date: 2015-07-01
  last_modified_date: 2015-07-01
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2015-007/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2015-07-01-6.yaml
- id: friendsofphp:packagist:typo3/cms:2015-09-08-1
  title: 'Frontend: Unauthenticated Path Disclosure'
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0 <6.2.15"
  - ">=7.0.0 <7.1.0"
  - ">=7.1.0 <7.2.0"
  - ">=7.2.0 <7.3.0"
  - ">=7.3.0 <7.4.0"
  package_manager: packagist
  disclosed_date: 2015-09-08
  created_date: 2015-09-08
  last_modified_date: 2015-09-08
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2015-008/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2015-09-08-1.yaml
- id: friendsofphp:packagist:typo3/cms:2015-12-15-1
  title: Multiple Cross-Site Scripting vulnerabilities in TYPO3 backend
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0 <6.2.16"
  - ">=7.0.0 <7.1.0"
  - ">=7.1.0 <7.2.0"
  - ">=7.2.0 <7.3.0"
  - ">=7.3.0 <7.4.0"
  - ">=7.4.0 <7.5.0"
  - ">=7.5.0 <7.6.0"
  - ">=7.6.0 <7.6.1"
  package_manager: packagist
  disclosed_date: 2015-12-15
  created_date: 2015-12-15
  last_modified_date: 2015-12-15
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2015-011/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2015-12-15-1.yaml
- id: friendsofphp:packagist:typo3/cms:2015-12-15-2
  title: Cross-Site Scripting vulnerability in typolinks
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0 <6.2.16"
  - ">=7.0.0 <7.1.0"
  - ">=7.1.0 <7.2.0"
  - ">=7.2.0 <7.3.0"
  - ">=7.3.0 <7.4.0"
  - ">=7.4.0 <7.5.0"
  - ">=7.5.0 <7.6.0"
  - ">=7.6.0 <7.6.1"
  package_manager: packagist
  disclosed_date: 2015-12-15
  created_date: 2015-12-15
  last_modified_date: 2015-12-15
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2015-012/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2015-12-15-2.yaml
- id: friendsofphp:packagist:typo3/cms:2015-12-15-3
  title: Multiple Cross-Site Scripting vulnerabilities in frontend
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0 <6.2.16"
  - ">=7.0.0 <7.1.0"
  - ">=7.1.0 <7.2.0"
  - ">=7.2.0 <7.3.0"
  - ">=7.3.0 <7.4.0"
  - ">=7.4.0 <7.5.0"
  - ">=7.5.0 <7.6.0"
  - ">=7.6.0 <7.6.1"
  package_manager: packagist
  disclosed_date: 2015-12-15
  created_date: 2015-12-15
  last_modified_date: 2015-12-15
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2015-013/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2015-12-15-3.yaml
- id: friendsofphp:packagist:typo3/cms:2015-12-15-4
  title: TYPO3 is susceptible to Cross-Site Flashing
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0 <6.2.16"
  package_manager: packagist
  disclosed_date: 2015-12-15
  created_date: 2015-12-15
  last_modified_date: 2015-12-15
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2015-014/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2015-12-15-4.yaml
- id: friendsofphp:packagist:typo3/cms:2015-12-15-5
  title: Cross-Site Scripting in TYPO3 component Indexed Search
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0 <6.2.16"
  package_manager: packagist
  disclosed_date: 2015-12-15
  created_date: 2015-12-15
  last_modified_date: 2015-12-15
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2015-015/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2015-12-15-5.yaml
- id: friendsofphp:packagist:typo3/cms:2016-02-16-1
  title: SQL Injection in dbal
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0 <6.2.18"
  package_manager: packagist
  disclosed_date: 2016-02-16
  created_date: 2016-02-16
  last_modified_date: 2016-02-16
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2015-016/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2016-02-16-1.yaml
- id: friendsofphp:packagist:typo3/cms:2016-02-16-2
  title: Cross-Site Scripting in link validator component
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0 <6.2.18"
  - ">=7.6.0 <7.6.3"
  package_manager: packagist
  disclosed_date: 2016-02-16
  created_date: 2016-02-16
  last_modified_date: 2016-02-16
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2016-002/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2016-02-16-2.yaml
- id: friendsofphp:packagist:typo3/cms:2016-02-16-3
  title: Cross-Site Scripting in legacy form component
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0 <6.2.18"
  package_manager: packagist
  disclosed_date: 2016-02-16
  created_date: 2016-02-16
  last_modified_date: 2016-02-16
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2016-003/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2016-02-16-3.yaml
- id: friendsofphp:packagist:typo3/cms:2016-02-16-4
  title: Cross-Site Scripting in form component
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0 <6.2.18"
  package_manager: packagist
  disclosed_date: 2016-02-16
  created_date: 2016-02-16
  last_modified_date: 2016-02-16
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2016-004/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2016-02-16-4.yaml
- id: friendsofphp:packagist:typo3/cms:2016-02-23-1
  title: XML External Entity (XXE) Processing in TYPO3 Core
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0 <6.2.19"
  - ">=7.6.0 <7.6.4"
  package_manager: packagist
  disclosed_date: 2016-02-23
  created_date: 2016-02-23
  last_modified_date: 2016-02-23
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2016-005/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2016-02-23-1.yaml
- id: friendsofphp:packagist:typo3/cms:2016-02-23-2
  title: Cross-Site Scripting in TYPO3 component Backend
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0 <6.2.19"
  package_manager: packagist
  disclosed_date: 2016-02-23
  created_date: 2016-02-23
  last_modified_date: 2016-02-23
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2016-006/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2016-02-23-2.yaml
- id: friendsofphp:packagist:typo3/cms:2016-02-23-3
  title: Cross-Site Scripting in TYPO3 component CSS styled content
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0 <6.2.19"
  - ">=7.6.0 <7.6.4"
  package_manager: packagist
  disclosed_date: 2016-02-23
  created_date: 2016-02-23
  last_modified_date: 2016-02-23
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2016-007/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2016-02-23-3.yaml
- id: friendsofphp:packagist:typo3/cms:2016-02-23-4
  title: Denial of Service attack possibility in TYPO3 component Indexed Search
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0 <6.2.19"
  - ">=7.6.0 <7.6.4"
  package_manager: packagist
  disclosed_date: 2016-02-23
  created_date: 2016-02-23
  last_modified_date: 2016-02-23
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2016-008/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2016-02-23-4.yaml
- id: friendsofphp:packagist:typo3/cms:2016-04-12-1
  title: Cross-Site Scripting in TYPO3 Backend
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0 <6.2.20"
  - ">=7.6.0 <7.6.5"
  - ">=8.0.0 <8.0.1"
  package_manager: packagist
  disclosed_date: 2016-04-12
  created_date: 2016-04-12
  last_modified_date: 2016-04-12
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2016-009/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2016-04-12-1.yaml
- id: friendsofphp:packagist:typo3/cms:2016-04-12-2
  title: Arbitrary File Disclosure in Form Component
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0 <6.2.20"
  package_manager: packagist
  disclosed_date: 2016-04-12
  created_date: 2016-04-12
  last_modified_date: 2016-04-12
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2016-010/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2016-04-12-2.yaml
- id: friendsofphp:packagist:typo3/cms:2016-04-12-3
  title: Authentication Bypass in TYPO3 CMS
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0 <6.2.20"
  - ">=7.6.0 <7.6.5"
  - ">=8.0.0 <8.0.1"
  package_manager: packagist
  disclosed_date: 2016-04-12
  created_date: 2016-04-12
  last_modified_date: 2016-04-12
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2016-011/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2016-04-12-3.yaml
- id: friendsofphp:packagist:typo3/cms:2016-04-12-4
  title: Privilege Escalation in TYPO3 CMS
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0 <6.2.20"
  - ">=7.6.0 <7.6.5"
  - ">=8.0.0 <8.0.1"
  package_manager: packagist
  disclosed_date: 2016-04-12
  created_date: 2016-04-12
  last_modified_date: 2016-04-12
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2016-012/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2016-04-12-4.yaml
- id: friendsofphp:packagist:typo3/cms:2016-05-24-1
  title: Missing Access Check in TYPO3 CMS
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0 <6.2.25"
  - ">=7.6.0 <7.6.8"
  - ">=8.0.0 <8.1.1"
  - ">=8.1.0 <8.1.1"
  package_manager: packagist
  disclosed_date: 2016-05-24
  created_date: 2016-05-24
  last_modified_date: 2016-05-24
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/teamssecuritysecurity-bulletins/security-bulletins-single-view/article/missing-access-check-in-typo3-cms/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2016-05-24-1.yaml
- id: friendsofphp:packagist:typo3/cms:2016-07-19-1
  title: Cross-Site Scripting in TYPO3 Backend
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0 <6.2.26"
  - ">=7.6.0 <7.6.10"
  - ">=8.0.0 <8.1.0"
  - ">=8.1.0 <8.2.0"
  - ">=8.2.0 <8.2.1"
  package_manager: packagist
  disclosed_date: 2016-07-19
  created_date: 2016-07-19
  last_modified_date: 2016-07-19
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2016-014/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2016-07-19-1.yaml
- id: friendsofphp:packagist:typo3/cms:2016-07-19-2
  title: Insecure Unserialize in TYPO3 Import/Export
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0 <6.2.26"
  - ">=7.6.0 <7.6.10"
  - ">=8.0.0 <8.1.0"
  - ">=8.1.0 <8.2.0"
  - ">=8.2.0 <8.2.1"
  package_manager: packagist
  disclosed_date: 2016-07-19
  created_date: 2016-07-19
  last_modified_date: 2016-07-19
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2016-015
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2016-07-19-2.yaml
- id: friendsofphp:packagist:typo3/cms:2016-07-19-3
  title: SQL Injection in TYPO3 Frontend Login
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0 <6.2.26"
  - ">=7.6.0 <7.6.10"
  package_manager: packagist
  disclosed_date: 2016-07-19
  created_date: 2016-07-19
  last_modified_date: 2016-07-19
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2016-016
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2016-07-19-3.yaml
- id: friendsofphp:packagist:typo3/cms:2016-07-19-4
  title: Information Disclosure in TYPO3 Backend
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0 <6.2.26"
  - ">=7.6.0 <7.6.10"
  - ">=8.0.0 <8.1.0"
  - ">=8.1.0 <8.2.0"
  - ">=8.2.0 <8.2.1"
  package_manager: packagist
  disclosed_date: 2016-07-19
  created_date: 2016-07-19
  last_modified_date: 2016-07-19
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2016-017
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2016-07-19-4.yaml
- id: friendsofphp:packagist:typo3/cms:2016-07-19-5
  title: Cross-Site Scripting vulnerability in typolinks
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0 <6.2.26"
  - ">=7.6.0 <7.6.10"
  - ">=8.0.0 <8.1.0"
  - ">=8.1.0 <8.2.0"
  - ">=8.2.0 <8.2.1"
  package_manager: packagist
  disclosed_date: 2016-07-19
  created_date: 2016-07-19
  last_modified_date: 2016-07-19
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2016-018
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2016-07-19-5.yaml
- id: friendsofphp:packagist:typo3/cms:2016-07-19-6
  title: Environment Variable Injection
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=8.0.0 <8.1.0"
  - ">=8.1.0 <8.2.0"
  - ">=8.2.0 <8.2.1"
  package_manager: packagist
  disclosed_date: 2016-07-19
  created_date: 2016-07-19
  last_modified_date: 2016-07-19
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2016-019
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2016-07-19-6.yaml
- id: friendsofphp:packagist:typo3/cms:2016-07-19-7
  title: Cross-Site Scripting in third party library mso/idna-convert
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=7.6.0 <7.6.10"
  - ">=8.0.0 <8.1.0"
  - ">=8.1.0 <8.2.0"
  - ">=8.2.0 <8.2.1"
  package_manager: packagist
  disclosed_date: 2016-07-19
  created_date: 2016-07-19
  last_modified_date: 2016-07-19
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2016-020
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2016-07-19-7.yaml
- id: friendsofphp:packagist:typo3/cms:2016-09-14-1
  title: Cross-Site Scripting in TYPO3 Backend
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0 <6.2.27"
  - ">=7.6.0 <7.6.11"
  - ">=8.0.0 <8.1.0"
  - ">=8.1.0 <8.2.0"
  - ">=8.2.0 <8.3.0"
  - ">=8.3.0 <8.3.1"
  package_manager: packagist
  disclosed_date: 2016-07-13
  created_date: 2016-07-13
  last_modified_date: 2016-07-13
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2016-021
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2016-09-14-1.yaml
- id: friendsofphp:packagist:typo3/cms:2016-09-14-2
  title: Cache Flooding in TYPO3 Frontend
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0 <6.2.27"
  - ">=7.6.0 <7.6.11"
  - ">=8.0.0 <8.1.0"
  - ">=8.1.0 <8.2.0"
  - ">=8.2.0 <8.3.0"
  - ">=8.3.0 <8.3.1"
  package_manager: packagist
  disclosed_date: 2016-07-13
  created_date: 2016-07-13
  last_modified_date: 2016-07-13
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2016-022
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2016-09-14-2.yaml
- id: friendsofphp:packagist:typo3/cms:2016-11-22-1
  title: Insecure Unserialize in TYPO3 Backend
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0 <6.2.29"
  - ">=7.6.0 <7.6.13"
  - ">=8.0.0 <8.1.0"
  - ">=8.1.0 <8.2.0"
  - ">=8.2.0 <8.3.0"
  - ">=8.3.0 <8.4.0"
  - ">=8.4.0 <8.4.1"
  package_manager: packagist
  disclosed_date: 2016-11-22
  created_date: 2016-11-22
  last_modified_date: 2016-11-22
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2016-023/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2016-11-22-1.yaml
- id: friendsofphp:packagist:typo3/cms:2016-11-22-2
  title: Path Traversal in TYPO3 Core
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0 <6.2.29"
  - ">=7.6.0 <7.6.13"
  - ">=8.0.0 <8.1.0"
  - ">=8.1.0 <8.2.0"
  - ">=8.2.0 <8.3.0"
  - ">=8.3.0 <8.4.0"
  - ">=8.4.0 <8.4.1"
  package_manager: packagist
  disclosed_date: 2016-11-22
  created_date: 2016-11-22
  last_modified_date: 2016-11-22
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2016-024/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2016-11-22-2.yaml
- id: friendsofphp:packagist:typo3/cms:2017-01-03-1
  title: Remote Code Execution in third party library swiftmailer
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0 <6.2.30"
  - ">=7.6.0 <7.6.15"
  - ">=8.0.0 <8.1.0"
  - ">=8.1.0 <8.2.0"
  - ">=8.2.0 <8.3.0"
  - ">=8.3.0 <8.4.0"
  - ">=8.4.0 <8.5.0"
  - ">=8.5.0 <8.5.1"
  package_manager: packagist
  disclosed_date: 2017-01-03
  created_date: 2017-01-03
  last_modified_date: 2017-01-03
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2017-001/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2017-01-03-1.yaml
- id: friendsofphp:packagist:typo3/cms:2017-02-28-1
  title: Authentication Bypass in TYPO3 Frontend
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=8.2.0 <8.3.0"
  - ">=8.3.0 <8.4.0"
  - ">=8.4.0 <8.5.0"
  - ">=8.5.0 <8.6.0"
  - ">=8.6.0 <8.6.1"
  package_manager: packagist
  disclosed_date: 2017-02-28
  created_date: 2017-02-28
  last_modified_date: 2017-02-28
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2017-002/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2017-02-28-1.yaml
- id: friendsofphp:packagist:typo3/cms:2017-02-28-2
  title: Cross-Site Scripting in TYPO3 CMS
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=7.6.0 <7.6.16"
  - ">=8.0.0 <8.1.0"
  - ">=8.1.0 <8.2.0"
  - ">=8.2.0 <8.3.0"
  - ">=8.3.0 <8.4.0"
  - ">=8.4.0 <8.5.0"
  - ">=8.5.0 <8.6.0"
  - ">=8.6.0 <8.6.1"
  package_manager: packagist
  disclosed_date: 2017-02-28
  created_date: 2017-02-28
  last_modified_date: 2017-02-28
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2017-003/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2017-02-28-2.yaml
- id: friendsofphp:packagist:typo3/cms:2017-09-05-1
  title: Cross-Site Scripting in TYPO3 CMS Backend
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=8.0.0 <8.1.0"
  - ">=8.1.0 <8.2.0"
  - ">=8.2.0 <8.3.0"
  - ">=8.3.0 <8.4.0"
  - ">=8.4.0 <8.5.0"
  - ">=8.5.0 <8.6.0"
  - ">=8.6.0 <8.7.0"
  - ">=8.7.0 <8.7.5"
  package_manager: packagist
  disclosed_date: 2017-09-05
  created_date: 2017-09-05
  last_modified_date: 2017-09-05
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2017-004/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2017-09-05-1.yaml
- id: friendsofphp:packagist:typo3/cms:2017-09-05-2
  title: Information Disclosure in TYPO3 CMS
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=7.6.0 <7.6.22"
  - ">=8.0.0 <8.1.0"
  - ">=8.1.0 <8.2.0"
  - ">=8.2.0 <8.3.0"
  - ">=8.3.0 <8.4.0"
  - ">=8.4.0 <8.5.0"
  - ">=8.5.0 <8.6.0"
  - ">=8.6.0 <8.7.0"
  - ">=8.7.0 <8.7.5"
  package_manager: packagist
  disclosed_date: 2017-09-05
  created_date: 2017-09-05
  last_modified_date: 2017-09-05
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2017-005/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2017-09-05-2.yaml
- id: friendsofphp:packagist:typo3/cms:2017-09-05-3
  title: Information Disclosure in TYPO3 CMS
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=7.6.0 <7.6.22"
  - ">=8.0.0 <8.1.0"
  - ">=8.1.0 <8.2.0"
  - ">=8.2.0 <8.3.0"
  - ">=8.3.0 <8.4.0"
  - ">=8.4.0 <8.5.0"
  - ">=8.5.0 <8.6.0"
  - ">=8.6.0 <8.7.0"
  - ">=8.7.0 <8.7.5"
  package_manager: packagist
  disclosed_date: 2017-09-05
  created_date: 2017-09-05
  last_modified_date: 2017-09-05
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2017-006/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2017-09-05-3.yaml
- id: friendsofphp:packagist:typo3/cms:2017-09-05-4
  title: Arbitrary Code Execution in TYPO3 CMS
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=7.6.0 <7.6.22"
  - ">=8.0.0 <8.1.0"
  - ">=8.1.0 <8.2.0"
  - ">=8.2.0 <8.3.0"
  - ">=8.3.0 <8.4.0"
  - ">=8.4.0 <8.5.0"
  - ">=8.5.0 <8.6.0"
  - ">=8.6.0 <8.7.0"
  - ">=8.7.0 <8.7.5"
  package_manager: packagist
  disclosed_date: 2017-09-05
  created_date: 2017-09-05
  last_modified_date: 2017-09-05
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2017-007/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2017-09-05-4.yaml
- id: friendsofphp:packagist:typo3/cms:2018-07-12-1
  title: Authentication Bypass in TYPO3 CMS
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=7.0.0 <7.6.30"
  - ">=8.0.0 <8.7.17"
  - ">=9.0.0 <9.3.2"
  package_manager: packagist
  disclosed_date: 2018-07-12
  created_date: 2018-07-12
  last_modified_date: 2018-07-12
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2018-001/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2018-07-12-1.yaml
- id: friendsofphp:packagist:typo3/cms:2018-07-12-2
  title: Insecure Deserialization & Arbitrary Code Execution in TYPO3 CMS
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=7.0.0 <7.6.30"
  - ">=8.0.0 <8.7.17"
  - ">=9.0.0 <9.3.2"
  package_manager: packagist
  disclosed_date: 2018-07-12
  created_date: 2018-07-12
  last_modified_date: 2018-07-12
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2018-002/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2018-07-12-2.yaml
- id: friendsofphp:packagist:typo3/cms:2018-07-12-3
  title: Privilege Escalation & SQL Injection in TYPO3 CMS
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=8.5.0 <8.7.17"
  - ">=9.0.0 <9.3.2"
  package_manager: packagist
  disclosed_date: 2018-07-12
  created_date: 2018-07-12
  last_modified_date: 2018-07-12
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2018-003/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2018-07-12-3.yaml
- id: friendsofphp:packagist:typo3/cms:2018-07-12-4
  title: Insecure Deserialization in TYPO3 CMS
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=8.5.0 <8.7.17"
  - ">=9.0.0 <9.3.2"
  package_manager: packagist
  disclosed_date: 2018-07-12
  created_date: 2018-07-12
  last_modified_date: 2018-07-12
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2018-004/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2018-07-12-4.yaml
- id: friendsofphp:packagist:typo3/cms:2018-12-11-1
  title: Cross-Site Scripting in Online Media Asset Rendering
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=7.0.0 <7.6.32"
  - ">=8.0.0 <8.7.21"
  - ">=9.0.0 <9.5.2"
  package_manager: packagist
  disclosed_date: 2018-12-11
  created_date: 2018-12-11
  last_modified_date: 2018-12-11
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2018-006/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2018-12-11-1.yaml
- id: friendsofphp:packagist:typo3/cms:2018-12-11-2
  title: Cross-Site Scripting in Backend Modal Component
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=7.0.0 <7.6.32"
  - ">=8.0.0 <8.7.21"
  - ">=9.0.0 <9.5.2"
  package_manager: packagist
  disclosed_date: 2018-12-11
  created_date: 2018-12-11
  last_modified_date: 2018-12-11
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2018-007/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2018-12-11-2.yaml
- id: friendsofphp:packagist:typo3/cms:2018-12-11-3
  title: Cross-Site Scripting in Frontend User Login
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=7.0.0 <7.6.32"
  - ">=8.0.0 <8.7.21"
  - ">=9.0.0 <9.5.2"
  package_manager: packagist
  disclosed_date: 2018-12-11
  created_date: 2018-12-11
  last_modified_date: 2018-12-11
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2018-008/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2018-12-11-3.yaml
- id: friendsofphp:packagist:typo3/cms:2018-12-11-4
  title: Security Misconfiguration in Install Tool Cookie
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=7.0.0 <7.6.32"
  - ">=8.0.0 <8.7.21"
  - ">=9.0.0 <9.5.2"
  package_manager: packagist
  disclosed_date: 2018-12-11
  created_date: 2018-12-11
  last_modified_date: 2018-12-11
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2018-009/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2018-12-11-4.yaml
- id: friendsofphp:packagist:typo3/cms:2018-12-11-5
  title: Information Disclosure in Install Tool
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=7.0.0 <7.6.32"
  - ">=8.0.0 <8.7.21"
  - ">=9.0.0 <9.5.2"
  package_manager: packagist
  disclosed_date: 2018-12-11
  created_date: 2018-12-11
  last_modified_date: 2018-12-11
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2018-010/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2018-12-11-5.yaml
- id: friendsofphp:packagist:typo3/cms:2018-12-11-6
  title: Denial of Service in Online Media Asset Handling
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=7.0.0 <7.6.32"
  - ">=8.0.0 <8.7.21"
  - ">=9.0.0 <9.5.2"
  package_manager: packagist
  disclosed_date: 2018-12-11
  created_date: 2018-12-11
  last_modified_date: 2018-12-11
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2018-011/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2018-12-11-6.yaml
- id: friendsofphp:packagist:typo3/cms:2018-12-11-7
  title: Denial of Service in Frontend Record Registration
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=7.0.0 <7.6.32"
  - ">=8.0.0 <8.7.21"
  package_manager: packagist
  disclosed_date: 2018-12-11
  created_date: 2018-12-11
  last_modified_date: 2018-12-11
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2018-012/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2018-12-11-7.yaml
- id: friendsofphp:packagist:typo3/cms:2018-12-11-8
  title: Cross-Site Scripting in CKEditor
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=8.0.0 <8.7.21"
  - ">=9.0.0 <9.5.2"
  package_manager: packagist
  disclosed_date: 2018-12-11
  created_date: 2018-12-11
  last_modified_date: 2018-12-11
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2018-005/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2018-12-11-8.yaml
- id: friendsofphp:packagist:typo3/cms:2019-01-22-1
  title: Information Disclosure of Installed Extensions
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=8.0.0 <8.7.23"
  - ">=9.0.0 <9.5.4"
  package_manager: packagist
  disclosed_date: 2019-01-22
  created_date: 2019-01-22
  last_modified_date: 2019-01-22
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2019-001/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2019-01-22-1.yaml
- id: friendsofphp:packagist:typo3/cms:2019-01-22-2
  title: Security Misconfiguration for Backend User Accounts
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=8.0.0 <8.7.23"
  - ">=9.0.0 <9.5.4"
  package_manager: packagist
  disclosed_date: 2019-01-22
  created_date: 2019-01-22
  last_modified_date: 2019-01-22
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2019-002/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2019-01-22-2.yaml
- id: friendsofphp:packagist:typo3/cms:2019-01-22-3
  title: Broken Access Control in Localization Handling
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=8.0.0 <8.7.23"
  package_manager: packagist
  disclosed_date: 2019-01-22
  created_date: 2019-01-22
  last_modified_date: 2019-01-22
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2019-003/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2019-01-22-3.yaml
- id: friendsofphp:packagist:typo3/cms:2019-01-22-4
  title: Cross-Site Scripting in Fluid ViewHelpers
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=8.0.0 <8.7.23"
  - ">=9.0.0 <9.5.4"
  package_manager: packagist
  disclosed_date: 2019-01-22
  created_date: 2019-01-22
  last_modified_date: 2019-01-22
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2019-005/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2019-01-22-4.yaml
- id: friendsofphp:packagist:typo3/cms:2019-01-22-5
  title: Cross-Site Scripting in Bootstrap CSS toolkit
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=8.0.0 <8.7.23"
  - ">=9.0.0 <9.5.4"
  package_manager: packagist
  disclosed_date: 2019-01-22
  created_date: 2019-01-22
  last_modified_date: 2019-01-22
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2019-006/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2019-01-22-5.yaml
- id: friendsofphp:packagist:typo3/cms:2019-01-22-6
  title: Cross-Site Scripting in Form Framework
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=8.0.0 <8.7.23"
  - ">=9.0.0 <9.5.4"
  package_manager: packagist
  disclosed_date: 2019-01-22
  created_date: 2019-01-22
  last_modified_date: 2019-01-22
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2019-007/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2019-01-22-6.yaml
- id: friendsofphp:packagist:typo3/cms:2019-01-22-7
  title: Arbitrary Code Execution via File List Module
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=8.0.0 <8.7.23"
  - ">=9.0.0 <9.5.4"
  package_manager: packagist
  disclosed_date: 2019-01-22
  created_date: 2019-01-22
  last_modified_date: 2019-01-22
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2019-008/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2019-01-22-7.yaml
- id: friendsofphp:packagist:typo3/cms:2019-01-22-8
  title: Cross-Site Scripting in Language Pack Handling
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=9.0.0 <9.5.4"
  package_manager: packagist
  disclosed_date: 2019-01-22
  created_date: 2019-01-22
  last_modified_date: 2019-01-22
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2019-004/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2019-01-22-8.yaml
- id: friendsofphp:packagist:typo3/cms:2019-05-07-1
  title: Cross-Site Scripting in Fluid Engine
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=8.0.0 <8.7.25"
  - ">=9.0.0 <9.5.6"
  package_manager: packagist
  disclosed_date: 2019-05-07
  created_date: 2019-05-07
  last_modified_date: 2019-05-07
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2019-013/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2019-05-07-1.yaml
- id: friendsofphp:packagist:typo3/cms:2019-05-07-2
  title: Security Misconfiguration in User Session Handling
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=8.0.0 <8.7.25"
  - ">=9.0.0 <9.5.6"
  package_manager: packagist
  disclosed_date: 2019-05-07
  created_date: 2019-05-07
  last_modified_date: 2019-05-07
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2019-011/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2019-05-07-2.yaml
- id: friendsofphp:packagist:typo3/cms:2019-05-07-3
  title: Possible Arbitrary Code Execution in Image Processing
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=8.0.0 <8.7.25"
  - ">=9.0.0 <9.5.6"
  package_manager: packagist
  disclosed_date: 2019-05-07
  created_date: 2019-05-07
  last_modified_date: 2019-05-07
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2019-012/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2019-05-07-3.yaml
- id: friendsofphp:packagist:typo3/cms:2019-05-07-4
  title: Information Disclosure in Page Tree
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=9.0.0 <9.5.6"
  package_manager: packagist
  disclosed_date: 2019-05-07
  created_date: 2019-05-07
  last_modified_date: 2019-05-07
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2019-009/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2019-05-07-4.yaml
- id: friendsofphp:packagist:typo3/cms:2019-05-07-5
  title: Information Disclosure in User Authentication
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=9.0.0 <9.5.6"
  package_manager: packagist
  disclosed_date: 2019-05-07
  created_date: 2019-05-07
  last_modified_date: 2019-05-07
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2019-010/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2019-05-07-5.yaml
- id: friendsofphp:packagist:typo3/cms:2019-06-25-1
  title: Information Disclosure in Backend User Interface
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=8.0.0 <8.7.27"
  - ">=9.0.0 <9.5.8"
  package_manager: packagist
  disclosed_date: 2019-06-25
  created_date: 2019-06-25
  last_modified_date: 2019-06-25
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2019-014/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2019-06-25-1.yaml
- id: friendsofphp:packagist:typo3/cms:2019-06-25-2
  title: Cross-Site Scripting in Link Handling
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=8.0.0 <8.7.27"
  - ">=9.0.0 <9.5.8"
  package_manager: packagist
  disclosed_date: 2019-06-25
  created_date: 2019-06-25
  last_modified_date: 2019-06-25
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2019-015/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2019-06-25-2.yaml
- id: friendsofphp:packagist:typo3/cms:2019-06-25-3
  title: Security Misconfiguration in Frontend Session Handling
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=8.0.0 <8.7.27"
  - ">=9.0.0 <9.5.8"
  package_manager: packagist
  disclosed_date: 2019-06-25
  created_date: 2019-06-25
  last_modified_date: 2019-06-25
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2019-018/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2019-06-25-3.yaml
- id: friendsofphp:packagist:typo3/cms:2019-06-25-4
  title: Arbitrary Code Execution and Cross-Site Scripting in Backend API
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=8.0.0 <8.7.27"
  - ">=9.0.0 <9.5.8"
  package_manager: packagist
  disclosed_date: 2019-06-25
  created_date: 2019-06-25
  last_modified_date: 2019-06-25
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2019-019/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2019-06-25-4.yaml
- id: friendsofphp:packagist:typo3/cms:2019-06-25-5
  title: Insecure Deserialization in TYPO3 CMS
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=8.0.0 <8.7.27"
  - ">=9.0.0 <9.5.8"
  package_manager: packagist
  disclosed_date: 2019-06-25
  created_date: 2019-06-25
  last_modified_date: 2019-06-25
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2019-020/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2019-06-25-5.yaml
- id: friendsofphp:packagist:typo3/cms:2019-06-25-6
  title: Possible deserialization side-effects in symfony/cache
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=9.0.0 <9.5.8"
  package_manager: packagist
  disclosed_date: 2019-06-25
  created_date: 2019-06-25
  last_modified_date: 2019-06-25
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2019-016/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2019-06-25-6.yaml
- id: friendsofphp:packagist:typo3/cms:2019-06-25-7
  title: Broken Access Control in Import Module
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=9.0.0 <9.5.8"
  package_manager: packagist
  disclosed_date: 2019-06-25
  created_date: 2019-06-25
  last_modified_date: 2019-06-25
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2019-017/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2019-06-25-7.yaml
- id: friendsofphp:packagist:typo3/cms:2019-12-17-1
  title: Cross-Site Scripting in Form Framework validation handling
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=10.0.0 <10.2.1"
  - ">=8.0.0 <8.7.30"
  - ">=9.0.0 <9.5.12"
  package_manager: packagist
  disclosed_date: 2019-12-17
  created_date: 2019-12-17
  last_modified_date: 2019-12-17
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2019-021/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2019-12-17-1.yaml
- id: friendsofphp:packagist:typo3/cms:2019-12-17-2
  title: Cross-Site Scripting in Link Handling
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=10.0.0 <10.2.1"
  - ">=8.0.0 <8.7.30"
  - ">=9.0.0 <9.5.12"
  package_manager: packagist
  disclosed_date: 2019-12-17
  created_date: 2019-12-17
  last_modified_date: 2019-12-17
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2019-022/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2019-12-17-2.yaml
- id: friendsofphp:packagist:typo3/cms:2019-12-17-3
  title: Cross-Site Scripting in Filelist Module
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=10.0.0 <10.2.1"
  - ">=8.0.0 <8.7.30"
  - ">=9.0.0 <9.5.12"
  package_manager: packagist
  disclosed_date: 2019-12-17
  created_date: 2019-12-17
  last_modified_date: 2019-12-17
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2019-023/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2019-12-17-3.yaml
- id: friendsofphp:packagist:typo3/cms:2019-12-17-4
  title: Directory Traversal on ZIP extraction
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=10.0.0 <10.2.1"
  - ">=8.0.0 <8.7.30"
  - ">=9.0.0 <9.5.12"
  package_manager: packagist
  disclosed_date: 2019-12-17
  created_date: 2019-12-17
  last_modified_date: 2019-12-17
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2019-024/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2019-12-17-4.yaml
- id: friendsofphp:packagist:typo3/cms:2019-12-17-5
  title: SQL Injection in low-level Query Generator
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=10.0.0 <10.2.1"
  - ">=8.0.0 <8.7.30"
  - ">=9.0.0 <9.5.12"
  package_manager: packagist
  disclosed_date: 2019-12-17
  created_date: 2019-12-17
  last_modified_date: 2019-12-17
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2019-025/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2019-12-17-5.yaml
- id: friendsofphp:packagist:typo3/cms:2019-12-17-6
  title: Insecure Deserialization in Query Generator &amp; Query View
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=10.0.0 <10.2.1"
  - ">=8.0.0 <8.7.30"
  - ">=9.0.0 <9.5.12"
  package_manager: packagist
  disclosed_date: 2019-12-17
  created_date: 2019-12-17
  last_modified_date: 2019-12-17
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2019-026/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2019-12-17-6.yaml
- id: friendsofphp:packagist:typo3/cms:2019-12-17-7
  title: Possible Insecure Deserialization in Extbase Request Handling
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=8.0.0 <8.7.30"
  - ">=9.0.0 <9.5.12"
  package_manager: packagist
  disclosed_date: 2019-12-17
  created_date: 2019-12-17
  last_modified_date: 2019-12-17
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/security/advisory/typo3-psa-2019-011/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2019-12-17-7.yaml
- id: friendsofphp:packagist:typo3/cms:2020-05-12-1
  title: 'TYPO3-CORE-SA-2020-001: Information Disclosure in Password Reset'
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=10.0.0 <10.4.2"
  package_manager: packagist
  disclosed_date: 2020-05-12
  created_date: 2020-05-12
  last_modified_date: 2020-05-12
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2020-001/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2020-05-12-1.yaml
- id: friendsofphp:packagist:typo3/cms:2020-05-12-2
  title: 'TYPO3-CORE-SA-2020-003: Cross-Site Scripting in Link Handling'
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=10.0.0 <10.4.2"
  - ">=9.0.0 <9.5.17"
  package_manager: packagist
  disclosed_date: 2020-05-12
  created_date: 2020-05-12
  last_modified_date: 2020-05-12
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2020-003/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2020-05-12-2.yaml
- id: friendsofphp:packagist:typo3/cms:2020-05-12-3
  title: 'TYPO3-CORE-SA-2020-004: Class destructors causing side-effects when being
    unserialized'
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=10.0.0 <10.4.2"
  - ">=9.0.0 <9.5.17"
  package_manager: packagist
  disclosed_date: 2020-05-12
  created_date: 2020-05-12
  last_modified_date: 2020-05-12
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2020-004/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2020-05-12-3.yaml
- id: friendsofphp:packagist:typo3/cms:2020-05-12-4
  title: 'TYPO3-CORE-SA-2020-005: Insecure Deserialization in Backend User Settings'
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=10.0.0 <10.4.2"
  - ">=9.0.0 <9.5.17"
  package_manager: packagist
  disclosed_date: 2020-05-12
  created_date: 2020-05-12
  last_modified_date: 2020-05-12
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2020-005/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2020-05-12-4.yaml
- id: friendsofphp:packagist:typo3/cms:2020-05-12-5
  title: 'TYPO3-CORE-SA-2020-006: Same-Site Request Forgery to Backend User Interface'
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=10.0.0 <10.4.2"
  - ">=9.0.0 <9.5.17"
  package_manager: packagist
  disclosed_date: 2020-05-12
  created_date: 2020-05-12
  last_modified_date: 2020-05-12
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2020-006/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2020-05-12-5.yaml
- id: friendsofphp:packagist:typo3/cms:2020-05-12-6
  title: 'TYPO3-CORE-SA-2020-002: Cross-Site Scripting in Form Engine'
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=10.0.0 <10.4.2"
  - ">=9.0.0 <9.5.17"
  package_manager: packagist
  disclosed_date: 2020-05-12
  created_date: 2020-05-12
  last_modified_date: 2020-05-12
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2020-002/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2020-05-12-6.yaml
- id: friendsofphp:packagist:typo3/cms:CVE-2014-3941
  title: Possible Host Spoofing through SERVER_NAME
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0 <6.2.3"
  package_manager: packagist
  cve:
  - CVE-2014-3941
  disclosed_date: 2014-05-22
  created_date: 2014-05-22
  last_modified_date: 2014-05-22
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2014-001/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/CVE-2014-3941.yaml
- id: friendsofphp:packagist:typo3/cms:CVE-2014-3943
  title: Failing to properly encode user input, several backend components are susceptible
    to XSS
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0 <6.2.3"
  package_manager: packagist
  cve:
  - CVE-2014-3943
  disclosed_date: 2014-05-22
  created_date: 2014-05-22
  last_modified_date: 2014-05-22
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2014-001/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/CVE-2014-3943.yaml
- id: friendsofphp:packagist:typo3/cms:CVE-2014-3944
  title: Improper Session Invalidation
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0 <6.2.3"
  package_manager: packagist
  cve:
  - CVE-2014-3944
  disclosed_date: 2014-05-22
  created_date: 2014-05-22
  last_modified_date: 2014-05-22
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2014-001/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/CVE-2014-3944.yaml
- id: friendsofphp:packagist:typo3/cms:CVE-2014-3946
  title: Information disclosure in the Extbase framework
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0 <6.2.3"
  package_manager: packagist
  cve:
  - CVE-2014-3946
  disclosed_date: 2014-05-22
  created_date: 2014-05-22
  last_modified_date: 2014-05-22
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2014-001/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/CVE-2014-3946.yaml
- id: friendsofphp:packagist:typo3/cms:CVE-2015-5956
  title: 'Backend: Non-Persistent Cross-Site Scripting'
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0 <6.2.15"
  - ">=7.0.0 <7.1.0"
  - ">=7.1.0 <7.2.0"
  - ">=7.2.0 <7.3.0"
  - ">=7.3.0 <7.4.0"
  package_manager: packagist
  cve:
  - CVE-2015-5956
  disclosed_date: 2015-09-08
  created_date: 2015-09-08
  last_modified_date: 2015-09-08
  credit:
  - FriendsOfPHP
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2015-009/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/CVE-2015-5956.yaml
- id: ossindex:packagist:typo3/cms:8399183362
  title: The ExtJS JavaScript framework that is shipped with TYPO3 is susceptible
    to XSS
  description: The ExtJS JavaScript framework that is shipped with TYPO3 is susceptible
    to XSS
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0 <6.2.3"
  package_manager: packagist
  disclosed_date: 2016-06-05
  created_date: 2016-06-05
  last_modified_date: 2016-06-05
  credit:
  - OSSIndex
  references:
  - https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2014-05-22-1.yaml
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2014-001/
  source_url: https://ossindex.net/resource/package/8397659248/vulnerabilities
- id: ossindex:packagist:typo3/cms:8399183363
  title: Denial of Service in OpenID System Extension
  description: Denial of Service in OpenID System Extension
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0 <6.2.6"
  package_manager: packagist
  disclosed_date: 2016-06-05
  created_date: 2016-06-05
  last_modified_date: 2016-06-05
  credit:
  - OSSIndex
  references:
  - https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2014-10-22-1.yaml
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2014-002/
  source_url: https://ossindex.net/resource/package/8397659248/vulnerabilities
- id: ossindex:packagist:typo3/cms:8399183364
  title: Arbitrary Shell Execution in Swiftmailer library
  description: Arbitrary Shell Execution in Swiftmailer library
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0 <6.2.6"
  package_manager: packagist
  disclosed_date: 2016-06-05
  created_date: 2016-06-05
  last_modified_date: 2016-06-05
  credit:
  - OSSIndex
  references:
  - https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2014-10-22-2.yaml
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2014-002/
  source_url: https://ossindex.net/resource/package/8397659248/vulnerabilities
- id: ossindex:packagist:typo3/cms:8399183365
  title: Possible link spoofing on the homepage when anchors are used
  description: Possible link spoofing on the homepage when anchors are used
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0 <6.2.9"
  - ">=7.0.0 <7.0.2"
  package_manager: packagist
  disclosed_date: 2016-06-05
  created_date: 2016-06-05
  last_modified_date: 2016-06-05
  credit:
  - OSSIndex
  references:
  - https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2014-12-09-1.yaml
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2014-003/
  source_url: https://ossindex.net/resource/package/8397659248/vulnerabilities
- id: ossindex:packagist:typo3/cms:8399183366
  title: Possible cache poisining on the homepage when anchors are used
  description: Possible cache poisining on the homepage when anchors are used
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0 <6.2.9"
  - ">=7.0.0 <7.0.2"
  package_manager: packagist
  disclosed_date: 2016-06-05
  created_date: 2016-06-05
  last_modified_date: 2016-06-05
  credit:
  - OSSIndex
  references:
  - https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2014-12-09-2.yaml
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2014-003/
  source_url: https://ossindex.net/resource/package/8397659248/vulnerabilities
- id: ossindex:packagist:typo3/cms:8399183367
  title: Access bypass when editing file metadata
  description: Access bypass when editing file metadata
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0 <6.2.14"
  - ">=7.0.0 <7.1.0"
  - ">=7.1.0 <7.2.0"
  - ">=7.2.0 <7.3.0"
  - ">=7.3.0 <7.3.1"
  package_manager: packagist
  disclosed_date: 2016-06-05
  created_date: 2016-06-05
  last_modified_date: 2016-06-05
  credit:
  - OSSIndex
  references:
  - https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2015-07-01-1.yaml
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2015-002/
  source_url: https://ossindex.net/resource/package/8397659248/vulnerabilities
- id: ossindex:packagist:typo3/cms:8399183368
  title: Frontend login Session Fixation
  description: Frontend login Session Fixation
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0 <6.2.14"
  - ">=7.0.0 <7.1.0"
  - ">=7.1.0 <7.2.0"
  - ">=7.2.0 <7.3.0"
  - ">=7.3.0 <7.3.1"
  package_manager: packagist
  disclosed_date: 2016-06-05
  created_date: 2016-06-05
  last_modified_date: 2016-06-05
  credit:
  - OSSIndex
  references:
  - https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2015-07-01-2.yaml
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2015-003/
  source_url: https://ossindex.net/resource/package/8397659248/vulnerabilities
- id: ossindex:packagist:typo3/cms:8399183369
  title: Cross-Site Scripting exploitable by Editors
  description: Cross-Site Scripting exploitable by Editors
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0 <6.2.14"
  - ">=7.0.0 <7.1.0"
  - ">=7.1.0 <7.2.0"
  - ">=7.2.0 <7.3.0"
  - ">=7.3.0 <7.3.1"
  package_manager: packagist
  disclosed_date: 2016-06-05
  created_date: 2016-06-05
  last_modified_date: 2016-06-05
  credit:
  - OSSIndex
  references:
  - https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2015-07-01-3.yaml
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2015-004/
  source_url: https://ossindex.net/resource/package/8397659248/vulnerabilities
- id: ossindex:packagist:typo3/cms:8399183370
  title: Information Disclosure possibility exploitable by Editors
  description: Information Disclosure possibility exploitable by Editors
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0 <6.2.14"
  - ">=7.0.0 <7.1.0"
  - ">=7.1.0 <7.2.0"
  - ">=7.2.0 <7.3.0"
  - ">=7.3.0 <7.3.1"
  package_manager: packagist
  disclosed_date: 2016-06-05
  created_date: 2016-06-05
  last_modified_date: 2016-06-05
  credit:
  - OSSIndex
  references:
  - https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2015-07-01-4.yaml
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2015-005/
  source_url: https://ossindex.net/resource/package/8397659248/vulnerabilities
- id: ossindex:packagist:typo3/cms:8399183371
  title: Brute Force Protection Bypass in backend login
  description: Brute Force Protection Bypass in backend login
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0 <6.2.14"
  - ">=7.0.0 <7.1.0"
  - ">=7.1.0 <7.2.0"
  - ">=7.2.0 <7.3.0"
  - ">=7.3.0 <7.3.1"
  package_manager: packagist
  disclosed_date: 2016-06-05
  created_date: 2016-06-05
  last_modified_date: 2016-06-05
  credit:
  - OSSIndex
  references:
  - https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2015-07-01-5.yaml
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2015-006/
  source_url: https://ossindex.net/resource/package/8397659248/vulnerabilities
- id: ossindex:packagist:typo3/cms:8399183372
  title: Cross-Site Scripting in 3rd party library Flowplayer
  description: Cross-Site Scripting in 3rd party library Flowplayer
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0 <6.2.14"
  - ">=7.0.0 <7.1.0"
  - ">=7.1.0 <7.2.0"
  - ">=7.2.0 <7.3.0"
  - ">=7.3.0 <7.3.1"
  package_manager: packagist
  disclosed_date: 2016-06-05
  created_date: 2016-06-05
  last_modified_date: 2016-06-05
  credit:
  - OSSIndex
  references:
  - https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2015-07-01-6.yaml
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2015-007/
  source_url: https://ossindex.net/resource/package/8397659248/vulnerabilities
- id: ossindex:packagist:typo3/cms:8399183373
  title: '"Frontend: Unauthenticated Path Disclosure"'
  description: '"Frontend: Unauthenticated Path Disclosure"'
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0 <6.2.15"
  - ">=7.0.0 <7.1.0"
  - ">=7.1.0 <7.2.0"
  - ">=7.2.0 <7.3.0"
  - ">=7.3.0 <7.4.0"
  package_manager: packagist
  disclosed_date: 2016-06-05
  created_date: 2016-06-05
  last_modified_date: 2016-06-05
  credit:
  - OSSIndex
  references:
  - https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2015-09-08-1.yaml
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2015-008/
  source_url: https://ossindex.net/resource/package/8397659248/vulnerabilities
- id: ossindex:packagist:typo3/cms:8399183374
  title: '"Multiple Cross-Site Scripting vulnerabilities in TYPO3 backend"'
  description: '"Multiple Cross-Site Scripting vulnerabilities in TYPO3 backend"'
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0 <6.2.16"
  - ">=7.0.0 <7.1.0"
  - ">=7.1.0 <7.2.0"
  - ">=7.2.0 <7.3.0"
  - ">=7.3.0 <7.4.0"
  - ">=7.4.0 <7.5.0"
  - ">=7.5.0 <7.6.0"
  - ">=7.6.0 <7.6.1"
  package_manager: packagist
  disclosed_date: 2016-06-05
  created_date: 2016-06-05
  last_modified_date: 2016-06-05
  credit:
  - OSSIndex
  references:
  - https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2015-12-15-1.yaml
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2015-011/
  source_url: https://ossindex.net/resource/package/8397659248/vulnerabilities
- id: ossindex:packagist:typo3/cms:8399183375
  title: '"Cross-Site Scripting vulnerability in typolinks"'
  description: '"Cross-Site Scripting vulnerability in typolinks"'
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0 <6.2.16"
  - ">=7.0.0 <7.1.0"
  - ">=7.1.0 <7.2.0"
  - ">=7.2.0 <7.3.0"
  - ">=7.3.0 <7.4.0"
  - ">=7.4.0 <7.5.0"
  - ">=7.5.0 <7.6.0"
  - ">=7.6.0 <7.6.1"
  package_manager: packagist
  disclosed_date: 2016-06-05
  created_date: 2016-06-05
  last_modified_date: 2016-06-05
  credit:
  - OSSIndex
  references:
  - https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2015-12-15-2.yaml
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2015-012/
  source_url: https://ossindex.net/resource/package/8397659248/vulnerabilities
- id: ossindex:packagist:typo3/cms:8399183376
  title: '"Multiple Cross-Site Scripting vulnerabilities in frontend"'
  description: '"Multiple Cross-Site Scripting vulnerabilities in frontend"'
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0 <6.2.16"
  - ">=7.0.0 <7.1.0"
  - ">=7.1.0 <7.2.0"
  - ">=7.2.0 <7.3.0"
  - ">=7.3.0 <7.4.0"
  - ">=7.4.0 <7.5.0"
  - ">=7.5.0 <7.6.0"
  - ">=7.6.0 <7.6.1"
  package_manager: packagist
  disclosed_date: 2016-06-05
  created_date: 2016-06-05
  last_modified_date: 2016-06-05
  credit:
  - OSSIndex
  references:
  - https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2015-12-15-3.yaml
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2015-013/
  source_url: https://ossindex.net/resource/package/8397659248/vulnerabilities
- id: ossindex:packagist:typo3/cms:8399183377
  title: '"TYPO3 is susceptible to Cross-Site Flashing"'
  description: '"TYPO3 is susceptible to Cross-Site Flashing"'
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0 <6.2.16"
  package_manager: packagist
  disclosed_date: 2016-06-05
  created_date: 2016-06-05
  last_modified_date: 2016-06-05
  credit:
  - OSSIndex
  references:
  - https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2015-12-15-4.yaml
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2015-014/
  source_url: https://ossindex.net/resource/package/8397659248/vulnerabilities
- id: ossindex:packagist:typo3/cms:8399183378
  title: '"Cross-Site Scripting in TYPO3 component Indexed Search"'
  description: '"Cross-Site Scripting in TYPO3 component Indexed Search"'
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0 <6.2.16"
  package_manager: packagist
  disclosed_date: 2016-06-05
  created_date: 2016-06-05
  last_modified_date: 2016-06-05
  credit:
  - OSSIndex
  references:
  - https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2015-12-15-5.yaml
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2015-015/
  source_url: https://ossindex.net/resource/package/8397659248/vulnerabilities
- id: ossindex:packagist:typo3/cms:8399183379
  title: '"Missing Access Check in TYPO3 CMS"'
  description: '"Missing Access Check in TYPO3 CMS"'
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0 <6.2.25"
  - ">=7.6.0 <7.6.8"
  - ">=8.0.0 <8.1.1"
  - ">=8.1.0 <8.1.1"
  package_manager: packagist
  disclosed_date: 2016-06-05
  created_date: 2016-06-05
  last_modified_date: 2016-06-05
  credit:
  - OSSIndex
  references:
  - https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2016-05-24-1.yaml
  - https://typo3.org/teamssecuritysecurity-bulletins/security-bulletins-single-view/article/missing-access-check-in-typo3-cms/
  source_url: https://ossindex.net/resource/package/8397659248/vulnerabilities
- id: ossindex:packagist:typo3/cms:8399183380
  title: Possible Host Spoofing through SERVER_NAME
  description: Possible Host Spoofing through SERVER_NAME
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0 <6.2.3"
  package_manager: packagist
  disclosed_date: 2016-06-05
  created_date: 2016-06-05
  last_modified_date: 2016-06-05
  credit:
  - OSSIndex
  references:
  - https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/CVE-2014-3941.yaml
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2014-001/
  source_url: https://ossindex.net/resource/package/8397659248/vulnerabilities
- id: ossindex:packagist:typo3/cms:8399183381
  title: Failing to properly encode user input, several backend components are susceptible
    to XSS
  description: Failing to properly encode user input, several backend components are
    susceptible to XSS
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0 <6.2.3"
  package_manager: packagist
  disclosed_date: 2016-06-05
  created_date: 2016-06-05
  last_modified_date: 2016-06-05
  credit:
  - OSSIndex
  references:
  - https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/CVE-2014-3943.yaml
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2014-001/
  source_url: https://ossindex.net/resource/package/8397659248/vulnerabilities
- id: ossindex:packagist:typo3/cms:8399183382
  title: Improper Session Invalidation
  description: Improper Session Invalidation
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0 <6.2.3"
  package_manager: packagist
  disclosed_date: 2016-06-05
  created_date: 2016-06-05
  last_modified_date: 2016-06-05
  credit:
  - OSSIndex
  references:
  - https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/CVE-2014-3944.yaml
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2014-001/
  source_url: https://ossindex.net/resource/package/8397659248/vulnerabilities
- id: ossindex:packagist:typo3/cms:8399183383
  title: Information disclosure in the Extbase framework
  description: Information disclosure in the Extbase framework
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0 <6.2.3"
  package_manager: packagist
  disclosed_date: 2016-06-05
  created_date: 2016-06-05
  last_modified_date: 2016-06-05
  credit:
  - OSSIndex
  references:
  - https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/CVE-2014-3946.yaml
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2014-001/
  source_url: https://ossindex.net/resource/package/8397659248/vulnerabilities
- id: ossindex:packagist:typo3/cms:8399183384
  title: '"Backend: Non-Persistent Cross-Site Scripting"'
  description: '"Backend: Non-Persistent Cross-Site Scripting"'
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0 <6.2.15"
  - ">=7.0.0 <7.1.0"
  - ">=7.1.0 <7.2.0"
  - ">=7.2.0 <7.3.0"
  - ">=7.3.0 <7.4.0"
  package_manager: packagist
  disclosed_date: 2016-06-05
  created_date: 2016-06-05
  last_modified_date: 2016-06-05
  credit:
  - OSSIndex
  references:
  - https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/CVE-2015-5956.yaml
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2015-009/
  source_url: https://ossindex.net/resource/package/8397659248/vulnerabilities
- id: ossindex:packagist:typo3/cms:8400192139
  title: '"SQL Injection in dbal"'
  description: '"SQL Injection in dbal"'
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0 <6.2.18"
  package_manager: packagist
  disclosed_date: 2016-10-22
  created_date: 2016-10-22
  last_modified_date: 2016-10-22
  credit:
  - OSSIndex
  references:
  - https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2016-02-16-1.yaml
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2015-016/
  source_url: https://ossindex.net/resource/package/8397659248/vulnerabilities
- id: ossindex:packagist:typo3/cms:8400192140
  title: Cross-Site Scripting in link validator component
  description: '"Cross-Site Scripting in link validator component"'
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=7.6.0 <7.6.3"
  package_manager: packagist
  disclosed_date: 2016-10-22
  created_date: 2016-10-22
  last_modified_date: 2016-10-22
  credit:
  - OSSIndex
  references:
  - https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2016-02-16-2.yaml
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2016-002/
  source_url: https://ossindex.net/resource/package/8397659248/vulnerabilities
- id: ossindex:packagist:typo3/cms:8400192141
  title: Cross-Site Scripting in legacy form component
  description: '"Cross-Site Scripting in legacy form component"'
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0 <6.2.18"
  package_manager: packagist
  disclosed_date: 2016-10-22
  created_date: 2016-10-22
  last_modified_date: 2016-10-22
  credit:
  - OSSIndex
  references:
  - https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2016-02-16-3.yaml
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2016-003/
  source_url: https://ossindex.net/resource/package/8397659248/vulnerabilities
- id: ossindex:packagist:typo3/cms:8400192142
  title: Cross-Site Scripting in form component
  description: '"Cross-Site Scripting in form component"'
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0 <6.2.18"
  package_manager: packagist
  disclosed_date: 2016-10-22
  created_date: 2016-10-22
  last_modified_date: 2016-10-22
  credit:
  - OSSIndex
  references:
  - https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2016-02-16-4.yaml
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2016-004/
  source_url: https://ossindex.net/resource/package/8397659248/vulnerabilities
- id: ossindex:packagist:typo3/cms:8400192143
  title: '"XML External Entity (XXE) Processing in TYPO3 Core"'
  description: '"XML External Entity (XXE) Processing in TYPO3 Core"'
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=7.6.0 <7.6.4"
  package_manager: packagist
  disclosed_date: 2016-10-22
  created_date: 2016-10-22
  last_modified_date: 2016-10-22
  credit:
  - OSSIndex
  references:
  - https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2016-02-23-1.yaml
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2016-005/
  source_url: https://ossindex.net/resource/package/8397659248/vulnerabilities
- id: ossindex:packagist:typo3/cms:8400192144
  title: '"Cross-Site Scripting in TYPO3 component Backend"'
  description: '"Cross-Site Scripting in TYPO3 component Backend"'
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0 <6.2.19"
  package_manager: packagist
  disclosed_date: 2016-10-22
  created_date: 2016-10-22
  last_modified_date: 2016-10-22
  credit:
  - OSSIndex
  references:
  - https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2016-02-23-2.yaml
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2016-006/
  source_url: https://ossindex.net/resource/package/8397659248/vulnerabilities
- id: ossindex:packagist:typo3/cms:8400192145
  title: '"Cross-Site Scripting in TYPO3 component CSS styled content"'
  description: '"Cross-Site Scripting in TYPO3 component CSS styled content"'
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=7.6.0 <7.6.4"
  package_manager: packagist
  disclosed_date: 2016-10-22
  created_date: 2016-10-22
  last_modified_date: 2016-10-22
  credit:
  - OSSIndex
  references:
  - https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2016-02-23-3.yaml
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2016-007/
  source_url: https://ossindex.net/resource/package/8397659248/vulnerabilities
- id: ossindex:packagist:typo3/cms:8400192146
  title: '"Denial of Service attack possibility in TYPO3 component Indexed Search"'
  description: '"Denial of Service attack possibility in TYPO3 component Indexed Search"'
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=7.6.0 <7.6.4"
  package_manager: packagist
  disclosed_date: 2016-10-22
  created_date: 2016-10-22
  last_modified_date: 2016-10-22
  credit:
  - OSSIndex
  references:
  - https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2016-02-23-4.yaml
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2016-008/
  source_url: https://ossindex.net/resource/package/8397659248/vulnerabilities
- id: ossindex:packagist:typo3/cms:8400192147
  title: '"Cross-Site Scripting in TYPO3 Backend"'
  description: '"Cross-Site Scripting in TYPO3 Backend"'
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=8.0.0 <8.0.1"
  package_manager: packagist
  disclosed_date: 2016-10-22
  created_date: 2016-10-22
  last_modified_date: 2016-10-22
  credit:
  - OSSIndex
  references:
  - https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2016-04-12-1.yaml
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2016-009/
  source_url: https://ossindex.net/resource/package/8397659248/vulnerabilities
- id: ossindex:packagist:typo3/cms:8400192148
  title: '"Arbitrary File Disclosure in Form Component"'
  description: '"Arbitrary File Disclosure in Form Component"'
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0 <6.2.20"
  package_manager: packagist
  disclosed_date: 2016-10-22
  created_date: 2016-10-22
  last_modified_date: 2016-10-22
  credit:
  - OSSIndex
  references:
  - https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/2016-04-12-2.yaml
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2016-010/
  source_url: https://ossindex.net/resource/package/8397659248/vulnerabilities
- id: snykio:packagist:typo3/cms:174603
  title: Cross-site Scripting (XSS)
  description: |+
    [typo3/cms][1] is a free open source Content Management Framework.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) when making use of the ternary conditional operator in templates
    like the following.



    [1]: https://packagist.org/packages/typo3/cms
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: typo3/cms
  vulnerable_versions:
  - ">=8.0.0  <8.7.25"
  - ">=9.0.0  <9.5.6"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-79
  disclosed_date: 2019-05-07
  created_date: 2019-05-08
  last_modified_date: 2019-05-08
  credit:
  - Bill Dagou
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2019-013/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMS-174603
- id: snykio:packagist:typo3/cms:174606
  title: Information Exposure
  description: |
    [typo3/cms][1] is a free open source Content Management Framework.

    Affected versions of this package are vulnerable to Information Exposure
    via user authentication. Login failures have been logged on the default
    stream with log level `warning` including plain-text user credentials.



    [1]: https://packagist.org/packages/typo3/cms
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=9.0.0  <9.5.6"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-200
  disclosed_date: 2019-05-07
  created_date: 2019-05-08
  last_modified_date: 2019-05-08
  credit:
  - Helmut Hummel
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2019-010/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMS-174606
- id: snykio:packagist:typo3/cms:174608
  title: Information Exposure
  description: |
    [typo3/cms][1] is a free open source Content Management Framework.

    Affected versions of this package are vulnerable to Information Exposure
    via the page tree. Backend users not having read access to specific
    pages still could see them in the page tree which actually should be
    disallowed.



    [1]: https://packagist.org/packages/typo3/cms
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=9.0.0  <9.5.6"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-200
  disclosed_date: 2019-05-07
  created_date: 2019-05-08
  last_modified_date: 2019-05-08
  credit:
  - Unknown
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2019-009/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMS-174608
- id: snykio:packagist:typo3/cms:174610
  title: Improper Access Control
  description: |
    [typo3/cms][1] is a free open source Content Management Framework.

    Affected versions of this package are vulnerable to Improper Access
    Control. When users change their password existing sessions for that
    particular user account are not revoked. A valid backend or frontend
    user account is required in order to make use of this vulnerability.



    [1]: https://packagist.org/packages/typo3/cms
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=8.0.0  <8.7.25"
  - ">=9.0.0  <9.5.6"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-284
  disclosed_date: 2019-05-07
  created_date: 2019-05-08
  last_modified_date: 2019-05-08
  credit:
  - Unknown
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2019-011/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMS-174610
- id: snykio:packagist:typo3/cms:174612
  title: Arbitrary Code Execution
  description: |
    [typo3/cms][1] is a free open source Content Management Framework.

    Affected versions of this package are vulnerable to Arbitrary Code
    Execution. via the image processing. Whenever `ImageMagick` is invoked
    in order to convert data the mime-type of the source is identified for
    invoking according coders when reading data. In case an attacker manages
    to upload an image file containing PostScript code it will be executed
    on the server system when generating according visual previews or
    thumbnails.



    [1]: https://packagist.org/packages/typo3/cms
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=8.0.0  <8.7.25"
  - ">=9.0.0  <9.5.6"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2019-11832
  cwe:
  - CWE-94
  disclosed_date: 2019-05-07
  created_date: 2019-05-08
  last_modified_date: 2019-05-08
  credit:
  - Lauritz Holtmann
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2019-012/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMS-174612
- id: snykio:packagist:typo3/cms:450919
  title: Session Fixation
  description: |
    [typo3/cms][1] is a free open source Content Management Framework.

    Affected versions of this package are vulnerable to Session Fixation.
    Session data of properly authenticated and logged in frontend users is
    kept and transformed into an anonymous user session during the logout
    process. This way the next user using the same client application gains
    access to previous session data.



    [1]: https://packagist.org/packages/typo3/cms
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=8.0.0  <8.7.27"
  - ">=9.0.0  <9.5.8"
  severity: low
  package_manager: packagist
  cwe:
  - CWE-384
  disclosed_date: 2019-06-25
  created_date: 2019-06-25
  last_modified_date: 2019-06-25
  credit:
  - Christian Ebert
  references:
  - https://github.com/TYPO3-CMS/core/commit/8ad385fe12fbbbc7e1462b2c789555a55f2c8889
  - https://github.com/TYPO3/TYPO3.CMS/commit/3a48bb6c8a05aa861592c3fb81aa35dfa0939689
  - https://review.typo3.org/c/Packages/TYPO3.CMS/+/61144
  - https://typo3.org/security/advisory/typo3-core-sa-2019-018/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMS-450919
- id: snykio:packagist:typo3/cms:450921
  title: Cross-site Scripting (XSS)
  description: |+
    [typo3/cms][1] is a free open source Content Management Framework.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). The `t3://` URL handling is vulnerable to Cross-Site Scripting
    when making use of `javascript:` or `data:` URI schemes in link fields.



    [1]: https://packagist.org/packages/typo3/cms
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: typo3/cms
  vulnerable_versions:
  - ">=8.3.0  <8.7.27"
  - ">=9.0.0  <9.5.8"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2019-12748
  cwe:
  - CWE-79
  disclosed_date: 2019-06-25
  created_date: 2019-06-25
  last_modified_date: 2019-06-25
  credit:
  - Robin Peraglie
  references:
  - https://github.com/TYPO3-CMS/core/commit/ea1df3fd5ba6422ce2142183c8161e128e6cc48b
  - https://github.com/TYPO3/TYPO3.CMS/commit/4c003f80b8b25def173268b8b069446c4fcc313a
  - https://typo3.org/security/advisory/typo3-core-sa-2019-015/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMS-450921
- id: snykio:packagist:typo3/cms:450926
  title: Deserialization of Untrusted Data
  description: |
    [typo3/cms][1] is a free open source Content Management Framework.

    Affected versions of this package are vulnerable to Deserialization of
    Untrusted Data. `FormEngine` and `DataHandler` are vulnerable to
    Deserialization while authenticated with a valid backend user account.



    [1]: https://packagist.org/packages/typo3/cms
    \nSerialization is a process of converting an object into a sequence of
    bytes which can be persisted to a disk or database or can be sent
    through streams. The reverse process of creating object from sequence of
    bytes is called deserialization. Serialization is commonly used for
    communication (sharing objects between multiple hosts) and persistence
    (store the object state in a file or a database). It is an integral part
    of popular protocols like *Remote Method Invocation (RMI)*, *Java
    Management Extension (JMX)*, *Java Messaging System (JMS)*, *Action
    Message Format (AMF)*, *Java Server Faces (JSF) ViewState*, etc.

    *Deserialization of untrusted data* ([CWE-502][1]), is when the
    application deserializes untrusted data without sufficiently verifying
    that the resulting data will be valid, letting the attacker to control
    the state or the flow of the execution.

    Java deserialization issues have been known for years. However, interest
    in the issue intensified greatly in 2015, when classes that could be
    abused to achieve remote code execution were found in a [popular library
    (Apache Commons Collection)][2]. These classes were used in zero-days
    affecting IBM WebSphere, Oracle WebLogic and many other products.

    An attacker just needs to identify a piece of software that has both a
    vulnerable class on its path, and performs deserialization on untrusted
    data. Then all they need to do is send the payload into the
    deserializer, getting the command executed.

    > Developers put too much trust in Java Object Serialization. Some even
    > de-serialize objects pre-authentication. When deserializing an Object
    > in Java you typically cast it to an expected type, and therefore
    > Java\'s strict type system will ensure you only get valid object
    > trees. Unfortunately, by the time the type checking happens, platform
    > code has already created and executed significant logic. So, before
    > the final type is checked a lot of code is executed from the
    > readObject() methods of various objects, all of which is out of the
    > developer\'s control. By combining the readObject() methods of various
    > classes which are available on the classpath of the vulnerable
    > application an attacker can execute functions (including calling
    > Runtime.exec() to execute local OS commands).

    * Apache Blog

    The vulnerability, also know as *Mad Gadget*

    > Mad Gadget is one of the most pernicious vulnerabilities we’ve seen.
    > By merely existing on the Java classpath, seven “gadget” classes in
    > Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0)
    > make object deserialization for the entire JVM process Turing complete
    > with an exec function. Since many business applications use object
    > deserialization to send messages across the network, it would be like
    > hiring a bank teller who was trained to hand over all the money in the
    > vault if asked to do so politely, and then entrusting that teller with
    > the key. The only thing that would keep a bank safe in such a
    > circumstance is that most people wouldn’t consider asking such a
    > question.

    * Google



    [1]: https://cwe.mitre.org/data/definitions/502.html
    [2]: https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=8.0.0  <8.7.27"
  - ">=9.0.0  <9.5.8"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2019-12747
  cwe:
  - CWE-502
  disclosed_date: 2019-06-25
  created_date: 2019-06-25
  last_modified_date: 2019-06-25
  credit:
  - Robin Peraglie
  references:
  - https://github.com/TYPO3-CMS/core/commit/ea4539269f5e6d08abe78eeda40f29fd1f6ef3da
  - https://github.com/TYPO3/TYPO3.CMS/commit/647aa7afa582983cddc547fa106d31e2b1ef34fe
  - https://typo3.org/security/advisory/typo3-core-sa-2019-020/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMS-450926
- id: snykio:packagist:typo3/cms:450928
  title: Improper Access Control
  description: |
    [typo3/cms][1] is a free open source Content Management Framework.

    Affected versions of this package are vulnerable to Improper Access
    Control. The `Import/Export` module is susceptible to regular backend
    users that have extra access to `import` functionality which usually
    only is available to admin users or users having User `TSconfig`setting
    `options.impexp.enableImportForNonAdminUser` explicitly `enabled`.



    [1]: https://packagist.org/packages/typo3/cms
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=9.0.0  <9.5.8"
  severity: high
  package_manager: packagist
  cwe:
  - CWE-284
  disclosed_date: 2019-06-25
  created_date: 2019-06-25
  last_modified_date: 2019-06-25
  credit:
  - Oliver Hader
  references:
  - https://github.com/TYPO3/TYPO3.CMS/commit/4bdd03fb053b7f714b962f849c4204c79936df85
  - https://typo3.org/security/advisory/typo3-core-sa-2019-017/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMS-450928
- id: snykio:packagist:typo3/cms:450931
  title: Arbitrary Code Execution
  description: |
    [typo3/cms][1] is a free open source Content Management Framework.

    Affected versions of this package are vulnerable to Arbitrary Code
    Execution. Exploited by the backend API configuration, using `TSconfig`
    fields of the page properties in backend forms, can be used to inject
    malicious sequences. Field `tsconfig_includes` is vulnerable to
    directory traversal leading to it allowing direct access to `TSconfig`
    settings as a backend user which has permissions to modify values for
    fields pages.



    [1]: https://packagist.org/packages/typo3/cms
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=8.0.0  <8.7.27"
  - ">=9.0.0  <9.5.8"
  severity: high
  package_manager: packagist
  cwe:
  - CWE-94
  disclosed_date: 2019-06-25
  created_date: 2019-06-25
  last_modified_date: 2019-06-25
  credit:
  - Benjamin Kott
  - Oliver Hader
  references:
  - https://github.com/TYPO3-CMS/core/commit/6ddc919515a62f966e88820fccdde569d1a157cc
  - https://github.com/TYPO3/TYPO3.CMS/commit/75cc3d6bfedf70c2120ef8c6f6dd104e905c1569
  - https://typo3.org/security/advisory/typo3-core-sa-2019-019/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMS-450931
- id: snykio:packagist:typo3/cms:450932
  title: Information Exposure
  description: |
    [typo3/cms][1] is a free open source Content Management Framework.

    Affected versions of this package are vulnerable to Information
    Exposure. The list of references from or to the record is not properly
    checked for the backend user’s permissions resulting in Information
    Disclosure. A valid backend user account is needed in order to exploit
    this vulnerability.



    [1]: https://packagist.org/packages/typo3/cms
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=8.0.0  <8.7.27"
  - ">=9.0.0  <9.5.8"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-285
  disclosed_date: 2019-06-25
  created_date: 2019-06-25
  last_modified_date: 2019-06-25
  credit:
  - Florian Weiss
  references:
  - https://github.com/TYPO3/TYPO3.CMS/commit/d593a69cce127af59d62d2c22184d491cd9f5408
  - https://typo3.org/security/advisory/typo3-core-sa-2019-014/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMS-450932
- id: snykio:packagist:typo3/cms:538226
  title: SQL Injection
  description: |
    [typo3/cms][1] is a free open source Content Management Framework.

    Affected versions of this package are vulnerable to SQL Injection via
    the class `QueryGenerator`. Exploitation requires having the system
    extension `ext:lowlevel` installed, and a valid backend user who has
    administrator privileges.



    [1]: https://packagist.org/packages/typo3/cms
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=10.0.0  <10.2.1"
  - ">=8.0.0  <8.7.30"
  - ">=9.0.0  <9.5.12"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2019-19850
  cwe:
  - CWE-89
  disclosed_date: 2019-12-17
  created_date: 2019-12-18
  last_modified_date: 2019-12-18
  credit:
  - Dhiraj Shrikant Data
  references:
  - https://github.com/TYPO3/TYPO3.CMS/commit/948df21e45cf8beffa3d472e5c06f2f84833e432
  - https://typo3.org/security/advisory/typo3-core-sa-2019-025/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMS-538226
- id: snykio:packagist:typo3/cms:538229
  title: Deserialization of Untrusted Data
  description: |
    [typo3/cms][1] is a free open source Content Management Framework.

    Affected versions of this package are vulnerable to Deserialization of
    Untrusted Data. User submitted payload has to be signed with a
    corresponding HMAC-SHA1 using the sensitive TYPO3 encryptionKey as
    secret - invalid or unsigned payload is not deserialized. This could
    lead to sensitive information being leaked.



    [1]: https://packagist.org/packages/typo3/cms
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=8.0.0  <8.7.30"
  - ">=9.0.0  <9.5.12"
  severity: high
  package_manager: packagist
  cwe:
  - CWE-502
  disclosed_date: 2019-12-17
  created_date: 2019-12-18
  last_modified_date: 2019-12-18
  credit:
  - Oliver Hader
  references:
  - https://github.com/TYPO3-CMS/core/commit/6af9558b9cd490d9130b85f99e3fdcfad2885ec1
  - https://typo3.org/security/advisory/typo3-psa-2019-011/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMS-538229
- id: snykio:packagist:typo3/cms:538230
  title: Cross-site Scripting (XSS)
  description: |+
    [typo3/cms][1] is a free open source Content Management Framework.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). Output of field validation errors in the Form Framework can
    result in user input being reflected without proper output encoding.



    [1]: https://packagist.org/packages/typo3/cms
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: typo3/cms
  vulnerable_versions:
  - ">=10.0.0  <10.2.1"
  - ">=8.0.0  <8.7.30"
  - ">=9.0.0  <9.5.12"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-79
  disclosed_date: 2019-12-17
  created_date: 2019-12-18
  last_modified_date: 2019-12-18
  credit:
  - Aslam Idrisov
  references:
  - https://github.com/TYPO3/TYPO3.CMS/commit/37ed78a1988af220eeb1933bf5a3137e4e7bbf4e
  - https://typo3.org/security/advisory/typo3-core-sa-2019-021/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMS-538230
- id: snykio:packagist:typo3/cms:538236
  title: Cross-site Scripting (XSS)
  description: |+
    [typo3/cms][1] is a free open source Content Management Framework.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). It has been discovered that the output table listing in the
    \"Files\" backend module is vulnerable to XSS when a file extension
    contains malicious sequences. Access to the file system of the server -
    either directly or through synchronization - is required to exploit the
    vulnerability.



    [1]: https://packagist.org/packages/typo3/cms
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: typo3/cms
  vulnerable_versions:
  - ">=10.0.0  <10.2.1"
  - ">=8.0.0  <8.7.30"
  - ">=9.0.0  <9.5.12"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-79
  disclosed_date: 2019-12-17
  created_date: 2019-12-17
  last_modified_date: 2019-12-17
  credit:
  - Unknown
  references:
  - https://github.com/TYPO3/TYPO3.CMS/commit/21e9e6430586b66f425dd6f93a83f597ecd20b3c
  - https://typo3.org/security/advisory/typo3-core-sa-2019-023/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMS-538236
- id: snykio:packagist:typo3/cms:538238
  title: Arbitrary File Write via Archive Extraction (Zip Slip)
  description: "[typo3/cms][1] is a free open source Content Management Framework.\n\nAffected
    versions of this package are vulnerable to Arbitrary File Write\nvia Archive Extraction
    (Zip Slip). Extraction of manually uploaded ZIP\narchives in Extension Manager
    is vulnerable to directory traversal.\nAdmin privileges are required in order
    to exploit this vulnerability.\nSince TYPO3 v9 LTS, System Maintainer privileges
    are required as well.\n\n\n\n[1]: https://packagist.org/packages/typo3/cms\n\\nIt
    is exploited using a specially crafted zip archive, that holds path\ntraversal
    filenames. When exploited, a filename in a malicious archive\nis concatenated
    to the target extraction directory, which results in the\nfinal path ending up
    outside of the target folder. For instance, a zip\nmay hold a file with a \\\"../../file.exe\\\"
    location and thus break out of\nthe target folder. If an executable or a configuration
    file is\noverwritten with a file containing malicious code, the problem can turn\ninto
    an arbitrary code execution issue quite easily.\n\nThe following is an example
    of a zip archive with one benign file and\none malicious file. Extracting the
    malicous file will result in\ntraversing out of the target folder, ending up in
    `/root/.ssh/`\noverwriting the `authorized_keys` file:\n\n    \n    +2018-04-15
    22:04:29 ..... 19 19 good.txt\n    \n    +2018-04-15 22:04:42 ..... 20 20 ../../../../../../root/.ssh/authorized_keys\n\n"
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=10.0.0  <10.2.1"
  - ">=8.0.0  <8.7.30"
  - ">=9.0.0  <9.5.12"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-22
  disclosed_date: 2019-12-17
  created_date: 2019-12-18
  last_modified_date: 2019-12-18
  credit:
  - Unknown
  references:
  - https://github.com/TYPO3/TYPO3.CMS/commit/0efda30ca4181898e17614a195b234954d353f2b
  - https://typo3.org/security/advisory/typo3-core-sa-2019-024/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMS-538238
- id: snykio:packagist:typo3/cms:538240
  title: Cross-site Scripting (XSS)
  description: |+
    [typo3/cms][1] is a free open source Content Management Framework.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). `3://` URL handling and typolink functionality can be abused to
    conduct XSS attacks.



    [1]: https://packagist.org/packages/typo3/cms
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: typo3/cms
  vulnerable_versions:
  - ">=10.0.0  <10.2.1"
  - ">=8.0.0  <8.7.30"
  - ">=9.0.0  <9.5.12"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-79
  disclosed_date: 2019-12-17
  created_date: 2019-12-17
  last_modified_date: 2019-12-17
  credit:
  - Oliver Hader
  references:
  - https://github.com/TYPO3/TYPO3.CMS/commit/21e9e6430586b66f425dd6f93a83f597ecd20b3c
  - https://typo3.org/security/advisory/typo3-core-sa-2019-022/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMS-538240
- id: snykio:packagist:typo3/cms:538242
  title: Deserialization of Untrusted Data
  description: |
    [typo3/cms][1] is a free open source Content Management Framework.

    Affected versions of this package are vulnerable to Deserialization of
    Untrusted Data. Classes `QueryGenerator` and `QueryView` are vulnerable
    to insecure deserialization and remote code execution code be achieved
    under certain circumstances by abusing these classes. Multiple
    requirements need to be satisfied in order to exploit this
    vulnerability.



    [1]: https://packagist.org/packages/typo3/cms
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=10.0.0  <10.2.1"
  - ">=8.0.0  <8.7.30"
  - ">=9.0.0  <9.5.12"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2019-19849
  cwe:
  - CWE-502
  disclosed_date: 2019-12-17
  created_date: 2019-12-17
  last_modified_date: 2019-12-17
  credit:
  - Daniel Windloff
  references:
  - https://github.com/TYPO3/TYPO3.CMS/commit/fdf9cdade0da9acc970f1dd763ae23708c318293
  - https://typo3.org/security/advisory/typo3-core-sa-2019-026/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMS-538242
- id: snykio:packagist:typo3/cms:543483
  title: Cross-site Scripting (XSS)
  description: |+
    [typo3/cms][1] is a free open source Content Management Framework.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). `svg.swf` flash file could allow an unauthenticated, remote
    attacker to conduct an XSS attack on a targeted system. This may be at a
    `contrib/websvg/svg.swf` pathname.



    [1]: https://packagist.org/packages/typo3/cms
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0  <6.2.38"
  - ">=7.0.0  <7.1.0"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2020-8091
  cwe:
  - CWE-79
  disclosed_date: 2020-01-27
  created_date: 2020-01-27
  last_modified_date: 2020-01-27
  credit:
  - Purplemet Security
  references:
  - https://typo3.org/security/advisory/typo3-psa-2019-003/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMS-543483
- id: snykio:packagist:typo3/cms:568944
  title: Information Exposure
  description: |
    [typo3/cms][1] is a free open source Content Management Framework.

    Affected versions of this package are vulnerable to Information
    Exposure. It has been discovered that time-based attacks can be used
    with the password reset functionality for backend users. This allows an
    attacker to verify whether a backend user account with a given email
    address exists or not.



    [1]: https://packagist.org/packages/typo3/cms
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=10.0.0  <10.4.2"
  severity: low
  package_manager: packagist
  cve:
  - CVE-2020-11063
  cwe:
  - CWE-200
  disclosed_date: 2020-05-12
  created_date: 2020-05-12
  last_modified_date: 2020-05-12
  credit:
  - Michael Kasten
  references:
  - https://github.com/FriendsOfPHP/security-advisories/commit/dbd6d721f688cfb2e394bfb85bb63e437b69b9b0
  - https://typo3.org/security/advisory/typo3-core-sa-2020-001/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMS-568944
- id: snykio:packagist:typo3/cms:568945
  title: Cross-site Scripting (XSS)
  description: |+
    [typo3/cms][1] is a free open source Content Management Framework.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). It has been discovered that HTML placeholder attributes
    containing data of other database records are vulnerable to cross-site
    scripting. A valid backend user account is needed to exploit this
    vulnerability.



    [1]: https://packagist.org/packages/typo3/cms
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: typo3/cms
  vulnerable_versions:
  - ">=10.0.0  <10.4.2"
  - ">=9.0.0  <9.5.17"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2020-11064
  cwe:
  - CWE-79
  disclosed_date: 2020-05-12
  created_date: 2020-05-12
  last_modified_date: 2020-05-12
  credit:
  - Florian Weiss
  references:
  - https://github.com/FriendsOfPHP/security-advisories/commit/dbd6d721f688cfb2e394bfb85bb63e437b69b9b0
  - https://typo3.org/security/advisory/typo3-core-sa-2020-002/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMS-568945
- id: snykio:packagist:typo3/cms:568946
  title: Server-side Request Forgery (SSRF)
  description: |
    [typo3/cms][1] is a free open source Content Management Framework.

    Affected versions of this package are vulnerable to Server-side Request
    Forgery (SSRF). It has been discovered that the backend user interface
    and install tool are vulnerable to same-site request forgery. A backend
    user can be tricked into interacting with a malicious resource an
    attacker previously managed to upload to the web server - scripts are
    then executed with the privileges of the victims’ user session.

    In a worst case scenario new admin users can be created which can
    directly be used by an attacker. The vulnerability is basically a
    cross-site request forgery (CSRF) triggered by a cross-site scripting
    vulnerability (XSS) - but happens on the same target host - thus, it’s
    actually a same-site request forgery (SSRF).

    Malicious payload such as HTML containing JavaScript might be provided
    by either an authenticated backend user or by a non-authenticated user
    using a 3rd party extension - e.g. file upload in a contact form with
    knowing the target location.

    The attacked victim requires an active and valid backend or install tool
    user session at the time of the attack to be successful.



    [1]: https://packagist.org/packages/typo3/cms
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=10.0.0  <10.4.2"
  - ">=9.0.0  <9.5.17"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2020-11069
  cwe:
  - CWE-918
  disclosed_date: 2020-05-12
  created_date: 2020-05-12
  last_modified_date: 2020-05-12
  credit:
  - Matteo Bonaker
  references:
  - https://github.com/FriendsOfPHP/security-advisories/commit/dbd6d721f688cfb2e394bfb85bb63e437b69b9b0
  - https://typo3.org/security/advisory/typo3-core-sa-2020-006/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMS-568946
- id: snykio:packagist:typo3/cms:568947
  title: Deserialization of Untrusted Data
  description: |
    [typo3/cms][1] is a free open source Content Management Framework.

    Affected versions of this package are vulnerable to Deserialization of
    Untrusted Data. It has been discovered that backend user settings (in
    `$BE_USER->uc`) are vulnerable to insecure deserialization. In
    combination with vulnerabilities of 3rd party components this can lead
    to remote code execution. A valid backend user account is needed to
    exploit this vulnerability.



    [1]: https://packagist.org/packages/typo3/cms
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=10.0.0  <10.4.2"
  - ">=9.0.0  <9.5.17"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2020-11067
  cwe:
  - CWE-502
  disclosed_date: 2020-05-12
  created_date: 2020-05-12
  last_modified_date: 2020-05-12
  credit:
  - Oliver Hader
  references:
  - https://github.com/FriendsOfPHP/security-advisories/commit/dbd6d721f688cfb2e394bfb85bb63e437b69b9b0
  - https://typo3.org/security/advisory/typo3-core-sa-2020-005/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMS-568947
- id: snykio:packagist:typo3/cms:568948
  title: Cross-site Scripting (XSS)
  description: |+
    [typo3/cms][1] is a free open source Content Management Framework.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). It has been discovered that link tags generated by `typolink`
    functionality are vulnerable to cross-site scripting - properties being
    assigned as HTML attributes have not been parsed correctly.



    [1]: https://packagist.org/packages/typo3/cms
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: typo3/cms
  vulnerable_versions:
  - ">=10.0.0  <10.4.2"
  - ">=9.0.0  <9.5.17"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2020-11065
  cwe:
  - CWE-79
  disclosed_date: 2020-05-12
  created_date: 2020-05-12
  last_modified_date: 2020-05-12
  credit:
  - Josef Glatz
  references:
  - https://github.com/FriendsOfPHP/security-advisories/commit/dbd6d721f688cfb2e394bfb85bb63e437b69b9b0
  - https://typo3.org/security/advisory/typo3-core-sa-2020-003/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMS-568948
- id: snykio:packagist:typo3/cms:568953
  title: Deserialization of Untrusted Data
  description: |
    [typo3/cms][1] is a free open source Content Management Framework.

    Affected versions of this package are vulnerable to Deserialization of
    Untrusted Data. Calling unserialize() on malicious user-submitted
    content can result in the following scenarios:

    * trigger deletion of arbitrary directory in file system (if writable
      for web server)
    * trigger message submission via email using identity of web site (mail
      relay)

    Another insecure deserialization vulnerability is required to actually
    exploit mentioned aspects.



    [1]: https://packagist.org/packages/typo3/cms
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=10.0.0  <10.4.2"
  - ">=9.0.0  <9.5.17"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2020-11066
  cwe:
  - CWE-502
  disclosed_date: 2020-05-12
  created_date: 2020-05-12
  last_modified_date: 2020-05-12
  credit:
  - Oliver Hader
  references:
  - https://github.com/FriendsOfPHP/security-advisories/commit/dbd6d721f688cfb2e394bfb85bb63e437b69b9b0
  - https://typo3.org/security/advisory/typo3-core-sa-2020-004/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMS-568953
- id: snykio:packagist:typo3/cms:70235
  title: Cross-site Scripting (XSS)
  description: |+
    Affected versions of [`typo3/cms`][1] are vulnerable to Cross-site
    Scripting (XSS).



    [1]: https://packagist.org/packages/typo3/cms
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0  <6.2.3"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-79
  disclosed_date: 2014-05-22
  created_date: 2014-05-22
  last_modified_date: 2014-05-22
  credit:
  - Unknown
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2014-001/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMS-70235
- id: snykio:packagist:typo3/cms:70236
  title: Denial of Service (DoS)
  description: |+
    Affected versions of [`typo3/cms`][1] are vulnerable to Denial of
    Service (DoS).



    [1]: https://packagist.org/packages/typo3/cms
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: typo3/cms
  vulnerable_versions:
  - ">=4.5.0  <4.5.37"
  - ">=4.7.0  <4.7.20"
  - ">=6.1.0  <6.1.11"
  - ">=6.2.0  <6.2.6"
  severity: high
  package_manager: packagist
  cwe:
  - CWE-400
  disclosed_date: 2014-10-22
  created_date: 2014-10-22
  last_modified_date: 2014-10-22
  credit:
  - Unknown
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2014-002/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMS-70236
- id: snykio:packagist:typo3/cms:70237
  title: Arbitrary Shell Execution
  description: |
    Affected versions of [`typo3/cms`][1] are vulnerable to Arbitrary Shell
    Execution.



    [1]: https://packagist.org/packages/typo3/cms
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=4.5.0  <4.5.37"
  - ">=4.7.0  <4.7.20"
  - ">=6.1.0  <6.1.12"
  - ">=6.2.0  <6.2.6"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-78
  disclosed_date: 2014-10-22
  created_date: 2014-10-22
  last_modified_date: 2014-10-22
  credit:
  - Kousuke Ebihara
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2014-002/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMS-70237
- id: snykio:packagist:typo3/cms:70238
  title: Link Spoofing
  description: |
    Affected versions of [`typo3/cms`][1] are vulnerable to Link Spoofing.

    The frontend rendering component in TYPO3 4.5.x before 4.5.39, 4.6.x
    through 6.2.x before 6.2.9, and 7.x before 7.0.2, when
    config.prefixLocalAnchors is set and using a homepage with links that
    only contain anchors, allows remote attackers to change URLs to
    arbitrary domains for those links via unknown vectors.



    [1]: https://packagist.org/packages/typo3/cms
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=4.5.0  <4.5.39"
  - ">=6.2.0  <6.2.9"
  - ">=7  <7.0.2"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2014-9508
  cwe:
  - CWE-59
  disclosed_date: 2014-12-10
  created_date: 2014-12-10
  last_modified_date: 2014-12-10
  credit:
  - Gernot Leitgab
  references:
  - https://nvd.nist.gov/vuln/detail/CVE-2014-9508
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2014-003/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMS-70238
- id: snykio:packagist:typo3/cms:70239
  title: Cache Poisoning
  description: |
    Affected versions of [`typo3/cms`][1] are vulnerable to Cache Poisoning.



    [1]: https://packagist.org/packages/typo3/cms
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=4.5.0  <4.5.39"
  - ">=6.2.0  <6.2.9"
  - ">=7  <7.0.2"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-345
  disclosed_date: 2014-12-10
  created_date: 2014-12-10
  last_modified_date: 2014-12-10
  credit:
  - Gernot Leitgab
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2014-003/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMS-70239
- id: snykio:packagist:typo3/cms:70240
  title: Access Restriction Bypass
  description: |
    Affected versions of [`typo3/cms`][1] are vulnerable to Access
    Restriction Bypass.



    [1]: https://packagist.org/packages/typo3/cms
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0  <6.2.14"
  - ">=7  <7.3.1"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-284
  disclosed_date: 2015-07-01
  created_date: 2015-07-01
  last_modified_date: 2015-07-01
  credit:
  - Marc Bastian Heinrichs
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2015-002/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMS-70240
- id: snykio:packagist:typo3/cms:70241
  title: Session Fixation
  description: |
    Affected versions of [`typo3/cms`][1] are vulnerable to Session
    Fixation.



    [1]: https://packagist.org/packages/typo3/cms
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0  <6.2.14"
  - ">=7  <7.3.1"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-384
  disclosed_date: 2015-07-01
  created_date: 2015-07-01
  last_modified_date: 2015-07-01
  credit:
  - Helmut Hummel
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2015-003/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMS-70241
- id: snykio:packagist:typo3/cms:70242
  title: Cross-site Scripting (XSS)
  description: |+
    Affected versions of [`typo3/cms`][1] are vulnerable to Cross-site
    Scripting (XSS).



    [1]: https://packagist.org/packages/typo3/cms
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0  <6.2.14"
  - ">=7.0.0  <7.3.1"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-79
  disclosed_date: 2015-07-01
  created_date: 2015-07-01
  last_modified_date: 2015-07-01
  credit:
  - Unknown
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2015-004/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMS-70242
- id: snykio:packagist:typo3/cms:70243
  title: Information Exposure
  description: |
    Affected versions of [`typo3/cms`][1] are vulnerable to Information
    Exposure.



    [1]: https://packagist.org/packages/typo3/cms
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0  <6.2.14"
  - ">=7.0.0  <7.3.1"
  severity: low
  package_manager: packagist
  cwe:
  - CWE-200
  disclosed_date: 2015-07-01
  created_date: 2015-07-01
  last_modified_date: 2015-07-01
  credit:
  - Unknown
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2015-005/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMS-70243
- id: snykio:packagist:typo3/cms:70244
  title: Denial of Service (DoS)
  description: |+
    Affected versions of [`typo3/cms`][1] are vulnerable to Denial of
    Service (DoS).



    [1]: https://packagist.org/packages/typo3/cms
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0  <6.2.14"
  - ">=7  <7.3.1"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-400
  disclosed_date: 2015-07-01
  created_date: 2015-07-01
  last_modified_date: 2015-07-01
  credit:
  - Franz G. Jahn
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2015-006/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMS-70244
- id: snykio:packagist:typo3/cms:70245
  title: Cross-site Scripting (XSS)
  description: |+
    Affected versions of [`typo3/cms`][1] are vulnerable to Cross-site
    Scripting (XSS).



    [1]: https://packagist.org/packages/typo3/cms
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0  <6.2.14"
  - ">=7.0.0  <7.3.1"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-79
  disclosed_date: 2015-07-01
  created_date: 2015-07-01
  last_modified_date: 2015-07-01
  credit:
  - Unknown
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2015-007/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMS-70245
- id: snykio:packagist:typo3/cms:70246
  title: Information Exposure
  description: |
    Affected versions of [`typo3/cms`][1] are vulnerable to Information
    Exposure.



    [1]: https://packagist.org/packages/typo3/cms
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0  <6.2.15"
  - ">=7  <7.4.0"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-200
  disclosed_date: 2015-09-08
  created_date: 2015-09-08
  last_modified_date: 2015-09-08
  credit:
  - Heiko Kromm
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2015-008/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMS-70246
- id: snykio:packagist:typo3/cms:70247
  title: Cross-site Scripting (XSS)
  description: |+
    Affected versions of [`typo3/cms`][1] are vulnerable to Cross-site
    Scripting (XSS).



    [1]: https://packagist.org/packages/typo3/cms
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0  <6.2.16"
  - ">=7.0.0  <7.6.1"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-79
  disclosed_date: 2015-12-15
  created_date: 2015-12-15
  last_modified_date: 2015-12-15
  credit:
  - Unknown
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2015-011/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMS-70247
- id: snykio:packagist:typo3/cms:70248
  title: Cross-site Scripting (XSS)
  description: |+
    Affected versions of [`typo3/cms`][1] are vulnerable to Cross-site
    Scripting (XSS).



    [1]: https://packagist.org/packages/typo3/cms
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0  <6.2.16"
  - ">=7.0.0  <7.6.1"
  severity: low
  package_manager: packagist
  cwe:
  - CWE-79
  disclosed_date: 2015-12-15
  created_date: 2015-12-15
  last_modified_date: 2015-12-15
  credit:
  - Valentin Despa
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2015-012/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMS-70248
- id: snykio:packagist:typo3/cms:70249
  title: Cross-site Scripting (XSS)
  description: |+
    Affected versions of [`typo3/cms`][1] are vulnerable to Cross-site
    Scripting (XSS).



    [1]: https://packagist.org/packages/typo3/cms
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0  <6.2.16"
  - ">=7.0.0  <7.6.1"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-79
  disclosed_date: 2015-12-15
  created_date: 2015-12-15
  last_modified_date: 2015-12-15
  credit:
  - Unknown
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2015-013/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMS-70249
- id: snykio:packagist:typo3/cms:70250
  title: Cross-Site Flashing (XSF)
  description: |
    Affected versions of [`typo3/cms`][1] are vulnerable to Cross-Site
    Flashing (XSF).



    [1]: https://packagist.org/packages/typo3/cms
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0  <6.2.16"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-790
  disclosed_date: 2015-12-15
  created_date: 2015-12-15
  last_modified_date: 2015-12-15
  credit:
  - Heiko Kromm
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2015-014/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMS-70250
- id: snykio:packagist:typo3/cms:70251
  title: Cross-site Scripting (XSS)
  description: |+
    Affected versions of [`typo3/cms`][1] are vulnerable to Cross-site
    Scripting (XSS).



    [1]: https://packagist.org/packages/typo3/cms
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0  <6.2.16"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-79
  disclosed_date: 2015-12-15
  created_date: 2015-12-15
  last_modified_date: 2015-12-15
  credit:
  - Dmitry Dulepov
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2015-015/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMS-70251
- id: snykio:packagist:typo3/cms:70252
  title: SQL Injection
  description: |
    Affected versions of [`typo3/cms`][1] are vulnerable to SQL Injection.



    [1]: https://packagist.org/packages/typo3/cms
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0  <6.2.18"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-89
  disclosed_date: 2016-02-16
  created_date: 2016-02-16
  last_modified_date: 2016-02-16
  credit:
  - Unknown
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2015-016/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMS-70252
- id: snykio:packagist:typo3/cms:70253
  title: Cross-site Scripting (XSS)
  description: |+
    Affected versions of [`typo3/cms`][1] are vulnerable to Cross-site
    Scripting (XSS).



    [1]: https://packagist.org/packages/typo3/cms
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0  <6.2.18"
  - ">=7.6.0  <7.6.3"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-79
  disclosed_date: 2016-02-16
  created_date: 2016-02-16
  last_modified_date: 2016-02-16
  credit:
  - Steffen Müller
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2016-002/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMS-70253
- id: snykio:packagist:typo3/cms:70254
  title: Cross-site Scripting (XSS)
  description: |+
    Affected versions of [`typo3/cms`][1] are vulnerable to Cross-site
    Scripting (XSS).



    [1]: https://packagist.org/packages/typo3/cms
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0  <6.2.18"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-79
  disclosed_date: 2016-02-16
  created_date: 2016-02-16
  last_modified_date: 2016-02-16
  credit:
  - Georg Ringer
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2016-003/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMS-70254
- id: snykio:packagist:typo3/cms:70255
  title: Cross-site Scripting (XSS)
  description: |+
    Affected versions of [`typo3/cms`][1] are vulnerable to Cross-site
    Scripting (XSS).



    [1]: https://packagist.org/packages/typo3/cms
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0  <6.2.18"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-79
  disclosed_date: 2016-02-16
  created_date: 2016-02-16
  last_modified_date: 2016-02-16
  credit:
  - David VieiraKurz
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2016-004/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMS-70255
- id: snykio:packagist:typo3/cms:70256
  title: XML External Entity (XXE) Injection
  description: |+
    Affected versions of [`typo3/cms`][1] are vulnerable to XML External
    Entity (XXE) Processing in TYPO3 Core.



    [1]: https://packagist.org/packages/typo3/cms
    \nXXE Injection is a type of attack against an application that parses XML
    input. XML is a markup language that defines a set of rules for encoding
    documents in a format that is both human-readable and machine-readable.
    By default, many XML processors allow specification of an external
    entity, a URI that is dereferenced and evaluated during XML processing.
    When an XML document is being parsed, the parser can make a request and
    include the content at the specified URI inside of the XML document.

    Attacks can include disclosing local files, which may contain sensitive
    data such as passwords or private user data, using file: schemes or
    relative paths in the system identifier.

    For example, below is a sample XML document, containing an XML element-
    username.

        <?xml version="1.0" encoding="ISO-8859-1"?>
           <username>John</username>
        </xml>
    {: .language-xml}

    An external XML entity - `xxe`, is defined using a system identifier and
    present within a DOCTYPE header. These entities can access local or
    remote content. For example the below code contains an external XML
    entity that would fetch the content of `/etc/passwd` and display it to
    the user rendered by `username`.

        <?xml version="1.0" encoding="ISO-8859-1"?>
        <!DOCTYPE foo [
           <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
           <username>&xxe;</username>
        </xml>
    {: .language-xml}

    Other XXE Injection attacks can access local resources that may not stop
    returning data, possibly impacting application availability and leading
    to Denial of Service.

  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0  <6.2.19"
  - ">=7.6.0  <7.6.4"
  severity: high
  package_manager: packagist
  cwe:
  - CWE-611
  disclosed_date: 2016-02-23
  created_date: 2016-02-23
  last_modified_date: 2016-02-23
  credit:
  - Unknown
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2016-005/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMS-70256
- id: snykio:packagist:typo3/cms:70257
  title: Cross-site Scripting (XSS)
  description: |+
    Affected versions of [`typo3/cms`][1] are vulnerable to Cross-site
    Scripting (XSS).



    [1]: https://packagist.org/packages/typo3/cms
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0  <6.2.19"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-79
  disclosed_date: 2016-02-23
  created_date: 2016-02-23
  last_modified_date: 2016-02-23
  credit:
  - Filipe Reis
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2016-006/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMS-70257
- id: snykio:packagist:typo3/cms:70258
  title: Cross-site Scripting (XSS)
  description: |+
    Affected versions of [`typo3/cms`][1] are vulnerable to Cross-site
    Scripting (XSS).



    [1]: https://packagist.org/packages/typo3/cms
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0  <6.2.19"
  - ">=7.6.0  <7.6.4"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-79
  disclosed_date: 2016-02-23
  created_date: 2016-02-23
  last_modified_date: 2016-02-23
  credit:
  - Unknown
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2016-007/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMS-70258
- id: snykio:packagist:typo3/cms:70259
  title: Denial of Service (DoS)
  description: |+
    Affected versions of [`typo3/cms`][1] are vulnerable to Denial of
    Service (DoS).



    [1]: https://packagist.org/packages/typo3/cms
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0  <6.2.19"
  - ">=7.6.0  <7.6.4"
  severity: high
  package_manager: packagist
  cwe:
  - CWE-400
  disclosed_date: 2016-02-23
  created_date: 2016-02-23
  last_modified_date: 2016-02-23
  credit:
  - Jonas Felix
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2016-008/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMS-70259
- id: snykio:packagist:typo3/cms:70260
  title: Cross-site Scripting (XSS)
  description: |+
    Affected versions of [`typo3/cms`][1] are vulnerable to Cross-site
    Scripting (XSS).



    [1]: https://packagist.org/packages/typo3/cms
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0  <6.2.20"
  - ">=7.6.0  <7.6.5"
  - ">=8  <8.0.1"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-79
  disclosed_date: 2016-04-12
  created_date: 2016-04-12
  last_modified_date: 2016-04-12
  credit:
  - Unknown
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2016-009/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMS-70260
- id: snykio:packagist:typo3/cms:70261
  title: Arbitrary File Read
  description: |
    Affected versions of [`typo3/cms`][1] are vulnerable to Arbitrary File
    Read.



    [1]: https://packagist.org/packages/typo3/cms
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0  <6.2.20"
  severity: high
  package_manager: packagist
  cwe:
  - CWE-264
  disclosed_date: 2016-04-12
  created_date: 2016-04-12
  last_modified_date: 2016-04-12
  credit:
  - Gerrit Venema
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2016-010/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMS-70261
- id: snykio:packagist:typo3/cms:70262
  title: Access Restriction Bypass
  description: |
    Affected versions of [`typo3/cms`][1] are vulnerable to Access
    Restriction Bypass.



    [1]: https://packagist.org/packages/typo3/cms
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0  <6.2.20"
  - ">=7.6.0  <7.6.5"
  - ">=8  <8.0.1"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-287
  disclosed_date: 2016-04-12
  created_date: 2016-04-12
  last_modified_date: 2016-04-12
  credit:
  - Kevin Ditscheid
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2016-011/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMS-70262
- id: snykio:packagist:typo3/cms:70263
  title: Privilege Escalation
  description: |
    Affected versions of [`typo3/cms`][1] are vulnerable to Privilege
    Escalation.



    [1]: https://packagist.org/packages/typo3/cms
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0  <6.2.20"
  - ">=7.6.0  <7.6.5"
  - ">=8  <8.0.1"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-264
  disclosed_date: 2016-04-12
  created_date: 2016-04-12
  last_modified_date: 2016-04-12
  credit:
  - Helmut Hummel
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2016-012/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMS-70263
- id: snykio:packagist:typo3/cms:70264
  title: Arbitrary Code Execution
  description: |
    Affected versions of [`typo3/cms`][1] are vulnerable to Arbitrary Code
    Execution.

    Extbase in TYPO3 4.3.0 before 6.2.24, 7.x before 7.6.8, and 8.1.1 allows
    remote attackers to obtain sensitive information or possibly execute
    arbitrary code via a crafted Extbase action.



    [1]: https://packagist.org/packages/typo3/cms
  affected_package: typo3/cms
  vulnerable_versions:
  - "<6.2.24"
  - ">=7  <7.6.8"
  - ">=8  <8.1.1"
  severity: high
  package_manager: packagist
  cwe:
  - CWE-94
  disclosed_date: 2016-05-24
  created_date: 2016-05-24
  last_modified_date: 2016-05-24
  credit:
  - Unknown
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2016-013/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMS-70264
- id: snykio:packagist:typo3/cms:70265
  title: Cross-site Scripting (XSS)
  description: |+
    Affected versions of [`typo3/cms`][1] are vulnerable to Cross-site
    Scripting (XSS).



    [1]: https://packagist.org/packages/typo3/cms
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0  <6.2.26"
  - ">=7.6.0  <7.6.10"
  - ">=8.0.0  <8.2.1"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-79
  disclosed_date: 2016-07-19
  created_date: 2016-07-19
  last_modified_date: 2016-07-19
  credit:
  - Unknown
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2016-014/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMS-70265
- id: snykio:packagist:typo3/cms:70266
  title: Deserialization of Untrusted Data
  description: |
    Affected versions of [`typo3/cms`][1] are vulnerable to Deserialization
    of Untrusted Data.



    [1]: https://packagist.org/packages/typo3/cms
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0  <6.2.26"
  - ">=7.6.0  <7.6.10"
  - ">=8.0.0  <8.2.1"
  severity: high
  package_manager: packagist
  cwe:
  - CWE-502
  disclosed_date: 2016-07-19
  created_date: 2016-07-19
  last_modified_date: 2016-07-19
  credit:
  - Unknown
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2016-015
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMS-70266
- id: snykio:packagist:typo3/cms:70267
  title: SQL Injection
  description: |
    Affected versions of [`typo3/cms`][1] are vulnerable to SQL Injection.



    [1]: https://packagist.org/packages/typo3/cms
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0  <6.2.26"
  - ">=7.6.0  <7.6.10"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-89
  disclosed_date: 2016-07-19
  created_date: 2016-07-19
  last_modified_date: 2016-07-19
  credit:
  - Unknown
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2016-016
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMS-70267
- id: snykio:packagist:typo3/cms:70268
  title: Information Exposure
  description: |
    Affected versions of [`typo3/cms`][1] are vulnerable to Information
    Exposure.



    [1]: https://packagist.org/packages/typo3/cms
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0  <6.2.26"
  - ">=7.6.0  <7.6.10"
  - ">=8.0.0  <8.2.1"
  severity: low
  package_manager: packagist
  cwe:
  - CWE-200
  disclosed_date: 2016-07-19
  created_date: 2016-07-19
  last_modified_date: 2016-07-19
  credit:
  - Unknown
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2016-017
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMS-70268
- id: snykio:packagist:typo3/cms:70269
  title: Cross-site Scripting (XSS)
  description: |+
    Affected versions of [`typo3/cms`][1] are vulnerable to Cross-site
    Scripting (XSS).



    [1]: https://packagist.org/packages/typo3/cms
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0  <6.2.26"
  - ">=7.6.0  <7.6.10"
  - ">=8.0.0  <8.2.1"
  severity: low
  package_manager: packagist
  cwe:
  - CWE-79
  disclosed_date: 2016-07-19
  created_date: 2016-07-19
  last_modified_date: 2016-07-19
  credit:
  - Valentin Despa
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2016-018
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMS-70269
- id: snykio:packagist:typo3/cms:70270
  title: HTTP Header Injection
  description: |
    Affected versions of [`typo3/cms`][1] are vulnerable to HTTP Header
    Injection.



    [1]: https://packagist.org/packages/typo3/cms
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=8  <8.2.1"
  severity: high
  package_manager: packagist
  cwe:
  - CWE-284
  disclosed_date: 2016-07-19
  created_date: 2016-07-19
  last_modified_date: 2016-07-19
  credit:
  - Unknown
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2016-019
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMS-70270
- id: snykio:packagist:typo3/cms:70271
  title: Cross-site Scripting (XSS)
  description: |+
    Affected versions of [`typo3/cms`][1] are vulnerable to Cross-site
    Scripting (XSS).



    [1]: https://packagist.org/packages/typo3/cms
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: typo3/cms
  vulnerable_versions:
  - ">=7.6.0  <7.6.10"
  - ">=8.0.0  <8.2.1"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-79
  disclosed_date: 2016-07-19
  created_date: 2016-07-19
  last_modified_date: 2016-07-19
  credit:
  - Unknown
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2016-020
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMS-70271
- id: snykio:packagist:typo3/cms:70272
  title: Cross-site Scripting (XSS)
  description: |+
    Affected versions of [`typo3/cms`][1] are vulnerable to Cross-site
    Scripting (XSS).



    [1]: https://packagist.org/packages/typo3/cms
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0  <6.2.27"
  - ">=7.6.0  <7.6.11"
  - ">=8.0.0  <8.3.1"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-79
  disclosed_date: 2016-07-13
  created_date: 2016-07-13
  last_modified_date: 2016-07-13
  credit:
  - Unknown
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2016-021
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMS-70272
- id: snykio:packagist:typo3/cms:70273
  title: Denial of Service (DoS)
  description: |+
    Affected versions of [`typo3/cms`][1] are vulnerable to Denial of
    Service (DoS).



    [1]: https://packagist.org/packages/typo3/cms
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0  <6.2.27"
  - ">=7.6.0  <7.6.11"
  - ">=8  <8.3.1"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-400
  disclosed_date: 2016-07-13
  created_date: 2016-07-13
  last_modified_date: 2016-07-13
  credit:
  - Dmitry Dulepov
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2016-022
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMS-70273
- id: snykio:packagist:typo3/cms:70274
  title: Deserialization of Untrusted Data
  description: |
    Affected versions of [`typo3/cms`][1] are vulnerable to Deserialization
    of Untrusted Datas.



    [1]: https://packagist.org/packages/typo3/cms
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0  <6.2.29"
  - ">=7.6.0  <7.6.13"
  - ">=8.0.0  <8.4.1"
  severity: high
  package_manager: packagist
  cwe:
  - CWE-502
  disclosed_date: 2016-11-22
  created_date: 2016-11-22
  last_modified_date: 2016-11-22
  credit:
  - Unknown
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2016-023/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMS-70274
- id: snykio:packagist:typo3/cms:70275
  title: Directory Traversal
  description: |
    Affected versions of [`typo3/cms`][1] are vulnerable to Path Traversal
    in TYPO3 Core.



    [1]: https://packagist.org/packages/typo3/cms
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0  <6.2.29"
  - ">=7.6.0  <7.6.13"
  - ">=8.0.0  <8.4.1"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-502
  disclosed_date: 2016-11-22
  created_date: 2016-11-22
  last_modified_date: 2016-11-22
  credit:
  - Unknown
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2016-024/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMS-70275
- id: snykio:packagist:typo3/cms:70276
  title: Arbitrary Code Execution
  description: |
    Affected versions of [`typo3/cms`][1] are vulnerable to Arbitrary Code
    Execution.



    [1]: https://packagist.org/packages/typo3/cms
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0  <6.2.30"
  - ">=7.6.0  <7.6.15"
  - ">=8.0.0  <8.5.1"
  severity: high
  package_manager: packagist
  cwe:
  - CWE-94
  disclosed_date: 2017-01-03
  created_date: 2017-01-03
  last_modified_date: 2017-01-03
  credit:
  - Unknown
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2017-001/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMS-70276
- id: snykio:packagist:typo3/cms:70277
  title: Access Restriction Bypass
  description: |
    Affected versions of [`typo3/cms`][1] are vulnerable to Access
    Restriction Bypass.



    [1]: https://packagist.org/packages/typo3/cms
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=8.2.0  <8.6.1"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-287
  disclosed_date: 2017-02-28
  created_date: 2017-02-28
  last_modified_date: 2017-02-28
  credit:
  - Thomas Dahlke
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2017-002/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMS-70277
- id: snykio:packagist:typo3/cms:70278
  title: Cross-site Scripting (XSS)
  description: |+
    Affected versions of [`typo3/cms`][1] are vulnerable to Cross-site
    Scripting (XSS).



    [1]: https://packagist.org/packages/typo3/cms
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: typo3/cms
  vulnerable_versions:
  - ">=7.6.0  <7.6.16"
  - ">=8.0.0  <8.6.1"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-79
  disclosed_date: 2017-02-28
  created_date: 2017-02-28
  last_modified_date: 2017-02-28
  credit:
  - Unknown
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2017-003/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMS-70278
- id: snykio:packagist:typo3/cms:70279
  title: Cross-site Scripting (XSS)
  description: |+
    Affected versions of [`typo3/cms`][1] are vulnerable to Cross-site
    Scripting (XSS).



    [1]: https://packagist.org/packages/typo3/cms
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: typo3/cms
  vulnerable_versions:
  - ">=8.0.0  <8.7.5"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-79
  disclosed_date: 2017-09-05
  created_date: 2017-09-05
  last_modified_date: 2017-09-05
  credit:
  - Unknown
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2017-004/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMS-70279
- id: snykio:packagist:typo3/cms:70280
  title: Information Exposure
  description: |
    Affected versions of [`typo3/cms`][1] are vulnerable to Information
    Exposure.



    [1]: https://packagist.org/packages/typo3/cms
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=7.6.0  <7.6.22"
  - ">=8.0.0  <8.7.5"
  severity: low
  package_manager: packagist
  cwe:
  - CWE-200
  disclosed_date: 2017-09-05
  created_date: 2017-09-05
  last_modified_date: 2017-09-05
  credit:
  - Unknown
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2017-005/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMS-70280
- id: snykio:packagist:typo3/cms:70281
  title: Information Exposure
  description: |
    Affected versions of [`typo3/cms`][1] are vulnerable to Information
    Exposure.



    [1]: https://packagist.org/packages/typo3/cms
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=7.6.0  <7.6.22"
  - ">=8.0.0  <8.7.5"
  severity: low
  package_manager: packagist
  cwe:
  - CWE-200
  disclosed_date: 2017-09-05
  created_date: 2017-09-05
  last_modified_date: 2017-09-05
  credit:
  - Unknown
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2017-006/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMS-70281
- id: snykio:packagist:typo3/cms:70282
  title: Arbitrary Code Execution
  description: |
    Affected versions of [`typo3/cms`][1] are vulnerable to Arbitrary Code
    Execution.



    [1]: https://packagist.org/packages/typo3/cms
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=7.6.0  <7.6.22"
  - ">=8  <8.7.5"
  severity: high
  package_manager: packagist
  cwe:
  - CWE-94
  disclosed_date: 2017-09-05
  created_date: 2017-09-05
  last_modified_date: 2017-09-05
  credit:
  - Maurizio Siddu
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2017-007/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMS-70282
- id: snykio:packagist:typo3/cms:70283
  title: Host Spoofing
  description: |
    Affected versions of [`typo3/cms`][1] are vulnerable to Host Spoofing.

    TYPO3 4.5.0 before 4.5.34, 4.7.0 before 4.7.19, 6.0.0 before 6.0.14,
    6.1.0 before 6.1.9, and 6.2.0 before 6.2.3 allows remote attackers to
    have unspecified impact via a crafted HTTP Host header, related to
    \"Host Spoofing.\"



    [1]: https://packagist.org/packages/typo3/cms
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=4.5.0  <4.5.34"
  - ">=4.7.0  <4.7.19"
  - ">=6  <6.0.14"
  - ">=6.1.0  <6.1.9"
  - ">=6.2.0  <6.2.3"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2014-3941
  cwe:
  - CWE-297
  disclosed_date: 2014-05-22
  created_date: 2014-05-22
  last_modified_date: 2014-05-22
  credit:
  - Unknown
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2014-001/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMS-70283
- id: snykio:packagist:typo3/cms:70284
  title: Cross-site Scripting (XSS)
  description: |+
    Affected versions of [`typo3/cms`][1] are vulnerable to Cross-site
    Scripting (XSS).



    [1]: https://packagist.org/packages/typo3/cms
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0  <6.2.3"
  severity: low
  package_manager: packagist
  cve:
  - CVE-2014-3943
  cwe:
  - CWE-79
  disclosed_date: 2014-05-22
  created_date: 2014-05-22
  last_modified_date: 2014-05-22
  credit:
  - Unknown
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2014-001/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMS-70284
- id: snykio:packagist:typo3/cms:70285
  title: Session Hijacking
  description: |
    Affected versions of [`typo3/cms`][1] are vulnerable to Session
    Hijacking.

    The Authentication component in TYPO3 6.2.0 before 6.2.3 does not
    properly invalidate timed out user sessions, which allows remote
    attackers to bypass authentication via unspecified vectors.



    [1]: https://packagist.org/packages/typo3/cms
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0  <6.2.3"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2014-3944
  cwe:
  - CWE-287
  disclosed_date: 2014-05-22
  created_date: 2014-05-22
  last_modified_date: 2014-05-22
  credit:
  - Unknown
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2014-001/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMS-70285
- id: snykio:packagist:typo3/cms:70286
  title: Information Exposure
  description: |
    Affected versions of [`typo3/cms`][1] are vulnerable to Information
    disclosure in the Extbase framework.



    [1]: https://packagist.org/packages/typo3/cms
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0  <6.2.3"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2014-3946
  cwe:
  - CWE-200
  disclosed_date: 2014-05-22
  created_date: 2014-05-22
  last_modified_date: 2014-05-22
  credit:
  - Unknown
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2014-001/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMS-70286
- id: snykio:packagist:typo3/cms:70287
  title: Cross-site Scripting (XSS)
  description: |+
    Affected versions of [`typo3/cms`][1] are vulnerable to Cross-site
    Scripting (XSS).

    The sanitizeLocalUrl function in TYPO3 6.x before 6.2.15, 7.x before
    7.4.0, 4.5.40, and earlier allows remote authenticated users to bypass
    the XSS filter and conduct cross-site scripting (XSS) attacks via a
    base64 encoded data URI, as demonstrated by the (1) returnUrl parameter
    to show\_rechis.php and the (2) redirect\_url parameter to index.php.



    [1]: https://packagist.org/packages/typo3/cms
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: typo3/cms
  vulnerable_versions:
  - ">=6.2.0  <6.2.15"
  - ">=7.0.0  <7.4.0"
  severity: low
  package_manager: packagist
  cve:
  - CVE-2015-5956
  cwe:
  - CWE-79
  disclosed_date: 2015-09-08
  created_date: 2015-09-08
  last_modified_date: 2015-09-08
  credit:
  - Unknown
  references:
  - https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2015-009/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMS-70287
- id: snykio:packagist:typo3/cms:72119
  title: Cross-site Scripting (XSS)
  description: |+
    [typo3/cms][1] is an open source PHP based web content management system
    released under the GNU GPL.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks via the `$GLOBALS['TYPO3_CONF_VARS']['SYS']['sitename']`
    variable. A malicious user with admin privilege may enter a crafted site
    name during the installation process.



    [1]: https://github.com/TYPO3/TYPO3.CMS
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: typo3/cms
  vulnerable_versions:
  - "<8.7.11"
  - ">=9.0.0  <9.1.0"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2018-6905
  cwe:
  - CWE-79
  disclosed_date: 2018-04-08
  created_date: 2018-04-09
  last_modified_date: 2018-04-09
  credit:
  - Unknown
  references:
  - https://forge.typo3.org/issues/84191
  - https://nvd.nist.gov/vuln/detail/CVE-2018-6905
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMS-72119
- id: snykio:packagist:typo3/cms:72205
  title: Authentication Bypass
  description: |
    [typo3/cms][1] is a free open source Content Management Framework.

    Affected versions of this package are vulnerable to Authentication
    Bypass.



    [1]: https://packagist.org/packages/typo3/cms
  affected_package: typo3/cms
  vulnerable_versions:
  - "<0.2.13"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2010-1022
  cwe:
  - CWE-287
  disclosed_date: 2010-03-19
  created_date: 2018-06-06
  last_modified_date: 2018-06-06
  credit:
  - Unknown
  references:
  - https://nvd.nist.gov/vuln/detail/CVE-2010-1022
  - https://www.securityfocus.com/bid/38799
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMS-72205
- id: snykio:packagist:typo3/cms:72206
  title: Authentication Bypass
  description: |
    [typo3/cms][1] is a free open source Content Management Framework.

    Affected versions of this package are vulnerable to Authentication
    Bypass. When salting for password hashing is disabled, It does not
    require knowledge of the cleartext password if the password hash is
    known, which allows remote attackers to bypass authentication and gain
    access to the backend by leveraging knowledge of a password hash.



    [1]: https://packagist.org/packages/typo3/cms
  affected_package: typo3/cms
  vulnerable_versions:
  - "<6.2"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2014-3945
  cwe:
  - CWE-287
  disclosed_date: 2014-05-22
  created_date: 2018-06-06
  last_modified_date: 2018-06-06
  credit:
  - Unknown
  references:
  - https://nvd.nist.gov/vuln/detail/CVE-2014-3945
  - https://typo3.org/security/advisory/typo3-core-sa-2014-001/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMS-72206
- id: snykio:packagist:typo3/cms:72228
  title: Authentication Bypass
  description: |
    [typo3/cms][1] is a free open source Content Management Framework
    initially created by Kasper Skaarhoj and licensed under GNU/GPL.

    Affected versions of this package are vulnerable to Authentication
    Bypass when using hashing methods which are related by PHP class
    inheritance.



    [1]: https://packagist.org/packages/typo3/cms
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=7.0.0  <7.6.30"
  - ">=8.0.0  <8.7.17"
  - ">=9.0.0  <9.3.2"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-592
  disclosed_date: 2018-07-12
  created_date: 2018-07-19
  last_modified_date: 2018-07-19
  credit:
  - Oliver Hader
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2018-001/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMS-72228
- id: snykio:packagist:typo3/cms:72229
  title: SQL Injection
  description: |
    [typo3/cms][1] is a free open source Content Management Framework
    initially created by Kasper Skaarhoj and licensed under GNU/GPL.

    Affected versions of this package are vulnerable to SQL Injection and
    Privilege Escalation. Instructions can be persisted to a form definition
    file that were not configured to be modified.



    [1]: https://packagist.org/packages/typo3/cms
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=8.5.0  <8.7.17"
  - ">=9.0.0  <9.3.2"
  severity: high
  package_manager: packagist
  cwe:
  - CWE-89
  disclosed_date: 2018-07-12
  created_date: 2018-07-19
  last_modified_date: 2018-07-19
  credit:
  - Oliver Hader
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2018-003/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMS-72229
- id: snykio:packagist:typo3/cms:72230
  title: Arbitrary Code Execution
  description: |
    [typo3/cms][1] is a free open source Content Management Framework
    initially created by Kasper Skaarhoj and licensed under GNU/GPL.

    Affected versions of this package are vulnerable to Arbitrary Code
    Execution and Insecure Deserialization. Phar files can act as self
    extracting archives which leads to the fact that source code is executed
    when Phar files are invoked.



    [1]: https://packagist.org/packages/typo3/cms
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=7.0.0  <7.6.30"
  - ">=8.0.0  <8.7.17"
  - ">=9.0.0  <9.3.2"
  severity: high
  package_manager: packagist
  cwe:
  - CWE-94
  disclosed_date: 2018-07-12
  created_date: 2018-07-19
  last_modified_date: 2018-07-19
  credit:
  - Sam Thomas
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2018-002/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMS-72230
- id: snykio:packagist:typo3/cms:72240
  title: Insecure Deserialization
  description: |
    [typo3/cms][1] is a free open source Content Management Framework
    initially created by Kasper Skaarhoj and licensed under GNU/GPL.

    Affected versions of this package are vulnerable to Insecure
    Deserialization when being used with the additional `PHP PECL` package
    `yaml`, which is capable of unserializing `YAML` contents to `PHP`
    objects.



    [1]: https://packagist.org/packages/typo3/cms
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=8.5.0  <8.7.17"
  - ">=9.0.0  <9.3.2"
  severity: high
  package_manager: packagist
  cwe:
  - CWE-502
  disclosed_date: 2018-07-18
  created_date: 2018-07-23
  last_modified_date: 2018-07-23
  credit:
  - Unknown
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2018-004/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMS-72240
- id: snykio:packagist:typo3/cms:72675
  title: Cross-site Scripting (XSS)
  description: |
    [typo3/cms][1] is a free open source Content Management Framework.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). An attacker having the ability to modify their user profile could
    inject malicious script via the website frontend.



    [1]: https://packagist.org/packages/typo3/cms
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=7.0.0  <7.6.32"
  - ">=8.0.0  <8.7.21"
  - ">=9.0.0  <9.5.2"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-79
  disclosed_date: 2018-12-11
  created_date: 2018-12-12
  last_modified_date: 2018-12-12
  credit:
  - Thomas Loffler
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2018-008/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMS-72675
- id: snykio:packagist:typo3/cms:72676
  title: Cross-site Scripting (XSS)
  description: |+
    [][1] is a free open source Content Management Framework.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) due to a failure to properly encode user input.



    [1]: https://packagist.org/packages/typo3/cms
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: typo3/cms
  vulnerable_versions:
  - ">=7.5.0  <7.6.32"
  - ">=8.0.0  <8.7.21"
  - ">=9.0.0  <9.5.2"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-79
  disclosed_date: 2018-12-11
  created_date: 2018-12-12
  last_modified_date: 2018-12-12
  credit:
  - Andras Otto
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2018-006/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMS-72676
- id: snykio:packagist:typo3/cms:72677
  title: Information Exposure
  description: |
    [typo3/cms][1] is a free open source Content Management Framework.

    Affected versions of this package are vulnerable to Information
    Exposure. The Install Tool exposes the current TYPO3 version number to
    non-authenticated users.



    [1]: https://packagist.org/packages/typo3/cms
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=7.0.0  <7.6.32"
  - ">=8.0.0  <8.7.21"
  - ">=9.0.0  <9.5.2"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-200
  disclosed_date: 2018-12-11
  created_date: 2018-12-12
  last_modified_date: 2018-12-12
  credit:
  - Manuel Bloch
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2018-010/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMS-72677
- id: snykio:packagist:typo3/cms:72678
  title: Denial of Service (DoS)
  description: |
    [typo3/cms][1] is a free open source Content Management Framework.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS). Putting large files with according file extensions results in
    high consumption of system resources. This can lead to exceeding limits
    of the current PHP process.



    [1]: https://packagist.org/packages/typo3/cms
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=7.0.0  <7.6.32"
  - ">=8.0.0  <8.7.21"
  - ">=9.0.0  <9.5.2"
  severity: high
  package_manager: packagist
  cwe:
  - CWE-400
  disclosed_date: 2018-12-11
  created_date: 2018-12-12
  last_modified_date: 2018-12-12
  credit:
  - Michael Schams
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2018-011/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMS-72678
- id: snykio:packagist:typo3/cms:72685
  title: Denial of Service (DoS)
  description: |+
    [typo3/cms][1] is an free open source Content Management Framework.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS). The package fails to properly ensure that anonymous user sessions
    are valid, attackers can use this vulnerability in order to create an
    arbitrary amount of individual session-data records in the database.



    [1]: https://packagist.org/packages/typo3/cms
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: typo3/cms
  vulnerable_versions:
  - ">=8.0.0  <8.7.21"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-400
  disclosed_date: 2018-12-11
  created_date: 2018-12-12
  last_modified_date: 2018-12-12
  credit:
  - Mads Lonne Jensen
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2018-012/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMS-72685
- id: snykio:packagist:typo3/cms:72690
  title: Cross-site Scripting (XSS)
  description: |
    [typo3/cms][1] is a free open source Content Management Framework.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). The vulnerability is due to a failure of properly encoding input.



    [1]: https://packagist.org/packages/typo3/cms
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=8.5.0  <8.7.21"
  - ">=9.0.0  <9.5.2"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-79
  disclosed_date: 2018-12-11
  created_date: 2018-12-12
  last_modified_date: 2018-12-12
  credit:
  - Joshua Westerheide
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2018-007/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMS-72690
- id: snykio:packagist:typo3/cms:73577
  title: Broken Access Control
  description: |
    [typo3/cms][1] is a free open source Content Management Framework.

    Affected versions of this package are vulnerable to Broken Access
    Control. Backend users having limited access to specific languages are
    capable of modifying and creating pages in the default language which
    actually should be disallowed. A valid backend user account is needed in
    order to exploit this vulnerability.



    [1]: https://packagist.org/packages/typo3/cms
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=8.0.0  <8.7.23"
  - ">=9.0.0  <9.5.4"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-284
  disclosed_date: 2019-01-22
  created_date: 2019-01-22
  last_modified_date: 2019-01-22
  credit:
  - Sascha Egerer
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2019-003/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMS-73577
- id: snykio:packagist:typo3/cms:73579
  title: Information Exposure
  description: |
    [typo3/cms][1] is an free open source Content Management Framework.

    Affected versions of this package are vulnerable to Information Exposure
    through the mechanisms used for configuration of RequireJS package
    loading. This way a potential attack can retrieve additional information
    about installed system and third party extensions.



    [1]: https://packagist.org/packages/typo3/cms
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=8.0.0  <8.7.23"
  - ">=9.0.0  <9.5.4"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-200
  disclosed_date: 2019-01-22
  created_date: 2019-01-22
  last_modified_date: 2019-01-22
  credit:
  - Sven Jürgens and Stefan Isak
  references:
  - https://github.com/TYPO3-CMS/core/commit/9453d8a8763fffa76deb6a16f6b99c0ab6f3d8f1
  - https://typo3.org/security/advisory/typo3-core-sa-2019-001/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMS-73579
- id: snykio:packagist:typo3/cms:73582
  title: Cross-site Scripting (XSS)
  description: |+
    [typo3/cms][1] is a free open source Content Management Framework.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) due to improperly encode of user input.



    [1]: https://packagist.org/packages/typo3/cms
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: typo3/cms
  vulnerable_versions:
  - ">=8.0.0  <8.7.23"
  - ">=9.0.0  <9.5.4"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-79
  disclosed_date: 2019-01-22
  created_date: 2019-01-22
  last_modified_date: 2019-01-22
  credit:
  - Susanne Moo
  - TYPO3 core team member
  references:
  - https://github.com/TYPO3-CMS/core/compare/v9.5.3...v9.5.4
  - https://typo3.org/security/advisory/typo3-core-sa-2019-007/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMS-73582
- id: snykio:packagist:typo3/cms:73584
  title: Cross-site Scripting (XSS)
  description: |+
    [typo3/cms][1] is a free open source Content Management Framework.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). Due to improperly encode of user input, templates using built-in
    Fluid ViewHelpers are vulnerable to cross-site scripting.



    [1]: https://packagist.org/packages/typo3/cms
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: typo3/cms
  vulnerable_versions:
  - ">=8.0.0  <8.7.23"
  - ">=9.0.0  <9.5.4"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-79
  disclosed_date: 2019-01-22
  created_date: 2019-01-22
  last_modified_date: 2019-01-22
  credit:
  - Markus Gerdes
  references:
  - https://github.com/TYPO3-CMS/core/compare/v9.5.3...v9.5.4
  - https://typo3.org/security/advisory/typo3-core-sa-2019-005/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMS-73584
- id: snykio:packagist:typo3/cms:73588
  title: Cross-site Scripting (XSS)
  description: |+
    [typo3/cms][1] is a free open source Content Management Framework.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). Due to improperly encode information from external sources,
    language pack handling in the install tool is vulnerable to cross-site
    scripting.



    [1]: https://packagist.org/packages/typo3/cms
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: typo3/cms
  vulnerable_versions:
  - ">=9.0.0  <9.5.4"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-9
  disclosed_date: 2019-01-22
  created_date: 2019-01-22
  last_modified_date: 2019-01-22
  credit:
  - Georg Ringer
  - TYPO3 core team member
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2019-004/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMS-73588
- id: snykio:packagist:typo3/cms:73590
  title: Arbitrary Code Execution
  description: |
    [typo3/cms][1] is a free open source Content Management Framework.

    Affected versions of this package are vulnerable to Arbitrary Code
    Execution. Due to missing file extensions in
    `$GLOBALS['TYPO3_CONF_VARS']['BE'][‘fileDenyPattern’]`, backend users
    are allowed to upload `*.phar`, `*.shtml`, `*.pl` or `*.cgi` files which
    can be executed in certain web server setups.



    [1]: https://packagist.org/packages/typo3/cms
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=8.0.0  <8.7.23"
  - ">=9.0.0  <9.5.4"
  severity: high
  package_manager: packagist
  cwe:
  - CWE-79
  disclosed_date: 2019-01-22
  created_date: 2019-01-22
  last_modified_date: 2019-01-22
  credit:
  - Edgar BodaMajer and Lauritz Holtmann
  references:
  - https://typo3.org/security/advisory/typo3-core-sa-2019-008/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMS-73590
- id: snykio:packagist:typo3/cms:73594
  title: Security Misconfiguration
  description: |
    [typo3/cms][1] is a free open source Content Management Framework.

    Affected versions of this package are vulnerable to Security
    Misconfiguration. When trying to change the type of an existing backend
    user, the backend form is reloaded in order to reflect changed
    configuration possibilities. This can lead to an account with empty
    credentials. This weakness cannot be directly exploited and requires
    interaction on purpose by some backend user having according privileges.



    [1]: https://packagist.org/packages/typo3/cms
  affected_package: typo3/cms
  vulnerable_versions:
  - ">=8.0.0  <8.7.23"
  - ">=9.0.0  <9.5.4"
  severity: high
  package_manager: packagist
  cwe:
  - CWE-288
  disclosed_date: 2019-01-22
  created_date: 2019-01-22
  last_modified_date: 2019-01-22
  credit:
  - Oliver Eglseder
  references:
  - https://github.com/TYPO3-CMS/core/commit/1e0c7a60be0f324e77cdbc2dadef46458e191d47
  - https://typo3.org/security/advisory/typo3-core-sa-2019-002/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3CMS-73594
