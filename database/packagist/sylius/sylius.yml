---
- id: friendsofphp:packagist:sylius/sylius:2018-07-09
  title: CSRF vulnerability in the admin panel
  affected_package: sylius/sylius
  vulnerable_versions:
  - ">=1.0.0 <1.0.17"
  - ">=1.1.0 <1.1.9"
  - ">=1.2.0 <1.2.2"
  package_manager: packagist
  disclosed_date: 2018-07-09
  created_date: 2018-07-09
  last_modified_date: 2018-07-09
  credit:
  - FriendsOfPHP
  references:
  - https://sylius.com/blog/csrf-vulnerability-in-admin-panel/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/sylius/sylius/2018-07-09.yaml
- id: friendsofphp:packagist:sylius/sylius:CVE-2019-12186
  title: 'CVE-2019-12186: XSS injection in the Grid component'
  affected_package: sylius/sylius
  vulnerable_versions:
  - ">=1.0.0 <1.1.0"
  - ">=1.1.0 <1.1.18"
  - ">=1.2.0 <1.2.17"
  - ">=1.3.0 <1.3.12"
  - ">=1.4.0 <1.4.4"
  package_manager: packagist
  cve:
  - CVE-2019-12186
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit:
  - FriendsOfPHP
  references:
  - https://sylius.com/blog/cve-2019-12186/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/sylius/sylius/CVE-2019-12186.yaml
- id: friendsofphp:packagist:sylius/sylius:CVE-2020-5220
  title: 'CVE-2020-5220: Ability to define unintended serialisation groups via HTTP
    header which might lead to data exposure'
  affected_package: sylius/sylius
  vulnerable_versions:
  - ">=1.0.0 <1.1.0"
  - ">=1.1.0 <1.2.0"
  - ">=1.2.0 <1.3.0"
  - ">=1.3.0 <1.3.12"
  - ">=1.4.0 <1.4.4"
  package_manager: packagist
  cve:
  - CVE-2020-5220
  disclosed_date: 2020-01-27
  created_date: 2020-01-27
  last_modified_date: 2020-01-27
  credit:
  - FriendsOfPHP
  references:
  - https://github.com/Sylius/SyliusResourceBundle/security/advisories/GHSA-8vp7-j5cj-vvm2
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/sylius/sylius/CVE-2020-5220.yaml
- id: snykio:packagist:sylius/sylius:1019461
  title: Access Restriction Bypass
  description: |
    [sylius/sylius][1] is a platform for PHP, based on Symfony framework.

    Affected versions of this package are vulnerable to Access Restriction
    Bypass. A user may register in a shop by email `mail@example.com`,
    verify it, change it to the mail `another@domain.com` and stay verified
    and enabled. This may lead to having accounts addressed to totally
    different emails, that were verified.



    [1]: https://packagist.org/packages/sylius/sylius
  affected_package: sylius/sylius
  vulnerable_versions:
  - "<1.6.9"
  - ">=1.7.0  <1.7.9"
  - ">=1.8.0  <1.8.3"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2020-15245
  cwe:
  - CWE-284
  disclosed_date: 2020-10-20
  created_date: 2020-10-20
  last_modified_date: 2020-10-20
  credit:
  - Mircea Silviu
  references:
  - https://github.com/Sylius/Sylius/security/advisories/GHSA-6gw4-x63h-5499
  source_url: https://snyk.io/vuln/SNYK-PHP-SYLIUSSYLIUS-1019461
- id: snykio:packagist:sylius/sylius:1056866
  title: Information Exposure
  description: |
    [sylius/sylius][1] is a platform for PHP, based on Symfony framework.

    Affected versions of this package are vulnerable to Information
    Exposure. An attacker can switch channels via the `_channel_code` GET
    parameter in production environments.



    [1]: https://packagist.org/packages/sylius/sylius
  affected_package: sylius/sylius
  vulnerable_versions:
  - "<1.3.16"
  - ">=1.4.0  <1.4.12"
  - ">=1.5  <1.5.9"
  - ">=1.6.0  <1.6.5"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2020-5218
  cwe:
  - CWE-200
  disclosed_date: 2020-01-31
  created_date: 2021-01-10
  last_modified_date: 2021-01-10
  credit:
  - Unknown
  references:
  - https://github.com/Sylius/Sylius/commit/197084f3cf19d9cc7b07686684a64b4237e5d90d
  source_url: https://snyk.io/vuln/SNYK-PHP-SYLIUSSYLIUS-1056866
- id: snykio:packagist:sylius/sylius:174768
  title: Cross-site Scripting (XSS)
  description: |+
    [sylius/sylius][1] is a platform for PHP, based on Symfony framework.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) via the Product reviews, Shipping methods or Tax rates grids
    through product name, zone name or tax category name.



    [1]: https://packagist.org/packages/sylius/sylius
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: sylius/sylius
  vulnerable_versions:
  - ">=1.0.0  <1.1.0"
  - ">=1.1.0  <1.1.18"
  - ">=1.2.0  <1.2.17"
  - ">=1.3.0  <1.3.12"
  - ">=1.4.0  <1.4.4"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2019-12186
  cwe:
  - CWE-79
  disclosed_date: 2019-05-22
  created_date: 2019-05-22
  last_modified_date: 2019-05-22
  credit:
  - Unknown
  references:
  - https://sylius.com/blog/cve-2019-12186/
  source_url: https://snyk.io/vuln/SNYK-PHP-SYLIUSSYLIUS-174768
- id: snykio:packagist:sylius/sylius:536839
  title: Information Exposure
  description: |
    [sylius/sylius][1] is a platform for PHP, based on Symfony framework.

    Affected versions of this package are vulnerable to Information
    Exposure. Exception messages from internal exceptions are wrapped by
    `\Symfony\Component\Security\Core\Exception\AuthenticationServiceException`
    and propagated through the system to UI allowing users to see system
    information.

    A validation message with the exception details will be presented to the
    user when one will try to log into the shop.



    [1]: https://packagist.org/packages/sylius/sylius
  affected_package: sylius/sylius
  vulnerable_versions:
  - "<1.3.14"
  - ">=1.4  <1.4.10"
  - ">=1.5  <1.5.7"
  - ">=1.6  <1.6.3"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2019-16768
  cwe:
  - CWE-200
  disclosed_date: 2019-12-05
  created_date: 2019-12-05
  last_modified_date: 2019-12-05
  credit:
  - Unknown
  references:
  - https://github.com/Sylius/Sylius/commit/19b2fe4a6cdb2186489221ea8b5e5628c8223286
  source_url: https://snyk.io/vuln/SNYK-PHP-SYLIUSSYLIUS-536839
- id: snykio:packagist:sylius/sylius:543315
  title: Information Exposure
  description: |
    [sylius/sylius][1] is a platform for PHP, based on Symfony framework.

    Affected versions of this package are vulnerable to Information
    Exposure. `ResourceBundle` accepts and uses any serialisation groups to
    be passed via a HTTP header. This might lead to data exposure by using
    an unintended serialisation group - for example it could make Shop API
    use a more permissive group from Admin API.



    [1]: https://packagist.org/packages/sylius/sylius
  affected_package: sylius/sylius
  vulnerable_versions:
  - "<1.3"
  - ">=1.3.0  <1.3.12"
  - ">=1.4.0  <1.4.5"
  - ">=1.5.0  <1.5.1"
  - ">=1.6.0  <1.6.3"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2020-5220
  cwe:
  - CWE-200
  disclosed_date: 2020-01-27
  created_date: 2020-01-27
  last_modified_date: 2020-01-27
  credit:
  - Unknown
  references:
  - https://github.com/Sylius/SyliusResourceBundle/security/advisories/GHSA-8vp7-j5cj-vvm2
  source_url: https://snyk.io/vuln/SNYK-PHP-SYLIUSSYLIUS-543315
- id: snykio:packagist:sylius/sylius:72226
  title: Cross-site Request Forgery (CSRF)
  description: |
    [sylius/sylius][1] is a E-Commerce platform for PHP, based on Symfony
    framework.

    Affected versions of this package are vulnerable to Cross-site Request
    Forgery (CSRF).



    [1]: https://packagist.org/packages/sylius/sylius
  affected_package: sylius/sylius
  vulnerable_versions:
  - ">=1.0.0  <1.0.17"
  - ">=1.1.0  <1.1.9"
  - ">=1.2.0  <1.2.2"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-352
  disclosed_date: 2018-07-09
  created_date: 2018-07-19
  last_modified_date: 2018-07-19
  credit:
  - Unknown
  references:
  - https://sylius.com/blog/csrf-vulnerability-in-admin-panel/
  source_url: https://snyk.io/vuln/SNYK-PHP-SYLIUSSYLIUS-72226
