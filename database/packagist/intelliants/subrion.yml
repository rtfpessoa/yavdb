---
- id: snykio:packagist:intelliants/subrion:1037285
  title: Cross-site Scripting (XSS)
  description: |+
    [intelliants/subrion][1] is an open source php content management
    system.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) via the `panel/phrases/` VALUE parameter.



    [1]: https://subrion.org/
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: intelliants/subrion
  vulnerable_versions:
  - ">0.0.0"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2019-7356
  cwe:
  - CWE-79
  disclosed_date: 2020-11-05
  created_date: 2020-11-05
  last_modified_date: 2020-11-05
  credit:
  - Unknown
  references:
  - https://github.com/ngpentest007/CVE-2019-7356/blob/main/Subrion_4.2.1%20-%20CVE-2019-7356.pdf
  source_url: https://snyk.io/vuln/SNYK-PHP-INTELLIANTSSUBRION-1037285
- id: snykio:packagist:intelliants/subrion:174621
  title: Cross-site Scripting (XSS)
  description: |+
    [intelliants/subrion][1] is a open source php content management system.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). The `name`, `email`, and `phone` parameter within the contact
    page (\_core/en/contacts/) were found to allow JavaScript to be
    inserted, which is reflected back within a user\'s browser without
    proper output encoding.



    [1]: https://subrion.org/
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: intelliants/subrion
  vulnerable_versions:
  - ">0.0.0"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2019-11406
  cwe:
  - CWE-79
  disclosed_date: 2019-05-08
  created_date: 2019-05-08
  last_modified_date: 2019-05-08
  credit:
  - alorfm
  references:
  - https://github.com/intelliants/subrion/issues/821
  source_url: https://snyk.io/vuln/SNYK-PHP-INTELLIANTSSUBRION-174621
- id: snykio:packagist:intelliants/subrion:451502
  title: Cross-site Scripting (XSS)
  description: |+
    [intelliants/subrion][1] is an open source php content management
    system.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) in `ia.admin.sitemap.php`.



    [1]: https://subrion.org/
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: intelliants/subrion
  vulnerable_versions:
  - "<4.1.4"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2018-11317
  cwe:
  - CWE-79
  disclosed_date: 2019-07-03
  created_date: 2019-07-03
  last_modified_date: 2019-07-03
  credit:
  - Unknown
  references:
  - https://github.com/intelliants/subrion/blob/610b21d3ff185bd287d55fe016d4266abf04a3bf/includes/classes/ia.admin.sitemap.php#L79-L83
  - https://github.com/intelliants/subrion/commit/5a7be7067970e10a9c869bfe7811613a8d714c9a
  - https://github.com/intelliants/subrion/releases/tag/v4.1.4
  source_url: https://snyk.io/vuln/SNYK-PHP-INTELLIANTSSUBRION-451502
- id: snykio:packagist:intelliants/subrion:471944
  title: Cross-site Scripting (XSS)
  description: |+
    [intelliants/subrion][1] is an open source php content management
    system.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) via the panel/members/ Username, Full Name, or Email fields.



    [1]: https://subrion.org/
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: intelliants/subrion
  vulnerable_versions:
  - ">=0.0.0"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2019-17225
  cwe:
  - CWE-79
  disclosed_date: 2019-10-06
  created_date: 2019-10-07
  last_modified_date: 2019-10-07
  credit:
  - Unknown
  references:
  - https://github.com/intelliants/subrion/issues/845
  - https://www.exploit-db.com/exploits/47469
  source_url: https://snyk.io/vuln/SNYK-PHP-INTELLIANTSSUBRION-471944
- id: snykio:packagist:intelliants/subrion:560574
  title: Cross-site Request Forgery (CSRF)
  description: |
    [intelliants/subrion][1] is an open source php content management
    system.

    Affected versions of this package are vulnerable to Cross-site Request
    Forgery (CSRF). The admin password can be changed via the
    `panel/members/edit/1` URI.



    [1]: https://subrion.org/
  affected_package: intelliants/subrion
  vulnerable_versions:
  - "<4.2.1"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2018-21037
  cwe:
  - CWE-352
  disclosed_date: 2020-03-17
  created_date: 2020-03-18
  last_modified_date: 2020-03-18
  credit:
  - TusharKdm
  references:
  - https://github.com/intelliants/subrion/issues/638
  source_url: https://snyk.io/vuln/SNYK-PHP-INTELLIANTSSUBRION-560574
- id: snykio:packagist:intelliants/subrion:567871
  title: Session Fixation
  description: |
    [intelliants/subrion][1] is an open source php content management
    system.

    Affected versions of this package are vulnerable to Session Fixation.
    Session fixation is possible via an alphanumeric value in a session
    cookie.



    [1]: https://subrion.org/
  affected_package: intelliants/subrion
  vulnerable_versions:
  - ">=0.0.0"
  severity: low
  package_manager: packagist
  cve:
  - CVE-2020-12467
  cwe:
  - CWE-384
  disclosed_date: 2020-04-29
  created_date: 2020-04-29
  last_modified_date: 2020-04-29
  credit:
  - Alessandro Magnosi
  references:
  - https://github.com/belong2yourself/vulnerabilities/tree/master/Subrion%20CMS/Session%20Fixation
  source_url: https://snyk.io/vuln/SNYK-PHP-INTELLIANTSSUBRION-567871
- id: snykio:packagist:intelliants/subrion:567874
  title: Deserialization of Untrusted Data
  description: |
    [intelliants/subrion][1] is a open source php content management system.

    Affected versions of this package are vulnerable to Deserialization of
    Untrusted Data in `admin/blocks.php` which allows PHP Object Injection
    (with resultant file deletion) via serialized data in the subpages value
    within a block to blocks/edit.



    [1]: https://subrion.org/
    \nSerialization is a process of converting an object into a sequence of
    bytes which can be persisted to a disk or database or can be sent
    through streams. The reverse process of creating object from sequence of
    bytes is called deserialization. Serialization is commonly used for
    communication (sharing objects between multiple hosts) and persistence
    (store the object state in a file or a database).

    *Deserialization of untrusted data* ([CWE-502][1]), is when the
    application deserializes untrusted data without sufficiently verifying
    that the resulting data will be valid, letting the attacker to control
    the state or the flow of the execution.

    An attacker just needs to identify a piece of software that has both a
    vulnerable class on its path, and performs deserialization on untrusted
    data. Then all they need to do is send the payload into the
    deserializer, getting the command executed.



    [1]: https://cwe.mitre.org/data/definitions/502.html
  affected_package: intelliants/subrion
  vulnerable_versions:
  - ">=0.0.0"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2020-12469
  cwe:
  - CWE-502
  disclosed_date: 2020-04-29
  created_date: 2020-04-29
  last_modified_date: 2020-04-29
  credit:
  - Unknown
  references:
  - https://github.com/belong2yourself/vulnerabilities/tree/master/Subrion%20CMS/Insecure%20Deserialization/Subpages%20-%20Authenticated%20PHP%20Object%20Injection
  source_url: https://snyk.io/vuln/SNYK-PHP-INTELLIANTSSUBRION-567874
- id: snykio:packagist:intelliants/subrion:567875
  title: CSV Injection
  description: |
    [intelliants/subrion][1] is an open source php content management
    system.

    Affected versions of this package are vulnerable to CSV Injection.
    Subrion CMS allows CSV injection via a phrase value within a language.
    This is related to `phrases/add/` and `languages/download/`.



    [1]: https://subrion.org/
  affected_package: intelliants/subrion
  vulnerable_versions:
  - ">=0.0.0"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2020-12468
  cwe:
  - CWE-20
  disclosed_date: 2020-04-29
  created_date: 2020-04-29
  last_modified_date: 2020-04-29
  credit:
  - Unknown
  references:
  - https://github.com/belong2yourself/vulnerabilities/tree/master/Subrion%20CMS/CSV%20Injection
  source_url: https://snyk.io/vuln/SNYK-PHP-INTELLIANTSSUBRION-567875
- id: snykio:packagist:intelliants/subrion:72261
  title: Improper Access Control
  description: |
    [intelliants/subrion][1] is a Powerful opensource content management
    system written in PHP5 + MySQL.

    Affected versions of this package are vulnerable to Improper Access
    Control. User who do not have access to the Admin panel are able to
    access it.



    [1]: https://packagist.org/packages/intelliants/subrion
  affected_package: intelliants/subrion
  vulnerable_versions:
  - ">=0.0.0"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2018-14836
  cwe:
  - CWE-284
  disclosed_date: 2018-07-14
  created_date: 2018-08-07
  last_modified_date: 2018-08-07
  credit:
  - Unknown
  references:
  - https://github.com/intelliants/subrion/issues/762
  source_url: https://snyk.io/vuln/SNYK-PHP-INTELLIANTSSUBRION-72261
- id: snykio:packagist:intelliants/subrion:72262
  title: Cross-site Scripting (XSS)
  description: |+
    [intelliants/subrion][1] is a Powerful opensource content management
    system written in PHP5 + MySQL.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks due to not blocking html file uploads.



    [1]: https://packagist.org/packages/intelliants/subrion
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: intelliants/subrion
  vulnerable_versions:
  - "<4.2.2"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2018-14840
  cwe:
  - CWE-79
  disclosed_date: 2018-08-02
  created_date: 2018-08-07
  last_modified_date: 2018-08-07
  credit:
  - Unknown
  references:
  - https://github.com/intelliants/subrion/commit/cb10ac2294cb2c3a6d2159f9a2bb8c58a2a10a47
  - https://github.com/intelliants/subrion/issues/773
  source_url: https://snyk.io/vuln/SNYK-PHP-INTELLIANTSSUBRION-72262
- id: snykio:packagist:intelliants/subrion:72263
  title: Cross-site Scripting (XSS)
  description: |+
    [intelliants/subrion][1] is a Powerful opensource content management
    system written in PHP5 + MySQL.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks due to not adding escaping to the tooltip information.



    [1]: https://packagist.org/packages/intelliants/subrion
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: intelliants/subrion
  vulnerable_versions:
  - ">=0.0.0"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2018-14835
  cwe:
  - CWE-79
  disclosed_date: 2018-08-02
  created_date: 2018-08-07
  last_modified_date: 2018-08-07
  credit:
  - Unknown
  references:
  - https://github.com/intelliants/subrion/issues/760
  - https://github.com/intelliants/subrion/pull/763/commits
  source_url: https://snyk.io/vuln/SNYK-PHP-INTELLIANTSSUBRION-72263
- id: snykio:packagist:intelliants/subrion:72288
  title: Cross-site Scripting (XSS)
  description: |+
    [intelliants/subrion][1] is a Powerful opensource content management
    system written in PHP5 + MySQL.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks via the admin panel URL configuration.



    [1]: https://packagist.org/packages/intelliants/subrion
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: intelliants/subrion
  vulnerable_versions:
  - "<=4.2.1"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2018-16327
  cwe:
  - CWE-79
  disclosed_date: 2018-08-18
  created_date: 2018-09-05
  last_modified_date: 2018-09-05
  credit:
  - Unknown
  references:
  - https://github.com/intelliants/subrion/commit/3aad26b6b17a316a267d31f3ac7840f05b88d0eb
  - https://github.com/intelliants/subrion/issues/771
  source_url: https://snyk.io/vuln/SNYK-PHP-INTELLIANTSSUBRION-72288
- id: snykio:packagist:intelliants/subrion:72629
  title: Arbitrary Code Execution
  description: |
    [intelliants/subrion][1] is an opensource content management system
    written in PHP5 + MySQL.

    Affected versions of this package are vulnerable to Arbitrary Code
    Execution. while uploading directory, The `.htaccess` file did not
    prevent execution of files that have `pht` or `phar` extensions.



    [1]: https://packagist.org/packages/intelliants/subrion
  affected_package: intelliants/subrion
  vulnerable_versions:
  - ">=0.0.0"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2018-19422
  cwe:
  - CWE-94
  disclosed_date: 2018-11-21
  created_date: 2018-11-22
  last_modified_date: 2018-11-22
  credit:
  - Unknown
  references:
  - https://github.com/intelliants/subrion/issues/801
  source_url: https://snyk.io/vuln/SNYK-PHP-INTELLIANTSSUBRION-72629
