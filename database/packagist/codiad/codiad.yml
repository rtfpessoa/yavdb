---
- id: ossindex:packagist:codiad/codiad:359545
  title: '[CVE-2013-7257]  Improper Neutralization of Input During Web Page Generation
    ("Cross-site Scripting")'
  description: Cross-site scripting (XSS) vulnerability in Codiad 2.0.7 allows remote
    attackers to inject arbitrary web script or HTML via the Project Name field.
  affected_package: codiad/codiad
  vulnerable_versions:
  - 2.0.7
  package_manager: packagist
  cve:
  - CVE-2013-7257
  disclosed_date: 2014-01-03
  created_date: 2014-01-03
  last_modified_date: 2016-12-31
  credit:
  - OSSIndex
  references:
  - http://osvdb.org/101484
  - http://packetstormsecurity.com/files/124537
  - http://www.securityfocus.com/bid/64476
  - http://xforce.iss.net/xforce/xfdb/89903
  - https://exchange.xforce.ibmcloud.com/vulnerabilities/89903
  - https://github.com/Codiad/Codiad/issues/584
  source_url: https://ossindex.net/resource/package/8397248743/vulnerabilities
- id: ossindex:packagist:codiad/codiad:366511
  title: '[CVE-2014-9581]  Improper Limitation of a Pathname to a Restricted Directory
    ("Path Traversal")'
  description: 'Directory traversal vulnerability in components/filemanager/download.php
    in Codiad 2.4.3 allows remote attackers to read arbitrary files via a .. (dot
    dot) in the path parameter.  NOTE: this issue was originally incorrectly mapped
    to CVE-2014-1137; see CVE-2014-1137 for more information.'
  affected_package: codiad/codiad
  vulnerable_versions:
  - 2.4.3
  package_manager: packagist
  cve:
  - CVE-2014-9581
  disclosed_date: 2015-01-08
  created_date: 2015-01-08
  last_modified_date: 2015-01-11
  credit:
  - OSSIndex
  references:
  - http://www.exploit-db.com/exploits/35585
  source_url: https://ossindex.net/resource/package/8397248743/vulnerabilities
- id: ossindex:packagist:codiad/codiad:366512
  title: '[CVE-2014-9582]  Improper Neutralization of Input During Web Page Generation
    ("Cross-site Scripting")'
  description: 'Cross-site scripting (XSS) vulnerability in components/filemanager/dialog.php
    in Codiad 2.4.3 allows remote attackers to inject arbitrary web script or HTML
    via the short_name parameter in a rename action.  NOTE: this issue was originally
    incorrectly mapped to CVE-2014-1137; see CVE-2014-1137 for more information.'
  affected_package: codiad/codiad
  vulnerable_versions:
  - 2.4.3
  package_manager: packagist
  cve:
  - CVE-2014-9582
  disclosed_date: 2015-01-08
  created_date: 2015-01-08
  last_modified_date: 2015-01-11
  credit:
  - OSSIndex
  references:
  - http://www.exploit-db.com/exploits/35585
  source_url: https://ossindex.net/resource/package/8397248743/vulnerabilities
- id: snykio:packagist:codiad/codiad:560364
  title: Arbitrary Code Execution
  description: |
    [codiad/codiad][1] is a web-based IDE framework with a small footprint
    and minimal requirements.

    Affected versions of this package are vulnerable to Arbitrary Code
    Execution. Allows PHP Code injection.



    [1]: https://github.com/Codiad/Codiad
  affected_package: codiad/codiad
  vulnerable_versions:
  - ">=0.0.0"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2019-19208
  cwe:
  - CWE-94
  disclosed_date: 2020-03-16
  created_date: 2020-03-16
  last_modified_date: 2020-03-16
  credit:
  - Tobias Neitzel of usd AG
  references:
  - https://herolab.usd.de/security-advisories/usd-2019-0049/
  source_url: https://snyk.io/vuln/SNYK-PHP-CODIADCODIAD-560364
- id: snykio:packagist:codiad/codiad:608665
  title: Cross-site Scripting (XSS)
  description: |+
    [codiad/codiad][1] is a web-based IDE framework with a small footprint
    and minimal requirements.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). The vulnerability occurs because of improper sanitization of the
    folder\'s name `$path` variable in
    `components/filemanager/class.filemanager.php`.



    [1]: https://github.com/Codiad/Codiad
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: codiad/codiad
  vulnerable_versions:
  - ">=0.0.0"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2020-14042
  cwe:
  - CWE-79
  disclosed_date: 2020-08-26
  created_date: 2020-08-26
  last_modified_date: 2020-08-26
  credit:
  - Unknown
  references:
  - https://github.com/Codiad/Codiad/blob/master/README.md
  - https://github.com/Codiad/Codiad/issues/1122
  source_url: https://snyk.io/vuln/SNYK-PHP-CODIADCODIAD-608665
- id: snykio:packagist:codiad/codiad:608686
  title: Server-side Request Forgery (SSRF)
  description: |
    [codiad/codiad][1] is a web-based IDE framework with a small footprint
    and minimal requirements.

    Affected versions of this package are vulnerable to Server-side Request
    Forgery (SSRF). An attacker with admin privileges can trigger a download
    of an arbitrary zip file, which will be extracted.



    [1]: https://github.com/Codiad/Codiad
  affected_package: codiad/codiad
  vulnerable_versions:
  - ">=0.0.0"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2020-14044
  cwe:
  - CWE-918
  disclosed_date: 2020-08-26
  created_date: 2020-08-26
  last_modified_date: 2020-08-26
  credit:
  - Unknown
  references:
  - https://github.com/Codiad/Codiad/issues/1122
  source_url: https://snyk.io/vuln/SNYK-PHP-CODIADCODIAD-608686
- id: snykio:packagist:codiad/codiad:608687
  title: Cross-site Request Forgery (CSRF)
  description: |
    [codiad/codiad][1] is a web-based IDE framework with a small footprint
    and minimal requirements.

    Affected versions of this package are vulnerable to Cross-site Request
    Forgery (CSRF). `Market` requests do not have a CSRF token. An admin
    visiting other malicious website can give the attacker full server
    control.



    [1]: https://github.com/Codiad/Codiad
  affected_package: codiad/codiad
  vulnerable_versions:
  - ">=0.0.0"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2020-14043
  cwe:
  - CWE-352
  disclosed_date: 2020-08-26
  created_date: 2020-08-26
  last_modified_date: 2020-08-26
  credit:
  - Unknown
  references:
  - https://github.com/Codiad/Codiad/issues/1122
  source_url: https://snyk.io/vuln/SNYK-PHP-CODIADCODIAD-608687
- id: snykio:packagist:codiad/codiad:72068
  title: Arbitrary File Write
  description: |
    [codiad/codiad][1] is a web-based IDE framework.

    Affected versions of this package are vulnerable to Arbitrary File
    Write. An attacker may be able to write to the configuration file during
    the installation, which can result in uploading a webshell.



    [1]: https://github.com/Codiad/Codiad
  affected_package: codiad/codiad
  vulnerable_versions:
  - ">=0.0.0"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2017-1000125
  cwe:
  - CWE-626
  disclosed_date: 2017-07-19
  created_date: 2018-02-27
  last_modified_date: 2018-02-27
  credit:
  - Unknown
  references:
  - https://nvd.nist.gov/vuln/detail/CVE-2017-1000125
  source_url: https://snyk.io/vuln/SNYK-PHP-CODIADCODIAD-72068
