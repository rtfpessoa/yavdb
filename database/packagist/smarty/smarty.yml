---
- id: friendsofphp:packagist:smarty/smarty:CVE-2018-13982
  title: Trusted-Directory Bypass via Path Traversal
  affected_package: smarty/smarty
  vulnerable_versions:
  - "<3.1.33"
  package_manager: packagist
  cve:
  - CVE-2018-13982
  disclosed_date: 2018-04-26
  created_date: 2018-04-26
  last_modified_date: 2018-04-26
  credit:
  - FriendsOfPHP
  references:
  - https://github.com/sbaresearch/advisories/tree/public/2018/SBA-ADV-20180420-01_Smarty_Path_Traversal
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/smarty/smarty/CVE-2018-13982.yaml
- id: snykio:packagist:smarty/smarty:1019379
  title: Directory Traversal
  description: |
    Affected versions of this package are vulnerable to Directory Traversal.
    It is possible for attackers to bypass the `trusted_dir` protection
    mechanism via a `file:./../ substring` in an include statement.

    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
  affected_package: smarty/smarty
  vulnerable_versions:
  - "<3.1.33"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2018-16831
  cwe:
  - CWE-22
  disclosed_date: 2020-10-19
  created_date: 2020-10-19
  last_modified_date: 2020-10-19
  credit:
  - Unknown
  references:
  - https://github.com/smarty-php/smarty/issues/486
  source_url: https://snyk.io/vuln/SNYK-PHP-SMARTYSMARTY-1019379
- id: snykio:packagist:smarty/smarty:72032
  title: Arbitrary Code Injection
  description: |
    [smarty/smarty][1] is a compiling PHP template engine.

    Affected versions of this package are vulnerable to Arbitrary Code
    Injection, when calling `fetch()` or `display()` functions on custom
    resources that does not sanitize template name.



    [1]: https://packagist.org/packages/smarty/smarty
  affected_package: smarty/smarty
  vulnerable_versions:
  - "<3.1.32"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2017-1000480
  cwe:
  - CWE-94
  disclosed_date: 2018-01-03
  created_date: 2018-02-18
  last_modified_date: 2018-02-18
  credit:
  - Unknown
  references:
  - https://github.com/smarty-php/smarty/blob/master/change_log.txt
  - https://nvd.nist.gov/vuln/detail/CVE-2017-1000480
  source_url: https://snyk.io/vuln/SNYK-PHP-SMARTYSMARTY-72032
- id: snykio:packagist:smarty/smarty:72360
  title: Directory Traversal
  description: |
    [smarty/smarty][1] is the compiling PHP template engine.

    Affected versions of this package are vulnerable to Directory Traversal
    via the `trusted_dir` protection mechanism.



    [1]: https://packagist.org/packages/smarty/smarty
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
  affected_package: smarty/smarty
  vulnerable_versions:
  - "<3.1.33"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2018-16831
  cwe:
  - CWE-22
  disclosed_date: 2018-04-26
  created_date: 2018-09-11
  last_modified_date: 2018-09-11
  credit:
  - Unknown
  references:
  - https://github.com/smarty-php/smarty/commit/c9dbe1d08c081912d02bd851d1d1b6388f6133d1
  - https://github.com/smarty-php/smarty/issues/486
  source_url: https://snyk.io/vuln/SNYK-PHP-SMARTYSMARTY-72360
- id: snykio:packagist:smarty/smarty:72378
  title: Directory Traversal
  description: |
    [smarty/smarty][1] is the compiling PHP template engine.

    Affected versions of this package are vulnerable to Directory Traversal
    due to insufficient template code sanitization. An attacker controlling
    the executed template code could read arbitrary files accessible by the
    webserver.



    [1]: https://packagist.org/packages/smarty/smarty
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
  affected_package: smarty/smarty
  vulnerable_versions:
  - "<3.1.33"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2018-13982
  cwe:
  - CWE-22
  disclosed_date: 2018-09-17
  created_date: 2018-09-20
  last_modified_date: 2018-09-20
  credit:
  - Unknown
  references:
  - https://github.com/sbaresearch/advisories/tree/public/2018/SBA-ADV-20180420-01_Smarty_Path_Traversal
  - https://github.com/smarty-php/smarty/commit/f9ca3c63d1250bb56b2bda609dcc9dd81f0065f8
  source_url: https://snyk.io/vuln/SNYK-PHP-SMARTYSMARTY-72378
