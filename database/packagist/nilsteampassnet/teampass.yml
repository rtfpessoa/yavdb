---
- id: snykio:packagist:nilsteampassnet/teampass:458622
  title: Cross-site Scripting (XSS)
  description: |+
    [nilsteampassnet/teampass][1] is a password manager.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). In the `sources/items.queries.php` the `Import items` feature, it
    is possible to load a crafted CSV file with a malicious payload.



    [1]: https://teampass.net/
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: nilsteampassnet/teampass
  vulnerable_versions:
  - "<2.1.27.36"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2019-12950
  cwe:
  - CWE-79
  disclosed_date: 2019-08-06
  created_date: 2019-08-07
  last_modified_date: 2019-08-07
  credit:
  - swan'i
  references:
  - https://github.com/nilsteampassnet/TeamPass/issues/2638
  - https://github.com/nilsteampassnet/TeamPass/releases
  source_url: https://snyk.io/vuln/SNYK-PHP-NILSTEAMPASSNETTEAMPASS-458622
- id: snykio:packagist:nilsteampassnet/teampass:469233
  title: Cross-site Scripting (XSS)
  description: |+
    [nilsteampassnet/teampass][1] is a password manager.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). None



    [1]: https://teampass.net/
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: nilsteampassnet/teampass
  vulnerable_versions:
  - ">=0.0.0"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2019-16904
  cwe:
  - CWE-79
  disclosed_date: 2019-09-25
  created_date: 2019-09-27
  last_modified_date: 2019-09-27
  credit:
  - swan'i
  references:
  - https://github.com/nilsteampassnet/TeamPass/issues/2685
  source_url: https://snyk.io/vuln/SNYK-PHP-NILSTEAMPASSNETTEAMPASS-469233
- id: snykio:packagist:nilsteampassnet/teampass:471935
  title: Cross-site Scripting (XSS)
  description: |+
    [nilsteampassnet/TeamPass][1] is a Passwords Manager dedicated for
    managing passwords in a collaborative way.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) due to not sanitising a payload placed in the username field
    during a login attempt. When an administrator looks at the log of failed
    logins, the XSS payload will be executed.



    [1]: https://packagist.org/packages/nilsteampassnet/TeamPass
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: nilsteampassnet/teampass
  vulnerable_versions:
  - ">=0.0.0"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2019-17205
  cwe:
  - CWE-79
  disclosed_date: 2019-10-05
  created_date: 2019-10-05
  last_modified_date: 2019-10-05
  credit:
  - Unknown
  references:
  - https://github.com/nilsteampassnet/TeamPass/issues/2688
  source_url: https://snyk.io/vuln/SNYK-PHP-NILSTEAMPASSNETTEAMPASS-471935
- id: snykio:packagist:nilsteampassnet/teampass:471937
  title: Cross-site Scripting (XSS)
  description: |+
    [nilsteampassnet/TeamPass][1] is a Passwords Manager dedicated for
    managing passwords in a collaborative way.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) by setting a crafted Knowledge Base label and adding any available
    item.



    [1]: https://packagist.org/packages/nilsteampassnet/TeamPass
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: nilsteampassnet/teampass
  vulnerable_versions:
  - ">=0.0.0"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2019-17203
  - CVE-2019-17204
  cwe:
  - CWE-79
  disclosed_date: 2019-10-05
  created_date: 2019-10-06
  last_modified_date: 2019-10-06
  credit:
  - Unknown
  references:
  - https://github.com/nilsteampassnet/TeamPass/issues/2689
  source_url: https://snyk.io/vuln/SNYK-PHP-NILSTEAMPASSNETTEAMPASS-471937
- id: snykio:packagist:nilsteampassnet/teampass:567869
  title: Access Restriction Bypass
  description: |
    [nilsteampassnet/teampass][1] is a password manager.

    Affected versions of this package are vulnerable to Access Restriction
    Bypass. The REST API functions in TeamPass allows any user with a valid
    API token to bypass IP address whitelist restrictions via an
    X-Forwarded-For client HTTP header to the getIp function.



    [1]: https://teampass.net/
  affected_package: nilsteampassnet/teampass
  vulnerable_versions:
  - ">=0.0.0"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2020-12477
  cwe:
  - CWE-264
  disclosed_date: 2020-04-29
  created_date: 2020-04-29
  last_modified_date: 2020-04-29
  credit:
  - Unknown
  references:
  - https://github.com/nilsteampassnet/TeamPass/issues/2761
  source_url: https://snyk.io/vuln/SNYK-PHP-NILSTEAMPASSNETTEAMPASS-567869
- id: snykio:packagist:nilsteampassnet/teampass:567870
  title: Local File Inclusion
  description: |
    [nilsteampassnet/teampass][1] is a password manager.

    Affected versions of this package are vulnerable to Local File
    Inclusion. TeamPassallows any authenticated TeamPass user to trigger a
    PHP file include vulnerability via a crafted HTTP request with
    sources`/users.queries.php newValue` directory traversal.



    [1]: https://teampass.net/
  affected_package: nilsteampassnet/teampass
  vulnerable_versions:
  - ">=0.0.0"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2020-12479
  cwe:
  - CWE-73
  disclosed_date: 2020-04-29
  created_date: 2020-04-29
  last_modified_date: 2020-04-29
  credit:
  - Unknown
  references:
  - https://github.com/nilsteampassnet/TeamPass/issues/2762
  source_url: https://snyk.io/vuln/SNYK-PHP-NILSTEAMPASSNETTEAMPASS-567870
- id: snykio:packagist:nilsteampassnet/teampass:567878
  title: Unauthorized File Access
  description: |
    [nilsteampassnet/teampass][1] is a password manager.

    Affected versions of this package are vulnerable to Unauthorized File
    Access. It allows an unauthenticated attacker to retrieve files from the
    web root. This may include backups or LDAP debug files.



    [1]: https://teampass.net/
  affected_package: nilsteampassnet/teampass
  vulnerable_versions:
  - ">=0.0.0"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2020-12478
  cwe:
  - CWE-552
  disclosed_date: 2020-04-29
  created_date: 2020-04-29
  last_modified_date: 2020-04-29
  credit:
  - Unknown
  references:
  - https://github.com/nilsteampassnet/TeamPass/issues/2764
  source_url: https://snyk.io/vuln/SNYK-PHP-NILSTEAMPASSNETTEAMPASS-567878
- id: snykio:packagist:nilsteampassnet/teampass:70401
  title: Cross-site Scripting (XSS)
  description: |+
    [nilsteampassnet/teampass][1] is a Collaborative Passwords Manager.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). It allows authenticated remote attackers to inject arbitrary web
    script or HTML via the (1) URL value of an item or (2) user log history.
    To exploit the vulnerability, the attacker must be first authenticated
    to the application. For the first one, the attacker has to simply inject
    XSS code within the URL field of a shared item. For the second one
    however, the attacker must prepare a payload within its profile, and
    then ask an administrator to modify its profile. From there, whenever
    the administrator accesses the log, it can be XSS\'ed.



    [1]: https://github.com/nilsteampassnet/teampass
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: nilsteampassnet/teampass
  vulnerable_versions:
  - "<2.1.27.9"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2017-15051
  cwe:
  - CWE-79
  disclosed_date: 2017-11-27
  created_date: 2018-02-27
  last_modified_date: 2018-02-27
  credit:
  - Unknown
  references:
  - https://github.com/nilsteampassnet/teampass/commit/5f16f6bb132138ee04eb1e0debf2bdc7d7b7a15f
  - https://nvd.nist.gov/vuln/detail/CVE-2017-15051
  source_url: https://snyk.io/vuln/SNYK-PHP-NILSTEAMPASSNETTEAMPASS-70401
- id: snykio:packagist:nilsteampassnet/teampass:72066
  title: Access Restriction Bypass
  description: |
    [nilsteampassnet/teampass][1] is a Collaborative Passwords Manager.

    Affected versions of this package are vulnerable to Access Restriction
    Bypass.It does not properly enforce item access control when requesting
    `items.queries.php.` It is then possible to copy any arbitrary item into
    a directory controlled by the attacker. To exploit the vulnerability, an
    authenticated attacker must tamper with the requests sent directly, for
    example by changing the `item_id` parameter when invoking `copy_item` on
    `items.queries.php`.



    [1]: https://github.com/nilsteampassnet/teampass
  affected_package: nilsteampassnet/teampass
  vulnerable_versions:
  - "<2.1.27.9"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2017-15055
  cwe:
  - CWE-284
  disclosed_date: 2017-09-30
  created_date: 2018-02-27
  last_modified_date: 2018-02-27
  credit:
  - Unknown
  references:
  - http://blog.amossys.fr/teampass-multiple-cve-01.html
  - https://github.com/nilsteampassnet/teampass/commit/5f16f6bb132138ee04eb1e0debf2bdc7d7b7a15f
  - https://nvd.nist.gov/vuln/detail/CVE-2017-15055
  source_url: https://snyk.io/vuln/SNYK-PHP-NILSTEAMPASSNETTEAMPASS-72066
- id: snykio:packagist:nilsteampassnet/teampass:72074
  title: Cross-site Scripting (XSS)
  description: |+
    [nilsteampassnet/teampass][1] is a Collaborative Passwords Manager.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) due to insufficient filtration of data in
    `/sources/folders.queries.php`. An attacker could execute arbitrary HTML
    and script code in a browser in the context of the vulnerable website.



    [1]: https://github.com/nilsteampassnet/teampass
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: nilsteampassnet/teampass
  vulnerable_versions:
  - "<2.1.27.9"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2017-15278
  cwe:
  - CWE-79
  disclosed_date: 2017-01-11
  created_date: 2018-02-27
  last_modified_date: 2018-02-27
  credit:
  - Unknown
  references:
  - https://github.com/nilsteampassnet/teampass/commit/f5a765381f051fe624386866ddb1f6b5e7eb929b
  - https://github.com/nilsteampassnet/teampass/releases/tag/2.1.27.9
  - https://nvd.nist.gov/vuln/detail/CVE-2017-15278
  source_url: https://snyk.io/vuln/SNYK-PHP-NILSTEAMPASSNETTEAMPASS-72074
- id: snykio:packagist:nilsteampassnet/teampass:72075
  title: Access Restriction Bypass
  description: |
    [nilsteampassnet/teampass][1] is a Collaborative Passwords Manager.

    Affcted versions of this package are vulnerable to Access Restriction
    Bypass. It does not properly enforce manager access control when
    requesting `users.queries.php`. It is then possible for a manager user
    to delete an arbitrary user (including admin), or modify attributes of
    any arbitrary user except administrator. To exploit the vulnerability,
    an authenticated attacker must have the manager rights on the
    application, then tamper with the requests sent directly, for example by
    changing the \"id\" parameter when invoking \"delete\_user\" on
    `users.queries.php`.



    [1]: https://github.com/nilsteampassnet/teampass/blob/master/composer.json
  affected_package: nilsteampassnet/teampass
  vulnerable_versions:
  - "<2.1.27.9"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2017-15052
  cwe:
  - CWE-284
  disclosed_date: 2017-11-27
  created_date: 2018-02-27
  last_modified_date: 2018-02-27
  credit:
  - Unknown
  references:
  - https://github.com/nilsteampassnet/teampass/commit/8f2d51dd6c24f76e4f259d0df22cff9b275f2dd1
  - https://nvd.nist.gov/vuln/detail/CVE-2017-15052
  source_url: https://snyk.io/vuln/SNYK-PHP-NILSTEAMPASSNETTEAMPASS-72075
- id: snykio:packagist:nilsteampassnet/teampass:72076
  title: Access Restriction Bypass
  description: |
    [nilsteampassnet/teampass][1] is a Collaborative Passwords Manager.

    Affected versions of this package are vulnerable to Access Restriction
    Bypass. When requesting `roles.queries.php.` It is then possible for a
    manager user to modify any arbitrary roles within the application, or
    delete any arbitrary role. To exploit the vulnerability, an
    authenticated attacker must have the manager rights on the application,
    then tamper with the requests sent directly, for example by changing the
    \"id\" parameter when invoking \"delete\_role\" on `roles.queries.php`.



    [1]: https://github.com/nilsteampassnet/teampass
  affected_package: nilsteampassnet/teampass
  vulnerable_versions:
  - "<2.1.27.9"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2017-15053
  cwe:
  - CWE-284
  disclosed_date: 2017-10-04
  created_date: 2018-02-05
  last_modified_date: 2018-02-05
  credit:
  - Unknown
  references:
  - http://blog.amossys.fr/teampass-multiple-cve-01.html
  - https://github.com/nilsteampassnet/teampass/commit/ef32e9c28b6ddc33cee8a25255bc8da54434af3e
  - https://nvd.nist.gov/vuln/detail/CVE-2017-15053
  source_url: https://snyk.io/vuln/SNYK-PHP-NILSTEAMPASSNETTEAMPASS-72076
- id: snykio:packagist:nilsteampassnet/teampass:72077
  title: Arbitrary File Upload
  description: |
    [nilsteampassnet/teampass][1] is a Collaborative Passwords Manager.

    Affected versions of this package are vulnerable to Arbitrary File
    Upload. It allows remote authenticated users to upload arbitrary files
    leading to Remote Command Execution. To exploit this vulnerability, an
    authenticated attacker has to tamper with parameters of a request to
    `upload.files.php`, in order to select the correct branch and be able to
    upload any arbitrary file. From there, it can simply access the file to
    execute code on the server.



    [1]: https://github.com/nilsteampassnet/teampass
  affected_package: nilsteampassnet/teampass
  vulnerable_versions:
  - "<2.1.27.9"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2017-15054
  cwe:
  - CWE-434
  disclosed_date: 2017-10-02
  created_date: 2018-02-27
  last_modified_date: 2018-02-27
  credit:
  - Unknown
  references:
  - http://blog.amossys.fr/teampass-multiple-cve-01.html
  - https://github.com/nilsteampassnet/teampass/commit/9811c9d453da4bd1101ff7033250d1fbedf101fc
  source_url: https://snyk.io/vuln/SNYK-PHP-NILSTEAMPASSNETTEAMPASS-72077
