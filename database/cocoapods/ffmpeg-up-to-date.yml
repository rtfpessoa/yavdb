---
- id: snykio:cocoapods:ffmpeg-up-to-date:470713
  title: Out-of-Bounds
  description: |
    [FFmpeg-up-to-date][1] is a FFmpeg static libraries compiled for iOS

    Affected versions of this package are vulnerable to Out-of-Bounds. A
    malicious user can pass a malicious mpeg4 file to the system to cause an
    out-of-bounds array read which can crash the system.



    [1]: https://github.com/Arlem/FFmpeg-iOS
  affected_package: ffmpeg-up-to-date
  vulnerable_versions:
  - "<2.8.3"
  severity: high
  package_manager: cocoapods
  cve:
  - CVE-2015-8661
  cwe:
  - CWE-119
  disclosed_date: 2015-12-23
  created_date: 2019-10-02
  last_modified_date: 2019-10-02
  credit:
  - Unknown
  references:
  - http://git.videolan.org/?p=ffmpeg.git;a=commit;h=4ea4d2f438c9a7eba37980c9a87be4b34943e4d5
  - https://security-tracker.debian.org/tracker/CVE-2015-8661
  source_url: https://snyk.io/vuln/SNYK-COCOAPODS-FFMPEGUPTODATE-470713
- id: snykio:cocoapods:ffmpeg-up-to-date:470729
  title: Out-of-Bounds
  description: |
    [FFmpeg-up-to-date][1] is a FFmpeg static libraries compiled for iOS

    Affected versions of this package are vulnerable to Out-of-Bounds. A
    heap-based buffer overflow in `libavformat/rtmppkt.c` is caused by the
    failure to check for RTMP packet size mismatches. The resulted buffer
    overflow can be exploited by aligning chunks and by using a
    white-what-where condition to launch RCE.



    [1]: https://github.com/Arlem/FFmpeg-iOS
  affected_package: ffmpeg-up-to-date
  vulnerable_versions:
  - "<2.8.3"
  severity: high
  package_manager: cocoapods
  cve:
  - CVE-2016-10191
  cwe:
  - CWE-119
  disclosed_date: 2016-12-06
  created_date: 2019-10-02
  last_modified_date: 2019-10-02
  credit:
  - Unknown
  references:
  - http://www.openwall.com/lists/oss-security/2017/01/31/12
  - https://github.com/FFmpeg/FFmpeg/commit/7d57ca4d9a75562fa32e40766211de150f8b3ee7
  source_url: https://snyk.io/vuln/SNYK-COCOAPODS-FFMPEGUPTODATE-470729
- id: snykio:cocoapods:ffmpeg-up-to-date:470749
  title: Out-of-Bounds
  description: |
    [FFmpeg-up-to-date][1] is a FFmpeg static libraries compiled for iOS

    Affected versions of this package are vulnerable to Out-of-Bounds. A
    malicious user can pass malicious mov file to the system to cause a
    out-of-bounds array access, crashing the system.



    [1]: https://github.com/Arlem/FFmpeg-iOS
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package][1]



    [1]: https://snyk.io/vuln/npm:ws:20171108
  affected_package: ffmpeg-up-to-date
  vulnerable_versions:
  - ">=0.0.0"
  severity: high
  package_manager: cocoapods
  cve:
  - CVE-2015-8663
  cwe:
  - CWE-119
  disclosed_date: 2015-12-23
  created_date: 2019-10-02
  last_modified_date: 2019-10-02
  credit:
  - Unknown
  references:
  - http://git.videolan.org/?p=ffmpeg.git;a=commit;h=abee0a1c60612e8638640a8a3738fffb65e16dbf
  - http://lists.opensuse.org/opensuse-security-announce/2016-01/msg00004.html
  source_url: https://snyk.io/vuln/SNYK-COCOAPODS-FFMPEGUPTODATE-470749
- id: snykio:cocoapods:ffmpeg-up-to-date:470770
  title: Out-of-Bounds
  description: |
    [FFmpeg-up-to-date][1] is a FFmpeg static libraries compiled for iOS

    Affected versions of this package are vulnerable to Out-of-Bounds. A
    malicious user can pass a malicious JPEG2000 file to the system that can
    cause an out-of-bounds array read that can crash the system.



    [1]: https://github.com/Arlem/FFmpeg-iOS
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package][1]



    [1]: https://snyk.io/vuln/npm:ws:20171108
  affected_package: ffmpeg-up-to-date
  vulnerable_versions:
  - ">=0.0.0"
  severity: high
  package_manager: cocoapods
  cve:
  - CVE-2015-8662
  cwe:
  - CWE-119
  disclosed_date: 2015-12-23
  created_date: 2019-11-27
  last_modified_date: 2019-11-27
  credit:
  - Unknown
  references:
  - http://git.videolan.org/?p=ffmpeg.git;a=commit;h=75422280fbcdfbe9dc56bde5525b4d8b280f1bc5
  - http://www.securitytracker.com/id/1034539
  source_url: https://snyk.io/vuln/SNYK-COCOAPODS-FFMPEGUPTODATE-470770
- id: snykio:cocoapods:ffmpeg-up-to-date:470845
  title: Out-of-Bounds
  description: |
    [FFmpeg-up-to-date][1] is a FFmpeg static libraries compiled for iOS

    Affected versions of this package are vulnerable to Out-of-Bounds.
    FFmpeg is vulnerable to denial of service (DoS) attacks. A malicious
    user can pass a malicious jpeg file to the system to cause an
    out-of-bounds heap-memory access which can cause the system to crash.



    [1]: https://github.com/Arlem/FFmpeg-iOS
  affected_package: ffmpeg-up-to-date
  vulnerable_versions:
  - "<2.4.12"
  - ">=2.5.0  <2.5.9"
  - ">=2.6.0  <2.6.5"
  - ">=2.7.0  <2.7.3"
  - ">=2.8.0  <2.8.3"
  severity: medium
  package_manager: cocoapods
  cve:
  - CVE-2015-8363
  cwe:
  - CWE-119
  disclosed_date: 2015-11-26
  created_date: 2019-10-02
  last_modified_date: 2019-10-02
  credit:
  - Unknown
  references:
  - http://git.videolan.org/?p=ffmpeg.git;a=commit;h=44a7f17d0b20e6f8d836b2957e3e357b639f19a2
  - http://lists.opensuse.org/opensuse-updates/2015-12/msg00118.html
  - https://lists.debian.org/debian-lts-announce/2018/12/msg00009.html
  source_url: https://snyk.io/vuln/SNYK-COCOAPODS-FFMPEGUPTODATE-470845
- id: snykio:cocoapods:ffmpeg-up-to-date:470856
  title: Numeric Errors
  description: |
    [FFmpeg-up-to-date][1] is a FFmpeg static libraries compiled for iOS

    Affected versions of this package are vulnerable to Numeric Errors.
    FFmpeg is vulnerable to denial of service (DoS) attacks. A malicious
    user can pass an Indeo Video file to the system to cause an integer
    overflow that can lead to the system crashing.



    [1]: https://github.com/Arlem/FFmpeg-iOS
  affected_package: ffmpeg-up-to-date
  vulnerable_versions:
  - "<2.4.12"
  - ">=2.5.0  <2.5.9"
  - ">=2.6.0  <2.6.5"
  - ">=2.7.0  <2.7.3"
  - ">=2.8.0  <2.8.3"
  severity: medium
  package_manager: cocoapods
  cve:
  - CVE-2015-8364
  cwe:
  - CWE-189
  disclosed_date: 2015-11-14
  created_date: 2019-10-02
  last_modified_date: 2019-10-02
  credit:
  - Unknown
  references:
  - http://git.videolan.org/?p=ffmpeg.git;a=commit;h=df91aa034b82b77a3c4e01791f4a2b2ff6c82066
  - http://lists.opensuse.org/opensuse-updates/2015-12/msg00118.html
  - https://www.ffmpeg.org/security.html
  source_url: https://snyk.io/vuln/SNYK-COCOAPODS-FFMPEGUPTODATE-470856
- id: snykio:cocoapods:ffmpeg-up-to-date:470858
  title: Denial of Service (DoS)
  description: |
    [FFmpeg-up-to-date][1] is a FFmpeg static libraries compiled for iOS

    Affected versions of this package are vulnerable to Denial of Service
    (DoS). The library does not properly calculate the buffer size, allowing
    a malicious user to pass a malicious `tga` file to cause an
    out-of-bounds array access that can lead to the system crashing.



    [1]: https://github.com/Arlem/FFmpeg-iOS
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package][1]



    [1]: https://snyk.io/vuln/npm:ws:20171108
  affected_package: ffmpeg-up-to-date
  vulnerable_versions:
  - ">=0.0.0"
  severity: high
  package_manager: cocoapods
  cve:
  - CVE-2016-2330
  cwe:
  - CWE-119
  disclosed_date: 2016-02-11
  created_date: 2019-10-02
  last_modified_date: 2019-10-02
  credit:
  - Unknown
  references:
  - http://git.videolan.org/?p=ffmpeg.git;a=commit;h=03d83ba34b2070878909eae18dfac0f519503777
  - http://www.securityfocus.com/bid/84217
  - http://www.securitytracker.com/id/1035010
  - https://security.gentoo.org/glsa/201606-09
  source_url: https://snyk.io/vuln/SNYK-COCOAPODS-FFMPEGUPTODATE-470858
- id: snykio:cocoapods:ffmpeg-up-to-date:470859
  title: Denial of Service (DoS)
  description: |
    [FFmpeg-up-to-date][1] is a FFmpeg static libraries compiled for iOS

    Affected versions of this package are vulnerable to Denial of Service
    (DoS). A malicious user can pass a malicious .avi file to the system,
    causing an out of bounds array access that can lead to the system
    crashing.



    [1]: https://github.com/Arlem/FFmpeg-iOS
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package][1]



    [1]: https://snyk.io/vuln/npm:ws:20171108
  affected_package: ffmpeg-up-to-date
  vulnerable_versions:
  - ">=0.0.0"
  severity: high
  package_manager: cocoapods
  cve:
  - CVE-2016-2327
  cwe:
  - CWE-119
  disclosed_date: 2016-02-12
  created_date: 2019-10-21
  last_modified_date: 2019-10-21
  credit:
  - Unknown
  references:
  - http://git.videolan.org/?p=ffmpeg.git;a=commit;h=7ec9c5ce8a753175244da971fed9f1e25aef7971
  - http://git.videolan.org/?p=ffmpeg.git;a=commit;h=8f4c3e4b92212d98f5b9ca2dee13e076effe9589
  - http://www.securitytracker.com/id/1035010
  - https://security.gentoo.org/glsa/201606-09
  source_url: https://snyk.io/vuln/SNYK-COCOAPODS-FFMPEGUPTODATE-470859
- id: snykio:cocoapods:ffmpeg-up-to-date:470860
  title: Out-of-Bounds
  description: |
    [FFmpeg-up-to-date][1] is a FFmpeg static libraries compiled for iOS

    Affected versions of this package are vulnerable to Out-of-Bounds.
    FFmpeg is vulnerable to denial of service (DoS) attacks. A malicious
    user can pass a malicious .cine file to the system, causing a
    out-of-bounds array read which can lead to the system crashing.



    [1]: https://github.com/Arlem/FFmpeg-iOS
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package][1]



    [1]: https://snyk.io/vuln/npm:ws:20171108
  affected_package: ffmpeg-up-to-date
  vulnerable_versions:
  - ">=2.8.2"
  severity: high
  package_manager: cocoapods
  cve:
  - CVE-2016-2328
  cwe:
  - CWE-119
  disclosed_date: 2016-02-12
  created_date: 2019-10-02
  last_modified_date: 2019-10-02
  credit:
  - Unknown
  references:
  - http://git.videolan.org/?p=ffmpeg.git;a=commit;h=ad3b6fa7d83db7de951ed891649af93a47e74be5
  - http://www.securitytracker.com/id/1035010
  source_url: https://snyk.io/vuln/SNYK-COCOAPODS-FFMPEGUPTODATE-470860
- id: snykio:cocoapods:ffmpeg-up-to-date:470917
  title: Denial of Service (DoS)
  description: "[FFmpeg-up-to-date][1] is a FFmpeg static libraries compiled for iOS\n\nAffected
    versions of this package are vulnerable to Denial of Service\n(DoS). A malicious
    user can pass a smacker video file to the system that\ncan cause an out-of-bounds
    array access that can cause the system to\ncrash.\n\n\n\n[1]: https://github.com/Arlem/FFmpeg-iOS\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n{: .language-js}\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n{: .language-bash}\n\nThe entire
    process of testing it against a 30 characters long string\ntakes around ~52ms.
    But when given an invalid string, it takes nearly\ntwo seconds to complete the
    test, over ten times as long as it took to\ntest a valid string. The dramatic
    difference is due to the way regular\nexpressions get evaluated.\n\nMost Regex
    engines will work very similarly (with minor differences).\nThe engine will match
    the first possible way to accept the current\ncharacter and proceed to the next
    one. If it then fails to match the\nnext one, it will backtrack and see if there
    was another way to digest\nthe previous character. If it goes too far down the
    rabbit hole only to\nfind out the string doesn’t match in the end, and if many
    characters\nhave multiple valid regex paths, the number of backtracking steps
    can\nbecome very large, resulting in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s
    look at how our expression runs into this problem, using a\nshorter string: \\\"ACCCX\\\".
    While it seems fairly straightforward, there\nare still four different ways that
    the engine could match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.
    \ C+C+C.\n\nThe engine has to try each of those combinations to see if any of
    them\npotentially match against the expression. When you combine that with the\nother
    steps the engine must take, we can use [RegEx 101 debugger][1] to\nsee the engine
    has to take a total of 38 steps before it can determine\nthe string doesn\\'t
    match.\n\nFrom there, the number of steps the engine must use to validate a string\njust
    continues to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n|
    ACCCX | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX
    | 14 | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to
    take over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n"
  affected_package: ffmpeg-up-to-date
  vulnerable_versions:
  - ">=2.8.2  <2.8.3"
  severity: medium
  package_manager: cocoapods
  cve:
  - CVE-2015-8365
  cwe:
  - CWE-400
  disclosed_date: 2015-11-15
  created_date: 2019-10-02
  last_modified_date: 2019-10-02
  credit:
  - Unknown
  references:
  - http://git.videolan.org/?p=ffmpeg.git;a=commit;h=4a9af07a49295e014b059c1ab624c40345af5892
  source_url: https://snyk.io/vuln/SNYK-COCOAPODS-FFMPEGUPTODATE-470917
- id: snykio:cocoapods:ffmpeg-up-to-date:471140
  title: Denial of Service (DoS)
  description: |
    [FFmpeg-up-to-date][1] is a FFmpeg static libraries compiled for iOS

    Affected versions of this package are vulnerable to Denial of Service
    (DoS). A user can pass malicious `JPEG2000` data to the system, causing
    an out-of-bounds array read.



    [1]: https://github.com/Arlem/FFmpeg-iOS
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package][1]



    [1]: https://snyk.io/vuln/npm:ws:20171108
  affected_package: ffmpeg-up-to-date
  vulnerable_versions:
  - ">=0.0.0"
  severity: medium
  package_manager: cocoapods
  cve:
  - CVE-2016-2213
  cwe:
  - CWE-119
  disclosed_date: 2016-02-03
  created_date: 2019-11-19
  last_modified_date: 2019-11-19
  credit:
  - Unknown
  references:
  - http://www.securitytracker.com/id/1034923
  - https://security.gentoo.org/glsa/201606-09
  source_url: https://snyk.io/vuln/SNYK-COCOAPODS-FFMPEGUPTODATE-471140
- id: snykio:cocoapods:ffmpeg-up-to-date:471186
  title: Denial of Service (DoS)
  description: |
    [FFmpeg-up-to-date][1] is a FFmpeg static libraries compiled for iOS

    Affected versions of this package are vulnerable to Denial of Service
    (DoS). A malicious user can pass the system a malicious AVI file which
    can lead to an assert fault that can crash the system.

    \##Details Denial of Service (DoS) describes a family of attacks, all
    aimed at making a system inaccessible to its intended and legitimate
    users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)



    [1]: https://github.com/Arlem/FFmpeg-iOS
  affected_package: ffmpeg-up-to-date
  vulnerable_versions:
  - ">=0.0.0"
  severity: medium
  package_manager: cocoapods
  cve:
  - CVE-2016-8595
  cwe:
  - CWE-20
  disclosed_date: 2016-12-23
  created_date: 2019-11-19
  last_modified_date: 2019-11-19
  credit:
  - Lian Yihan of Qihoo 360 Gear Team
  references:
  - http://www.openwall.com/lists/oss-security/2016/12/08/2
  - http://www.securityfocus.com/bid/94757
  source_url: https://snyk.io/vuln/SNYK-COCOAPODS-FFMPEGUPTODATE-471186
- id: snykio:cocoapods:ffmpeg-up-to-date:471272
  title: Denial of Service (DoS)
  description: |
    [FFmpeg-up-to-date][1] is a FFmpeg static libraries compiled for iOS

    Affected versions of this package are vulnerable to Denial of Service
    (DoS). `ff_draw_pc_font` uses incorrect font\_height value, which allows
    remote attackers to causing an out-of-bounds array write fault when it
    uses \'ANSI\' to decode a AVI file which has a crafted `strf` struct.



    [1]: https://github.com/Arlem/FFmpeg-iOS
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package][1]



    [1]: https://snyk.io/vuln/npm:ws:20171108
  affected_package: ffmpeg-up-to-date
  vulnerable_versions:
  - ">=0.0.0"
  severity: medium
  package_manager: cocoapods
  cve:
  - CVE-2016-7562
  cwe:
  - CWE-119
  disclosed_date: 2016-12-23
  created_date: 2019-11-20
  last_modified_date: 2019-11-20
  credit:
  - Unknown
  references:
  - http://www.openwall.com/lists/oss-security/2016/10/08/1
  - http://www.securityfocus.com/bid/94835
  - https://security.gentoo.org/glsa/201701-71
  source_url: https://snyk.io/vuln/SNYK-COCOAPODS-FFMPEGUPTODATE-471272
- id: snykio:cocoapods:ffmpeg-up-to-date:471314
  title: Information Exposure
  description: |
    [FFmpeg-up-to-date][1] is a FFmpeg static libraries compiled for iOS

    Affected versions of this package are vulnerable to Information
    Exposure. A malicious user can trigger a memory leak by passing a
    malicious AVI file containing a `strh` structure.



    [1]: https://github.com/Arlem/FFmpeg-iOS
  affected_package: ffmpeg-up-to-date
  vulnerable_versions:
  - ">0.0.0"
  severity: medium
  package_manager: cocoapods
  cve:
  - CVE-2016-7555
  cwe:
  - CWE-200
  disclosed_date: 2016-10-08
  created_date: 2019-10-02
  last_modified_date: 2019-10-02
  credit:
  - LianYihan
  references:
  - http://www.openwall.com/lists/oss-security/2016/10/08/1
  - http://www.securityfocus.com/bid/94838
  - https://security.gentoo.org/glsa/201701-71
  source_url: https://snyk.io/vuln/SNYK-COCOAPODS-FFMPEGUPTODATE-471314
- id: snykio:cocoapods:ffmpeg-up-to-date:473018
  title: Buffer Overflow
  description: |
    [FFmpeg-up-to-date][1] is a FFmpeg static libraries compiled for iOS

    Affected versions of this package are vulnerable to Buffer Overflow.
    FFmpeg before 4.2 has a heap-based buffer overflow in vqa\_decode\_chunk
    because of an out-of-array access in vqa\_decode\_init in
    libavcodec/vqavideo.c.



    [1]: https://github.com/Arlem/FFmpeg-iOS
  affected_package: ffmpeg-up-to-date
  vulnerable_versions:
  - ">=0.0.0"
  severity: high
  package_manager: cocoapods
  cve:
  - CVE-2019-17542
  cwe:
  - CWE-119
  disclosed_date: 2019-07-16
  created_date: 2019-10-14
  last_modified_date: 2019-10-14
  credit:
  - Unknown
  references:
  - https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=15919
  - https://github.com/FFmpeg/FFmpeg/commit/02f909dc24b1f05cfbba75077c7707b905e63cd2
  source_url: https://snyk.io/vuln/SNYK-COCOAPODS-FFMPEGUPTODATE-473018
- id: snykio:cocoapods:ffmpeg-up-to-date:473022
  title: NULL Pointer Dereference
  description: |
    [FFmpeg-up-to-date][1] is a FFmpeg static libraries compiled for iOS

    Affected versions of this package are vulnerable to NULL Pointer
    Dereference. `avcodec_open2` in `libavcodec/utils.c` allows a NULL
    pointer dereference and possibly unspecified other impact when there is
    no valid close function pointer.



    [1]: https://github.com/Arlem/FFmpeg-iOS
  affected_package: ffmpeg-up-to-date
  vulnerable_versions:
  - ">=0.0.0"
  severity: high
  package_manager: cocoapods
  cve:
  - CVE-2019-17539
  cwe:
  - CWE-476
  disclosed_date: 2019-07-11
  created_date: 2019-10-14
  last_modified_date: 2019-10-14
  credit:
  - Unknown
  references:
  - https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=15733
  - https://github.com/FFmpeg/FFmpeg/commit/8df6884832ec413cf032dfaa45c23b1c7876670c
  source_url: https://snyk.io/vuln/SNYK-COCOAPODS-FFMPEGUPTODATE-473022
- id: snykio:cocoapods:ffmpeg-up-to-date:567842
  title: Heap-based Buffer Overflow
  description: |
    [FFmpeg-up-to-date][1] is a FFmpeg static libraries compiled for iOS

    Affected versions of this package are vulnerable to Heap-based Buffer
    Overflow. `cbs_jpeg_split_fragment` in `libavcodec/cbs_jpeg.c` has a
    heap-based buffer overflow during `JPEG_MARKER_SOS` handling because of
    a missing length check.



    [1]: https://github.com/Arlem/FFmpeg-iOS
  affected_package: ffmpeg-up-to-date
  vulnerable_versions:
  - ">=0.0.0"
  severity: high
  package_manager: cocoapods
  cve:
  - CVE-2020-12284
  cwe:
  - CWE-122
  disclosed_date: 2020-04-28
  created_date: 2020-04-28
  last_modified_date: 2020-04-28
  credit:
  - Unknown
  references:
  - https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=19734
  - https://github.com/FFmpeg/FFmpeg/commit/1812352d767ccf5431aa440123e2e260a4db2726
  source_url: https://snyk.io/vuln/SNYK-COCOAPODS-FFMPEGUPTODATE-567842
