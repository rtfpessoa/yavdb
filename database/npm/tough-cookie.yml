---
- id: npmjs:npm:tough-cookie:130
  title: ReDoS via long string of semicolons
  description: Affected versions of `tough-cookie` may be vulnerable to regular expression
    denial of service when long strings of semicolons exist in the `Set-Cookie` header.
  affected_package: tough-cookie
  vulnerable_versions:
  - ">=0.9.7 <=2.2.2"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2016-1000232
  cwe: CWE-400
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: David Kirchner
- id: npmjs:npm:tough-cookie:525
  title: Regular Expression Denial of Service
  description: |-
    Affected versions of `tough-cookie` are susceptible to a regular expression denial of service.

    The amplification on this vulnerability is relatively low - it takes around 2 seconds for the engine to execute on a malicious input which is 50,000 characters in length.

    If node was compiled using the `-DHTTP_MAX_HEADER_SIZE` however, the impact of the vulnerability can be significant, as the primary limitation for the vulnerability is the default max HTTP header length in node.
  affected_package: tough-cookie
  vulnerable_versions:
  - "<2.3.3"
  severity: high
  package_manager: npm
  cve:
  - CVE-2017-15010
  cwe: CWE-400
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: Cristian-Alexandru Staicu
- id: ossindex:npm:tough-cookie:8399946932
  title: Regular Expression Denial of Service (ReDoS)
  description: The package contain a regular expression that is vulnerable to ReDoS
    attacks.
  affected_package: tough-cookie
  vulnerable_versions:
  - ">=0.9.7 <=2.2.2"
  package_manager: npm
  disclosed_date: 2016-07-22
  created_date: 2016-07-22
  last_modified_date: 2017-12-05
  credit:
  - OSSIndex
  references:
  - https://github.com/salesforce/tough-cookie/commit/615627206357d997d5e6ff9da158997de05235ae
  - https://github.com/salesforce/tough-cookie/pull/68
  - https://github.com/SalesforceEng/tough-cookie/commit/e4fc2e0f9ee1b7a818d68f0ac7ea696f377b1534
  - https://nodesecurity.io/advisories/130
  - https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS
  source_url: https://ossindex.net/resource/package/7014552132/vulnerabilities
- id: snykio:npm:tough-cookie:20160722
  title: Regular Expression Denial of Service (ReDoS)
  description: "[tough-cookie][1] is a RFC6265 Cookies and CookieJar module for Node.js.\n\nAffected
    versions of this package are vulnerable to Regular Expression\nDenial of Service
    (ReDoS). An attacker can provide a cookie, which\nnearly matches the pattern being
    matched. This will cause the regular\nexpression matching to take a long time,
    all the while occupying the\nevent loop and preventing it from processing other
    requests and making\nthe server unavailable (a Denial of Service attack).\n\n\n\n[1]:
    https://www.npmjs.com/package/tough-cookie\n\\nDenial of Service (DoS) describes
    a family of attacks, all aimed at\nmaking a system inaccessible to its original
    and legitimate users. There\nare many types of DoS attacks, ranging from trying
    to clog the network\npipes to the system by generating a large volume of traffic
    from many\nmachines (a Distributed Denial of Service - DDoS - attack) to sending\ncrafted
    requests that cause a system to crash or take a disproportional\namount of time
    to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial
    of\nService attack. Regular expressions are incredibly powerful, but they\naren\\'t
    very intuitive and can ultimately end up making it easy for\nattackers to take
    your site down.\n\nLet’s take the following regular expression as an example:\n\n
    \   regex = /A(B|C+)+D/\n{: .language-js}\n\nThis regular expression accomplishes
    the following:\n\n* `A` The string must start with the letter \\'A\\'\n* `(B|C+)+`
    The string must then follow the letter A with either the\n  letter \\'B\\' or
    some number of occurrences of the letter \\'C\\' (the\n  `+` matches one or more
    times). The `+` at the end of this section\n  states that we can look for one
    or more matches of this section.\n* `D` Finally, we ensure this section of the
    string ends with a \\'D\\'\n\nThe expression would match inputs such as `ABBD`,
    `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases, it doesn\\'t take very
    long for a regex engine to find a\nmatch:\n\n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n
    \   0.04s user 0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n{: .language-bash}\n\nThe entire
    process of testing it against a 30 characters long string\ntakes around ~52ms.
    But when given an invalid string, it takes nearly\ntwo seconds to complete the
    test, over ten times as long as it took to\ntest a valid string. The dramatic
    difference is due to the way regular\nexpressions get evaluated.\n\nMost Regex
    engines will work very similarly (with minor differences).\nThe engine will match
    the first possible way to accept the current\ncharacter and proceed to the next
    one. If it then fails to match the\nnext one, it will backtrack and see if there
    was another way to digest\nthe previous character. If it goes too far down the
    rabbit hole only to\nfind out the string doesn’t match in the end, and if many
    characters\nhave multiple valid regex paths, the number of backtracking steps
    can\nbecome very large, resulting in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s
    look at how our expression runs into this problem, using a\nshorter string: \\\"ACCCX\\\".
    While it seems fairly straightforward, there\nare still four different ways that
    the engine could match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.
    \ C+C+C.\n\nThe engine has to try each of those combinations to see if any of
    them\npotentially match against the expression. When you combine that with the\nother
    steps the engine must take, we can use [RegEx 101 debugger][1] to\nsee the engine
    has to take a total of 38 steps before it can determine\nthe string doesn\\'t
    match.\n\nFrom there, the number of steps the engine must use to validate a string\njust
    continues to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n|
    ACCCX | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX
    | 14 | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to
    take over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n"
  affected_package: tough-cookie
  vulnerable_versions:
  - ">=0.9.7 <2.3.0"
  severity: high
  package_manager: npm
  cve:
  - CVE-2016-1000232
  cwe:
  - CWE-400
  disclosed_date: 2016-07-22
  created_date: 2016-07-22
  last_modified_date: 2016-07-22
  credit:
  - David Kirchner
  references:
  - https://github.com/SalesforceEng/tough-cookie/commit/e4fc2e0f9ee1b7a818d68f0ac7ea696f377b1534
  source_url: https://snyk.io/vuln/npm:tough-cookie:20160722
- id: snykio:npm:tough-cookie:20170905
  title: Regular Expression Denial of Service (ReDoS)
  description: "[`tough-cookie`][1] is RFC6265 Cookies and Cookie Jar for node.js.\n\nAffected
    versions of this package are vulnerable to Regular expression\nDenial of Service
    (ReDoS) attacks. An attacker may pass a specially\ncrafted cookie, causing the
    server to hang.\n\n\n\n[1]: https://www.npmjs.com/package/tough-cookie\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n{: .language-js}\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n{: .language-bash}\n\nThe entire
    process of testing it against a 30 characters long string\ntakes around ~52ms.
    But when given an invalid string, it takes nearly\ntwo seconds to complete the
    test, over ten times as long as it took to\ntest a valid string. The dramatic
    difference is due to the way regular\nexpressions get evaluated.\n\nMost Regex
    engines will work very similarly (with minor differences).\nThe engine will match
    the first possible way to accept the current\ncharacter and proceed to the next
    one. If it then fails to match the\nnext one, it will backtrack and see if there
    was another way to digest\nthe previous character. If it goes too far down the
    rabbit hole only to\nfind out the string doesn’t match in the end, and if many
    characters\nhave multiple valid regex paths, the number of backtracking steps
    can\nbecome very large, resulting in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s
    look at how our expression runs into this problem, using a\nshorter string: \\\"ACCCX\\\".
    While it seems fairly straightforward, there\nare still four different ways that
    the engine could match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.
    \ C+C+C.\n\nThe engine has to try each of those combinations to see if any of
    them\npotentially match against the expression. When you combine that with the\nother
    steps the engine must take, we can use [RegEx 101 debugger][1] to\nsee the engine
    has to take a total of 38 steps before it can determine\nthe string doesn\\'t
    match.\n\nFrom there, the number of steps the engine must use to validate a string\njust
    continues to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n|
    ACCCX | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX
    | 14 | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to
    take over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n"
  affected_package: tough-cookie
  vulnerable_versions:
  - "<2.3.3"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2017-15010
  cwe:
  - CWE-400
  disclosed_date: 2017-09-07
  created_date: 2017-09-21
  last_modified_date: 2017-09-21
  credit:
  - CristianAlexandru Staicu
  references:
  - https://github.com/salesforce/tough-cookie/issues/92
  source_url: https://snyk.io/vuln/npm:tough-cookie:20170905
