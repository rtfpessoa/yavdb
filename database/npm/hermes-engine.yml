---
- id: snykio:npm:hermes-engine:608850
  title: Prototype Pollution
  description: "[hermes-engine][1] is an A JavaScript engine optimized for running
    React\nNative on Android\n\nAffected versions of this package are vulnerable to
    Prototype Pollution\nvia `HostObject` computed properties.\n\n\n\n[1]: https://www.npmjs.com/package/hermes-engine\n\\nPrototype
    Pollution is a vulnerability affecting JavaScript. Prototype\nPollution refers
    to the ability to inject properties into existing\nJavaScript language construct
    prototypes, such as objects. JavaScript\nallows all Object attributes to be altered,
    including their magical\nattributes such as `_proto_`, `constructor` and `prototype`.
    An attacker\nmanipulates these attributes to overwrite, or pollute, a JavaScript\napplication
    object prototype of the base object by injecting other\nvalues. Properties on
    the `Object.prototype` are then inherited by all\nthe JavaScript objects through
    the prototype chain. When that happens,\nthis leads to either denial of service
    by triggering JavaScript\nexceptions, or it tampers with the application source
    code to force the\ncode path that the attacker injects, thereby leading to remote
    code\nexecution.\n\nThere are two main ways in which the pollution of prototypes
    occurs:\n\n* Unsafe `Object` recursive merge\n\n* Property definition by path\n\n###
    Unsafe Object recursive merge   {#unsafe-object-recursive-merge}\n\nThe logic
    of a vulnerable recursive merge function follows the following\nhigh-level model:\n\n
    \   merge (target, source)\n    \n      foreach property of source\n    \n        if
    property exists and is an object on both the target and the source\n    \n          merge(target[property],
    source[property])\n    \n        else\n    \n          target[property] = source[property]\n\n\n\nWhen
    the source object contains a property named `_proto_` defined with\n`Object.defineProperty()`
    , the condition that checks if the property\nexists and is an object on both the
    target and the source passes and the\nmerge recurses with the target, being the
    prototype of `Object` and the\nsource of `Object` as defined by the attacker.
    Properties are then\ncopied on the `Object` prototype.\n\nClone operations are
    a special sub-class of unsafe recursive merges,\nwhich occur when a recursive
    merge is conducted on an empty object:\n`merge({},source)`.\n\n`lodash` and `Hoek`
    are examples of libraries susceptible to recursive\nmerge attacks.\n\n### Property
    definition by path   {#property-definition-by-path}\n\nThere are a few JavaScript
    libraries that use an API to define property\nvalues on an object based on a given
    path. The function that is\ngenerally affected contains this signature: `theFunction(object,
    path,\nvalue)`\n\nIf the attacker can control the value of “path”, they can set
    this value\nto `_proto_.myValue`. `myValue` is then assigned to the prototype
    of the\nclass of the object.\n\n"
  affected_package: hermes-engine
  vulnerable_versions:
  - "*"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2020-1911
  cwe:
  - CWE-400
  disclosed_date: 2020-08-27
  created_date: 2020-08-28
  last_modified_date: 2020-08-28
  credit:
  - Marc Horowitz
  references:
  - https://github.com/facebook/hermes/commit/fe52854cdf6725c2eaa9e125995da76e6ceb27da
  source_url: https://snyk.io/vuln/SNYK-JS-HERMESENGINE-608850
- id: snykio:npm:hermes-engine:629268
  title: Denial of Service (DoS)
  description: |+
    [hermes-engine][1] is an A JavaScript engine optimized for running React
    Native on Android

    Affected versions of this package are vulnerable to Denial of Service
    (DoS). An Integer signedness error in the JavaScript Interpreter allows
    attackers to cause a denial of service attack or a potential RCE via
    crafted JavaScript. Note that this is only exploitable if the
    application using Hermes permits evaluation of untrusted JavaScript.
    Hence, most React Native applications are not affected.



    [1]: https://www.npmjs.com/package/hermes-engine
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: hermes-engine
  vulnerable_versions:
  - "*"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2020-1913
  cwe:
  - CWE-400
  disclosed_date: 2020-09-10
  created_date: 2020-09-10
  last_modified_date: 2020-09-10
  credit:
  - Unknown
  references:
  - https://github.com/facebook/hermes/commit/2c7af7ec481ceffd0d14ce2d7c045e475fd71dc6
  - https://www.facebook.com/security/advisories/cve-2020-1913
  source_url: https://snyk.io/vuln/SNYK-JS-HERMESENGINE-629268
- id: snykio:npm:hermes-engine:629748
  title: Out-of-Bounds
  description: |
    [hermes-engine][1] is an A JavaScript engine optimized for running React
    Native on Android

    Affected versions of this package are vulnerable to Out-of-Bounds. An
    out-of-bounds read/write vulnerability when executing lazily compiled
    inner generator functions allows attackers to potentially execute
    arbitrary code via crafted JavaScript. Note that this is only
    exploitable if the application using Hermes permits evaluation of
    untrusted JavaScript. Hence, most React Native applications are not
    affected.



    [1]: https://www.npmjs.com/package/hermes-engine
  affected_package: hermes-engine
  vulnerable_versions:
  - "*"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2020-1912
  cwe:
  - CWE-119
  disclosed_date: 2020-09-10
  created_date: 2020-09-10
  last_modified_date: 2020-09-10
  credit:
  - Unknown
  references:
  - https://github.com/facebook/hermes/commit/091835377369c8fd5917d9b87acffa721ad2a168
  - https://www.facebook.com/security/advisories/cve-2020-1912
  source_url: https://snyk.io/vuln/SNYK-JS-HERMESENGINE-629748
- id: snykio:npm:hermes-engine:629766
  title: Denial of Service (DoS)
  description: |+
    [hermes-engine][1] is an A JavaScript engine optimized for running React
    Native on Android

    Affected versions of this package are vulnerable to Denial of Service
    (DoS). An Integer signedness error in the JavaScript Interpreter allows
    attackers to cause a denial of service attack or a potential RCE via
    crafted JavaScript. Note that this is only exploitable if the
    application using Hermes permits evaluation of untrusted JavaScript.
    Hence, most React Native applications are not affected.



    [1]: https://www.npmjs.com/package/hermes-engine
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: hermes-engine
  vulnerable_versions:
  - "*"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2020-1913
  cwe:
  - CWE-400
  disclosed_date: 2020-09-10
  created_date: 2020-09-10
  last_modified_date: 2020-09-10
  credit:
  - Unknown
  references:
  - https://github.com/facebook/hermes/commit/2c7af7ec481ceffd0d14ce2d7c045e475fd71dc6
  - https://www.facebook.com/security/advisories/cve-2020-1913
  source_url: https://snyk.io/vuln/SNYK-JS-HERMESENGINE-629766
