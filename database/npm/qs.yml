---
- id: npmjs:npm:qs:1469
  title: Prototype Pollution Protection Bypass
  description: Affected version of `qs` are vulnerable to Prototype Pollution because
    it is possible to bypass the protection. The `qs.parse` function fails to properly
    prevent an object's prototype to be altered when parsing arbitrary input. Input
    containing `[` or `]` may bypass the prototype pollution protection and alter
    the Object prototype. This allows attackers to override properties that will exist
    in all objects, which may lead to Denial of Service or Remote Code Execution in
    specific circumstances.
  affected_package: qs
  vulnerable_versions:
  - "<6.0.4"
  - ">=6.1.0 <6.1.2"
  - ">=6.2.0 <6.2.3"
  - ">=6.3.0 <6.3.2"
  severity: high
  package_manager: npm
  cve:
  - CVE-2017-1000048
  cwe: CWE-471
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: Unknown
- id: npmjs:npm:qs:28
  title: Denial-of-Service Extended Event Loop Blocking
  description: "Versions prior to 1.0.0 of `qs` are affected by a denial of service
    vulnerability that results from excessive recursion in parsing a deeply nested
    JSON string.\n\n"
  affected_package: qs
  vulnerable_versions:
  - "<1.0.0"
  severity: high
  package_manager: npm
  cve:
  - CVE-2014-10064
  cwe: CWE-730
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: Tom Steele
- id: npmjs:npm:qs:29
  title: Denial-of-Service Memory Exhaustion
  description: Versions prior to 1.0 of `qs` are affected by a denial of service condition.
    This condition is triggered by parsing a crafted string that deserializes into
    very large sparse arrays, resulting in the process running out of memory and eventually
    crashing.
  affected_package: qs
  vulnerable_versions:
  - "<1.0.0"
  severity: high
  package_manager: npm
  cve:
  - CVE-2014-7191
  cwe: CWE-730
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: Dustin Shiver
- id: ossindex:npm:qs:365283
  title: "[CVE-2014-7191]  Resource Management Errors"
  description: The qs module before 1.0.0 in Node.js does not call the compact function
    for array data, which allows remote attackers to cause a denial of service (memory
    consumption) by using a large index value to create a sparse array.
  affected_package: qs
  vulnerable_versions:
  - "<1.0.0"
  package_manager: npm
  cve:
  - CVE-2014-7191
  disclosed_date: 2014-10-19
  created_date: 2014-10-19
  last_modified_date: 2017-07-30
  credit:
  - OSSIndex
  references:
  - http://secunia.com/advisories/60026
  - http://secunia.com/advisories/62170
  - http://www-01.ibm.com/support/docview.wss?uid=swg21685987
  - http://www-01.ibm.com/support/docview.wss?uid=swg21687263
  - http://www-01.ibm.com/support/docview.wss?uid=swg21687928
  - http://xforce.iss.net/xforce/xfdb/96729
  - https://access.redhat.com/errata/RHSA-2016:1380
  - https://exchange.xforce.ibmcloud.com/vulnerabilities/96729
  - https://github.com/raymondfeng/node-querystring/commit/43a604b7847e56bba49d0ce3e222fe89569354d8
  - https://github.com/visionmedia/node-querystring/issues/104
  - https://nodesecurity.io/advisories/qs_dos_memory_exhaustion
  source_url: https://ossindex.net/resource/package/7014336590/vulnerabilities
- id: ossindex:npm:qs:8405000464
  title: Denial-of-Service Extended Event Loop Blocking
  description: "> The qs module does not have an option or default for specifying
    object depth and when parsing a string representing a deeply nested object will
    block the event loop for long periods of time. An attacker could leverage this
    to cause a temporary denial-of-service condition, for example, in a web application,
    other requests would not be processed while this blocking is occurring.\n> \n>
    -- [nodesecurity.io](https://nodesecurity.io/advisories/28)"
  affected_package: qs
  vulnerable_versions:
  - "<1.0.0"
  package_manager: npm
  disclosed_date: 2017-07-29
  created_date: 2017-07-29
  last_modified_date: 2017-07-29
  credit:
  - OSSIndex
  references:
  - https://nodesecurity.io/advisories/28
  source_url: https://ossindex.net/resource/package/7014336590/vulnerabilities
- id: ossindex:npm:qs:8405001095
  title: Prototype override protection bypass
  description: A prototype override protection bypass is possible, which allows attackers
    to overwrite properties and functions. A previous solution for the problem is
    incomplete.
  affected_package: qs
  vulnerable_versions:
  - "<6.4.0"
  package_manager: npm
  disclosed_date: 2017-07-30
  created_date: 2017-07-30
  last_modified_date: 2017-07-30
  credit:
  - OSSIndex
  references:
  - https://github.com/ljharb/qs/commit/beade029171b8cef9cee0d03ebe577e2dd84976d
  - https://github.com/ljharb/qs/commit/ec9e73654da35b205b0efacf750158d7b0b06413
  - https://github.com/ljharb/qs/issues/200
  - https://github.com/ljharb/qs/pull/201
  source_url: https://ossindex.net/resource/package/7014336590/vulnerabilities
- id: snykio:npm:qs:1
  title: Denial of Service (DoS)
  description: "[qs][1] is a querystring parser that supports nesting and arrays,
    with a\ndepth limit.\n\nAffected versions of this package are vulnerable to Denial
    of Service\n(DoS). When parsing a string representing a deeply nested object,
    qs\nwill block the event loop for long periods of time. Such a delay may\nhold
    up the server\\'s resources, keeping it from processing other\nrequests in the
    meantime, thus enabling a Denial-of-Service attack.\n\n\n\n[1]: https://www.npmjs.com/package/qs\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n{: .language-js}\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n{: .language-bash}\n\nThe entire
    process of testing it against a 30 characters long string\ntakes around ~52ms.
    But when given an invalid string, it takes nearly\ntwo seconds to complete the
    test, over ten times as long as it took to\ntest a valid string. The dramatic
    difference is due to the way regular\nexpressions get evaluated.\n\nMost Regex
    engines will work very similarly (with minor differences).\nThe engine will match
    the first possible way to accept the current\ncharacter and proceed to the next
    one. If it then fails to match the\nnext one, it will backtrack and see if there
    was another way to digest\nthe previous character. If it goes too far down the
    rabbit hole only to\nfind out the string doesn’t match in the end, and if many
    characters\nhave multiple valid regex paths, the number of backtracking steps
    can\nbecome very large, resulting in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s
    look at how our expression runs into this problem, using a\nshorter string: \\\"ACCCX\\\".
    While it seems fairly straightforward, there\nare still four different ways that
    the engine could match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.
    \ C+C+C.\n\nThe engine has to try each of those combinations to see if any of
    them\npotentially match against the expression. When you combine that with the\nother
    steps the engine must take, we can use [RegEx 101 debugger][1] to\nsee the engine
    has to take a total of 38 steps before it can determine\nthe string doesn\\'t
    match.\n\nFrom there, the number of steps the engine must use to validate a string\njust
    continues to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n|
    ACCCX | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX
    | 14 | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to
    take over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n"
  affected_package: qs
  vulnerable_versions:
  - "<1.0.0"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2014-10064
  cwe:
  - CWE-400
  disclosed_date: 2014-08-06
  created_date: 2014-08-06
  last_modified_date: 2014-08-06
  credit:
  - Tom Steele
  references:
  - https://nodesecurity.io/advisories/28
  source_url: https://snyk.io/vuln/npm:qs:20140806-1
- id: snykio:npm:qs:20140806
  title: Denial of Service (DoS)
  description: |+
    [qs][1] is a querystring parser that supports nesting and arrays, with a
    depth limit.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS). During parsing, the `qs` module may create a sparse area (an
    array where no elements are filled), and grow that array to the
    necessary size based on the indices used on it. An attacker can specify
    a high index value in a query string, thus making the server allocate a
    respectively big array. Truly large values can cause the server to run
    out of memory and cause it to crash - thus enabling a Denial-of-Service
    attack.



    [1]: https://www.npmjs.com/package/qs
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: qs
  vulnerable_versions:
  - "<1.0.0"
  severity: high
  package_manager: npm
  cve:
  - CVE-2014-7191
  cwe:
  - CWE-400
  disclosed_date: 2014-08-06
  created_date: 2014-08-06
  last_modified_date: 2014-08-06
  credit:
  - Dustin Shiver
  references:
  - https://github.com/tj/node-querystring/pull/114/commits/43a604b7847e56bba49d0ce3e222fe89569354d8
  - https://github.com/visionmedia/node-querystring/issues/104
  - https://nvd.nist.gov/vuln/detail/CVE-2014-7191
  source_url: https://snyk.io/vuln/npm:qs:20140806
- id: snykio:npm:qs:20170213
  title: Prototype Override Protection Bypass
  description: "[qs][1] is a querystring parser that supports nesting and arrays,
    with a\ndepth limit.\n\nAffected versions of this package are vulnerable to Prototype
    Override\nProtection Bypass. By default `qs` protects against attacks that attempt\nto
    overwrite an object\\'s existing prototype properties, such as\n`toString()`,
    `hasOwnProperty()`,etc.\n\nFrom [`qs` documentation][2]\\:\n\n> By default parameters
    that would overwrite properties on the object\n> prototype are ignored, if you
    wish to keep the data from those fields\n> either use plainObjects as mentioned
    above, or set allowPrototypes to\n> true which will allow user input to overwrite
    those properties.\n> WARNING It is generally a bad idea to enable this option
    as it can\n> cause problems when attempting to use the properties that have been\n>
    overwritten. Always be careful with this option.\n\nOverwriting these properties
    can impact application logic, potentially\nallowing attackers to work around security
    controls, modify data, make\nthe application unstable and more.\n\nIn versions
    of the package affected by this vulnerability, it is\npossible to circumvent this
    protection and overwrite prototype\nproperties and functions by prefixing the
    name of the parameter with `[`\nor `]`. e.g. `qs.parse(\"]=toString\")` will return
    `{toString = true}`,\nas a result, calling `toString()` on the object will throw
    an exception.\n\n**Example:**\n\n    qs.parse('toString=foo', { allowPrototypes:
    false })\n    // {}\n    \n    qs.parse(\"]=toString\", { allowPrototypes: false
    })\n    // {toString = true} <== prototype overwritten\n{: .language-js}\n\nFor
    more information, you can check out our [blog][3].\n\n\n\n[1]: https://www.npmjs.com/package/qs\n[2]:
    https://github.com/ljharb/qs\n[3]: https://snyk.io/blog/high-severity-vulnerability-qs/\n"
  affected_package: qs
  vulnerable_versions:
  - "<6.0.4"
  - ">=6.1.0 <6.1.2"
  - ">=6.2.0 <6.2.3"
  - ">=6.3.0 <6.3.2"
  severity: high
  package_manager: npm
  cve:
  - CVE-2017-1000048
  cwe:
  - CWE-20
  disclosed_date: 2017-02-13
  created_date: 2017-03-01
  last_modified_date: 2017-03-01
  credit:
  - Snyk Security Research Team
  source_url: https://snyk.io/vuln/npm:qs:20170213
