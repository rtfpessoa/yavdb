---
- id: ossindex:npm:nodebb:8402763835
  title: Remote Code Execution vulnerability on plugins install and update
  description: "> A malicious user could be able to run shell commands by forcing
    admins to run special Javascript code\n> \n> -- [github.com](https://github.com/NodeBB/NodeBB/pull/5286)"
  affected_package: nodebb
  vulnerable_versions:
  - "<1.4.1"
  package_manager: npm
  disclosed_date: 2017-04-07
  created_date: 2017-04-07
  last_modified_date: 2017-07-26
  credit:
  - OSSIndex
  references:
  - https://github.com/NodeBB/NodeBB/commit/e028ac13639faf703922ce3ed728a85d2e27655e
  - https://github.com/NodeBB/NodeBB/issues/5286
  source_url: https://ossindex.net/resource/package/7014220964/vulnerabilities
- id: ossindex:npm:nodebb:8402763837
  title: Insecure Cookies
  description: NodeBB does not appear to use Secure cookies. If the site is enabled
    for HTTPS, cookies may still be passed through unencrypted channels which can
    be intercepted.
  affected_package: nodebb
  vulnerable_versions:
  - "<0.7.3"
  package_manager: npm
  disclosed_date: 2017-04-07
  created_date: 2017-04-07
  last_modified_date: 2017-04-16
  credit:
  - OSSIndex
  references:
  - https://github.com/NodeBB/NodeBB/commit/275769a8017db98c1d032b53717542f571b7163a
  - https://github.com/NodeBB/NodeBB/issues/3435
  source_url: https://ossindex.net/resource/package/7014220964/vulnerabilities
- id: snykio:npm:nodebb:20150413
  title: Cross-site Scripting (XSS)
  description: |
    [`nodebb`][1] is a NodeBB Forum.

    Affected versions of the package are vulnerable to Cross-site Scripting
    (XSS).



    [1]: https://www.npmjs.com/package/nodebb
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

    You can read more about `Cross-site Scripting (XSS)` on our [blog][1].



    [1]: https://snyk.io/blog/marked-xss-vulnerability/
  affected_package: nodebb
  vulnerable_versions:
  - ">=0.6.1 <0.7.0"
  severity: medium
  package_manager: npm
  cwe:
  - CWE-79
  disclosed_date: 2015-04-12
  created_date: 2017-04-03
  last_modified_date: 2017-04-03
  credit:
  - Barış Soner Uşaklı
  references:
  - https://github.com/NodeBB/NodeBB/commit/1910fdb977068d3f70f9b138175990bcc7910840
  source_url: https://snyk.io/vuln/npm:nodebb:20150413
- id: snykio:npm:nodebb:20161120
  title: Arbitrary Code Execution
  description: |
    [`nodebb`][1] is a NodeBB Forum. Affected versions of the package are
    vulnerable to Arbitrary code execution .



    [1]: https://www.npmjs.com/package/nodebb
  affected_package: nodebb
  vulnerable_versions:
  - ">=0.4.3 <1.4.1"
  severity: medium
  package_manager: npm
  cwe:
  - CWE-94
  disclosed_date: 2016-11-19
  created_date: 2017-04-03
  last_modified_date: 2017-04-03
  credit:
  - Ben Lubar
  references:
  - https://github.com/NodeBB/NodeBB/commit/e028ac13639faf703922ce3ed728a85d2e27655e
  - https://github.com/NodeBB/NodeBB/issues/5223
  - https://github.com/NodeBB/NodeBB/pull/5286
  source_url: https://snyk.io/vuln/npm:nodebb:20161120
- id: snykio:npm:nodebb:456334
  title: Cross-site Scripting (XSS)
  description: |+
    [nodebb][1] is a package that utilizes web sockets for instant
    interactions and real-time notifications.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). A malicious user was able to inject arbitrary Javascript into a
    victim\'s browser via `Controllers.outgoing` in `controllers/index.js`.



    [1]: https://www.npmjs.com/package/nodebb
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: nodebb
  vulnerable_versions:
  - "<0.8.2"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2015-9286
  cwe:
  - CWE-79
  disclosed_date: 2015-07-30
  created_date: 2019-08-01
  last_modified_date: 2019-08-01
  credit:
  - Unknown
  references:
  - https://github.com/NodeBB/NodeBB/pull/3371/commits/e24bd2c0e33f642e8fdbc0d6b6a52dc6624d0d9a
  source_url: https://snyk.io/vuln/SNYK-JS-NODEBB-456334
- id: snykio:npm:nodebb:607916
  title: Improper Authorization
  description: |
    [nodebb][1] is a package that utilizes web sockets for instant
    interactions and real-time notifications.

    Affected versions of this package are vulnerable to Improper
    Authorization. A flaw in the validation logic makes it possible to
    change the password of any user on a running `NodeBB` by sending a
    specially crafted socket.io call to the server. This could lead to a
    privilege escalation event due via an account takeover.



    [1]: https://www.npmjs.com/package/nodebb
  affected_package: nodebb
  vulnerable_versions:
  - ">=1.12.2 <1.14.3"
  severity: high
  package_manager: npm
  cve:
  - CVE-2020-15149
  cwe:
  - CWE-285
  disclosed_date: 2020-08-20
  created_date: 2020-08-20
  last_modified_date: 2020-08-20
  credit:
  - Unknown
  references:
  - https://github.com/NodeBB/NodeBB/commit/c2477d9d5ffc43e5ffeb537ea2ceb4ce9592aa39
  - https://github.com/NodeBB/NodeBB/security/advisories/GHSA-hr66-c8pg-5mg7
  - https://zeroauth.ltd/blog/2020/08/20/proof-of-concept-exploit-for-cve-2020-15149-nodebb-arbitrary-user-password-change/
  source_url: https://snyk.io/vuln/SNYK-JS-NODEBB-607916
