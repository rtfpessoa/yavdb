---
- id: npmjs:npm:sanitize-html:135
  title: Cross-Site Scripting
  description: Affected versions of `sanitize-html` do not sanitize input recursively,
    which may allow an attacker to execute arbitrary Javascript.
  affected_package: sanitize-html
  vulnerable_versions:
  - "<=1.4.2"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2016-1000237
  cwe: CWE-79
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: Björn Kimminich
  references: https://npmjs.com/advisories/135
  source_url: https://npmjs.com/advisories/135
- id: npmjs:npm:sanitize-html:154
  title: Cross-Site Scripting
  description: |-
    Affected versions of `sanitize-html` are vulnerable to cross-site scripting when allowedTags includes at least one `nonTextTag`.

    ## Proof of Concept

    ```
    var sanitizeHtml = require('sanitize-html');

    var dirty = '!<textarea>&lt;/textarea&gt;<svg/onload=prompt`xs`&gt;</textarea>!';
    var clean = sanitizeHtml(dirty, {
        allowedTags: [ 'textarea' ]
    });

    console.log(clean);

    // !<textarea></textarea><svg/onload=prompt`xs`></textarea>!
    ```
  affected_package: sanitize-html
  vulnerable_versions:
  - "<=1.11.1"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2017-16016
  cwe: CWE-725
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: Andrew Krasichkov
  references: https://npmjs.com/advisories/154
  source_url: https://npmjs.com/advisories/154
- id: npmjs:npm:sanitize-html:155
  title: Cross-Site Scripting
  description: |-
    Affected versions of `sanitize-html` are vulnerable to cross-site scripting.

    ## Proof of Concept:

    `<IMG SRC= onmouseover="alert('XSS');">`
    produces the following:

    `<img src="onmouseover="alert('XSS');"" />`
    This is definitely invalid HTML, but would suggest that it's being interpreted incorrectly by the parser.
  affected_package: sanitize-html
  vulnerable_versions:
  - "<=1.2.2"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2017-16017
  cwe: CWE-725
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: Jim O'Brien
  references: https://npmjs.com/advisories/155
  source_url: https://npmjs.com/advisories/155
- id: ossindex:npm:sanitize-html:8400152731
  title: Cross Site Scripting (XSS) using empty, undelimited attributes
  description: Attributes with unescaped double quotes are not properly handled and
    can be a vector of XSS attacks.
  affected_package: sanitize-html
  vulnerable_versions:
  - "<=1.2.2"
  package_manager: npm
  disclosed_date: 2016-09-18
  created_date: 2016-09-18
  last_modified_date: 2017-04-16
  credit:
  - OSSIndex
  references:
  - https://cwe.mitre.org/data/definitions/79.html
  - https://github.com/punkave/sanitize-html/blob/master/README.md#changelog
  - https://github.com/punkave/sanitize-html/issues/19
  - https://github.com/punkave/sanitize-html/pull/20
  - https://nodesecurity.io/advisories/155
  source_url: https://ossindex.net/resource/package/7014413855/vulnerabilities
- id: ossindex:npm:sanitize-html:8400152732
  title: Cross Site Scripting (XSS) through nonTextTags
  description: Allowing at least one `nonTextTags` can result in an XSS vulnerability.
  affected_package: sanitize-html
  vulnerable_versions:
  - "< 1.11.4"
  package_manager: npm
  disclosed_date: 2016-09-18
  created_date: 2016-09-18
  last_modified_date: 2017-04-14
  credit:
  - OSSIndex
  references:
  - https://cwe.mitre.org/data/definitions/79.html
  - https://github.com/punkave/sanitize-html/commit/5d205a1005ba0df80e21d8c64a15bb3accdb2403
  - https://github.com/punkave/sanitize-html/issues/100
  - https://nodesecurity.io/advisories/154
  source_url: https://ossindex.net/resource/package/7014413855/vulnerabilities
- id: ossindex:npm:sanitize-html:8400171359
  title: Cross Site Scripting (XSS)
  description: With the `a` tag and `href` attribute allowed, it is possible to bypass
    the sanitizer.
  affected_package: sanitize-html
  vulnerable_versions:
  - "<1.10.1"
  package_manager: npm
  disclosed_date: 2016-10-05
  created_date: 2016-10-05
  last_modified_date: 2017-02-20
  credit:
  - OSSIndex
  references:
  - https://cwe.mitre.org/data/definitions/79.html
  - https://github.com/punkave/sanitize-html/commit/889d4ec968e175f1905b2eb9d33f1fa89217cb02
  - https://github.com/punkave/sanitize-html/issues/1
  source_url: https://ossindex.net/resource/package/7014413855/vulnerabilities
- id: ossindex:npm:sanitize-html:8400171360
  title: Cross Site Scripting (XSS)
  description: Comments in URI schemes can allow for sanitizer bypass.
  affected_package: sanitize-html
  vulnerable_versions:
  - "<1.10.1"
  package_manager: npm
  disclosed_date: 2016-10-05
  created_date: 2016-10-05
  last_modified_date: 2017-02-20
  credit:
  - OSSIndex
  references:
  - https://cwe.mitre.org/data/definitions/79.html
  - https://github.com/punkave/sanitize-html/issues/15
  source_url: https://ossindex.net/resource/package/7014413855/vulnerabilities
- id: ossindex:npm:sanitize-html:8400171362
  title: Sanitization not applied recursively
  description: "Sanitization is not applied recursively, leading to a vulnerability
    to certain masking attacks.\n\nThe issue was later resolved in a different manner:\n\n>
    This issue has been resolved better through the use of the decodeEntities: true
    option of htmlparser2. Recursive invocation is no longer required to pass the
    test suite.\n> \n> -- [github.com](https://github.com/punkave/sanitize-html/issues/29)"
  affected_package: sanitize-html
  vulnerable_versions:
  - "<1.4.3"
  package_manager: npm
  disclosed_date: 2016-10-05
  created_date: 2016-10-05
  last_modified_date: 2017-07-26
  credit:
  - OSSIndex
  references:
  - https://github.com/punkave/sanitize-html/commit/762fbc7bba389f3f789cc291c1eb2b64f60f2caf
  - https://github.com/punkave/sanitize-html/issues/29
  source_url: https://ossindex.net/resource/package/7014413855/vulnerabilities
- id: snykio:npm:sanitize-html:20140717
  title: Cross-site Scripting (XSS)
  description: |+
    [`sanitize-html`][1] is a library for scrubbing html input of malicious
    values.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) due to unescaped double quotes.

    Entering the following:

        <IMG SRC= onmouseover="alert('XSS');">
    {: .language-html}

    produces the following:

        <img src="onmouseover="alert('XSS');"" />
    {: .language-html}



    [1]: https://www.npmjs.com/package/sanitize-html
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: sanitize-html
  vulnerable_versions:
  - "<1.2.3"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2017-16017
  cwe:
  - CWE-79
  disclosed_date: 2014-07-17
  created_date: 2017-04-16
  last_modified_date: 2017-04-16
  credit:
  - Jim O'Brien
  references:
  - https://github.com/punkave/sanitize-html/blob/master/README.md#changelog
  - https://github.com/punkave/sanitize-html/issues/19
  - https://github.com/punkave/sanitize-html/pull/20
  source_url: https://snyk.io/vuln/npm:sanitize-html:20140717
- id: snykio:npm:sanitize-html:20141024
  title: Cross-site Scripting (XSS)
  description: |+
    Since the sanitize-html module trusts \'text\' coming from htmlparser2,
    and outputs it without further escaping (because htmlparser2 does not
    decode entities in text before delivering it), this results in an XSS
    attack vector if sanitize-html ignores the img tag (according to
    user-configured filter rules) but passes the text intact, as it must do
    to keep any text in documents.

  affected_package: sanitize-html
  vulnerable_versions:
  - "<1.4.3"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2016-1000237
  cwe:
  - CWE-79
  disclosed_date: 2015-11-06
  created_date: 2015-11-06
  last_modified_date: 2015-11-06
  credit:
  - Unknown
  references:
  - https://github.com/punkave/sanitize-html/issues/29
  source_url: https://snyk.io/vuln/npm:sanitize-html:20141024
- id: snykio:npm:sanitize-html:20160801
  title: Cross-site Scripting (XSS)
  description: |+
    Sanitization of HTML strings is not applied recursively to input,
    allowing an attacker to potentially inject script and other markup.

    Source: *Node Security Project*

    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: sanitize-html
  vulnerable_versions:
  - "<=1.4.2"
  severity: medium
  package_manager: npm
  cwe:
  - CWE-79
  disclosed_date: 2016-08-01
  created_date: 2016-08-01
  last_modified_date: 2016-08-01
  credit:
  - Björn Kimminich
  references:
  - https://github.com/punkave/sanitize-html/commit/762fbc7bba389f3f789cc291c1eb2b64f60f2caf
  - https://github.com/punkave/sanitize-html/issues/29
  source_url: https://snyk.io/vuln/npm:sanitize-html:20160801
- id: snykio:npm:sanitize-html:20161026
  title: Cross-site Scripting (XSS)
  description: "[`sanitize-html`][1] is a library for scrubbing html input of malicious\nvalues.\n\nAffected
    versions of this package are vulnerable to Cross-site Scripting\n(XSS) attacks.
    If at least one `nonTextTags` tag is allowed, a malicious\nuser may potentially
    conduct an XSS attack.\n\n**PoC:**\n\n    var sanitizeHtml = require('sanitize-html');\n
    \   \n    var dirty = '!<textarea>&lt;/textarea&gt;<svg/onload=prompt`xs`&gt;</textarea>!';\n
    \   var clean = sanitizeHtml(dirty, {\n        allowedTags: [ 'textarea' ]\n    });\n
    \   \n    console.log(clean);\n    \n    // !<textarea></textarea><svg/onload=prompt`xs`></textarea>!\n{:
    .language-js}\n\n\n\n[1]: https://www.npmjs.com/package/sanitize-html\n\\nA cross-site
    scripting attack occurs when the attacker tricks a\nlegitimate web-based application
    or site to accept a request as\noriginating from a trusted source.\n\nThis is
    done by escaping the context of the web application; the web\napplication then
    delivers that data to its users along with other\ntrusted dynamic content, without
    validating it. The browser unknowingly\nexecutes malicious script on the client
    side (through client-side\nlanguages; usually JavaScript or HTML) in order to
    perform actions that\nare otherwise typically blocked by the browser’s Same Origin
    Policy.\n\nֿInjecting malicious code is the most prevalent manner by which XSS
    is\nexploited; for this reason, escaping characters in order to prevent this\nmanipulation
    is the top method for securing code against this\nvulnerability.\n\nEscaping means
    that the application is coded to mark key characters, and\nparticularly key characters
    included in user input, to prevent those\ncharacters from being interpreted in
    a dangerous context. For example,\nin HTML, `<` can be coded as `&lt`; and `>`
    can be coded as `&gt`; in\norder to be interpreted and displayed as themselves
    in text, while\nwithin the code itself, they are used for HTML tags. If malicious\ncontent
    is injected into an application that escapes special characters\nand that malicious
    content uses `<` and `>` as HTML tags, those\ncharacters are nonetheless not interpreted
    as HTML tags by the browser\nif they’ve been correctly escaped in the application
    code and in this\nway the attempted attack is diverted.\n\nThe most prominent
    use of XSS is to steal cookies (source: OWASP\nHttpOnly) and hijack user sessions,
    but XSS exploits have been used to\nexpose sensitive information, enable access
    to privileged services and\nfunctionality and deliver malware.\n\n### Types of
    attacks   {#types-of-attacks}\n\nThere are a few methods by which XSS can be manipulated:\n\n|
    Type | Origin | Description |\n|----------\n| **Stored** | Server | The malicious
    code is inserted in the application (usually as a link) by the attacker. The code
    is activated every time a user clicks the link. |\n| **Reflected** | Server |
    The attacker delivers a malicious link externally from the vulnerable web site
    application to a user. When clicked, malicious code is sent to the vulnerable
    web site, which reflects the attack back to the user’s browser. |\n| **DOM-based**
    | Client | The attacker forces the user’s browser to render a malicious page.
    The data in the page itself delivers the cross-site scripting data. |\n| **Mutated**
    |  | The attacker injects code that appears safe, but is then rewritten and modified
    by the browser, while parsing the markup. An example is rebalancing unclosed quotation
    marks or even adding quotation marks to unquoted parameters. |\n\n### Affected
    environments   {#affected-environments}\n\nThe following environments are susceptible
    to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n###
    How to prevent   {#how-to-prevent}\n\nThis section describes the top best practices
    designed to specifically\nprotect your code:\n\n* Sanitize data input in an HTTP
    request before reflecting it back,\n  ensuring all data is validated, filtered
    or escaped before echoing\n  anything back to the user, such as the values of
    query parameters\n  during searches.\n* Convert special characters such as `?`,
    `&`, `/`, `<`, `>` and spaces\n  to their respective HTML or URL encoded equivalents.\n*
    Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n*
    Detect simultaneous logins, including those from two separate IP\n  addresses,
    and invalidate those sessions.\n* Use and enforce a Content Security Policy (source:
    Wikipedia) to\n  disable any features that might be manipulated for an XSS attack.\n*
    Read the documentation for any of the libraries referenced in your\n  code to
    understand which elements allow for embedded HTML.\n\n"
  affected_package: sanitize-html
  vulnerable_versions:
  - "<1.11.4"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2017-16016
  cwe:
  - CWE-79
  disclosed_date: 2016-03-26
  created_date: 2017-04-12
  last_modified_date: 2017-04-12
  credit:
  - Andrew Krasichkov
  references:
  - https://github.com/punkave/sanitize-html/commit/5d205a1005ba0df80e21d8c64a15bb3accdb2403
  - https://github.com/punkave/sanitize-html/issues/100
  source_url: https://snyk.io/vuln/npm:sanitize-html:20161026
