---
- id: npmjs:npm:ecstatic:553
  title: Denial of Service
  description: |-
    `ecstatic`, a simple static file server middleware, is vulnerable to denial of service. If a payload with a large number of null bytes (`%00`) is provided by an attacker it can crash ecstatic by running it out of memory.


    [Results from the original advisory](https://www.checkmarx.com/advisories/denial-of-service-dos-vulnerability-in-ecstatic-npm-package/)

    ```
    A payload of 22kB caused a lag of 1 second,
    A payload of 35kB caused a lag of 3 seconds,
    A payload of 86kB caused the server to crash
    ```
  affected_package: ecstatic
  vulnerable_versions:
  - "< 2.0.0"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2016-10703
  cwe: CWE-400
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: Checkmarx
- id: npmjs:npm:ecstatic:64
  title: Denial of Service
  description: |
    Versions of `ecstatic` prior to 1.4.0 are affected by a denial of service vulnerability when certain input strings are sent via the `Last-Modified` or `If-Modified-Since` headers.

    Parsing certain inputs with `new Date()` or `Date.parse()` cases v8 to crash. As ecstatic passes the value of the affected headers into one of these functions, sending certain inputs via one of the headers will cause the server to crash.
  affected_package: ecstatic
  vulnerable_versions:
  - "<1.4.0"
  severity: high
  package_manager: npm
  cve:
  - CVE-2015-9242
  cwe: CWE-730
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: James Halliday
- id: npmjs:npm:ecstatic:830
  title: Open Redirect
  description: Versions of `ecstatic` prior to 4.1.2, 3.3.2 or 2.2.2 are vulnerable
    to Open Redirect. The package fails to validate redirects, allowing attackers
    to craft requests that result in an `HTTP 301` redirect to any other domains.
  affected_package: ecstatic
  vulnerable_versions:
  - "<2.2.2"
  - ">=3.0.0 <3.3.2"
  - ">=4.0.0 <4.1.2"
  severity: high
  package_manager: npm
  cwe: CWE-601
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: Mario Casola
- id: ossindex:npm:ecstatic:8400152761
  title: HTML reflection vulnerability in 500 error status handler (XSS)
  description: |
    Certain IO errors containing the requested path can be echoed directly back to the user without a Content-Type header. In some cases, browsers' sniffing can result in the document being treated as HTML, allowing XSS. This is resolved by sending a Content-Type header of text/plain.
    Includes a test case that can reproduce this behaviour, at least on some Linux systems. (The test should simply pass on other systems.) You can observe this test failing as expected after an intentional regression in [this Travis build](https://travis-ci.org/jre-g/node-ecstatic/jobs/60772623).
  affected_package: ecstatic
  vulnerable_versions:
  - "<1.4.1"
  package_manager: npm
  disclosed_date: 2016-09-18
  created_date: 2016-09-18
  last_modified_date: 2016-09-18
  credit:
  - OSSIndex
  references:
  - https://github.com/jesusabdullah/node-ecstatic/issues/142
  - https://github.com/jfhbrook/node-ecstatic/pull/151
  source_url: https://ossindex.net/resource/package/7013511415/vulnerabilities
- id: ossindex:npm:ecstatic:8400152762
  title: Possible Cross Site Scripting (XSS)
  description: A recent vulnerability `HTML reflection vulnerability in 500 error
    status handler` was resolved for Firefox, but potentially not in all browsers.
    Previous versions of Internet Explorer have aggressively sniffed `text/plain`
    content as `text/html` despite the header, and it may be possible to provoke this
    behaviour in current versions if compatibility modes are enabled. Bugs have also
    resulted in this behaviour in other browsers in some contexts, as recently as
    iOS 6 Safari.
  affected_package: ecstatic
  vulnerable_versions:
  - "<=2.1.0"
  package_manager: npm
  disclosed_date: 2016-09-18
  created_date: 2016-09-18
  last_modified_date: 2016-09-18
  credit:
  - OSSIndex
  references:
  - https://cwe.mitre.org/data/definitions/79.html
  - https://github.com/jesusabdullah/node-ecstatic/issues/151
  - https://github.com/jfhbrook/node-ecstatic/pull/142
  source_url: https://ossindex.net/resource/package/7013511415/vulnerabilities
- id: ossindex:npm:ecstatic:8400152763
  title: Cross Site Scripting (XSS)
  description: The new directory listing code from nodejitsu's static server has some
    xss flaws since `req.url` comes directly from the user and hasn't been filtered
    at all.
  affected_package: ecstatic
  vulnerable_versions:
  - "<0.0.4"
  package_manager: npm
  disclosed_date: 2016-09-18
  created_date: 2016-09-18
  last_modified_date: 2016-09-18
  credit:
  - OSSIndex
  references:
  - https://cwe.mitre.org/data/definitions/79.html
  - https://github.com/jesusabdullah/node-ecstatic/issues/11
  source_url: https://ossindex.net/resource/package/7013511415/vulnerabilities
- id: ossindex:npm:ecstatic:8400171453
  title: fixes the xss issues
  description: Cross Site Scripting attacks were possible due to an unguarded `req.headers.host`.
  affected_package: ecstatic
  vulnerable_versions:
  - "<0.0.4"
  package_manager: npm
  disclosed_date: 2016-10-05
  created_date: 2016-10-05
  last_modified_date: 2016-10-05
  credit:
  - OSSIndex
  references:
  - https://github.com/jesusabdullah/node-ecstatic/issues/13
  source_url: https://ossindex.net/resource/package/7013511415/vulnerabilities
- id: snykio:npm:ecstatic:174543
  title: Open Redirect
  description: |
    [ecstatic][1] is a simple static file server middleware. Use it with a
    raw http server, express/connect or on the CLI.

    Affected versions of this package are vulnerable to Open Redirect. The
    package failed to validate redirects, allowing attackers to craft
    requests that result in an `HTTP 301` redirect to any other domains.



    [1]: https://www.npmjs.com/package/ecstatic
  affected_package: ecstatic
  vulnerable_versions:
  - "<2.2.2"
  - ">=3.0.0 <3.3.2"
  - ">=4.0.0 <4.1.2"
  severity: medium
  package_manager: npm
  cwe:
  - CWE-601
  disclosed_date: 2019-04-23
  created_date: 2019-04-30
  last_modified_date: 2019-04-30
  credit:
  - Mario Casola
  references:
  - https://github.com/jfhbrook/node-ecstatic/commit/be6fc25a826f190b67f4d16158f9d67899e38ee4
  - https://www.npmjs.com/advisories/830
  source_url: https://snyk.io/vuln/SNYK-JS-ECSTATIC-174543
- id: snykio:npm:ecstatic:20151223
  title: Denial of Service (DoS)
  description: |+
    [ecstatic][1] is a simple static file server middleware. Use it with a
    raw http server, express/connect or on the CLI.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS). The vulnerability is caused by the combination of two bugs.
    First, the underlying V8 engine throws an exception when processing the
    specially crafted date, instead of stating the date is invalid as it
    should. Second, the ecstatic server does not handle the exception,
    triggering the crash.

    Upgrading `Ecstatic` will address the second issue and thus fix the
    vulnerability.



    [1]: https://www.npmjs.com/package/ecstatic
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: ecstatic
  vulnerable_versions:
  - "<1.4.0"
  severity: high
  package_manager: npm
  cve:
  - CVE-2015-9242
  cwe:
  - CWE-248
  disclosed_date: 2015-12-23
  created_date: 2015-12-24
  last_modified_date: 2015-12-24
  credit:
  - James Halliday
  references:
  - https://bugs.chromium.org/p/v8/issues/detail?id=4640
  - https://github.com/jfhbrook/node-ecstatic/pull/179
  source_url: https://snyk.io/vuln/npm:ecstatic:20151223
- id: snykio:npm:ecstatic:20160809
  title: Denial of Service (DoS)
  description: "[ecstatic][1] is a simple static file server middleware. Use it with
    a\nraw http server, express/connect or on the CLI.\n\nAffected versions of this
    package are vulnerable to Denial of Service\n(DoS). The process of replacing null
    bytes in the url string is being\ndone in a loop:\n\n`Find Null Bytes` --&gt;
    `If found remove Null Byte` --&gt; `Repeat`\n\nWhen no more Null Bytes found,
    the flow of the program continues.\n\nThis method would work fine with a normal
    URL that should be relatively\nshort, but a malicious user may craft a very long
    URL with a lot of Null\nBytes.\n\n**PoC by Checkmarx:**\n\n`http://www.checkmarx.com/advisories/%00%00%00%00%00%00...`\n\n**Slowdown:**\n\n>
    A payload of 22kB caused a lag of 1 second, A payload of 35kB caused a\n> lag
    of 3 seconds, A payload of 86kB caused the server to crash\n\n\n\n[1]: https://www.npmjs.com/package/ecstatic\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n{: .language-js}\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n{: .language-bash}\n\nThe entire
    process of testing it against a 30 characters long string\ntakes around ~52ms.
    But when given an invalid string, it takes nearly\ntwo seconds to complete the
    test, over ten times as long as it took to\ntest a valid string. The dramatic
    difference is due to the way regular\nexpressions get evaluated.\n\nMost Regex
    engines will work very similarly (with minor differences).\nThe engine will match
    the first possible way to accept the current\ncharacter and proceed to the next
    one. If it then fails to match the\nnext one, it will backtrack and see if there
    was another way to digest\nthe previous character. If it goes too far down the
    rabbit hole only to\nfind out the string doesn’t match in the end, and if many
    characters\nhave multiple valid regex paths, the number of backtracking steps
    can\nbecome very large, resulting in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s
    look at how our expression runs into this problem, using a\nshorter string: \\\"ACCCX\\\".
    While it seems fairly straightforward, there\nare still four different ways that
    the engine could match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.
    \ C+C+C.\n\nThe engine has to try each of those combinations to see if any of
    them\npotentially match against the expression. When you combine that with the\nother
    steps the engine must take, we can use [RegEx 101 debugger][1] to\nsee the engine
    has to take a total of 38 steps before it can determine\nthe string doesn\\'t
    match.\n\nFrom there, the number of steps the engine must use to validate a string\njust
    continues to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n|
    ACCCX | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX
    | 14 | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to
    take over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n"
  affected_package: ecstatic
  vulnerable_versions:
  - "<2.0.0"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2016-10703
  cwe:
  - CWE-400
  disclosed_date: 2016-08-08
  created_date: 2017-12-14
  last_modified_date: 2017-12-14
  credit:
  - Checkmarx
  references:
  - https://github.com/jfhbrook/node-ecstatic/commit/71ce93988ead4b561a8592168c72143907189f01#diff-b2b5a88fb51675f1aa1065c093dce1ee
  - https://github.com/jfhbrook/node-ecstatic/issues/16
  - https://www.checkmarx.com/advisories/denial-of-service-dos-vulnerability-in-ecstatic-npm-package/
  source_url: https://snyk.io/vuln/npm:ecstatic:20160809
- id: snykio:npm:ecstatic:540354
  title: Denial of Service (DoS)
  description: |+
    [ecstatic][1] is a simple static file server middleware. Use it with a
    raw http server, express/connect or on the CLI.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS). It is possible to crash a server using the package due to the way
    URL params parsing is handled during redirect.

    ### PoC   {#poc}

        curl --path-as-is $(echo -e -n "http://127.0.0.1:8080/existing-dir-name?\x0cfoo")

    In the PoC the library is trying to redirect
    `/existing-dir-name?\x0cfoo` to `/existing-dir-name/?\x0cfoo` which
    cause `TypeError: The header content contains invalid characters` error
    because of `\x0c` symbol.



    [1]: https://www.npmjs.com/package/ecstatic
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: ecstatic
  vulnerable_versions:
  - "<4.1.3"
  severity: high
  package_manager: npm
  cve:
  - CVE-2019-10775
  cwe:
  - CWE-400
  disclosed_date: 2019-12-31
  created_date: 2019-12-31
  last_modified_date: 2019-12-31
  credit:
  - Snyk Research
  source_url: https://snyk.io/vuln/SNYK-JS-ECSTATIC-540354
