---
- id: npmjs:npm:bootstrap:891
  title: Cross-Site Scripting
  description: Versions of `bootstrap` prior to 3.4.1 for 3.x and 4.3.1 for 4.x are
    vulnerable to Cross-Site Scripting (XSS). The  `data-template` attribute of the
    tooltip and popover plugins lacks input sanitization and may allow attacker to
    execute arbitrary JavaScript.
  affected_package: bootstrap
  vulnerable_versions:
  - "<3.4.1"
  - ">=4.0.0 <4.3.1"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2019-8331
  cwe: CWE-116
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: poiu
  references: https://npmjs.com/advisories/891
  source_url: https://npmjs.com/advisories/891
- id: ossindex:npm:bootstrap:8397095682
  title: Default tooltip option allows users to have XSS vulnerability in some situations
  description: |
    There is an html option for popover/tooltip again. The option is defaulted to true.

    Having this option allows us to force the popover to use the .text() method to set the title and content of the popover no matter if bootstrap thinks it detects html or not. The problem is that jQuery seems to unescape values grabbed with the .attr() method, so even if you escape <script>alert('data');</script> to <script>alert("data")</script> and set it as your data-content, bootstrap will get the unescaped value from .attr(), detect that this is html and use the .html() method to set the content of the popover causing an XSS issue. Forcing the use of the .text() method by setting the html option to false lets us make sure that doesn't happen.
  affected_package: bootstrap
  vulnerable_versions:
  - "<2.1.0"
  package_manager: npm
  disclosed_date: 2016-08-16
  created_date: 2016-08-16
  last_modified_date: 2017-04-12
  credit:
  - OSSIndex
  references:
  - https://cwe.mitre.org/data/definitions/79.html
  - https://github.com/twbs/bootstrap/commit/f836473129819c2e348f821ed268451b9b8bf2e4
  - https://github.com/twbs/bootstrap/pull/3421
  source_url: https://ossindex.net/resource/package/7012139565/vulnerabilities
- id: ossindex:npm:bootstrap:8400185169
  title: Cross Site Scripting (XSS) in data-target attribute
  description: The data-target attribute is vulnerable to Cross-Site Scripting attacks
    when user-data is supplied to the data-target attribute.
  affected_package: bootstrap
  vulnerable_versions:
  - "<= 3.3.7"
  package_manager: npm
  disclosed_date: 2016-10-17
  created_date: 2016-10-17
  last_modified_date: 2016-10-17
  credit:
  - OSSIndex
  references:
  - https://cwe.mitre.org/data/definitions/79.html
  - https://github.com/twbs/bootstrap/issues/20184
  source_url: https://ossindex.net/resource/package/7012139565/vulnerabilities
- id: snykio:npm:bootstrap:173700
  title: Cross-site Scripting (XSS)
  description: |+
    [bootstrap][1] is a popular front-end framework for faster and easier
    web development.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) in`data-template`, `data-content` and `data-title` properties of
    tooltip/popover.



    [1]: https://www.npmjs.com/package/bootstrap
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: bootstrap
  vulnerable_versions:
  - "<3.4.1"
  - ">=4.0.0 <4.3.1"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2019-8331
  cwe:
  - CWE-79
  disclosed_date: 2019-02-11
  created_date: 2019-02-15
  last_modified_date: 2019-02-15
  credit:
  - Yonatan Offek (poiu)
  references:
  - https://blog.getbootstrap.com/2019/02/13/bootstrap-4-3-1-and-3-4-1/
  - https://github.com/twbs/bootstrap-rubygem/commit/a63d04c96d14e42492ccdba1d7f3d6ec1af022a9
  - https://github.com/twbs/bootstrap/issues/28236
  - https://github.com/twbs/bootstrap/pull/28236/commits/5efa9b531d25927b907e3fa24b818608bc38a2f0
  - https://www.npmjs.com/advisories/891
  source_url: https://snyk.io/vuln/SNYK-JS-BOOTSTRAP-173700
- id: snykio:npm:bootstrap:20120510
  title: Cross-site Scripting (XSS)
  description: "[bootstrap][1] is a popular front-end framework for faster and easier\nweb
    development.\n\nAffected versions of this package are vulnerable to Cross-site
    Scripting\n(XSS) The html option for popovers/tooltips is unescaped when grabbed\nwith
    jQuery\\'s `.attr()` method. This may allow attackers to execute XSS\nattacks.\n\n###
    PoC   {#poc}\n\n    <!DOCTYPE html>\n    <html lang=\"en\">\n      <head>\n        <title>Bootstrap
    Example</title>\n        <meta charset=\"utf-8\" />\n        <meta name=\"viewport\"
    content=\"width=device-width, initial-scale=1\" />\n        <link\n          href=\"https://stackpath.bootstrapcdn.com/twitter-bootstrap/2.0.4/css/bootstrap-combined.min.css\"\n
    \         rel=\"stylesheet\"\n          integrity=\"sha384-G87n9a15LEsz+OvKCr10ldEbckfbCpr2gjYnZgCiKiwH0p/If1QkSURCTzubbt19\"\n
    \         crossorigin=\"anonymous\"\n        />\n        <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.4.0/jquery.min.js\"></script>\n
    \       <script\n          src=\"https://stackpath.bootstrapcdn.com/twitter-bootstrap/2.0.4/js/bootstrap.min.js\"\n
    \         integrity=\"sha384-2sVosMIQw67h8RBCTmE20BSl9j66nWwbH+2W/CKr8celILSNnEfJnJv2PKCdet3I\"\n
    \         crossorigin=\"anonymous\"\n        ></script>\n      </head>\n      <body>\n
    \       <div class=\"container\">\n          <h3>Popover Example</h3>\n          <a\n
    \           href=\"#\"\n            data-toggle=\"popover\"\n            title=\"<script>alert('XSS')</script>\"\n
    \           data-content=\"<script>alert('XSS')</script>\"\n            >Toggle
    popover</a\n          >\n        </div>\n    \n        <script>\n          $(document).ready(function()
    {\n            $('[data-toggle=\"popover\"]').popover();\n          });\n        </script>\n
    \     </body>\n    </html>\n\n\n\n[1]: https://www.npmjs.com/package/bootstrap\n\\nA
    cross-site scripting attack occurs when the attacker tricks a\nlegitimate web-based
    application or site to accept a request as\noriginating from a trusted source.\n\nThis
    is done by escaping the context of the web application; the web\napplication then
    delivers that data to its users along with other\ntrusted dynamic content, without
    validating it. The browser unknowingly\nexecutes malicious script on the client
    side (through client-side\nlanguages; usually JavaScript or HTML) in order to
    perform actions that\nare otherwise typically blocked by the browser’s Same Origin
    Policy.\n\nֿInjecting malicious code is the most prevalent manner by which XSS
    is\nexploited; for this reason, escaping characters in order to prevent this\nmanipulation
    is the top method for securing code against this\nvulnerability.\n\nEscaping means
    that the application is coded to mark key characters, and\nparticularly key characters
    included in user input, to prevent those\ncharacters from being interpreted in
    a dangerous context. For example,\nin HTML, `<` can be coded as `&lt`; and `>`
    can be coded as `&gt`; in\norder to be interpreted and displayed as themselves
    in text, while\nwithin the code itself, they are used for HTML tags. If malicious\ncontent
    is injected into an application that escapes special characters\nand that malicious
    content uses `<` and `>` as HTML tags, those\ncharacters are nonetheless not interpreted
    as HTML tags by the browser\nif they’ve been correctly escaped in the application
    code and in this\nway the attempted attack is diverted.\n\nThe most prominent
    use of XSS is to steal cookies (source: OWASP\nHttpOnly) and hijack user sessions,
    but XSS exploits have been used to\nexpose sensitive information, enable access
    to privileged services and\nfunctionality and deliver malware.\n\n### Types of
    attacks   {#types-of-attacks}\n\nThere are a few methods by which XSS can be manipulated:\n\n|
    Type | Origin | Description |\n|----------\n| **Stored** | Server | The malicious
    code is inserted in the application (usually as a link) by the attacker. The code
    is activated every time a user clicks the link. |\n| **Reflected** | Server |
    The attacker delivers a malicious link externally from the vulnerable web site
    application to a user. When clicked, malicious code is sent to the vulnerable
    web site, which reflects the attack back to the user’s browser. |\n| **DOM-based**
    | Client | The attacker forces the user’s browser to render a malicious page.
    The data in the page itself delivers the cross-site scripting data. |\n| **Mutated**
    |  | The attacker injects code that appears safe, but is then rewritten and modified
    by the browser, while parsing the markup. An example is rebalancing unclosed quotation
    marks or even adding quotation marks to unquoted parameters. |\n\n### Affected
    environments   {#affected-environments}\n\nThe following environments are susceptible
    to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n###
    How to prevent   {#how-to-prevent}\n\nThis section describes the top best practices
    designed to specifically\nprotect your code:\n\n* Sanitize data input in an HTTP
    request before reflecting it back,\n  ensuring all data is validated, filtered
    or escaped before echoing\n  anything back to the user, such as the values of
    query parameters\n  during searches.\n* Convert special characters such as `?`,
    `&`, `/`, `<`, `>` and spaces\n  to their respective HTML or URL encoded equivalents.\n*
    Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n*
    Detect simultaneous logins, including those from two separate IP\n  addresses,
    and invalidate those sessions.\n* Use and enforce a Content Security Policy (source:
    Wikipedia) to\n  disable any features that might be manipulated for an XSS attack.\n*
    Read the documentation for any of the libraries referenced in your\n  code to
    understand which elements allow for embedded HTML.\n\n"
  affected_package: bootstrap
  vulnerable_versions:
  - "<2.1.0"
  severity: medium
  package_manager: npm
  cwe:
  - CWE-79
  disclosed_date: 2012-05-09
  created_date: 2017-04-10
  last_modified_date: 2017-04-10
  credit:
  - Peter Corsaro
  references:
  - https://github.com/twbs/bootstrap/commit/f836473129819c2e348f821ed268451b9b8bf2e4
  - https://github.com/twbs/bootstrap/pull/3421
  source_url: https://snyk.io/vuln/npm:bootstrap:20120510
- id: snykio:npm:bootstrap:20160627
  title: Cross-site Scripting (XSS)
  description: |+
    [bootstrap][1] is a popular front-end framework for faster and easier
    web development.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) via the `data-target` attribute.



    [1]: https://www.npmjs.com/package/bootstrap
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: bootstrap
  vulnerable_versions:
  - "<3.4.0"
  - ">=4.0.0-alpha <4.0.0-beta.2"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2016-10735
  cwe:
  - CWE-79
  disclosed_date: 2016-06-27
  created_date: 2018-01-19
  last_modified_date: 2018-01-19
  credit:
  - Unknown
  references:
  - https://blog.getbootstrap.com/2018/07/12/bootstrap-4-1-2/
  - https://github.com/twbs/bootstrap/commit/9612830701211d757ff95ceccbb494fd2e7ee17e
  - https://github.com/twbs/bootstrap/issues/20184
  - https://github.com/twbs/bootstrap/pull/23679
  - https://github.com/twbs/bootstrap/pull/23687
  - https://github.com/twbs/bootstrap/pull/23687/commits/d9be1da55bf0f94a81e8a2c9acf5574fb801306e
  source_url: https://snyk.io/vuln/npm:bootstrap:20160627
- id: snykio:npm:bootstrap:20180529
  title: Cross-site Scripting (XSS)
  description: |+
    [bootstrap][1] is a popular front-end framework for faster and easier
    web development.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) via the `tooltip`, `collapse` and `scrollspy` plugins.



    [1]: https://www.npmjs.com/package/bootstrap
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: bootstrap
  vulnerable_versions:
  - "<3.4.0"
  - ">=4.0.0 <4.1.2"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2018-14040
  - CVE-2018-14042
  cwe:
  - CWE-79
  disclosed_date: 2018-05-29
  created_date: 2018-06-12
  last_modified_date: 2018-06-12
  credit:
  - 1Jesper1
  references:
  - https://blog.getbootstrap.com/2018/07/12/bootstrap-4-1-2/
  - https://github.com/twbs/bootstrap/commit/149096016f70fd815540d62c0989fd99cdc809e0
  - https://github.com/twbs/bootstrap/issues/26625
  - https://github.com/twbs/bootstrap/issues/26627
  - https://github.com/twbs/bootstrap/issues/26628
  - https://github.com/twbs/bootstrap/issues/27915#issuecomment-452140906
  - https://github.com/twbs/bootstrap/pull/26630
  - https://github.com/twbs/bootstrap/pull/26630/commits/3229efc0811df29765c1d0a949c85362378b0628
  - https://github.com/twbs/bootstrap/pull/26630/commits/3ba186313e9e651bbd52a6a3a0305891dee0a621
  - https://github.com/twbs/bootstrap/pull/26630/commits/efca80bb5bb34546a2e7a9488b89f71457d2ad92
  source_url: https://snyk.io/vuln/npm:bootstrap:20180529
- id: snykio:npm:bootstrap:72889
  title: Cross-site Scripting (XSS)
  description: |+
    [bootstrap][1] is a popular front-end framework for faster and easier
    web development.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) via the tooltip `data-viewport` attribute.



    [1]: https://www.npmjs.com/package/bootstrap
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: bootstrap
  vulnerable_versions:
  - "<3.4.0"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2018-20676
  cwe:
  - CWE-79
  disclosed_date: 2018-08-13
  created_date: 2019-01-10
  last_modified_date: 2019-01-10
  credit:
  - Unknown
  references:
  - https://blog.getbootstrap.com/2018/12/13/bootstrap-3-4-0/
  - https://github.com/twbs/bootstrap/issues/27044
  - https://github.com/twbs/bootstrap/pull/27047
  source_url: https://snyk.io/vuln/SNYK-JS-BOOTSTRAP-72889
- id: snykio:npm:bootstrap:72890
  title: Cross-site Scripting (XSS)
  description: |+
    [bootstrap][1] is a popular front-end framework for faster and easier
    web development.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) via the `affix` configuration target property.



    [1]: https://www.npmjs.com/package/bootstrap
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: bootstrap
  vulnerable_versions:
  - "<3.4.0"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2018-20677
  cwe:
  - CWE-79
  disclosed_date: 2019-01-09
  created_date: 2019-01-10
  last_modified_date: 2019-01-10
  credit:
  - Unknown
  references:
  - https://blog.getbootstrap.com/2018/12/13/bootstrap-3-4-0/
  - https://github.com/twbs/bootstrap/commit/2a5ba23ce8f041f3548317acc992ed8a736b609d
  - https://github.com/twbs/bootstrap/issues/27045
  - https://github.com/twbs/bootstrap/pull/27047
  source_url: https://snyk.io/vuln/SNYK-JS-BOOTSTRAP-72890
- id: snykio:npm:bootstrap:73560
  title: Cross-site Scripting (XSS)
  description: |+
    [bootstrap][1] is a popular front-end framework for faster and easier
    web development.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) via the `tooltip`, `collapse` and `scrollspy` plugins.



    [1]: https://www.npmjs.com/package/bootstrap
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: bootstrap
  vulnerable_versions:
  - ">=4.0.0 <4.1.2"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2018-14041
  cwe:
  - CWE-79
  disclosed_date: 2018-05-29
  created_date: 2018-06-12
  last_modified_date: 2018-06-12
  credit:
  - 1Jesper1
  references:
  - https://github.com/twbs/bootstrap/commit/149096016f70fd815540d62c0989fd99cdc809e0
  - https://github.com/twbs/bootstrap/issues/26625
  - https://github.com/twbs/bootstrap/issues/26627
  - https://github.com/twbs/bootstrap/issues/26628
  - https://github.com/twbs/bootstrap/issues/27915#issuecomment-452140906
  - https://github.com/twbs/bootstrap/pull/26630
  - https://github.com/twbs/bootstrap/pull/26630/commits/3229efc0811df29765c1d0a949c85362378b0628
  - https://github.com/twbs/bootstrap/pull/26630/commits/3ba186313e9e651bbd52a6a3a0305891dee0a621
  - https://github.com/twbs/bootstrap/pull/26630/commits/efca80bb5bb34546a2e7a9488b89f71457d2ad92
  source_url: https://snyk.io/vuln/SNYK-JS-BOOTSTRAP-73560
