---
- id: npmjs:npm:property-expr:1681
  title: Prototype Pollution in property-expr
  description: "`property-expr` before 2.0.3 are vulnerable to Prototype Pollution
    via the setter function."
  affected_package: property-expr
  vulnerable_versions:
  - "<2.0.3"
  severity: high
  package_manager: npm
  cve:
  - CVE-2020-7707
  cwe: CWE-20
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: Anonymous
- id: snykio:npm:property-expr:598800
  title: Prototype Pollution
  description: "[property-expr][1] is a tiny util for getting and setting deep object\nprops
    safely\n\nAffected versions of this package are vulnerable to Prototype Pollution\nvia
    the `setter` function.\n\n### POC   {#poc}\n\n    var expr = require('property-expr');\n
    \   expr.setter('__proto__.polluted')({}, true);\n    console.log(polluted); //
    true\n\n\n\n[1]: https://www.npmjs.com/package/property-expr\n\\nPrototype Pollution
    is a vulnerability affecting JavaScript. Prototype\nPollution refers to the ability
    to inject properties into existing\nJavaScript language construct prototypes,
    such as objects. JavaScript\nallows all Object attributes to be altered, including
    their magical\nattributes such as `_proto_`, `constructor` and `prototype`. An
    attacker\nmanipulates these attributes to overwrite, or pollute, a JavaScript\napplication
    object prototype of the base object by injecting other\nvalues. Properties on
    the `Object.prototype` are then inherited by all\nthe JavaScript objects through
    the prototype chain. When that happens,\nthis leads to either denial of service
    by triggering JavaScript\nexceptions, or it tampers with the application source
    code to force the\ncode path that the attacker injects, thereby leading to remote
    code\nexecution.\n\nThere are two main ways in which the pollution of prototypes
    occurs:\n\n* Unsafe `Object` recursive merge\n\n* Property definition by path\n\n###
    Unsafe Object recursive merge   {#unsafe-object-recursive-merge}\n\nThe logic
    of a vulnerable recursive merge function follows the following\nhigh-level model:\n\n
    \   merge (target, source)\n    \n      foreach property of source\n    \n        if
    property exists and is an object on both the target and the source\n    \n          merge(target[property],
    source[property])\n    \n        else\n    \n          target[property] = source[property]\n\n\n\nWhen
    the source object contains a property named `_proto_` defined with\n`Object.defineProperty()`
    , the condition that checks if the property\nexists and is an object on both the
    target and the source passes and the\nmerge recurses with the target, being the
    prototype of `Object` and the\nsource of `Object` as defined by the attacker.
    Properties are then\ncopied on the `Object` prototype.\n\nClone operations are
    a special sub-class of unsafe recursive merges,\nwhich occur when a recursive
    merge is conducted on an empty object:\n`merge({},source)`.\n\n`lodash` and `Hoek`
    are examples of libraries susceptible to recursive\nmerge attacks.\n\n### Property
    definition by path   {#property-definition-by-path}\n\nThere are a few JavaScript
    libraries that use an API to define property\nvalues on an object based on a given
    path. The function that is\ngenerally affected contains this signature: `theFunction(object,
    path,\nvalue)`\n\nIf the attacker can control the value of “path”, they can set
    this value\nto `_proto_.myValue`. `myValue` is then assigned to the prototype
    of the\nclass of the object.\n\n"
  affected_package: property-expr
  vulnerable_versions:
  - "<2.0.3"
  severity: high
  package_manager: npm
  cve:
  - CVE-2020-7707
  cwe:
  - CWE-400
  disclosed_date: 2020-08-17
  created_date: 2020-08-19
  last_modified_date: 2020-08-19
  credit:
  - NerdJS
  references:
  - https://github.com/jquense/expr/commit/df846910915d59f711ce63c1f817815bceab5ff7
  source_url: https://snyk.io/vuln/SNYK-JS-PROPERTYEXPR-598800
