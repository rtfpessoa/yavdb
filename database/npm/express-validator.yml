---
- id: snykio:npm:express-validator:174763
  title: Filter Bypass
  description: "[express-validator][1] is an express.js middleware for validator.js.\n\nAffected
    versions of this package are vulnerable to Filter Bypass.\n`express-validator`
    by default does not sanitize arrays or non-string\nvalues. This vulnerability
    could be leveraged by an attacker to bypass\nexpress-validator protections and
    inject malicious JavaScript into a\nwebpage.\n\n### POC   {#poc}\n\n    const
    express = require(\"express\");\n    const app = express();\n    const { sanitizeQuery
    } = require(\"express-validator/filter\");\n    \n    app.get(\n      \"/\",\n
    \     [sanitizeQuery(\"id\").escape()],\n      async (req, res) => {\n        res.send(\"id
    is \" + req.query.id);\n      }\n    );\n    \n    app.listen(8080, function()
    {\n      console.log(\"server running on 8080\");\n    }); //the server object
    listens on port 8080\n\nSending an HTTP request such as\n`http://URL:8080/?id[]=<script>alert('XSS')</script>`
    will result in\nexecution of JavaScript successfully bypassing the module.\n\n\n\n[1]:
    https://express-validator.github.io\n\\nA cross-site scripting attack occurs when
    the attacker tricks a\nlegitimate web-based application or site to accept a request
    as\noriginating from a trusted source.\n\nThis is done by escaping the context
    of the web application; the web\napplication then delivers that data to its users
    along with other\ntrusted dynamic content, without validating it. The browser
    unknowingly\nexecutes malicious script on the client side (through client-side\nlanguages;
    usually JavaScript or HTML) in order to perform actions that\nare otherwise typically
    blocked by the browser’s Same Origin Policy.\n\nֿInjecting malicious code is the
    most prevalent manner by which XSS is\nexploited; for this reason, escaping characters
    in order to prevent this\nmanipulation is the top method for securing code against
    this\nvulnerability.\n\nEscaping means that the application is coded to mark key
    characters, and\nparticularly key characters included in user input, to prevent
    those\ncharacters from being interpreted in a dangerous context. For example,\nin
    HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in\norder to be
    interpreted and displayed as themselves in text, while\nwithin the code itself,
    they are used for HTML tags. If malicious\ncontent is injected into an application
    that escapes special characters\nand that malicious content uses `<` and `>` as
    HTML tags, those\ncharacters are nonetheless not interpreted as HTML tags by the
    browser\nif they’ve been correctly escaped in the application code and in this\nway
    the attempted attack is diverted.\n\nThe most prominent use of XSS is to steal
    cookies (source: OWASP\nHttpOnly) and hijack user sessions, but XSS exploits have
    been used to\nexpose sensitive information, enable access to privileged services
    and\nfunctionality and deliver malware.\n\n### Types of attacks   {#types-of-attacks}\n\nThere
    are a few methods by which XSS can be manipulated:\n\n| Type | Origin | Description
    |\n|----------\n| **Stored** | Server | The malicious code is inserted in the
    application (usually as a link) by the attacker. The code is activated every time
    a user clicks the link. |\n| **Reflected** | Server | The attacker delivers a
    malicious link externally from the vulnerable web site application to a user.
    When clicked, malicious code is sent to the vulnerable web site, which reflects
    the attack back to the user’s browser. |\n| **DOM-based** | Client | The attacker
    forces the user’s browser to render a malicious page. The data in the page itself
    delivers the cross-site scripting data. |\n| **Mutated** |  | The attacker injects
    code that appears safe, but is then rewritten and modified by the browser, while
    parsing the markup. An example is rebalancing unclosed quotation marks or even
    adding quotation marks to unquoted parameters. |\n\n### Affected environments
    \  {#affected-environments}\n\nThe following environments are susceptible to an
    XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n###
    How to prevent   {#how-to-prevent}\n\nThis section describes the top best practices
    designed to specifically\nprotect your code:\n\n* Sanitize data input in an HTTP
    request before reflecting it back,\n  ensuring all data is validated, filtered
    or escaped before echoing\n  anything back to the user, such as the values of
    query parameters\n  during searches.\n* Convert special characters such as `?`,
    `&`, `/`, `<`, `>` and spaces\n  to their respective HTML or URL encoded equivalents.\n*
    Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n*
    Detect simultaneous logins, including those from two separate IP\n  addresses,
    and invalidate those sessions.\n* Use and enforce a Content Security Policy (source:
    Wikipedia) to\n  disable any features that might be manipulated for an XSS attack.\n*
    Read the documentation for any of the libraries referenced in your\n  code to
    understand which elements allow for embedded HTML.\n\n"
  affected_package: express-validator
  vulnerable_versions:
  - ">=4.2.1 <6.0.0"
  severity: medium
  package_manager: npm
  cwe:
  - CWE-79
  disclosed_date: 2018-10-28
  created_date: 2019-05-28
  last_modified_date: 2019-05-28
  credit:
  - Meisam Monsef
  references:
  - https://codesandbox.io/s/expressvalidatorbypasspoc-ezrfx
  - https://github.com/express-validator/express-validator/commit/3425295ac42e717ec09095e3c2c657a214679c4b
  - https://github.com/express-validator/express-validator/issues/651
  - https://github.com/express-validator/express-validator/pull/711
  source_url: https://snyk.io/vuln/SNYK-JS-EXPRESSVALIDATOR-174763
