---
- id: npmjs:npm:htmr:1496
  title: Cross-Site Scripting
  description: Versions of `htmr` prior to 0.8.7 are vulnerable to Cross-Site Scripting
    (XSS).  The package uses `innerHTML` to unescape HTML entities. This may lead
    to [DOM-based XSS](https://owasp.org/www-community/attacks/DOM_Based_XSS) through
    HTML-encoded XSS payloads. This may allow an attacker to execute arbitrary JavaScript
    in a victim's browser.
  affected_package: htmr
  vulnerable_versions:
  - "<0.8.7"
  severity: high
  package_manager: npm
  cwe: CWE-79
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: Visat
- id: snykio:npm:htmr:560840
  title: Cross-site Sripting  (XSS)
  description: "[htmr][1] is a simple and lightweight conversion library from HTML\nstring
    to react element coversions.\n\nAffected versions of this package are vulnerable
    to Cross-site Sripting\n(XSS). This module uses `innerHTML` [ref][2] to unescape
    HTML entities.\nThis leads to DOM-based XSS by inserting HTML-encoded XSS payload
    (see\nPoC).\n\n### PoC   {#poc}\n\n1.  Create a React app: `create-react-app xss-htmr`\n2.
    \ Install `htmr` module: `cd xss-htmr; npm i htmr`\n3.  Edit `src/App.js` file
    to this:\n^\n\n    import React from 'react';\n    import convert from 'htmr';\n
    \   \n    export default function App() {\n      return convert(`<p>Hash: ${window.location.hash}</p>`);\n
    \   }\n\n1.  Run the server: `npm run start`\n2.  Visit `http://localhost:3000/#&lt;img/src/onerror=alert('xss')&gt;`,\n
    \   an alert will popup.\n{: start=\"4\"}\n\n\n\n[1]: https://www.npmjs.com/package/htmr\n[2]:
    https://github.com/pveyes/htmr/blob/6e3607a2186d6166eaf395e5272cb9a80c4e2cf6/src/browser.ts#L21\n\\nA
    cross-site scripting attack occurs when the attacker tricks a\nlegitimate web-based
    application or site to accept a request as\noriginating from a trusted source.\n\nThis
    is done by escaping the context of the web application; the web\napplication then
    delivers that data to its users along with other\ntrusted dynamic content, without
    validating it. The browser unknowingly\nexecutes malicious script on the client
    side (through client-side\nlanguages; usually JavaScript or HTML) in order to
    perform actions that\nare otherwise typically blocked by the browser’s Same Origin
    Policy.\n\nֿInjecting malicious code is the most prevalent manner by which XSS
    is\nexploited; for this reason, escaping characters in order to prevent this\nmanipulation
    is the top method for securing code against this\nvulnerability.\n\nEscaping means
    that the application is coded to mark key characters, and\nparticularly key characters
    included in user input, to prevent those\ncharacters from being interpreted in
    a dangerous context. For example,\nin HTML, `<` can be coded as `&lt`; and `>`
    can be coded as `&gt`; in\norder to be interpreted and displayed as themselves
    in text, while\nwithin the code itself, they are used for HTML tags. If malicious\ncontent
    is injected into an application that escapes special characters\nand that malicious
    content uses `<` and `>` as HTML tags, those\ncharacters are nonetheless not interpreted
    as HTML tags by the browser\nif they’ve been correctly escaped in the application
    code and in this\nway the attempted attack is diverted.\n\nThe most prominent
    use of XSS is to steal cookies (source: OWASP\nHttpOnly) and hijack user sessions,
    but XSS exploits have been used to\nexpose sensitive information, enable access
    to privileged services and\nfunctionality and deliver malware.\n\n### Types of
    attacks   {#types-of-attacks}\n\nThere are a few methods by which XSS can be manipulated:\n\n|
    Type | Origin | Description |\n|----------\n| **Stored** | Server | The malicious
    code is inserted in the application (usually as a link) by the attacker. The code
    is activated every time a user clicks the link. |\n| **Reflected** | Server |
    The attacker delivers a malicious link externally from the vulnerable web site
    application to a user. When clicked, malicious code is sent to the vulnerable
    web site, which reflects the attack back to the user’s browser. |\n| **DOM-based**
    | Client | The attacker forces the user’s browser to render a malicious page.
    The data in the page itself delivers the cross-site scripting data. |\n| **Mutated**
    |  | The attacker injects code that appears safe, but is then rewritten and modified
    by the browser, while parsing the markup. An example is rebalancing unclosed quotation
    marks or even adding quotation marks to unquoted parameters. |\n\n### Affected
    environments   {#affected-environments}\n\nThe following environments are susceptible
    to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n###
    How to prevent   {#how-to-prevent}\n\nThis section describes the top best practices
    designed to specifically\nprotect your code:\n\n* Sanitize data input in an HTTP
    request before reflecting it back,\n  ensuring all data is validated, filtered
    or escaped before echoing\n  anything back to the user, such as the values of
    query parameters\n  during searches.\n* Convert special characters such as `?`,
    `&`, `/`, `<`, `>` and spaces\n  to their respective HTML or URL encoded equivalents.\n*
    Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n*
    Detect simultaneous logins, including those from two separate IP\n  addresses,
    and invalidate those sessions.\n* Use and enforce a Content Security Policy (source:
    Wikipedia) to\n  disable any features that might be manipulated for an XSS attack.\n*
    Read the documentation for any of the libraries referenced in your\n  code to
    understand which elements allow for embedded HTML.\n\n"
  affected_package: htmr
  vulnerable_versions:
  - "<0.8.7"
  severity: medium
  package_manager: npm
  cwe:
  - CWE-79
  disclosed_date: 2020-03-15
  created_date: 2020-03-20
  last_modified_date: 2020-03-20
  credit:
  - visat
  references:
  - https://github.com/pveyes/htmr/blob/6e3607a2186d6166eaf395e5272cb9a80c4e2cf6/src/browser.ts#L21
  - https://hackerone.com/reports/753971
  source_url: https://snyk.io/vuln/SNYK-JS-HTMR-560840
