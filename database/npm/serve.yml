---
- id: npmjs:npm:serve:1010
  title: Path Traversal
  description: Versions of `serve` prior to 7.0.1 are vulnerable to Path Traversal.
    Explicitly ignored folders can be accessed through if the path contains a `/./`,
    which allows attackers to access hidden folders and files.
  affected_package: serve
  vulnerable_versions:
  - "<7.0.1"
  severity: high
  package_manager: npm
  cve:
  - CVE-2019-5415
  cwe: CWE-22
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: tungpun
- id: npmjs:npm:serve:1096
  title: Open Redirect
  description: 'Versions of `serve`prior to 11.3.2 are vulnerable to Open Redirect.
    The package redirected requests to third-party websites for URLs such as `localhost:5000//example.com/index`.
    The user would be redirected to `example.com`.

'
  affected_package: serve
  vulnerable_versions:
  - "<11.3.2"
  severity: medium
  package_manager: npm
  cwe: CWE-601
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: Evgeny Agronsky
- id: npmjs:npm:serve:561
  title: Directory Traversal
  description: |-
    Affected versions of `serve` do not properly handle `%2e` (.) and `%2f` (/) characters, and allow the, characters to be used in paths. This can be used to traverse the directory tree and list content of any directory the user running the process has access to.

    Mitigating factors:
    This vulnerability only allows listing of directory contents and does not allow reading of arbitrary files.
  affected_package: serve
  vulnerable_versions:
  - "<=6.4.8"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2018-3712
  cwe: CWE-22
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: bl4de
- id: npmjs:npm:serve:594
  title: Byass due to validation before canonicalization
  description: "Versions of `serve` before 6.5.2 are vulnerable to the bypass of the
    ignore functionality. The bypass is possible because validation happens before
    canonicalization of paths and filenames.\n\n\n\nExample:\nHere we have a server
    that ignores the file test.txt.\n```\nconst serve = require('serve')\nconst server
    = serve(__dirname, {\n      port: 1337,\n      ignore: ['test.txt']\n})\n```\n\nUsing
    the URL encoded form of a letter (%65 instead of e) attacker can bypass the ignore
    control accessing the file. \n\n`curl http://localhost:1337/t%65st.txt`\n\nAdditionally
    this technique can be used to get directory listings of ignored directories."
  affected_package: serve
  vulnerable_versions:
  - "<6.5.2"
  severity: high
  package_manager: npm
  cwe: CWE-180
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: digitalwizard
- id: npmjs:npm:serve:672
  title: Information Exposure on Case Insensitive File Systems
  description: 'Versions of `serve` before 7.0.0 are vulnerable to information exposure,
    bypassing the ignore security control, but only on case insensitive file systems.

'
  affected_package: serve
  vulnerable_versions:
  - "<=6.5.3"
  severity: high
  package_manager: npm
  cve:
  - CVE-2018-3809
  cwe: CWE-178
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: tungpun
- id: npmjs:npm:serve:795
  title: Directory Traversal
  description: Versions of `serve` before 7.1.3 are vulnerable to Directory Traversal.
    File paths are not sanitized leading to unauthorized access of system files.
  affected_package: serve
  vulnerable_versions:
  - "<=7.1.2"
  severity: high
  package_manager: npm
  cve:
  - CVE-2019-5417
  cwe: CWE-29
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: tungpun
- id: npmjs:npm:serve:965
  title: Path Traversal
  description: Versions of `serve` prior to 10.1.2 are vulnerable to Path Traversal.
    Explicitly ignored folders can be accessed through relative paths, which allows
    attackers to access hidden folders and files.
  affected_package: serve
  vulnerable_versions:
  - "<10.1.2"
  severity: high
  package_manager: npm
  cwe: CWE-22
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: skyn3t
- id: npmjs:npm:serve:971
  title: Cross-Site Scripting
  description: Versions of `serve` prior to 10.0.2 are vulnerable to Cross-Site Scripting
    (XSS). The package does not encode output, allowing attackers to execute arbitrary
    JavaScript in the victim's browser if user-supplied input is rendered.
  affected_package: serve
  vulnerable_versions:
  - "<10.0.2"
  severity: high
  package_manager: npm
  cwe: CWE-79
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: tungpun
- id: npmjs:npm:serve:992
  title: Cross-Site Scripting
  description: Versions of `serve` prior to 10.0.2 are vulnerable to Cross-Site Scripting
    (XSS). The package fails to sanitize filenames, allowing attackers to execute
    arbitrary JavaScript in the victim's browser through files with names containing
    malicious code.
  affected_package: serve
  vulnerable_versions:
  - "<10.0.2"
  severity: medium
  package_manager: npm
  cwe: CWE-79
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: skyn3t
- id: snykio:npm:serve:174738
  title: Directory Traversal
  description: |
    [serve][1] is a static file serving and directory listing.

    Affected versions of this package are vulnerable to Directory Traversal.
    It was possible to fetch files outside of the web root dir with a
    symlink file on the working dir.



    [1]: https://www.npmjs.com/package/serve
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
  affected_package: serve
  vulnerable_versions:
  - "<11.0.0"
  severity: high
  package_manager: npm
  cwe:
  - CWE-23
  disclosed_date: 2019-05-03
  created_date: 2019-05-19
  last_modified_date: 2019-05-19
  credit:
  - johns simon (guardian_trooper
  references:
  - https://github.com/zeit/serve/commit/639588686a87024533c18f367cf12ae8854a3d0c
  - https://hackerone.com/reports/510043
  source_url: https://snyk.io/vuln/SNYK-JS-SERVE-174738
- id: snykio:npm:serve:20170601
  title: Directory Traversal
  description: |
    [`serve`][1] is Static file serving and directory listing. Affected
    versions of the package are vulnerable to Directory Traversal related to
    [SNYK-JS-NEXT-10641][2]



    [1]: https://www.npmjs.com/package/serve
    [2]: https://snyk.io/vuln/SNYK-JS-NEXT-10641
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
  affected_package: serve
  vulnerable_versions:
  - "<5.2.0"
  - ">=5.2.1 <5.2.2"
  severity: high
  package_manager: npm
  cwe:
  - CWE-22
  disclosed_date: 2017-05-31
  created_date: 2017-06-12
  last_modified_date: 2017-06-12
  credit:
  - Radek Karpowicz
  - ru_raz0r
  references:
  - https://github.com/zeit/serve/commit/cb939b5bfbc5ef40717df6a53fbcc6adf1b325ac
  - https://github.com/zeit/serve/releases/tag/5.2.0
  - https://send-patch.now.sh/
  source_url: https://snyk.io/vuln/npm:serve:20170601
- id: snykio:npm:serve:20180123
  title: Directory Traversal
  description: |
    [`serve`][1] is a package that lists and allows browsing static file
    serving and directories in the browser.

    It does not properly sanitze dots (`%2e`) and slashes (`%2f`), allowing
    an attacker to leverage these characters to traverse the directory tree
    and list the content of any directory the user running the process has
    access to.

    **Note:** An attacker will not be able to use this vulnerability to read
    arbitrary files.



    [1]: https://www.npmjs.com/package/serve
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
  affected_package: serve
  vulnerable_versions:
  - "<6.4.9"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2018-3712
  cwe:
  - CWE-22
  disclosed_date: 2018-01-23
  created_date: 2018-01-25
  last_modified_date: 2018-01-25
  credit:
  - Rafal Janicki (bl4de)
  references:
  - https://github.com/zeit/serve/commit/6adad6881c61991da61ebc857857c53409544575
  - https://github.com/zeit/serve/pull/316
  - https://hackerone.com/reports/307666
  source_url: https://snyk.io/vuln/npm:serve:20180123
- id: snykio:npm:serve:20180318
  title: Information Exposure
  description: |
    [serve][1] is a module provides a neat interface for listing the
    directory\'s contents and switching into sub folders.

    Affected versions of this package are vulnerable to Information Exposure
    through directory listing. It allows directory browsing and to serve
    static files through the browser.



    [1]: https://www.npmjs.com/package/serve
  affected_package: serve
  vulnerable_versions:
  - "<6.5.2"
  severity: high
  package_manager: npm
  cve:
  - CVE-2018-3718
  cwe:
  - CWE-200
  disclosed_date: 2018-03-18
  created_date: 2018-03-18
  last_modified_date: 2018-03-18
  credit:
  - digitalwizard
  source_url: https://snyk.io/vuln/npm:serve:20180318
- id: snykio:npm:serve:20180529
  title: Directory Traversal
  description: |
    [`serve`][1] is a static file serving and directory listing.

    Affected versions of this package are vulnerable to Directory Traversal
    attacks. An attacker could read local files on the target server.



    [1]: https://www.npmjs.com/package/serve
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
  affected_package: serve
  vulnerable_versions:
  - "<7.1.3"
  severity: high
  package_manager: npm
  cve:
  - CVE-2019-5417
  cwe:
  - CWE-22
  disclosed_date: 2018-05-29
  created_date: 2018-08-21
  last_modified_date: 2018-08-21
  credit:
  - tungpun
  references:
  - https://hackerone.com/reports/358645
  - https://www.npmjs.com/advisories/795
  source_url: https://snyk.io/vuln/npm:serve:20180529
- id: snykio:npm:serve:20180531
  title: Information Exposure
  description: |
    [serve][1] is a static file serving and directory listing.

    Affected versions of this package are vulnerable to Information
    Exposure. An attacker could bypasses the ignore `files/directories`
    feature and read a file or list the directory that the victim has not
    allowed access to.



    [1]: https://www.npmjs.com/package/serve
  affected_package: serve
  vulnerable_versions:
  - "<7.0.0"
  severity: high
  package_manager: npm
  cve:
  - CVE-2018-3809
  - CVE-2019-5415
  cwe:
  - CWE-200
  disclosed_date: 2018-05-31
  created_date: 2018-06-03
  last_modified_date: 2018-06-03
  credit:
  - tungpun
  references:
  - https://hackerone.com/reports/330650
  - https://hackerone.com/reports/330724
  source_url: https://snyk.io/vuln/npm:serve:20180531
