---
- id: snykio:npm:json-ptr:1016939
  title: Prototype Pollution
  description: "[json-ptr][1] is a complete implementation of JSON Pointer (RFC 6901)\nfor
    nodejs and modern browsers.\n\nAffected versions of this package are vulnerable
    to Prototype Pollution.\nThe issue occurs in the set operation\n([https://flitbit.github.io/json-ptr/classes/\\_src\\_pointer\\_.jsonpointer.html#set][2])\nwhen
    the force flag is set to `true`.\n\nThe function recursively set the property
    in the target object, however\nit does not properly check the key being set, leading
    to a prototype\npollution.\n\n### PoC   {#poc}\n\n* install `json-ptr` module:\n\n*
    `npm i json-ptr`\n\n* run the following `poc.js`\\:\n  \n      const { JsonPointer
    } = require(\"json-ptr\");\n\nlet obj = \\{}; console.log(\\\"Before : \\\" +
    obj.polluted); //\nJsonPointer.set(\\{}, \\'/constructor/prototype/polluted\\',
    \\\"yes\\\",\ntrue); JsonPointer.set(\\{}, \\'/**proto**/polluted\\', \\\"yes\\\",
    true);\nconsole.log(\\\"After : \\\" + obj.polluted);\n\n    \n    Observed output:\n\nBefore
    : undefined After : yes\n\n    \n    ## Details\n    \n    Prototype Pollution
    is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability
    to inject properties into existing JavaScript language construct prototypes, such
    as objects. JavaScript allows all Object attributes to be altered, including their
    magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker
    manipulates these attributes to overwrite, or pollute, a JavaScript application
    object prototype of the base object by injecting other values.  Properties on
    the `Object.prototype` are then inherited by all the JavaScript objects through
    the prototype chain. When that happens, this leads to either denial of service
    by triggering JavaScript exceptions, or it tampers with the application source
    code to force the code path that the attacker injects, thereby leading to remote
    code execution.\n    \n    There are two main ways in which the pollution of prototypes
    occurs:\n    \n    -   Unsafe `Object` recursive merge\n    \n    -   Property
    definition by path\n    \n    \n    ### Unsafe Object recursive merge\n    \n
    \   The logic of a vulnerable recursive merge function follows the following high-level
    model:\n\nmerge (target, source)\n\nforeach property of source\n\n    if property
    exists and is an object on both the target and the source\n    \n      merge(target[property],
    source[property])\n    \n    else\n    \n      target[property] = source[property]\n^\n\n
    \   <br>  \n    \n    When the source object contains a property named `_proto_`
    defined with `Object.defineProperty()` , the condition that checks if the property
    exists and is an object on both the target and the source passes and the merge
    recurses with the target, being the prototype of `Object` and the source of `Object`
    as defined by the attacker. Properties are then copied on the `Object` prototype.\n
    \   \n    Clone operations are a special sub-class of unsafe recursive merges,
    which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n
    \   \n    `lodash` and `Hoek` are examples of libraries susceptible to recursive
    merge attacks.\n    \n    ### Property definition by path\n    \n    There are
    a few JavaScript libraries that use an API to define property values on an object
    based on a given path. The function that is generally affected contains this signature:
    `theFunction(object, path, value)`\n    \n    If the attacker can control the
    value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then
    assigned to the prototype of the class of the object.\n    \n    ## Types of attacks\n
    \   \n    There are a few methods by which Prototype Pollution can be manipulated:\n
    \   \n    | Type |Origin  |Short description |\n    |--|--|--|\n    | **Denial
    of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when
    `Object` holds generic functions that are implicitly called for various operations
    (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr`
    and alters its state to an unexpected value such as `Int` or `Object`. In this
    case, the code fails and is likely to cause a denial of service.  <br>**For example:**
    if an attacker pollutes `Object.prototype.toString` by defining it as an integer,
    if the codebase at any point was reliant on `someobject.toString()` it would fail.
    |\n     |**Remote Code Execution**|Client|Remote code execution is generally only
    possible in cases where the codebase evaluates a specific attribute of an object,
    and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`.
    In this case, if the attacker pollutes `Object.prototype.someattr` they are likely
    to be able to leverage this in order to execute code.|\n    |**Property Injection**|Client|The
    attacker pollutes properties that the codebase relies on for their informative
    value, including security properties such as cookies or tokens.<br>  **For example:**
    if a codebase checks privileges for `someuser.isAdmin`, then when the attacker
    pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then
    achieve admin privileges.|\n    \n    ## Affected environments\n    \n    The
    following environments are susceptible to a Prototype Pollution attack:\n    \n
    \   -   Application server\n    \n    -   Web server\n    \n    \n    ## How to
    prevent\n    \n    1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n
    \   \n    2.  Require schema validation of JSON input.\n    \n    3.  Avoid using
    unsafe recursive merge functions.\n    \n    4.  Consider using objects without
    prototypes (for example, `Object.create(null)`), breaking the prototype chain
    and preventing pollution.\n    \n    5.  As a best practice use `Map` instead
    of `Object`.\n    \n    ### For more information on this vulnerability type:\n
    \   \n    [Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.”
    GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n
    \   \n    ## Remediation\n    There is no fixed version for `json-ptr`.\n    ##
    References\n    - [Vulnerable Code](https://github.com/flitbit/json-ptr/blob/master/src/util.ts#L174)\n\n\n\n[1]:
    https://www.npmjs.com/package/json-ptr\n[2]: https://flitbit.github.io/json-ptr/classes/_src_pointer_.jsonpointer.html#set\n"
  affected_package: json-ptr
  vulnerable_versions:
  - "*"
  severity: high
  package_manager: npm
  cve:
  - CVE-2020-7766
  cwe:
  - CWE-400
  disclosed_date: 2020-10-09
  created_date: 2020-11-10
  last_modified_date: 2020-11-10
  credit:
  - Alessio Della Libera (d3lla)
  source_url: https://snyk.io/vuln/SNYK-JS-JSONPTR-1016939
