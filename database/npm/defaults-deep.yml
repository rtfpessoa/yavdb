---
- id: npmjs:npm:defaults-deep:581
  title: Prototype Pollution
  description: Versions of `default-deep` before 0.2.4 are vulnerable to prototype
    pollution
  affected_package: defaults-deep
  vulnerable_versions:
  - "<0.2.4"
  severity: low
  package_manager: npm
  cve:
  - CVE-2018-3723
  cwe: CWE-471
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: Olivier Arteau (HoLyVieR)
- id: npmjs:npm:defaults-deep:778
  title: Prototype Pollution
  description: All versions of `defaults-deep` are vulnerable to prototype pollution.
    Provided certain input `defaults-deep` can add or modify properties of the `Object`
    prototype. These properties will be present on all objects.
  affected_package: defaults-deep
  vulnerable_versions:
  - "*"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2018-16486
  cwe: CWE-471
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: asgerf
- id: snykio:npm:defaults-deep:173661
  title: Prototype Pollution
  description: "[defaults-deep][1] is a like extend but recursively copies only the\nmissing
    properties/values to the target object.\n\nAffected versions of this package are
    vulnerable to Prototype Pollution.\nProvided certain input `defaults-deep` can
    add or modify properties of\nthe `Object` prototype. These properties will be
    present on all objects.\n\n\\##PoC\n\n    var defaultsDeep = require('defaults-deep');\n
    \   var payload = JSON.parse('{\"constructor\": {\"prototype\": {\"isAdmin\":
    true}}}');\n    defaultsDeep({}, payload);\n    console.log({}.isAdmin); // true\n\n\n\n[1]:
    https://github.com/jonschlinkert/defaults-deep\n\\nPrototype Pollution is a vulnerability
    affecting JavaScript. Prototype\nPollution refers to the ability to inject properties
    into existing\nJavaScript language construct prototypes, such as objects. JavaScript\nallows
    all Object attributes to be altered, including their magical\nattributes such
    as `_proto_`, `constructor` and `prototype`. An attacker\nmanipulates these attributes
    to overwrite, or pollute, a JavaScript\napplication object prototype of the base
    object by injecting other\nvalues. Properties on the `Object.prototype` are then
    inherited by all\nthe JavaScript objects through the prototype chain. When that
    happens,\nthis leads to either denial of service by triggering JavaScript\nexceptions,
    or it tampers with the application source code to force the\ncode path that the
    attacker injects, thereby leading to remote code\nexecution.\n\nThere are two
    main ways in which the pollution of prototypes occurs:\n\n* Unsafe `Object` recursive
    merge\n\n* Property definition by path\n\n### Unsafe Object recursive merge   {#unsafe-object-recursive-merge}\n\nThe
    logic of a vulnerable recursive merge function follows the following\nhigh-level
    model:\n\n    merge (target, source)\n    \n      foreach property of source\n
    \   \n        if property exists and is an object on both the target and the source\n
    \   \n          merge(target[property], source[property])\n    \n        else\n
    \   \n          target[property] = source[property]\n\n&lt;br&gt;\n\nWhen the
    source object contains a property named `_proto_` defined with\n`Object.defineProperty()`
    , the condition that checks if the property\nexists and is an object on both the
    target and the source passes and the\nmerge recurses with the target, being the
    prototype of `Object` and the\nsource of `Object` as defined by the attacker.
    Properties are then\ncopied on the `Object` prototype.\n\nClone operations are
    a special sub-class of unsafe recursive merges,\nwhich occur when a recursive
    merge is conducted on an empty object:\n`merge({},source)`.\n\n`lodash` and `Hoek`
    are examples of libraries susceptible to recursive\nmerge attacks.\n\n### Property
    definition by path   {#property-definition-by-path}\n\nThere are a few JavaScript
    libraries that use an API to define property\nvalues on an object based on a given
    path. The function that is\ngenerally affected contains this signature: `theFunction(object,
    path,\nvalue)`\n\nIf the attacker can control the value of “path”, they can set
    this value\nto `_proto_.myValue`. `myValue` is then assigned to the prototype
    of the\nclass of the object.\n\n"
  affected_package: defaults-deep
  vulnerable_versions:
  - "*"
  severity: high
  package_manager: npm
  cve:
  - CVE-2018-16486
  cwe:
  - CWE-400
  disclosed_date: 2018-09-28
  created_date: 2018-09-28
  last_modified_date: 2018-09-28
  credit:
  - asgerf
  references:
  - https://hackerone.com/reports/380878
  - https://www.npmjs.com/advisories/778
  source_url: https://snyk.io/vuln/SNYK-JS-DEFAULTSDEEP-173661
- id: snykio:npm:defaults-deep:20180215
  title: Prototype Pollution
  description: "[defaults-deep][1] is a like extend but recursively copies only the\nmissing
    properties/values to the target object.\n\nAffected versions of this package are
    vulnerable to Prototype Pollution.\nAffected versions of this package are vulnerable
    to Prototype Pollution\nvia merging functions. These functions allows a malicious
    user to modify\nthe prototype of `Object` via `__proto__`, causing the addition
    or\nmodification of an existing property that will exist on all objects.\n\n\n\n[1]:
    https://github.com/jonschlinkert/defaults-deep\n\\nPrototype Pollution is a vulnerability
    affecting JavaScript. Prototype\nPollution refers to the ability to inject properties
    into existing\nJavaScript language construct prototypes, such as objects. JavaScript\nallows
    all Object attributes to be altered, including their magical\nattributes such
    as `_proto_`, `constructor` and `prototype`. An attacker\nmanipulates these attributes
    to overwrite, or pollute, a JavaScript\napplication object prototype of the base
    object by injecting other\nvalues. Properties on the `Object.prototype` are then
    inherited by all\nthe JavaScript objects through the prototype chain. When that
    happens,\nthis leads to either denial of service by triggering JavaScript\nexceptions,
    or it tampers with the application source code to force the\ncode path that the
    attacker injects, thereby leading to remote code\nexecution.\n\nThere are two
    main ways in which the pollution of prototypes occurs:\n\n* Unsafe `Object` recursive
    merge\n\n* Property definition by path\n\n### Unsafe Object recursive merge   {#unsafe-object-recursive-merge}\n\nThe
    logic of a vulnerable recursive merge function follows the following\nhigh-level
    model:\n\n    merge (target, source)\n    \n      foreach property of source\n
    \   \n        if property exists and is an object on both the target and the source\n
    \   \n          merge(target[property], source[property])\n    \n        else\n
    \   \n          target[property] = source[property]\n\n&lt;br&gt;\n\nWhen the
    source object contains a property named `_proto_` defined with\n`Object.defineProperty()`
    , the condition that checks if the property\nexists and is an object on both the
    target and the source passes and the\nmerge recurses with the target, being the
    prototype of `Object` and the\nsource of `Object` as defined by the attacker.
    Properties are then\ncopied on the `Object` prototype.\n\nClone operations are
    a special sub-class of unsafe recursive merges,\nwhich occur when a recursive
    merge is conducted on an empty object:\n`merge({},source)`.\n\n`lodash` and `Hoek`
    are examples of libraries susceptible to recursive\nmerge attacks.\n\n### Property
    definition by path   {#property-definition-by-path}\n\nThere are a few JavaScript
    libraries that use an API to define property\nvalues on an object based on a given
    path. The function that is\ngenerally affected contains this signature: `theFunction(object,
    path,\nvalue)`\n\nIf the attacker can control the value of “path”, they can set
    this value\nto `_proto_.myValue`. `myValue` is then assigned to the prototype
    of the\nclass of the object.\n\n"
  affected_package: defaults-deep
  vulnerable_versions:
  - "<0.2.4"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2018-3723
  cwe:
  - CWE-400
  disclosed_date: 2018-02-15
  created_date: 2018-02-16
  last_modified_date: 2018-02-16
  credit:
  - Olivier Arteau (HoLyVieR)
  references:
  - https://hackerone.com/reports/310514
  source_url: https://snyk.io/vuln/npm:defaults-deep:20180215
