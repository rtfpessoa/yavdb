---
- id: npmjs:npm:socket.io-file:1519
  title: Path Traversal
  description: All versions of `socket.io-file` are vulnerable to Path Traversal.
    The package fails to sanitize user input and uses it to generate the file upload
    paths. The `socket.io-file::createFile` message contains a `name` option that
    is passed directly to `path.join()`.   It is possible to upload files to arbitrary
    folders on the server by sending relative paths on the `name` value, such as `../../test.js`.  The
    `uploadDir` and `rename` options can be used to define the file upload path.
  affected_package: socket.io-file
  vulnerable_versions:
  - ">=0.0.0"
  severity: high
  package_manager: npm
  cwe: CWE-22
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: Thomas Sermpinis
- id: npmjs:npm:socket.io-file:1564
  title: File restriction bypass in socket.io-file
  description: 'All versions of `socket.io-file`are vulnerable to a file restriction
    bypass. The validation for valid file types only happens on the client-side, which
    allows an attacker to intercept the Websocket request post-validation and alter
    the `name` value to upload any file types.

'
  affected_package: socket.io-file
  vulnerable_versions:
  - ">=0.0.0"
  severity: high
  package_manager: npm
  cwe: CWE-20
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: Cr0wTom
- id: snykio:npm:socket.io-file:1015597
  title: File Type Restriction Bypass
  description: |
    [socket.io-file][1] is a File uploader module for Socket.io

    Affected versions of this package are vulnerable to File Type
    Restriction Bypass. The validation for valid file types only happens on
    the client-side, which allows an attacker to intercept the Websocket
    request post-validation and alter the `name` value to upload any file
    types.



    [1]: https://www.npmjs.com/package/socket.io-file
  affected_package: socket.io-file
  vulnerable_versions:
  - "*"
  severity: high
  package_manager: npm
  cve:
  - CVE-2020-24807
  cwe:
  - CWE-434
  disclosed_date: 2020-10-02
  created_date: 2020-10-04
  last_modified_date: 2020-10-04
  credit:
  - Cr0wTom
  references:
  - https://cr0wsplace.wordpress.com
  source_url: https://snyk.io/vuln/SNYK-JS-SOCKETIOFILE-1015597
- id: snykio:npm:socket.io-file:575434
  title: Directory Traversal
  description: |
    [socket.io-file][1] is a File uploader module for Socket.io

    Affected versions of this package are vulnerable to Directory Traversal.
    The package fails to sanitize user input and uses it to generate the
    file upload paths. The `socket.io-file::createFile` message contains a
    `name` option that is passed directly to `path.join()`. It is possible
    to upload files to arbitrary folders on the server by sending relative
    paths on the `name` value, such as `../../test.js`. The `uploadDir` and
    `rename` options can be used to define the file upload path.



    [1]: https://www.npmjs.com/package/socket.io-file
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
  affected_package: socket.io-file
  vulnerable_versions:
  - "*"
  severity: high
  package_manager: npm
  cwe:
  - CWE-22
  disclosed_date: 2020-07-07
  created_date: 2020-07-08
  last_modified_date: 2020-07-08
  credit:
  - Thomas Sermpinis
  references:
  - https://github.com/rico345100/socket.io-file/blob/master/index.js#L87-L89
  source_url: https://snyk.io/vuln/SNYK-JS-SOCKETIOFILE-575434
