---
- id: npmjs:npm:lactate:560
  title: Directory Traversal
  description: |-
    A crafted `GET` request can be leveraged to traverse the directory structure of a host using the lactate web server package, and request arbitrary files outside of the specified web root. This allows for a remote attacker to gain access to arbitrary files on the filesystem that the process has access to read.

    Mitigating factors:
    Only files that the user running `lactate` has permission to read will be accessible via this vulnerability.


    [Proof of concept](https://hackerone.com/reports/296645):
    Please globally install the `lactate` package and `cd` to a directory you wish to serve assets from. Next, run `lactate -p 8081` to start serving files from this location.

    The following cURL request can be used to demonstrate this vulnerability by requesting the target `/etc/passwd` file:

    ```
    curl "http://127.0.0.1:8081/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd"
    ```
    ```
    root:x:0:0:root:/root:/bin/bash
    daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
    bin:x:2:2:bin:/bin:/usr/sbin/nologin
    sys:x:3:3:sys:/dev:/usr/sbin/nologin
    [...]
    ```
  affected_package: lactate
  vulnerable_versions:
  - ">=0.0.0"
  severity: high
  package_manager: npm
  cwe: CWE-22
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: Yasin Soliman (ysx)
- id: snykio:npm:lactate:20180123
  title: Directory Traversal
  description: |
    [`lactate`][1] is a static file handler.

    Affected versions of this package are vulnerable to Directory Traversal.

    An attacker may use a specially crafted `GET` request and traverse the
    directory structure of a host using the lactate web server package,
    allowing them read access to arbitrary files outside of the specified
    web root.

    Mitigating factors: Only files that the user running `lactate` has
    permission to read will be accessible via this vulnerability.

    Proof of concept by Yasin Soliman:

    * Globally install the `lactate` package and `cd` to a directory you
      wish to serve assets from.
    * Run `lactate -p 8081` to start serving files from this location.
    * Running the following cURL request:
    ^

        curl "http://127.0.0.1:8081/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd"



    [1]: https://www.npmjs.com/package/lactate
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
  affected_package: lactate
  vulnerable_versions:
  - "*"
  severity: high
  package_manager: npm
  cwe:
  - CWE-22
  disclosed_date: 2018-01-22
  created_date: 2018-01-25
  last_modified_date: 2018-01-25
  credit:
  - Yasin Soliman
  references:
  - https://hackerone.com/reports/296645
  source_url: https://snyk.io/vuln/npm:lactate:20180123
