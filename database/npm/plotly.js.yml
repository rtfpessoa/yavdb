---
- id: npmjs:npm:plotly.js:145
  title: Cross Site Scripting (XSS)
  description: Affected versions of `plotly.js` are vulnerable to cross-site scripting
    if an attacker can convince a user to visit a malicious plot on a site using this
    package.
  affected_package: plotly.js
  vulnerable_versions:
  - "<1.10.4"
  - ">=1.11.0 <1.16.0"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2016-10545
  cwe: CWE-725
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: Jared Folkins
- id: ossindex:npm:plotly.js:8402281035
  title: Cross Site Scripting (XSS) in href tags
  description: The package is vulnerable to a cross site scripting attack where `javascript:`
    protocols can be set in href tags.
  affected_package: plotly.js
  vulnerable_versions:
  - ">=1.0.0 <1.2.1"
  package_manager: npm
  disclosed_date: 2016-12-29
  created_date: 2016-12-29
  last_modified_date: 2017-03-01
  credit:
  - OSSIndex
  references:
  - https://cwe.mitre.org/data/definitions/79.html
  - https://github.com/plotly/plotly.js/commit/d5885957f72e21a25782dc28e2028ffe8debf5ef
  - https://github.com/plotly/plotly.js/issues/100
  source_url: https://ossindex.net/resource/package/8398732976/vulnerabilities
- id: ossindex:npm:plotly.js:8402397955
  title: Cross Site Scripting (XSS) in trace name on hover
  description: JavaScript can be injected into the name of traces in the legend, allowing
    it to execute when the user hovers over the trace.
  affected_package: plotly.js
  vulnerable_versions:
  - "<1.22.0"
  package_manager: npm
  disclosed_date: 2017-02-12
  created_date: 2017-02-12
  last_modified_date: 2017-03-01
  credit:
  - OSSIndex
  references:
  - https://cwe.mitre.org/data/definitions/79.html
  - https://github.com/plotly/plotly.js/commit/9b7c18f5f576f103b65889574d25ad9924d4d7c1
  - https://github.com/plotly/plotly.js/issues/1307
  source_url: https://ossindex.net/resource/package/8398732976/vulnerabilities
- id: ossindex:npm:plotly.js:8405000454
  title: Cross Site Scripting (XSS)
  description: "> If an attacker can trick an unsuspecting user into viewing a specially
    crafted plot on a site that uses plotly.js, then the attacker could potentially
    retrieve authentication tokens and perform actions on behalf of the user.\n> \n>
    -- [nodesecurity.io](https://nodesecurity.io/advisories/145)"
  affected_package: plotly.js
  vulnerable_versions:
  - "<1.10.4 | >=1.11.0 <1.16.0"
  package_manager: npm
  disclosed_date: 2017-07-29
  created_date: 2017-07-29
  last_modified_date: 2017-07-30
  credit:
  - OSSIndex
  references:
  - http://help.plot.ly/security-advisories/2016-08-08-plotlyjs-xss-advisory/
  - https://nodesecurity.io/advisories/145
  source_url: https://ossindex.net/resource/package/8398732976/vulnerabilities
- id: snykio:npm:plotly.js:1
  title: CSS Injection
  description: |
    [`plotly.js`][1] is a high-level, declarative charting library.

    Affected versions of the package allowed the style attribute to be
    manipulated in the tag inside the embedded `svg` making them vulnerable
    to a css injection which allowed for tracking images to be embedded and
    leak information to an external domain.



    [1]: https://www.npmjs.com/package/plotly.js
    \nFor more information, see Jared\'s [post][1] explaining the issue very
    well.



    [1]: https://acloudtree.com/2016-08-09-how-i-hacked-plotly-by-exploiting-a-svg-vulnerability-in-plotlyjs/
  affected_package: plotly.js
  vulnerable_versions:
  - "<1.16.0"
  severity: low
  package_manager: npm
  cwe:
  - CWE-74
  disclosed_date: 2016-08-09
  created_date: 2016-10-17
  last_modified_date: 2016-10-17
  credit:
  - Jared Folkins
  references:
  - http://help.plot.ly/security-advisories/2016-08-08-plotlyjs-xss-advisory/
  - https://acloudtree.com/2016-08-09-how-i-hacked-plotly-by-exploiting-a-svg-vulnerability-in-plotlyjs/
  - https://github.com/plotly/plotly.js/commit/d5885957f72e21a25782dc28e2028ffe8debf5ef
  - https://github.com/plotly/plotly.js/pull/736
  - https://snyk.io/vuln/npm:plotly.js:20160808
  source_url: https://snyk.io/vuln/npm:plotly.js:20160808-1
- id: snykio:npm:plotly.js:20151210
  title: Cross-site Scripting (XSS)
  description: |
    [`plotly.js`][1] is a open source javascript graphing library that
    powers plotly.

    Affected versions of the package are vulnerable to Cross-site Scripting
    (XSS).



    [1]: https://www.npmjs.com/package/plotly.js
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

    You can read more about `Cross-site Scripting (XSS)` on our [blog][1].



    [1]: https://snyk.io/blog/marked-xss-vulnerability/
  affected_package: plotly.js
  vulnerable_versions:
  - ">=1.0.0 <1.2.1"
  severity: medium
  package_manager: npm
  cwe:
  - CWE-79
  disclosed_date: 2015-12-09
  created_date: 2017-02-28
  last_modified_date: 2017-02-28
  credit:
  - Étienne TétreaultPinard
  references:
  - https://github.com/plotly/plotly.js/commit/d5885957f72e21a25782dc28e2028ffe8debf5ef
  - https://github.com/plotly/plotly.js/pull/100
  source_url: https://snyk.io/vuln/npm:plotly.js:20151210
- id: snykio:npm:plotly.js:20160808
  title: Cross-site Scripting (XSS)
  description: |+
    [`plotly.js`][1] is a high-level, declarative charting library.

    Affected versions of the package allow attackers to trick an
    unsuspecting user into viewing a specially crafted plot on a site that
    uses `plotly.js`. The vulnerability would have allowed the attacker to
    retrieve authentication tokens and perform actions on behalf of the
    user.

    `plot.ly` is rendering SVG objects inside the DOM. `href` tags are
    converted to the xlink:href attriubute on the `<a>` tag. This allowed an
    attacker to break out into the DOM and inject a payload.

    For more information, see Jared\'s [post][2] explaining the issue very
    well.



    [1]: https://www.npmjs.com/package/plotly.js
    [2]: https://acloudtree.com/2016-08-09-how-i-hacked-plotly-by-exploiting-a-svg-vulnerability-in-plotlyjs/
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: plotly.js
  vulnerable_versions:
  - ">=1.10.4 <1.16.0"
  severity: medium
  package_manager: npm
  cwe:
  - CWE-79
  disclosed_date: 2016-08-09
  created_date: 2016-10-17
  last_modified_date: 2016-10-17
  credit:
  - Jared Folkins
  references:
  - http://help.plot.ly/security-advisories/2016-08-08-plotlyjs-xss-advisory/
  - https://acloudtree.com/2016-08-09-how-i-hacked-plotly-by-exploiting-a-svg-vulnerability-in-plotlyjs/
  - https://github.com/plotly/plotly.js/commit/d5885957f72e21a25782dc28e2028ffe8debf5ef
  - https://github.com/plotly/plotly.js/pull/736
  source_url: https://snyk.io/vuln/npm:plotly.js:20160808
- id: snykio:npm:plotly.js:455599
  title: Cross-site Scripting (XSS)
  description: |+
    [plotly.js][1] is a package that provides an easy and simple way to
    export package.json data.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS).



    [1]: https://www.npmjs.com/package/package
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: plotly.js
  vulnerable_versions:
  - "<1.10.4"
  - ">=1.11.0 <1.16.0"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2017-1000006
  cwe:
  - CWE-79
  disclosed_date: 2017-07-17
  created_date: 2019-07-28
  last_modified_date: 2019-07-28
  credit:
  - Dennis Deterin
  - Jared Folkins
  references:
  - http://help.plot.ly/security-advisories/2016-08-08-plotlyjs-xss-advisory/
  - https://github.com/plotly/plotly.js/commit/0a1526de6ee872993cabac966ed6fdc67cd052f0
  source_url: https://snyk.io/vuln/SNYK-JS-PLOTLYJS-455599
