---
- id: npmjs:npm:keystone:60
  title: Authentication Weakness
  description: Versions of `keystone` prior to 0.3.16 are affected by a partial authentication
    bypass vulnerability. In the default sign in functionality, if an attacker provides
    a full and correct password, yet only provides part of the associated email address,
    authentication will be granted.
  affected_package: keystone
  vulnerable_versions:
  - "<0.3.16"
  severity: low
  package_manager: npm
  cve:
  - CVE-2015-9240
  cwe: CWE-287
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: Greg Meyer
- id: npmjs:npm:keystone:979
  title: Cross-Site Request Forgery (CSRF)
  description: Versions of `keystone` prior to 4.0.0 are vulnerable to Cross-Site
    Request Forgery (CSRF). The package fails to validate the presence of the `X-CSRF-Token`
    header, which may allow attackers to carry actions on behalf of other users on
    all endpoints.
  affected_package: keystone
  vulnerable_versions:
  - "<4.0.0"
  severity: high
  package_manager: npm
  cve:
  - CVE-2017-16570
  cwe: CWE-352
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: SecureLayer7
- id: npmjs:npm:keystone:980
  title: Cross-Site Scripting
  description: Versions of `keystone` prior to 4.0.0 are vulnerable to Cross-Site
    Scripting (XSS). The package fails to sanitize user input on the `Contact Us`
    page,  allowing attackers to submit contact forms with malicious JavaScript in
    the message field. The output is not properly encoded leading an admin that opens
    new inquiry to execute the arbitrary JavaScript supplied in their browser.
  affected_package: keystone
  vulnerable_versions:
  - "<4.0.0"
  severity: high
  package_manager: npm
  cwe: CWE-79
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: SecureLayer7
- id: npmjs:npm:keystone:981
  title: Cross-Site Scripting
  description: Versions of `keystone` prior to 4.0.0 are vulnerable to Cross-Site
    Scripting (XSS). The package fails to properly encode rendered HTML on admin-created
    blog posts. This allows attackers to execute arbitrary JavaScript in the victim's
    browser. Exploiting this vulnerability requires having access to an admin account.
  affected_package: keystone
  vulnerable_versions:
  - "<4.0.0"
  severity: medium
  package_manager: npm
  cwe: CWE-79
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: SecureLayer7
- id: ossindex:npm:keystone:8399169587
  title: Timing attack vulnerabilities
  description: |-
    Two timing attack vulnerabilities could occur when:

    1. comparing password hashes
    2. comparing CSRF token hashes
  affected_package: keystone
  vulnerable_versions:
  - "<0.3.6"
  package_manager: npm
  disclosed_date: 2016-05-24
  created_date: 2016-05-24
  last_modified_date: 2016-05-24
  credit:
  - OSSIndex
  references:
  - https://github.com/keystonejs/keystone/pull/701
  source_url: https://ossindex.net/resource/package/7014036893/vulnerabilities
- id: ossindex:npm:keystone:8399169588
  title: Possible click jacking attack
  description: A click-jacking attack was successfully demonstrated on the Keystone
    demo site.
  affected_package: keystone
  vulnerable_versions:
  - "<0.3.6"
  package_manager: npm
  disclosed_date: 2016-05-24
  created_date: 2016-05-24
  last_modified_date: 2016-05-24
  credit:
  - OSSIndex
  references:
  - https://github.com/keystonejs/keystone/issues/1086
  source_url: https://ossindex.net/resource/package/7014036893/vulnerabilities
- id: ossindex:npm:keystone:8399169589
  title: Azure dependency has security vulnerability
  description: 'Currently included version of azure includes validator<3.22.1, which
    has security issue: https://portal.requiresafe.com/advisories/validator-isurl-denial-of-service'
  affected_package: keystone
  vulnerable_versions:
  - "<0.3.15"
  package_manager: npm
  disclosed_date: 2016-05-24
  created_date: 2016-05-24
  last_modified_date: 2016-05-24
  credit:
  - OSSIndex
  references:
  - https://github.com/keystonejs/keystone/issues/1575
  source_url: https://ossindex.net/resource/package/7014036893/vulnerabilities
- id: ossindex:npm:keystone:8401420896
  title: Open Redirect vulnerability
  description: "> The req.querystring.from parameter is not validated.  It will redirect
    the user to any url. It is vulnerable to an open redirect.\n> \n> -- [github.com](https://github.com/keystonejs/keystone/pull/242)"
  affected_package: keystone
  vulnerable_versions:
  - ">=0.2.7 <0.3.6"
  package_manager: npm
  disclosed_date: 2016-11-10
  created_date: 2016-11-10
  last_modified_date: 2017-03-22
  credit:
  - OSSIndex
  references:
  - https://github.com/keystonejs/keystone/commit/d06a688e36bfb95c88336659fee9be10416ce46b
  - https://github.com/keystonejs/keystone/issues/242
  - https://www.owasp.org/index.php/Top_10_2013-A10-Unvalidated_Redirects_and_Forwards
  source_url: https://ossindex.net/resource/package/7014036893/vulnerabilities
- id: snykio:npm:keystone:1
  title: Cross-site Scripting (XSS)
  description: |+
    [`keystone`][1] is Web Application Framework and Admin GUI / Content
    Management System built on Express.js and Mongoose.

    Affected versions of the package are vulnerable to Cross-site Scripting
    (XSS). A cross-site scripting (XSS) vulnerability exists in
    fields/types/markdown/MarkdownType.js in KeystoneJS before 4.0.0-beta.7
    via the Contact Us feature.



    [1]: https://www.npmjs.com/package/keystone
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: keystone
  vulnerable_versions:
  - "<4.0.0-beta.7"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2017-15878
  cwe:
  - CWE-79
  disclosed_date: 2017-09-18
  created_date: 2017-11-05
  last_modified_date: 2017-11-05
  credit:
  - Sandeep Kamble
  references:
  - https://github.com/keystonejs/keystone/commit/1b791d55839ebf434e104cc9936ccb8c29019231
  - https://github.com/keystonejs/keystone/issues/4437
  - https://github.com/keystonejs/keystone/pull/4478
  source_url: https://snyk.io/vuln/npm:keystone:20170918-1
- id: snykio:npm:keystone:2
  title: CSV Injection
  description: |
    [`keystone`][1] is an web Application Framework and Admin GUI / Content
    Management System built on Express.js and Mongoose.

    Affected versions of the package are vulnerable to CSV Injection.



    [1]: https://www.npmjs.com/package/keystone
  affected_package: keystone
  vulnerable_versions:
  - "<4.0.0-beta.7"
  severity: high
  package_manager: npm
  cve:
  - CVE-2017-15879
  cwe:
  - CWE-74
  disclosed_date: 2017-09-18
  created_date: 2017-11-05
  last_modified_date: 2017-11-05
  credit:
  - Unknown
  references:
  - https://github.com/keystonejs/keystone/commit/f08baa4fb4084b7ec9f356d313dcfd6d7d7d0f8b
  - https://github.com/keystonejs/keystone/issues/4437
  - https://github.com/keystonejs/keystone/pull/4478
  - https://nvd.nist.gov/vuln/detail/CVE-2017-15878
  source_url: https://snyk.io/vuln/npm:keystone:20170918-2
- id: snykio:npm:keystone:20140316
  title: Open Redirect
  description: |
    [`keystone`][1] is a Web Application Framework and Admin GUI / Content
    Management System built on Express.js and Mongoose. Affected versions of
    the package are vulnerable to Open redirection which occurs when a
    vulnerable web page is redirected to an untrusted and malicious page
    that may compromise the user. Open redirection attacks usually come with
    a phishing attack because the modified vulnerable link is identical to
    the original site, which increases the likelihood of success for the
    phishing attack.



    [1]: https://www.npmjs.com/package/keystone
  affected_package: keystone
  vulnerable_versions:
  - ">=0.2.7 <0.3.6"
  severity: medium
  package_manager: npm
  cwe:
  - CWE-601
  disclosed_date: 2014-03-15
  created_date: 2017-03-21
  last_modified_date: 2017-03-21
  credit:
  - Oliver Jenkins
  references:
  - https://github.com/keystonejs/keystone/commit/d06a688e36bfb95c88336659fee9be10416ce46b
  - https://github.com/keystonejs/keystone/pull/242
  source_url: https://snyk.io/vuln/npm:keystone:20140316
- id: snykio:npm:keystone:20141129
  title: Cross-site Request Forgery (CSRF)
  description: |
    [`keystone`][1] is a web Application Framework and Admin GUI / Content
    Management System built on Express.js and Mongoose.

    Affected versions of the package are vulnerable to Cross-site Request
    Forgery (CSRF).



    [1]: https://www.npmjs.com/package/keystone
  affected_package: keystone
  vulnerable_versions:
  - "<0.2.34"
  severity: medium
  package_manager: npm
  cwe:
  - CWE-352
  disclosed_date: 2014-11-28
  created_date: 2017-12-25
  last_modified_date: 2017-12-25
  credit:
  - Mickael van der Beek
  references:
  - https://github.com/keystonejs/keystone/blob/master/HISTORY.md#v0234--2014-11-29
  source_url: https://snyk.io/vuln/npm:keystone:20141129
- id: snykio:npm:keystone:20151204
  title: Authentication Weakness
  description: |+
    Invalid email addresses can be mistakenly matched during sign-in. This
    affects the `User` record to be fetched from the DB. Correct password
    for that `User` is still required to authenticate.

  affected_package: keystone
  vulnerable_versions:
  - "<0.3.16"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2015-9240
  cwe:
  - CWE-287
  disclosed_date: 2015-12-04
  created_date: 2015-12-06
  last_modified_date: 2015-12-06
  credit:
  - Greg Meyer
  references:
  - https://github.com/keystonejs/keystone/issues/1085
  - https://www.npmjs.com/package/keystone
  source_url: https://snyk.io/vuln/npm:keystone:20151204
- id: snykio:npm:keystone:20170918
  title: Cross-site Scripting (XSS)
  description: |+
    [`keystone`][1] is an web Application Framework and Admin GUI / Content
    Management System built on Express.js and Mongoose.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks. Cross-Site Scripting vulnerability in KeystoneJS before
    4.0.0-beta.7 allows remote authenticated administrators to inject
    arbitrary web script or HTML via the \"content brief\" or \"content
    extended\" field, a different vulnerability than [CVE-2017-15878][2].



    [1]: https://www.npmjs.com/package/keystone
    [2]: https://snyk.io/vuln/npm:keystone:20171023
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: keystone
  vulnerable_versions:
  - "<4.0.0-beta.7"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2017-15881
  cwe:
  - CWE-79
  disclosed_date: 2017-09-18
  created_date: 2017-11-05
  last_modified_date: 2017-11-05
  credit:
  - Sandeep Kamble
  references:
  - https://github.com/keystonejs/keystone/commit/f08baa4fb4084b7ec9f356d313dcfd6d7d7d0f8b
  - https://github.com/keystonejs/keystone/issues/4437
  - https://github.com/keystonejs/keystone/pull/4478
  - https://nvd.nist.gov/vuln/detail/CVE-2017-15881
  source_url: https://snyk.io/vuln/npm:keystone:20170918
- id: snykio:npm:keystone:449663
  title: Cross-site Request Forgery (CSRF)
  description: |
    [keystone][1] is an Node.js content management system and web app
    framework built on the Express web framework and Mongoose ODM.

    Affected versions of this package are vulnerable to Cross-site Request
    Forgery (CSRF). It fails to reject requests that lack an `x-csrf-token`
    header.



    [1]: https://www.npmjs.com/package/keystone
  affected_package: keystone
  vulnerable_versions:
  - "<4.0.0-beta.7"
  severity: high
  package_manager: npm
  cve:
  - CVE-2017-16570
  cwe:
  - CWE-352
  disclosed_date: 2017-11-06
  created_date: 2019-06-12
  last_modified_date: 2019-06-12
  credit:
  - Unknown
  references:
  - http://blog.securelayer7.net/keystonejs-open-source-penetration-testing-report/
  - https://github.com/keystonejs/keystone/commit/358857e5a9bec81de6dc7d0200ac7b81e793f342
  - https://github.com/keystonejs/keystone/issues/4437
  - https://github.com/keystonejs/keystone/pull/4478
  - https://www.exploit-db.com/exploits/43922/
  source_url: https://snyk.io/vuln/SNYK-JS-KEYSTONE-449663
- id: snykio:npm:keystone:450881
  title: Cross-site Scripting (XSS)
  description: |+
    [keystone][1] is a Node.js content management system and web app
    framework built on the Express web framework and Mongoose ODM.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). The package fails to sanitize user input on the `Contact Us`
    page, allowing attackers to submit contact forms with malicious
    JavaScript in the message field. The output is not properly encoded
    leading an admin that opens new inquiry to execute the arbitrary
    JavaScript supplied in their browser.



    [1]: https://www.npmjs.com/package/keystone
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: keystone
  vulnerable_versions:
  - "<4.0.0-beta.1"
  severity: high
  package_manager: npm
  cwe:
  - CWE-79
  disclosed_date: 2019-06-17
  created_date: 2019-06-23
  last_modified_date: 2019-06-23
  credit:
  - SecureLayer7
  references:
  - https://securelayer7.net/download/pdf/KeystoneJS-Pentest-Report-SecureLayer7.pdf
  - https://www.npmjs.com/advisories/980
  source_url: https://snyk.io/vuln/SNYK-JS-KEYSTONE-450881
- id: snykio:npm:keystone:450882
  title: Cross-site Scripting (XSS)
  description: |+
    [keystone][1] is a Node.js content management system and web app
    framework built on the Express web framework and Mongoose ODM.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). The package fails to properly encode rendered HTML on
    admin-created blog posts. This allows attackers to execute arbitrary
    JavaScript in the victim\'s browser. Exploiting this vulnerability
    requires having access to an admin account.



    [1]: https://www.npmjs.com/package/keystone
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: keystone
  vulnerable_versions:
  - "<4.0.0-beta.1"
  severity: medium
  package_manager: npm
  cwe:
  - CWE-79
  disclosed_date: 2019-06-17
  created_date: 2019-06-23
  last_modified_date: 2019-06-23
  credit:
  - SecureLayer7
  references:
  - https://securelayer7.net/download/pdf/KeystoneJS-Pentest-Report-SecureLayer7.pdf
  - https://www.npmjs.com/advisories/981
  source_url: https://snyk.io/vuln/SNYK-JS-KEYSTONE-450882
