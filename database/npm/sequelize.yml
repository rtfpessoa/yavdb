---
- id: npmjs:npm:sequelize:1017
  title: SQL Injection
  description: Versions of `sequelize` prior to 3.35.1 are vulnerable to SQL Injection.
    The package fails to sanitize JSON path keys in the Postgres dialect,  which may
    allow attackers to inject SQL statements and execute arbitrary SQL queries.
  affected_package: sequelize
  vulnerable_versions:
  - "<3.35.1"
  severity: high
  package_manager: npm
  cve:
  - CVE-2019-10749
  cwe: CWE-89
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: Snyk Security Team
- id: npmjs:npm:sequelize:1018
  title: SQL Injection
  description: Affected versions of `sequelize` are vulnerable to SQL Injection. The
    package fails to sanitize JSON path keys in the MariaDB and MySQL dialects,  which
    may allow attackers to inject SQL statements and execute arbitrary SQL queries.
  affected_package: sequelize
  vulnerable_versions:
  - "<3.35.1"
  - ">=4.0.0 <4.44.3"
  - ">=5.0.0 <5.8.11"
  severity: high
  package_manager: npm
  cve:
  - CVE-2019-10748
  cwe: CWE-89
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: Snyk Security Team
- id: npmjs:npm:sequelize:102
  title: SQL Injection
  description: |-
    Affected versions of `sequelize` cast arrays to strings and fail to properly escape the resulting SQL statement, resulting in a SQL injection vulnerability.


    ## Proof of Concept
    In Postgres, SQLite, and Microsoft SQL Server there is an issue where arrays are treated as strings and improperly escaped.

    Example Query:
    ```
    database.query('SELECT * FROM TestTable WHERE Name IN (:names)', {
      replacements: {
        names: directCopyOfUserInput
      }
    });
    ```

    If the user inputs the value of `:names` as:
    ```
    ["test", "'); DELETE TestTable WHERE Id = 1 --')"]
    ```

    The resulting SQL statement will be:
    ```
    SELECT Id FROM Table WHERE Name IN ('test', '\'); DELETE TestTable WHERE Id = 1 --')
    ```
    As the backslash has no special meaning in PostgreSQL, MSSQL, or SQLite, the statement will delete the record in TestTable with an Id of 1.
  affected_package: sequelize
  vulnerable_versions:
  - "<=3.19.3"
  severity: high
  package_manager: npm
  cve:
  - CVE-2016-10556
  cwe: CWE-89
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: Leibale Eidelman
- id: npmjs:npm:sequelize:109
  title: Potential SQL Injection
  description: 'Affected versions of `sequelize` are vulnerable to SQL Injection when
    user input is passed into `findOne` or into a statement such as `where: "user
    input"`.

'
  affected_package: sequelize
  vulnerable_versions:
  - "<= 2.1.3"
  severity: high
  package_manager: npm
  cve:
  - CVE-2016-10553
  cwe: CWE-89
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: Anonymous
- id: npmjs:npm:sequelize:112
  title: SQL Injection
  description: 'Affected versions of `sequelize` are vulnerable to SQL Injection in
    locations where user input is passed into the `limit` or `order` parameters of
    `sequelize` query calls, such as `findOne` or `findAll`.

'
  affected_package: sequelize
  vulnerable_versions:
  - "<= 3.16.0"
  severity: high
  package_manager: npm
  cve:
  - CVE-2016-10550
  cwe: CWE-89
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: Spencer Creasey
- id: npmjs:npm:sequelize:113
  title: SQL Injection
  description: Affected versions of `sequelize` use MySQL's backslash-based escape
    syntax when connecting to SQLite, despite the fact that SQLite uses PostgreSQL's
    escape syntax, which can result in a SQL Injection vulnerability.
  affected_package: sequelize
  vulnerable_versions:
  - "<= 1.7.0-alpha2"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2016-10554
  cwe: CWE-89
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: Anonymous
- id: npmjs:npm:sequelize:1142
  title: Denial of Service
  description: "Versions of `sequelize` prior to 4.44.4 are vulnerable to Denial of
    Service (DoS). The SQLite dialect fails to catch a `TypeError` exception for the
    `results` variable. The `results` value may be undefined and trigger the error
    on a `.map` call. This may allow attackers to submit malicious input that forces
    the exception and crashes the Node process.  \n\nThe following proof-of-concept
    crashes the Node process:  \n```\nconst Sequelize = require('sequelize');\n\nconst
    sequelize = new Sequelize({\n\tdialect: 'sqlite',\n\tstorage: 'database.sqlite'\n});\n\nconst
    TypeError = sequelize.define('TypeError', {\n\tname: Sequelize.STRING,\n});\n\nTypeError.sync({force:
    true}).then(() => {\n\treturn TypeError.create({name: \"SELECT tbl_name FROM sqlite_master\"});\n});\n```"
  affected_package: sequelize
  vulnerable_versions:
  - "<4.44.4"
  severity: medium
  package_manager: npm
  cwe: CWE-400
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: Francois Gauthier
- id: npmjs:npm:sequelize:1146
  title: SQL Injection
  description: "Affected versions of `sequelize` are vulnerable to SQL Injection.
    The function `sequelize.json()` incorrectly formatted sub paths for JSON queries,
    which allows attackers to inject SQL statements and execute arbitrary SQL queries
    if user input is passed to the query.  Exploitation example:  \n```return User.findAll({\n
    \ where: this.sequelize.json(\"data.id')) AS DECIMAL) = 1 DELETE YOLO INJECTIONS;
    -- \", 1)\n});```"
  affected_package: sequelize
  vulnerable_versions:
  - "<4.44.3"
  - ">=5.0.0 <5.15.1"
  severity: high
  package_manager: npm
  cve:
  - CVE-2019-10752
  cwe: CWE-89
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: Unknown
- id: npmjs:npm:sequelize:122
  title: SQL Injection via GeoJSON
  description: Affected versions of `sequelize` are vulnerable to SQL Injection in
    Models that have fields with the `GEOMETRY` DataType. This vulnerability occurs
    because single quotes in document values are not escaped for GeoJSON documents
    using `ST_GeomFromGeoJSON`, and MySQL GeoJSON documents using `GeomFromText`.
  affected_package: sequelize
  vulnerable_versions:
  - "<3.23.6"
  severity: high
  package_manager: npm
  cve:
  - CVE-2016-1000225
  cwe: CWE-89
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: Eric Schoffstall
- id: npmjs:npm:sequelize:33
  title: SQL Injection
  description: |-
    Versions 2.0.0-rc-7 and earlier of `sequelize` are affected by a SQL injection vulnerability when user input is passed into the order parameter.



    ## Proof of Concept

    ```javascript
    Test.findAndCountAll({
    where: { id :1 },
    order : [['id', 'UNTRUSTED USER INPUT']]
    })
    ```
  affected_package: sequelize
  vulnerable_versions:
  - "<=2.0.0-rc7"
  severity: high
  package_manager: npm
  cve:
  - CVE-2015-1369
  cwe: CWE-89
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: Levan Basharuli
- id: npmjs:npm:sequelize:820
  title: NoSQL Injection
  description: Versions of `sequelize` prior to 4.12.0 are vulnerable to NoSQL Injection.
    Query operators such as `$gt` are not properly sanitized and may allow an attacker
    to alter data queries, leading to NoSQL Injection.
  affected_package: sequelize
  vulnerable_versions:
  - "<4.12.0"
  severity: high
  package_manager: npm
  cwe: CWE-943
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: Egor Homakov
- id: npmjs:npm:sequelize:821
  title: SQL Injection
  description: Versions of `sequelize` prior to 5.3.0 (excluding v3 and v4) are vulnerable
    to SQL Injection. PostgreSQL option`standard_conforming_strings` is not set to
    `on` by default, which may allow attackers to inject SQL statements due to poor
    handling of backslashes in string literals.
  affected_package: sequelize
  vulnerable_versions:
  - "<3.0.0"
  - ">=5.0.0 <5.3.0"
  severity: medium
  package_manager: npm
  cwe: CWE-89
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: maxdos64
- id: ossindex:npm:sequelize:367231
  title: "[CVE-2015-1369]  Improper Neutralization of Special Elements used in an
    SQL Command (SQL Injection)"
  description: SQL injection vulnerability in Sequelize before 2.0.0-rc7 for Node.js
    allows remote attackers to execute arbitrary SQL commands via the order parameter.
  affected_package: sequelize
  vulnerable_versions:
  - "<=2.0.0-rc7"
  package_manager: npm
  cve:
  - CVE-2015-1369
  disclosed_date: 2015-01-27
  created_date: 2015-01-27
  last_modified_date: 2017-07-30
  credit:
  - OSSIndex
  references:
  - http://www.openwall.com/lists/oss-security/2015/01/23/2
  - https://github.com/sequelize/sequelize/pull/2919
  - https://nodesecurity.io/advisories/sequelize-sql-injection-order
  source_url: https://ossindex.net/resource/package/7014430328/vulnerabilities
- id: ossindex:npm:sequelize:8399946928
  title: SQL Injection
  description: 'An SQL injection can be caused by inserting GeoJSON documents with
    single quotes in an attribute. '
  affected_package: sequelize
  vulnerable_versions:
  - "<3.23.6"
  package_manager: npm
  disclosed_date: 2016-07-22
  created_date: 2016-07-22
  last_modified_date: 2017-02-14
  credit:
  - OSSIndex
  references:
  - http://docs.sequelizejs.com/en/latest/api/datatypes/#geometry
  - http://geojson.org/
  - https://cwe.mitre.org/data/definitions/89.html
  - https://github.com/sequelize/sequelize/commit/1b4af001dac239d277e545461f1f4932ebf5e058
  - https://github.com/sequelize/sequelize/commit/88c04218f5cd031ae65d441b1ece7fc72f266a5b
  - https://github.com/sequelize/sequelize/commit/9a0e140f9e9ae7d411cb99266dd0ea4c8fa6b159
  - https://github.com/sequelize/sequelize/issues/6194
  - https://nodesecurity.io/advisories/122
  source_url: https://ossindex.net/resource/package/7014430328/vulnerabilities
- id: ossindex:npm:sequelize:8402376917
  title: "[Duplicate] SQL Injection"
  description: "See https://ossindex.net/resource/cve/367231\n\n> SQL Injection is
    possible in an application using the npm module sequelize if untrusted user input
    is passed into the order parameter.\n> \n> -- [nodesecurity.io](https://nodesecurity.io/advisories/33)"
  affected_package: sequelize
  vulnerable_versions:
  - "<=2.0.0-rc7"
  package_manager: npm
  disclosed_date: 2017-01-25
  created_date: 2017-01-25
  last_modified_date: 2017-02-14
  credit:
  - OSSIndex
  references:
  - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-1369
  - https://cwe.mitre.org/data/definitions/89.html
  - https://github.com/sequelize/sequelize/issues/2906
  - https://nodesecurity.io/advisories/33
  source_url: https://ossindex.net/resource/package/7014430328/vulnerabilities
- id: ossindex:npm:sequelize:8402397890
  title: SQL injection with PostgreSQL
  description: Prior to PostgreSQL 9.1, back slashes were not escaped by default which
    results in a possible SQL Exception when using sequalize with older versions.
  affected_package: sequelize
  vulnerable_versions:
  - "<2.1.0"
  package_manager: npm
  disclosed_date: 2017-02-11
  created_date: 2017-02-11
  last_modified_date: 2017-02-14
  credit:
  - OSSIndex
  references:
  - https://cwe.mitre.org/data/definitions/89.html
  - https://github.com/sequelize/sequelize/commit/76727a6dda7650730f49155c417dc78efecdf62e
  - https://github.com/sequelize/sequelize/issues/3545
  source_url: https://ossindex.net/resource/package/7014430328/vulnerabilities
- id: ossindex:npm:sequelize:8402397925
  title: SQL injection in 'IN' statement
  description: "> Fix bug in SqlString.escape which caused the function to be recursively
    called with the wrong parameters when passed an array of strings. This would cause
    the incorrect escape algorithm to be used on the strings within the array when
    the dialect was set to postgres, sqlite, or mssql.\n> \n> -- [github.com](https://github.com/sequelize/sequelize/commit/23952a2b020cc3571f090e67dae7feb084e1be71)"
  affected_package: sequelize
  vulnerable_versions:
  - "<3.20.0"
  package_manager: npm
  disclosed_date: 2017-02-11
  created_date: 2017-02-11
  last_modified_date: 2017-07-30
  credit:
  - OSSIndex
  references:
  - https://github.com/sequelize/sequelize/commit/23952a2b020cc3571f090e67dae7feb084e1be71
  - https://github.com/sequelize/sequelize/issues/5671
  source_url: https://ossindex.net/resource/package/7014430328/vulnerabilities
- id: ossindex:npm:sequelize:8405000447
  title: Potential SQL Injection
  description: "> A fix was pushed out that fixed potential SQL injection.\n> \n>
    -- [nodesecurity.io](https://nodesecurity.io/advisories/109)"
  affected_package: sequelize
  vulnerable_versions:
  - "<=2.1.3"
  package_manager: npm
  disclosed_date: 2017-07-29
  created_date: 2017-07-29
  last_modified_date: 2017-07-30
  credit:
  - OSSIndex
  references:
  - https://github.com/sequelize/sequelize/blob/master/changelog.md#300
  - https://nodesecurity.io/advisories/109
  source_url: https://ossindex.net/resource/package/7014430328/vulnerabilities
- id: ossindex:npm:sequelize:8405000449
  title: SQL Injection
  description: "> If user input goes into the limit or order parameters, a malicious
    user can put in their own SQL statements.\n> \n> -- [nodesecurity.io](https://nodesecurity.io/advisories/112)"
  affected_package: sequelize
  vulnerable_versions:
  - "<=3.16.0"
  package_manager: npm
  disclosed_date: 2017-07-29
  created_date: 2017-07-29
  last_modified_date: 2017-07-30
  credit:
  - OSSIndex
  references:
  - https://github.com/sequelize/sequelize/pull/5167/commits/f282d85e60e3df5e57ecdb82adccb4eaef404f03
  - https://nodesecurity.io/advisories/112
  source_url: https://ossindex.net/resource/package/7014430328/vulnerabilities
- id: snykio:npm:sequelize:174147
  title: Hash Injection
  description: |
    [sequelize][1] is a promise-based Node.js ORM for Postgres, MySQL,
    MariaDB, SQLite and Microsoft SQL Server.

    Affected versions of this package are vulnerable to Hash Injection.
    Using specially crafted requests an attacker can bypass `secret_token`
    protections on websites using sequalize.

    For example:

        db.Token.findOne({
              where: {
                token: req.query.token
              }
        );

    Node.js and other platforms allow nested parameters, i.e. `token[$gt]=1`
    will be transformed into `token = {"$gt":1}`. When such a hash is passed
    into `sequalize` it will consider it a query (greater than 1) and find
    the first token in the DB, bypassing security of this endpoint.



    [1]: http://docs.sequelizejs.com/
  affected_package: sequelize
  vulnerable_versions:
  - "<4.12.0"
  severity: high
  package_manager: npm
  cwe:
  - CWE-77
  disclosed_date: 2017-03-01
  created_date: 2019-04-07
  last_modified_date: 2019-04-07
  credit:
  - Egor Homakov
  references:
  - https://blog.websecurify.com/2014/08/hacking-nodejs-and-mongodb.html
  - https://github.com/sequelize/sequelize/commit/ccb99daedb69e8750a241436415ccac8abef358d
  - https://github.com/sequelize/sequelize/issues/7310
  - https://github.com/sequelize/sequelize/issues/8417
  - https://github.com/sequelize/sequelize/pull/8240/files
  - https://www.npmjs.com/advisories/820
  source_url: https://snyk.io/vuln/SNYK-JS-SEQUELIZE-174147
- id: snykio:npm:sequelize:174167
  title: SQL Injection
  description: |
    [sequelize][1] is a promise-based Node.js ORM for Postgres, MySQL,
    MariaDB, SQLite and Microsoft SQL Server.

    Affected versions of this package are vulnerable to SQL Injection due to
    lack of ensuring that standard conforming strings are used.



    [1]: http://docs.sequelizejs.com/
  affected_package: sequelize
  vulnerable_versions:
  - ">=5.0.0 <5.3.0"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2019-11069
  cwe:
  - CWE-89
  disclosed_date: 2019-04-10
  created_date: 2019-04-11
  last_modified_date: 2019-04-11
  credit:
  - Unknown
  references:
  - https://github.com/sequelize/sequelize/pull/10746/files
  - https://github.com/sequelize/sequelize/releases/tag/v5.3.0
  - https://www.npmjs.com/advisories/821
  source_url: https://snyk.io/vuln/SNYK-JS-SEQUELIZE-174167
- id: snykio:npm:sequelize:20130614
  title: SQL Injection
  description: |+
    `sequelize` versions prior to 1.7.0-alpha3 are vulnerable to SQL
    Injection attacks if untrusted user input is passed into the `order`
    parameter.

  affected_package: sequelize
  vulnerable_versions:
  - ">=0.2.2 <1.7.0-alpha3"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2016-10554
  cwe:
  - CWE-89
  disclosed_date: 2013-05-24
  created_date: 2016-04-01
  last_modified_date: 2016-04-01
  credit:
  - Unknown
  references:
  - https://github.com/sequelize/sequelize/commit/c876192aa6ce1f67e22b26a4d175b8478615f42d
  source_url: https://snyk.io/vuln/npm:sequelize:20130614
- id: snykio:npm:sequelize:20150118
  title: SQL Injection
  description: |+
    `sequelize` versions prior to 2.0.0-rc7 are vulnerable to SQL Injection
    attacks if untrusted user input is passed into the `order` parameter.

  affected_package: sequelize
  vulnerable_versions:
  - "<2.0.0-rc8"
  severity: high
  package_manager: npm
  cve:
  - CVE-2015-1369
  cwe:
  - CWE-89
  disclosed_date: 2015-01-18
  created_date: 2015-01-18
  last_modified_date: 2015-01-18
  credit:
  - Levan Basharuli
  references:
  - https://github.com/sequelize/sequelize/issues/2906
  source_url: https://snyk.io/vuln/npm:sequelize:20150118
- id: snykio:npm:sequelize:20150517
  title: SQL Injection
  description: |+
    Beginning with `sequelize` version 3.0.0, two security related changes
    were introduced:

    * `findOne` no longer takes a string / integer / binary argument to
      represent a primaryKey. Use `findById` instead.
    * `where: "raw query"` is no longer legal, you must now explicitly use
      `where: ["raw query", [replacements]]`

  affected_package: sequelize
  vulnerable_versions:
  - "<2.1.4"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2016-10553
  cwe:
  - CWE-89
  disclosed_date: 2015-05-17
  created_date: 2016-04-01
  last_modified_date: 2016-04-01
  credit:
  - Unknown
  references:
  - https://github.com/sequelize/sequelize/blob/master/changelog.md#300
  source_url: https://snyk.io/vuln/npm:sequelize:20150517
- id: snykio:npm:sequelize:20151019
  title: SQL Injection
  description: |
    [`sequelize`][1] is a multi dialect ORM for Node.JS/io.js. Affected
    versions of the package are vulnerable to SQL Injection via the user
    search by typing the name they want to search for and the application
    then executes:

        User.findAll( { where: { name: req.body.name } } )
    {: .language-js}

    a malicious attacker may exploit this to find the users password by
    entering `$password$`. This could be avoided by specifying the exact
    column to search: the user column.



    [1]: https://www.npmjs.com/package/sequelize
  affected_package: sequelize
  vulnerable_versions:
  - "<3.12.1"
  severity: medium
  package_manager: npm
  cwe:
  - CWE-89
  disclosed_date: 2015-10-18
  created_date: 2017-02-13
  last_modified_date: 2017-02-13
  credit:
  - overlookmotel
  references:
  - https://github.com/sequelize/sequelize/commit/3f11bd97386f1cad4961d2cd054347508ef0aca5
  - https://github.com/sequelize/sequelize/issues/4680
  source_url: https://snyk.io/vuln/npm:sequelize:20151019
- id: snykio:npm:sequelize:20160106
  title: SQL Injection
  description: |+
    `sequelize` versions prior to 3.17.0 are vulnerable to SQL Injection
    attacks if untrusted user input is passed into the `order` or `limit`
    parameters.

  affected_package: sequelize
  vulnerable_versions:
  - ">=0.2.2 <3.13.17"
  severity: high
  package_manager: npm
  cwe:
  - CWE-89
  disclosed_date: 2015-01-06
  created_date: 2016-04-01
  last_modified_date: 2016-04-01
  credit:
  - Spencer Creasey
  references:
  - https://github.com/sequelize/sequelize/blob/master/changelog.md#3170
  - https://github.com/sequelize/sequelize/commit/d198d78182cbf1ea3ef1706740b35813a6aa0838
  - https://github.com/sequelize/sequelize/pull/5167
  source_url: https://snyk.io/vuln/npm:sequelize:20160106
- id: snykio:npm:sequelize:20160115
  title: Remote Memory Exposure
  description: "A potential memory disclosure vulnerability exists in sequelize versions\nprior
    to 3.17.2. A field of type `DataTypes.BLOB` can be used to expose\nsensitive information
    such as code, runtime memory and user data into\nthe database.\n\n### Details
    \  {#details}\n\n`sequelize` uses the `Buffer` type to represent `DataTypes.BLOB`.\nInitializing
    a `Buffer` with integer `N` creates a `Buffer` of length\n`N` with non zero-ed
    out memory. **Example:**\n\n    var x = new Buffer(100); // uninitialized Buffer
    of length 100\n    // vs\n    var x = new Buffer('100'); // initialized Buffer
    with value of '100'\n\nInitializing a `BLOB` field in such manner will dump uninitialized\nmemory
    into the database. The patch wraps `Buffer` field initialization\nin sequelize
    by converting a `number` value `N` to a string,\ninitializing the `Buffer` with
    `N` in its ascii form.\n\n#### Proof of concept   {#proof-of-concept}\n\n    var
    Sequelize = require('sequelize');\n    var sequelize = new Sequelize('pastebin',
    null, null,\n        { host: '127.0.0.1', dialect: 'postgres', });\n    \n    var
    Task = sequelize.define('Pastebin', {\n        title: Sequelize.STRING,\n        content:
    Sequelize.BLOB,\n      });\n    \n    Task.create({\n      title: 'title',\n      content:
    100,\n    }).then(function (task) {\n      console.log(task.title);\n      console.log(task.content);
    // will print out 100 bytes of previously used memory\n    });\n{: .language-javascript}\n\n"
  affected_package: sequelize
  vulnerable_versions:
  - "<3.17.2"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2016-10550
  cwe:
  - CWE-201
  disclosed_date: 2016-01-15
  created_date: 2016-04-01
  last_modified_date: 2016-04-01
  references:
  - https://github.com/ChALkeR/notes/blob/master/Buffer-knows-everything.md
  - https://github.com/ChALkeR/notes/blob/master/Lets-fix-Buffer-API.md#previous-materials
  - https://github.com/sequelize/sequelize/blob/master/changelog.md#3172
  - https://github.com/sequelize/sequelize/commit/cbfaa4f0a135cfc55874c9bfc39ead2d85c417e9
  source_url: https://snyk.io/vuln/npm:sequelize:20160115
- id: snykio:npm:sequelize:20160329
  title: SQL Injection
  description: |+
    `sequelize` versions prior to 3.20.0 improperly escape arrays of strings
    bound to named parameters.

  affected_package: sequelize
  vulnerable_versions:
  - "<3.20.0"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2016-10556
  cwe:
  - CWE-89
  disclosed_date: 2016-03-29
  created_date: 2016-04-01
  last_modified_date: 2016-04-01
  credit:
  - Unknown
  references:
  - https://github.com/sequelize/sequelize/commit/23952a2b020cc3571f090e67dae7feb084e1be71
  - https://github.com/sequelize/sequelize/issues/5671
  source_url: https://snyk.io/vuln/npm:sequelize:20160329
- id: snykio:npm:sequelize:20160718
  title: SQL Injection
  description: |
    `sequelize` versions prior to `3.23.6` are vulnerable to SQL injection
    via [GeoJSON][1] documents that contain a value with a single quote.
    GeoJSON is a format used for encoding a variety of geographic data
    structures in a standard JSON document. The vulnerability exists within
    GeoJSON documents using the function `ST_GeomFromGeoJSON` (for
    postgresql/postgis) and the function `GeomFromText` (for mysql).

    Note that `sequelize` users who do not use these specific functions are
    not affected. For users who do use these functions, this vulnerability
    has a high impact and is easily expoited, hence its high severity
    classification.



    [1]: http://geojson.org/
  affected_package: sequelize
  vulnerable_versions:
  - ">=3.4.0 <3.23.6"
  severity: high
  package_manager: npm
  cwe:
  - CWE-89
  disclosed_date: 2016-07-20
  created_date: 2016-07-18
  last_modified_date: 2016-07-18
  credit:
  - contra
  references:
  - http://docs.sequelizejs.com/en/latest/api/datatypes/#geometry
  - http://geojson.org/
  - https://github.com/sequelize/sequelize/issues/6194
  source_url: https://snyk.io/vuln/npm:sequelize:20160718
- id: snykio:npm:sequelize:450221
  title: SQL Injection
  description: |
    [sequelize][1] is a promise-based Node.js ORM for Postgres, MySQL,
    MariaDB, SQLite and Microsoft SQL Server.

    Affected versions of this package are vulnerable to SQL Injection due to
    JSON path keys not being properly escaped for the MySQL/MariaDB
    dialects.



    [1]: http://docs.sequelizejs.com/
  affected_package: sequelize
  vulnerable_versions:
  - ">=3.0.0 <3.35.1"
  - ">=4.0.0 <4.44.3"
  - ">=5.0.0 <5.8.11"
  severity: high
  package_manager: npm
  cve:
  - CVE-2019-10748
  cwe:
  - CWE-89
  disclosed_date: 2019-06-20
  created_date: 2019-06-21
  last_modified_date: 2019-06-21
  credit:
  - Snyk Security Team
  references:
  - https://github.com/sequelize/sequelize/commit/a72a3f5
  - https://github.com/sequelize/sequelize/pull/11089
  - https://www.npmjs.com/advisories/1018
  source_url: https://snyk.io/vuln/SNYK-JS-SEQUELIZE-450221
- id: snykio:npm:sequelize:450222
  title: SQL Injection
  description: |
    [sequelize][1] is a promise-based Node.js ORM for Postgres, MySQL,
    MariaDB, SQLite and Microsoft SQL Server.

    Affected versions of this package are vulnerable to SQL Injection due to
    JSON path keys not being properly sanitized in the Postgres dialect.



    [1]: http://docs.sequelizejs.com/
  affected_package: sequelize
  vulnerable_versions:
  - "<3.35.1"
  severity: high
  package_manager: npm
  cve:
  - CVE-2019-10749
  cwe:
  - CWE-89
  disclosed_date: 2019-06-20
  created_date: 2019-06-21
  last_modified_date: 2019-06-21
  credit:
  - Snyk Security Team
  references:
  - https://github.com/sequelize/sequelize/commit/ee4017379db0059566ecb5424274ad4e2d66bc68
  source_url: https://snyk.io/vuln/SNYK-JS-SEQUELIZE-450222
- id: snykio:npm:sequelize:459751
  title: SQL Injection
  description: |
    [sequelize][1] is a promise-based Node.js ORM for Postgres, MySQL,
    MariaDB, SQLite and Microsoft SQL Server.

    Affected versions of this package are vulnerable to SQL Injection due to
    `sequelize.json()` helper function not escaping values properly when
    formatting sub paths for JSON queries for MySQL, MariaDB and SQLite.



    [1]: http://docs.sequelizejs.com/
  affected_package: sequelize
  vulnerable_versions:
  - ">=4.0.0 <4.44.3"
  - ">=5.0.0 <5.15.1"
  severity: high
  package_manager: npm
  cve:
  - CVE-2019-10752
  cwe:
  - CWE-89
  disclosed_date: 2019-08-18
  created_date: 2019-08-19
  last_modified_date: 2019-08-19
  credit:
  - Snyk Security Team
  references:
  - https://github.com/sequelize/sequelize/commit/9bd0bc111b6f502223edf7e902680f7cc2ed541e
  - https://github.com/sequelize/sequelize/pull/11329
  source_url: https://snyk.io/vuln/SNYK-JS-SEQUELIZE-459751
- id: snykio:npm:sequelize:543029
  title: Denial of Service (DoS)
  description: "[sequelize][1] is a promise-based Node.js ORM for Postgres, MySQL,\nMariaDB,
    SQLite and Microsoft SQL Server.\n\nAffected versions of this package are vulnerable
    to Denial of Service\n(DoS). The `afterResults` function for the SQLite dialect
    fails to catch\na `TypeError` exception for the `results` variable. This allows\nattackers
    to submit malicious input that forces the exception and\ncrashes the Node process.\n\n\n\n[1]:
    http://docs.sequelizejs.com/\n\\nDenial of Service (DoS) describes a family of
    attacks, all aimed at\nmaking a system inaccessible to its original and legitimate
    users. There\nare many types of DoS attacks, ranging from trying to clog the network\npipes
    to the system by generating a large volume of traffic from many\nmachines (a Distributed
    Denial of Service - DDoS - attack) to sending\ncrafted requests that cause a system
    to crash or take a disproportional\namount of time to process.\n\nThe Regular
    expression Denial of Service (ReDoS) is a type of Denial of\nService attack. Regular
    expressions are incredibly powerful, but they\naren\\'t very intuitive and can
    ultimately end up making it easy for\nattackers to take your site down.\n\nLet’s
    take the following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n{:
    .language-js}\n\nThis regular expression accomplishes the following:\n\n* `A`
    The string must start with the letter \\'A\\'\n* `(B|C+)+` The string must then
    follow the letter A with either the\n  letter \\'B\\' or some number of occurrences
    of the letter \\'C\\' (the\n  `+` matches one or more times). The `+` at the end
    of this section\n  states that we can look for one or more matches of this section.\n*
    `D` Finally, we ensure this section of the string ends with a \\'D\\'\n\nThe expression
    would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt
    most cases, it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n
    \   $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s
    user 0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n{: .language-bash}\n\nThe entire
    process of testing it against a 30 characters long string\ntakes around ~52ms.
    But when given an invalid string, it takes nearly\ntwo seconds to complete the
    test, over ten times as long as it took to\ntest a valid string. The dramatic
    difference is due to the way regular\nexpressions get evaluated.\n\nMost Regex
    engines will work very similarly (with minor differences).\nThe engine will match
    the first possible way to accept the current\ncharacter and proceed to the next
    one. If it then fails to match the\nnext one, it will backtrack and see if there
    was another way to digest\nthe previous character. If it goes too far down the
    rabbit hole only to\nfind out the string doesn’t match in the end, and if many
    characters\nhave multiple valid regex paths, the number of backtracking steps
    can\nbecome very large, resulting in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s
    look at how our expression runs into this problem, using a\nshorter string: \\\"ACCCX\\\".
    While it seems fairly straightforward, there\nare still four different ways that
    the engine could match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.
    \ C+C+C.\n\nThe engine has to try each of those combinations to see if any of
    them\npotentially match against the expression. When you combine that with the\nother
    steps the engine must take, we can use [RegEx 101 debugger][1] to\nsee the engine
    has to take a total of 38 steps before it can determine\nthe string doesn\\'t
    match.\n\nFrom there, the number of steps the engine must use to validate a string\njust
    continues to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n|
    ACCCX | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX
    | 14 | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to
    take over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n"
  affected_package: sequelize
  vulnerable_versions:
  - "<4.44.4"
  severity: medium
  package_manager: npm
  cwe:
  - CWE-400
  disclosed_date: 2019-09-03
  created_date: 2020-01-23
  last_modified_date: 2020-01-23
  credit:
  - Francois Gauthier
  references:
  - https://github.com/sequelize/sequelize/pull/11877
  - https://www.npmjs.com/advisories/1142
  source_url: https://snyk.io/vuln/SNYK-JS-SEQUELIZE-543029
