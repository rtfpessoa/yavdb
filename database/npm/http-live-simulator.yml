---
- id: npmjs:npm:http-live-simulator:1189
  title: Denial of Service
  description: Versions of `http-live-simulator` prior to 1.0.8 are vulnerable to
    Denial of Service. The package fails to catch an exception that causes the Node
    process to crash, effectively shutting down the server. This allows an attacker
    to send an HTTP request that crashes the server.
  affected_package: http-live-simulator
  vulnerable_versions:
  - "<1.0.8"
  severity: medium
  package_manager: npm
  cwe: CWE-248
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: 3la2kb
- id: npmjs:npm:http-live-simulator:772
  title: Path Traversal
  description: 'Versions of `http-live-simulator` prior to 1.0.7 are vulnerable to
    Path Traversal.  Due to insufficient input sanitization, attackers can access
    server files by using relative paths. For example: `curl --path-as-is http://localhost:8080//../../../../etc/passwd`.'
  affected_package: http-live-simulator
  vulnerable_versions:
  - "<=1.0.6"
  severity: high
  package_manager: npm
  cve:
  - CVE-2018-16479
  cwe: CWE-22
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: 3la2kb
- id: npmjs:npm:http-live-simulator:799
  title: Path Traversal
  description: 'Versions of `http-live-simulator` prior to 1.0.6 are vulnerable to
    Path Traversal.  Due to insufficient input sanitization, attackers can access
    server files by using relative paths. '
  affected_package: http-live-simulator
  vulnerable_versions:
  - "<=1.0.5"
  severity: high
  package_manager: npm
  cve:
  - CVE-2019-5423
  cwe: CWE-22
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: Liran Tal
- id: snykio:npm:http-live-simulator:469235
  title: Denial of Service (DoS)
  description: |
    [http-live-simulator][1] is a simple http file server for local
    development written in Node.JS.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS). It is possible to crash a server using the package due to the way
    URL parsing is handled when invalid directory paths are given.

    ### PoC by 3la2kb   {#poc-by-3la2kb}

        curl --path-as-is http://localhost:8080/../?a



    [1]: https://www.npmjs.com/package/http-live-simulator
  affected_package: http-live-simulator
  vulnerable_versions:
  - ">=1.0.7 <1.0.8"
  severity: high
  package_manager: npm
  cwe:
  - CWE-400
  disclosed_date: 2019-09-27
  created_date: 2019-09-27
  last_modified_date: 2019-09-27
  credit:
  - 3la2kb
  references:
  - https://github.com/prahladyeri/http-live-simulator/commit/f9f13b5bfc4f95eeeb33c850f58425e65a71aa5a
  - https://github.com/prahladyeri/http-live-simulator/issues/3
  - https://hackerone.com/reports/627376
  source_url: https://snyk.io/vuln/SNYK-JS-HTTPLIVESIMULATOR-469235
- id: snykio:npm:http-live-simulator:72456
  title: Directory Traversal
  description: |
    [`http-live-simulator`][1] is a HTTP Server that serves with random
    delay for live simulations.

    Affected versions of this package are vulnerable to Directory Traversal
    attacks. It did not set a root directory and allowed any arbitrary paths
    to be accessed on the file system and returned to requesting clients.



    [1]: https://www.npmjs.com/package/http-live-simulator
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
  affected_package: http-live-simulator
  vulnerable_versions:
  - "<1.0.6"
  severity: high
  package_manager: npm
  cve:
  - CVE-2019-5423
  cwe:
  - CWE-22
  disclosed_date: 2018-06-21
  created_date: 2018-10-15
  last_modified_date: 2018-10-15
  credit:
  - Liran Tal
  references:
  - https://github.com/prahladyeri/http-live-simulator/commit/8e85a1be562248d0d616c0e5092a3d71bbf5fe5f
  - https://hackerone.com/reports/384939
  - https://www.npmjs.com/advisories/799
  source_url: https://snyk.io/vuln/SNYK-JS-HTTPLIVESIMULATOR-72456
- id: snykio:npm:http-live-simulator:73554
  title: Directory Traversal
  description: |
    [http-live-simulator][1] is a simple http file server for local
    development written in Node.JS.

    Affected versions of this package are vulnerable to Directory Traversal.
    An attacker could read arbitrary files from any location on disk.

    **Note** This vulnerability is due to an incomplete fix in
    [SNYK-JS-HTTPLIVESIMULATOR-72456][2]



    [1]: https://www.npmjs.com/package/http-live-simulator
    [2]: https://snyk.io/vuln/SNYK-JS-HTTPLIVESIMULATOR-72456
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
  affected_package: http-live-simulator
  vulnerable_versions:
  - "<1.0.7"
  severity: high
  package_manager: npm
  cve:
  - CVE-2018-16479
  cwe:
  - CWE-22
  disclosed_date: 2019-01-20
  created_date: 2019-01-20
  last_modified_date: 2019-01-20
  credit:
  - 3la2kb
  references:
  - https://hackerone.com/reports/411405
  - https://www.npmjs.com/advisories/772
  source_url: https://snyk.io/vuln/SNYK-JS-HTTPLIVESIMULATOR-73554
