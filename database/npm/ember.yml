---
- id: ossindex:npm:ember:359716
  title: '[CVE-2014-0046]  Improper Neutralization of Input During Web Page Generation
    ("Cross-site Scripting")'
  description: Cross-site scripting (XSS) vulnerability in the link-to helper in Ember.js
    1.2.x before 1.2.2, 1.3.x before 1.3.2, and 1.4.x before 1.4.0-beta.6, when used
    in non-block form, allows remote attackers to inject arbitrary web script or HTML
    via the title attribute.
  affected_package: ember
  vulnerable_versions:
  - 1.2.0
  - 1.2.1
  - 1.3.0
  - 1.3.1
  - 1.4.0
  package_manager: npm
  cve:
  - CVE-2014-0046
  disclosed_date: 2014-02-27
  created_date: 2014-02-27
  last_modified_date: 2017-08-03
  credit:
  - OSSIndex
  references:
  - http://emberjs.com/blog/2014/02/07/ember-security-releases.html
  - http://secunia.com/advisories/56965
  - http://www.openwall.com/lists/oss-security/2014/02/14/6
  - http://www.securityfocus.com/bid/65579
  - http://xforce.iss.net/xforce/xfdb/91242
  - https://exchange.xforce.ibmcloud.com/vulnerabilities/91242
  - https://groups.google.com/forum/#!topic/ember-security/1h6FRgr8lXQ
  - https://groups.google.com/forum/#%21topic/ember-security/1h6FRgr8lXQ
  source_url: https://ossindex.net/resource/package/7013522888/vulnerabilities
- id: ossindex:npm:ember:8397111748
  title: Potential XSS Exploit When Binding `tagName` to User-Supplied Data
  description: |
    Potential XSS Exploit When Binding `tagName` to User-Supplied Data

    This vulnerability has been assigned the CVE identifier CVE-2013-4170.

    In general, Ember.js escapes or strips any user-supplied content
    before inserting it in strings that will be sent to innerHTML.
    However, the `tagName` property of an `Ember.View` was inserted into
    such a string without being sanitized. This means that if an
    application assigns a view's `tagName` to user-supplied data, a
    specially-crafted payload could execute arbitrary JavaScript in the
    context of the current domain ("XSS").

    Versions Affected: ALL versions
    Not affected: NONE
    Fixed Versions: 1.0.0 RC6.1, 1.0.0 RC5.1, 1.0.0 RC4.1, 1.0.0 RC3.1,
    1.0.0 RC2.1, 1.0.0 RC1.1
  affected_package: ember
  vulnerable_versions:
  - "<1.0.0-rc61"
  package_manager: npm
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 2017-08-03
  credit:
  - OSSIndex
  references:
  - https://groups.google.com/forum/#!topic/ember-security/dokLVwwxAdM
  source_url: https://ossindex.net/resource/package/7013522888/vulnerabilities
- id: ossindex:npm:ember:8397111749
  title: Potential XSS Exploit With User-Supplied Data When Binding Primitive Values
  description: |-
    Potential XSS Exploit With User-Supplied Data When Binding Primitive Values

    This vulnerability has been assigned the CVE identifier CVE-2014-0013.

    In general, Ember.js escapes or strips any user-supplied content before
    inserting it in strings that will be sent to innerHTML.  However, we have
    identified a vulnerability that could lead to unescaped content being inserted
    into the innerHTML string without being sanitized.

    When a primitive value is used as the Handlebars context, that value is not
    properly escaped.  An example of this would be using the `{{each}}` helper to
    iterate over an array of user-supplied strings and using `{{this}}` inside the
    block to display each string.

    In applications that contain templates whose context is a primitive value and
    use the `{{this}}` keyword to display that value, a specially-crafted payload
    could execute arbitrary JavaScript in the context of the current domain
    ("XSS").

    Versions Affected: ALL versions
    Not affected: NONE
    Fixed Versions: 1.0.1, 1.1.3, 1.2.1, 1.3.1, 1.4.0-beta.2
  affected_package: ember
  vulnerable_versions:
  - "<1.3.1"
  package_manager: npm
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 2017-08-03
  credit:
  - OSSIndex
  references:
  - https://groups.google.com/forum/#!topic/ember-security/2kpXXCxISS4
  source_url: https://ossindex.net/resource/package/7013522888/vulnerabilities
- id: ossindex:npm:ember:8399958615
  title: XSS Vulnerability in Ember.js with User-Supplied JSON
  description: |-
    It is possible for an attacker to create a specially-crafted payload
    that causes a non-sanitized string to be treated as a `SafeString`, and
    thus bypass Ember's normal escaping behavior. This could allow an
    attacker to execute arbitrary JavaScript in the context of the current
    domain ("XSS").
  affected_package: ember
  vulnerable_versions:
  - ">= 1.12.0 < 1.12.2"
  - ">= 1.13.0 < 1.13.12"
  - ">= 2.0.0 < 2.0.3"
  - ">= 2.1.0 < 2.1.2"
  - ">= 2.2.0 < 2.2.1"
  - ">=1.8.0 <1.11.4"
  package_manager: npm
  disclosed_date: 2016-08-03
  created_date: 2016-08-03
  last_modified_date: 2017-08-03
  credit:
  - OSSIndex
  references:
  - https://groups.google.com/forum/#!topic/ember-security/OfyQkoSuppY
  source_url: https://ossindex.net/resource/package/7013522888/vulnerabilities
- id: ossindex:npm:ember:8399968149
  title: "[Duplicate] XSS Vulnerability in Ember.js with User-Supplied JSON"
  description: |-
    See https://ossindex.net/resource/vulnerability/8399958615

    It is possible for an attacker to create a specially-crafted payload that causes a non-sanitized string to be treated as a SafeString, and thus bypass Ember's normal escaping behavior. This could allow an attacker to execute arbitrary JavaScript in the context of the current domain ("XSS").
  affected_package: ember
  vulnerable_versions:
  - ">= 1.12.0 < 1.12.2"
  package_manager: npm
  disclosed_date: 2016-08-11
  created_date: 2016-08-11
  last_modified_date: 2017-08-03
  credit:
  - OSSIndex
  references:
  - https://groups.google.com/forum/#!topic/ember-security/OfyQkoSuppY
  source_url: https://ossindex.net/resource/package/7013522888/vulnerabilities
- id: ossindex:npm:ember:8399968150
  title: "[Duplicate] XSS Vulnerability in Ember.js with User-Supplied JSON"
  description: |-
    See https://ossindex.net/resource/vulnerability/8399958615

    It is possible for an attacker to create a specially-crafted payload that causes a non-sanitized string to be treated as a SafeString, and thus bypass Ember's normal escaping behavior. This could allow an attacker to execute arbitrary JavaScript in the context of the current domain ("XSS").
  affected_package: ember
  vulnerable_versions:
  - ">= 1.13.0 < 1.13.12"
  package_manager: npm
  disclosed_date: 2016-08-11
  created_date: 2016-08-11
  last_modified_date: 2017-08-03
  credit:
  - OSSIndex
  references:
  - https://groups.google.com/forum/#!topic/ember-security/OfyQkoSuppY
  source_url: https://ossindex.net/resource/package/7013522888/vulnerabilities
- id: ossindex:npm:ember:8399968151
  title: "[Duplicate] XSS Vulnerability in Ember.js with User-Supplied JSON"
  description: |-
    See https://ossindex.net/resource/vulnerability/8399958615

    It is possible for an attacker to create a specially-crafted payload that causes a non-sanitized string to be treated as a SafeString, and thus bypass Ember's normal escaping behavior. This could allow an attacker to execute arbitrary JavaScript in the context of the current domain ("XSS").
  affected_package: ember
  vulnerable_versions:
  - ">= 2.0.0 < 2.0.3"
  package_manager: npm
  disclosed_date: 2016-08-11
  created_date: 2016-08-11
  last_modified_date: 2017-08-03
  credit:
  - OSSIndex
  references:
  - https://groups.google.com/forum/#!topic/ember-security/OfyQkoSuppY
  source_url: https://ossindex.net/resource/package/7013522888/vulnerabilities
- id: ossindex:npm:ember:8399968152
  title: "[Duplicate] XSS Vulnerability in Ember.js with User-Supplied JSON"
  description: |-
    See https://ossindex.net/resource/vulnerability/8399958615

    It is possible for an attacker to create a specially-crafted payload that causes a non-sanitized string to be treated as a SafeString, and thus bypass Ember's normal escaping behavior. This could allow an attacker to execute arbitrary JavaScript in the context of the current domain ("XSS").
  affected_package: ember
  vulnerable_versions:
  - ">= 2.1.0 < 2.1.2"
  package_manager: npm
  disclosed_date: 2016-08-11
  created_date: 2016-08-11
  last_modified_date: 2017-08-03
  credit:
  - OSSIndex
  references:
  - https://groups.google.com/forum/#!topic/ember-security/OfyQkoSuppY
  source_url: https://ossindex.net/resource/package/7013522888/vulnerabilities
- id: ossindex:npm:ember:8399968153
  title: "[Duplicate] XSS Vulnerability in Ember.js with User-Supplied JSON"
  description: |-
    See https://ossindex.net/resource/vulnerability/8399958615

    It is possible for an attacker to create a specially-crafted payload that causes a non-sanitized string to be treated as a SafeString, and thus bypass Ember's normal escaping behavior. This could allow an attacker to execute arbitrary JavaScript in the context of the current domain ("XSS").
  affected_package: ember
  vulnerable_versions:
  - ">= 2.2.0 < 2.2.1"
  package_manager: npm
  disclosed_date: 2016-08-11
  created_date: 2016-08-11
  last_modified_date: 2017-08-03
  credit:
  - OSSIndex
  references:
  - https://groups.google.com/forum/#!topic/ember-security/OfyQkoSuppY
  source_url: https://ossindex.net/resource/package/7013522888/vulnerabilities
- id: ossindex:npm:ember:8401420912
  title: Cross Site Scripting (XSS)
  description: Model attributes are not properly escaped due to a bug in RenderBuffer.
    This opens the door for some potentially serious XSS attacks.
  affected_package: ember
  vulnerable_versions:
  - "<1.0"
  package_manager: npm
  disclosed_date: 2016-11-13
  created_date: 2016-11-13
  last_modified_date: 2017-08-03
  credit:
  - OSSIndex
  references:
  - https://cwe.mitre.org/data/definitions/79.html
  - https://github.com/emberjs/ember.js/issues/699
  source_url: https://ossindex.net/resource/package/7013522888/vulnerabilities
- id: ossindex:npm:ember:8402207876
  title: Possible Cross Site Scripting (XSS)
  description: There was a potential XSS exploit when using unquoted attributes, in
    particular the `=` character.
  affected_package: ember
  vulnerable_versions:
  - "<4.0.0"
  package_manager: npm
  disclosed_date: 2016-11-30
  created_date: 2016-11-30
  last_modified_date: 2017-08-03
  credit:
  - OSSIndex
  references:
  - https://cwe.mitre.org/data/definitions/79.html
  - https://github.com/emberjs/ember.js/issues/14297
  - https://github.com/wycats/handlebars.js/commit/83b8e846a3569bd366cf0b6bdc1e4604d1a2077e
  - https://github.com/wycats/handlebars.js/pull/1083
  source_url: https://ossindex.net/resource/package/7013522888/vulnerabilities
- id: ossindex:npm:ember:8402792059
  title: '[CVE-2015-7565]  Improper Neutralization of Input During Web Page Generation
    ("Cross-site Scripting")'
  description: Cross-site scripting (XSS) vulnerability in Ember.js 1.8.x through
    1.10.x, 1.11.x before 1.11.4, 1.12.x before 1.12.2, 1.13.x before 1.13.12, 2.0.x
    before 2.0.3, 2.1.x before 2.1.2, and 2.2.x before 2.2.1 allows remote attackers
    to inject arbitrary web script or HTML.
  affected_package: ember
  vulnerable_versions:
  - '1.10'
  - 1.10.1
  - '1.11'
  - 1.11.1
  - 1.11.2
  - 1.11.3
  - '1.12'
  - 1.12.1
  - '1.13'
  - 1.13.1
  - 1.13.10
  - 1.13.11
  - 1.13.2
  - 1.13.3
  - 1.13.4
  - 1.13.5
  - 1.13.6
  - 1.13.7
  - 1.13.8
  - 1.13.9
  - '1.8'
  - 1.8.1
  - '1.9'
  - 1.9.1
  - '2.0'
  - 2.0.1
  - 2.0.2
  - '2.1'
  - 2.1.1
  - '2.2'
  package_manager: npm
  cve:
  - CVE-2015-7565
  disclosed_date: 2017-04-13
  created_date: 2017-04-13
  last_modified_date: 2017-08-03
  credit:
  - OSSIndex
  references:
  - http://emberjs.com/blog/2016/01/14/security-releases-ember-1-11-4-1-12-2-1-13-12-2-0-3-2-1-2-2-2-1.html
  - https://groups.google.com/forum/#!topic/ember-security/OfyQkoSuppY
  - https://groups.google.com/forum/#%21topic/ember-security/OfyQkoSuppY
  source_url: https://ossindex.net/resource/package/7013522888/vulnerabilities
- id: snykio:npm:ember:1
  title: Potential Cross-site Scripting (XSS)
  description: |+
    Potential XSS Exploit With User-Supplied Data When Using \{\{group}}
    Helper

    In general, Ember.js escapes or strips any user-supplied content before
    inserting it in strings that will be sent to innerHTML. However, a
    vulnerability has been identified that could lead to unescaped content
    being inserted into the innerHTML string without being sanitized.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    **Impact**\:

    This vulnerability only affects applications that use the `{{group}}`
    helper to display user-provided content.

  affected_package: ember
  vulnerable_versions:
  - ">=1.0.0 <1.0.1"
  - ">=1.1.0 <1.1.3"
  - ">=1.2.0 <1.2.1"
  - ">=1.3.0 <1.3.1"
  - ">=1.4.0 <1.4.0-beta2"
  severity: low
  package_manager: npm
  cve:
  - CVE-2014-0013
  - CVE-2014-0014
  cwe:
  - CWE-79
  disclosed_date: 2015-11-06
  created_date: 2015-11-06
  last_modified_date: 2015-11-06
  credit:
  - Robert Jackson
  references:
  - https://groups.google.com/forum/#!topic/ember-security/2kpXXCxISS4
  - https://groups.google.com/forum/#!topic/ember-security/PSE4RzTi6l4
  source_url: https://snyk.io/vuln/npm:ember:20140114-1
- id: snykio:npm:ember:20130105
  title: Cross-site Scripting (XSS)
  description: |+
    In general, Ember.js escapes or strips any user-supplied content before
    inserting it in strings that will be sent to innerHTML. However, the
    `tagName` property of an `Ember.View` was inserted into such a string
    without being sanitized. This means that if an application assigns a
    view\'s `tagName` to user-supplied data, a specially-crafted payload
    could execute arbitrary JavaScript in the context of the current domain
    (XSS).

    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: ember
  vulnerable_versions:
  - ">= 1.0.0-rc.1 <1.0.0-rc.1.1"
  - ">= 1.0.0-rc.2 <1.0.0-rc.2.1"
  - ">= 1.0.0-rc.3 <1.0.0-rc.3.1"
  - ">= 1.0.0-rc.4 <1.0.0-rc.4.1"
  - ">= 1.0.0-rc.5 <1.0.0-rc.5.1"
  - ">= 1.0.0-rc.6 <1.0.0-rc.6.1"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2013-4170
  cwe:
  - CWE-79
  disclosed_date: 2015-11-06
  created_date: 2015-11-06
  last_modified_date: 2015-11-06
  credit:
  - Mario Heiderich
  references:
  - https://groups.google.com/forum/#!topic/ember-security/dokLVwwxAdM
  source_url: https://snyk.io/vuln/npm:ember:20130105
- id: snykio:npm:ember:20140114
  title: Cross-site Scripting (XSS)
  description: |+
    Potential XSS Exploit With User-Supplied Data When Using \{\{group}}
    Helper

    In general, Ember.js escapes or strips any user-supplied content before
    inserting it in strings that will be sent to innerHTML. However, a
    vulnerability has been identified that could lead to unescaped content
    being inserted into the innerHTML string without being sanitized.

    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

    **Impact**\:

    This vulnerability only affects applications that use the `{{group}}`
    helper to display user-provided content.

  affected_package: ember
  vulnerable_versions:
  - ">=1.0.0 <1.0.1"
  - ">=1.1.0 <1.1.3"
  - ">=1.2.0 <1.2.1"
  - ">=1.3.0 <1.3.1"
  - ">=1.4.0-beta.1 <1.4.0-beta.2"
  severity: low
  package_manager: npm
  cve:
  - CVE-2014-0013
  - CVE-2014-0014
  cwe:
  - CWE-79
  disclosed_date: 2015-11-06
  created_date: 2015-11-06
  last_modified_date: 2015-11-06
  credit:
  - Robert Jackson
  references:
  - https://groups.google.com/forum/#!topic/ember-security/2kpXXCxISS4
  - https://groups.google.com/forum/#!topic/ember-security/PSE4RzTi6l4
  source_url: https://snyk.io/vuln/npm:ember:20140114
- id: snykio:npm:ember:20140214
  title: Cross-site Scripting (XSS)
  description: |
    [ember][1] is a framework for web developers.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). In general, Ember.js escapes or strips any user-supplied content
    before inserting it in strings that will be sent to innerHTML. However,
    a vulnerability that could lead to unescaped content being inserted into
    the innerHTML string without being sanitized has been identified.

    **Impact:**

    This vulnerability affects applications that contain templates whose
    context is set to a user-supplied primitive value (such as a string or
    number) and also contain the `{{this}}` special Handlebars variable to
    display the value.



    [1]: https://www.npmjs.com/package/ember
  affected_package: ember
  vulnerable_versions:
  - ">=1.2.0 <1.2.2"
  - ">=1.3.0 <1.3.1"
  severity: low
  package_manager: npm
  cwe:
  - CWE-79
  disclosed_date: 2015-11-06
  created_date: 2015-11-06
  last_modified_date: 2015-11-06
  credit:
  - Hyder Ali
  references:
  - https://groups.google.com/forum/#!topic/ember-security/1h6FRgr8lXQ
  source_url: https://snyk.io/vuln/npm:ember:20140214
