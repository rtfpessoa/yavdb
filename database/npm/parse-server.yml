---
- id: npmjs:npm:parse-server:1113
  title: Denial of Service
  description: Versions of `parse-server` prior to 3.4.1 are vulnerable to Denial
    of Service (DoS). POST requests to `/parse/classes/_Audience` (or other volatile
    classes) cause the server to respond with a `500 Internal Server Error` for any
    subsequent POST requests.
  affected_package: parse-server
  vulnerable_versions:
  - "<3.4.1"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2019-1020012
  cwe: CWE-400
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: Arthur Cinader
- id: npmjs:npm:parse-server:1114
  title: Sensitive Data Exposure
  description: Versions of `parse-server` prior to 3.6.0 are vulnerable to Sensitive
    Data Exposure. The package throws the error `ParseError.ACCOUNT_ALREADY_LINKED(208)`
    before the authentication controller throws `ParseError.SESSION_MISSING(206)`.
    This allows unauthenticated attackers to enumerate user account by guessing ids
    and retrieving user information.
  affected_package: parse-server
  vulnerable_versions:
  - "<3.6.0"
  severity: low
  package_manager: npm
  cve:
  - CVE-2019-1020013
  cwe: CWE-200
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: Arthur Cinader
- id: snykio:npm:parse-server:455635
  title: Denial of Service (DoS)
  description: "[parse-server][1] is a version of the Parse backend that can be deployed\nto
    any infrastructure that can run Node.js.\n\nAffected versions of this package
    are vulnerable to Denial of Service\n(DoS). If a POST request is made to `/parse/classes/_Audience`
    (or other\nvolatile class), any subsuquent POST requests result in an internal\nserver
    error (500).\n\n\n\n[1]: https://github.com/parse-community/parse-server#readme\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n{: .language-js}\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n{: .language-bash}\n\nThe entire
    process of testing it against a 30 characters long string\ntakes around ~52ms.
    But when given an invalid string, it takes nearly\ntwo seconds to complete the
    test, over ten times as long as it took to\ntest a valid string. The dramatic
    difference is due to the way regular\nexpressions get evaluated.\n\nMost Regex
    engines will work very similarly (with minor differences).\nThe engine will match
    the first possible way to accept the current\ncharacter and proceed to the next
    one. If it then fails to match the\nnext one, it will backtrack and see if there
    was another way to digest\nthe previous character. If it goes too far down the
    rabbit hole only to\nfind out the string doesn’t match in the end, and if many
    characters\nhave multiple valid regex paths, the number of backtracking steps
    can\nbecome very large, resulting in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s
    look at how our expression runs into this problem, using a\nshorter string: \\\"ACCCX\\\".
    While it seems fairly straightforward, there\nare still four different ways that
    the engine could match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.
    \ C+C+C.\n\nThe engine has to try each of those combinations to see if any of
    them\npotentially match against the expression. When you combine that with the\nother
    steps the engine must take, we can use [RegEx 101 debugger][1] to\nsee the engine
    has to take a total of 38 steps before it can determine\nthe string doesn\\'t
    match.\n\nFrom there, the number of steps the engine must use to validate a string\njust
    continues to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n|
    ACCCX | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX
    | 14 | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to
    take over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n"
  affected_package: parse-server
  vulnerable_versions:
  - "<3.4.1"
  severity: high
  package_manager: npm
  cve:
  - CVE-2019-1020012
  cwe:
  - CWE-400
  disclosed_date: 2019-07-29
  created_date: 2019-07-29
  last_modified_date: 2019-07-29
  credit:
  - Unknown
  references:
  - https://github.com/parse-community/parse-server/commit/8709daf698ea69b59268cb66f0f7cee75b52daa5
  - https://github.com/parse-community/parse-server/security/advisories/GHSA-2479-qvv7-47qq
  source_url: https://snyk.io/vuln/SNYK-JS-PARSESERVER-455635
- id: snykio:npm:parse-server:455637
  title: Account Enumeration
  description: |
    [parse-server][1] is a version of the Parse backend that can be deployed
    to any infrastructure that can run Node.js.

    Affected versions of this package are vulnerable to Account Enumeration.
    `ParseError.ACCOUNT_ALREADY_LINKED(208)` is thrown before the
    `AuthController`checks the password and throws a
    `ParseError.SESSION_MISSING(206)` for Insufficient auth. An attacker can
    guess ids and get information about linked accounts and email addresses.



    [1]: https://github.com/parse-community/parse-server#readme
  affected_package: parse-server
  vulnerable_versions:
  - "<3.6.0"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2019-1020013
  cwe:
  - CWE-204
  disclosed_date: 2019-07-29
  created_date: 2019-07-29
  last_modified_date: 2019-07-29
  credit:
  - Unknown
  references:
  - https://github.com/parse-community/parse-server/security/advisories/GHSA-8w3j-g983-8jh5
  source_url: https://snyk.io/vuln/SNYK-JS-PARSESERVER-455637
- id: snykio:npm:parse-server:559169
  title: Improper Input Validation
  description: |
    [parse-server][1] is a version of the Parse backend that can be deployed
    to any infrastructure that can run Node.js.

    Affected versions of this package are vulnerable to Improper Input
    Validation. It is possible to fetch all the users\' objects, by using
    regex for `sessionToken` in the NoSQL query:
    `{"_SessionToken":{"$regex":"r:027f"}}`. In addition, it is possible to
    verify someone else\'s account by simply using regex in the token param:
    `http://localhost:1337/parse/apps/kickbox/verify_email?token[$regex]=a&username=some@email.com`.



    [1]: https://github.com/parse-community/parse-server#readme
  affected_package: parse-server
  vulnerable_versions:
  - "<4.1.0"
  severity: high
  package_manager: npm
  cve:
  - CVE-2020-5251
  cwe:
  - CWE-20
  disclosed_date: 2020-03-03
  created_date: 2020-03-04
  last_modified_date: 2020-03-04
  credit:
  - Wolfwood
  references:
  - https://github.com/parse-community/parse-server/security/advisories/GHSA-h4mf-75hf-67w4
  source_url: https://snyk.io/vuln/SNYK-JS-PARSESERVER-559169
- id: snykio:npm:parse-server:590063
  title: Access Restriction Bypass
  description: |
    [parse-server][1] is a version of the Parse backend that can be deployed
    to any infrastructure that can run Node.js.

    Affected versions of this package are vulnerable to Access Restriction
    Bypass. An authenticated user using the viewer GraphQL query can bypass
    all read security on his User object and can also bypass all objects
    linked via relation or Pointer on his User object.



    [1]: https://github.com/parse-community/parse-server#readme
  affected_package: parse-server
  vulnerable_versions:
  - ">=3.5.0 <4.3.0"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2020-15126
  cwe:
  - CWE-284
  disclosed_date: 2020-07-23
  created_date: 2020-07-23
  last_modified_date: 2020-07-23
  credit:
  - Unknown
  references:
  - https://github.com/parse-community/parse-server/blob/master/CHANGELOG.md#430
  - https://github.com/parse-community/parse-server/commit/78239ac9071167fdf243c55ae4bc9a2c0b0d89aa
  - https://github.com/parse-community/parse-server/security/advisories/GHSA-236h-rqv8-8q73
  source_url: https://snyk.io/vuln/SNYK-JS-PARSESERVER-590063
- id: snykio:npm:parse-server:590116
  title: Improper Authorization
  description: |
    [parse-server][1] is a version of the Parse backend that can be deployed
    to any infrastructure that can run Node.js.

    Affected versions of this package are vulnerable to Improper
    Authorization. When using the REST api to create a new session token,
    that tokens is not set as `restricted`.



    [1]: https://github.com/parse-community/parse-server#readme
  affected_package: parse-server
  vulnerable_versions:
  - "*"
  severity: medium
  package_manager: npm
  cwe:
  - CWE-285
  disclosed_date: 2020-09-10
  created_date: 2020-09-10
  last_modified_date: 2020-09-10
  credit:
  - Unknown
  references:
  - https://github.com/parse-community/parse-server/issues/6612
  source_url: https://snyk.io/vuln/SNYK-JS-PARSESERVER-590116
