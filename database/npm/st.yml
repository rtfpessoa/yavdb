---
- id: npmjs:npm:st:36
  title: Directory Traversal
  description: Versions of `st` prior to 0.2.5 are affected by a directory traversal
    vulnerability. Vulnerable versions fail to properly handle URL encoded dots, which
    caused `%2e` to be interpreted as `.` by the filesystem, resulting the potential
    for an attacker to read sensitive files on the server.
  affected_package: st
  vulnerable_versions:
  - "<0.2.5"
  severity: high
  package_manager: npm
  cve:
  - CVE-2014-3744
  cwe: CWE-22
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: Isaac Schlueter
- id: npmjs:npm:st:547
  title: Open Redirect
  description: "st is a module for serving static files.\n\nAn attacker is able to
    craft a request that results in an `HTTP 301` (redirect) to an entirely different
    domain. \n\nA request for: `http://some.server.com//nodesecurity.org/%2e%2e` would
    result in a 301 to `//nodesecurity.org/%2e%2e` which most browsers treat as a
    proper redirect as `//` is translated into the current schema being used.\n\nMitigating
    factor: \n\nIn order for this to work, `st` must be serving from the root of a
    server (`/`) rather than the typical sub directory (`/static/`) and the redirect
    URL will end with some form of URL encoded `..` (\"%2e%2e\", \"%2e.\", \".%2e\").
    \n\nCode example (provided by Xin Gao): \n\n[example.js]\n\n```\nvar st = require('st')
    \nvar http = require('http') \nhttp.createServer(st(process.cwd())).listen(1337)\n```\n\n```\n$
    curl -v http://localhost:1337//cve.mitre.com/%2e%2e\n*   Trying ::1...\n* TCP_NODELAY
    set\n* Connected to localhost (::1) port 1337 (#0)\n> GET //cve.mitre.com/%2e%2e
    HTTP/1.1\n> Host: localhost:1337\n> User-Agent: curl/7.54.0\n> Accept: */*\n>\n<
    HTTP/1.1 301 Moved Permanently\n< cache-control: public, max-age=600\n< last-modified:
    Fri, 13 Oct 2017 22:56:33 GMT\n< etag: \"16777220-46488904-1507935393000\"\n<
    location: //cve.mitre.com/%2e%2e/\n< Date: Fri, 13 Oct 2017 22:56:41 GMT\n< Connection:
    keep-alive\n< Content-Length: 30\n<\n* Connection #0 to host localhost left intact\n```"
  affected_package: st
  vulnerable_versions:
  - "<=1.2.1"
  severity: medium
  package_manager: npm
  cwe: CWE-601
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: Xin Gao
- id: ossindex:npm:st:8269062688
  title: Directory Traversal
  description: |-
    Versions prior to 0.2.5 did not properly prevent folder traversal. Literal dots in a path were resolved out, but url encoded dots were not. Thus, a request like /%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd would leak sensitive data from the server.

    As of version 0.2.5, any '/../' in the request path, urlencoded or not, will be replaced with '/'. If your application depends on url traversal, then you are encouraged to please refactor so that you do not depend on having .. in url paths, as this tends to expose data that you may be surprised to be exposing.
  affected_package: st
  vulnerable_versions:
  - "<0.2.5"
  package_manager: npm
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 2017-02-08
  credit:
  - OSSIndex
  references:
  - http://blog.npmjs.org/post/80277229932/newly-paranoid-maintainers
  - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-3744
  - https://cwe.mitre.org/data/definitions/22.html
  - https://github.com/isaacs/st#security-status
  - https://nodesecurity.io/advisories/36
  source_url: https://ossindex.net/resource/package/7277498132/vulnerabilities
- id: snykio:npm:st:20140206
  title: Directory Traversal
  description: |
    Versions prior to 0.2.5 did not properly prevent path traversal. Literal
    dots in a path were resolved out, but url encoded dots were not. Thus, a
    request like `/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd` would leak
    sensitive files and data from the server.

    As of version 0.2.5, any `'/../'` in the request path, urlencoded or
    not, will be replaced with `'/'`. If your application depends on url
    traversal, then you are encouraged to please refactor so that you do not
    depend on having `..` in url paths, as this tends to expose data that
    you may be surprised to be exposing.

    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
  affected_package: st
  vulnerable_versions:
  - "<0.2.5"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2014-3744
  cwe:
  - CWE-22
  disclosed_date: 2014-02-06
  created_date: 2014-02-06
  last_modified_date: 2014-02-06
  credit:
  - Charlie Somerville
  references:
  - http://blog.npmjs.org/post/80277229932/newly-paranoid-maintainers
  - https://github.com/isaacs/st#security-status
  source_url: https://snyk.io/vuln/npm:st:20140206
- id: snykio:npm:st:20171013
  title: Open Redirect
  description: |
    [`st`][1] is a module for serving static files.

    Affected versions of this package are vulnerable to Open Redirect. A
    malicious user could send a specially crafted request, which would
    automatically redirect the request to another domain, controlled by the
    attacker.

    **Note:** `st` will only redirect if requests are served from the
    root(`/`) and not from a subdirectory



    [1]: https://www.npmjs.com/package/st
  affected_package: st
  vulnerable_versions:
  - "<1.2.2"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2017-16224
  cwe:
  - CWE-601
  disclosed_date: 2017-10-13
  created_date: 2017-10-15
  last_modified_date: 2017-10-15
  credit:
  - Xin Gao
  references:
  - https://github.com/isaacs/st/commit/579960c629f12a27428e2da84c54f517e37b0a16
  source_url: https://snyk.io/vuln/npm:st:20171013
