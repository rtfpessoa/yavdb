---
- id: npmjs:npm:notevil:1093
  title: Sandbox Breakout / Arbitrary Code Execution
  description: "Versions of `notevil` prior to 1.3.2 are vulnerable to Sandbox Escape
    leading to Remote Code Execution. The package fails to prevent access to the `Function`
    constructor by not checking the return values of function calls. This allows attackers
    to access the Function prototype's constructor leading to the Sandbox Escape.
    An example payload is:  \n```\nvar safeEval = require('notevil')\nvar input =
    \"\" + \n\"function fn() {};\" + \n\"var constructorProperty = Object.getOwnPropertyDescriptors(fn.__proto__).constructor;\"
    + \n\"var properties = Object.values(constructorProperty);\" + \n\"properties.pop();\"
    + \n\"properties.pop();\" + \n\"properties.pop();\" + \n\"var Function = properties.pop();\"
    + \n\"(Function('return this'))()\"; \nsafeEval(input)```"
  affected_package: notevil
  vulnerable_versions:
  - "<1.3.2"
  severity: high
  package_manager: npm
  cwe: CWE-693
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: Alan S Wang
  references: https://npmjs.com/advisories/1093
  source_url: https://npmjs.com/advisories/1093
- id: npmjs:npm:notevil:1338
  title: Sandbox Breakout / Prototype Pollution
  description: |-
    Versions of `notevil` prior to 1.3.3 are vulnerable to Sandbox Escape leading to Prototype pollution. The package fails to restrict access to the main context, allowing attacker to add or modify an object's prototype.

    Evaluating the payload ```try{a[b];}catch(e){e.constructor.constructor('return __proto__.arguments.callee.__proto__.polluted=true')()}``` add the `polluted` property to Function.
  affected_package: notevil
  vulnerable_versions:
  - "<1.3.3"
  severity: medium
  package_manager: npm
  cwe: CWE-693
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: posix
  references: https://npmjs.com/advisories/1338
  source_url: https://npmjs.com/advisories/1338
- id: snykio:npm:notevil:467405
  title: Remote Code Execution (RCE)
  description: |
    [notevil][1] is a module uses esprima to parse the javascript AST then
    walks each node and evaluates the result

    Affected versions of this package are vulnerable to Remote Code
    Execution (RCE). The package fails to prevent access to the `Function`
    constructor by not checking the return values of function calls. This
    allows attackers to access the Function prototype\'s constructor leading
    to the attacker being able to escape the sandbox leading to remote code
    execution.



    [1]: https://www.npmjs.com/package/notevil
  affected_package: notevil
  vulnerable_versions:
  - "<1.3.2"
  severity: medium
  package_manager: npm
  cwe:
  - CWE-693
  disclosed_date: 2019-07-29
  created_date: 2019-09-20
  last_modified_date: 2019-09-20
  credit:
  - Alan S Wang
  source_url: https://snyk.io/vuln/SNYK-JS-NOTEVIL-467405
- id: snykio:npm:notevil:559176
  title: Prototype Pollution
  description: "[notevil][1] is a module uses esprima to parse the javascript AST
    then\nwalks each node and evaluates the result\n\nAffected versions of this package
    are vulnerable to Prototype Pollution.\nIt is vulnerable to Sandbox Escape leading
    to Prototype pollution. The\npackage fails to restrict access to the main context,
    allowing an\nattacker to add or modify an object\\'s prototype.\n\nEvaluating
    the payload\n`try{a[b];}catch(e){e.constructor.constructor('return\n__proto__.arguments.callee.__proto__.polluted=true')()}`
    will add the\n`polluted` property to Function.\n\n\n\n[1]: https://www.npmjs.com/package/notevil\n\\nPrototype
    Pollution is a vulnerability affecting JavaScript. Prototype\nPollution refers
    to the ability to inject properties into existing\nJavaScript language construct
    prototypes, such as objects. JavaScript\nallows all Object attributes to be altered,
    including their magical\nattributes such as `_proto_`, `constructor` and `prototype`.
    An attacker\nmanipulates these attributes to overwrite, or pollute, a JavaScript\napplication
    object prototype of the base object by injecting other\nvalues. Properties on
    the `Object.prototype` are then inherited by all\nthe JavaScript objects through
    the prototype chain. When that happens,\nthis leads to either denial of service
    by triggering JavaScript\nexceptions, or it tampers with the application source
    code to force the\ncode path that the attacker injects, thereby leading to remote
    code\nexecution.\n\nThere are two main ways in which the pollution of prototypes
    occurs:\n\n* Unsafe `Object` recursive merge\n\n* Property definition by path\n\n###
    Unsafe Object recursive merge   {#unsafe-object-recursive-merge}\n\nThe logic
    of a vulnerable recursive merge function follows the following\nhigh-level model:\n\n
    \   merge (target, source)\n    \n      foreach property of source\n    \n        if
    property exists and is an object on both the target and the source\n    \n          merge(target[property],
    source[property])\n    \n        else\n    \n          target[property] = source[property]\n\n&lt;br&gt;\n\nWhen
    the source object contains a property named `_proto_` defined with\n`Object.defineProperty()`
    , the condition that checks if the property\nexists and is an object on both the
    target and the source passes and the\nmerge recurses with the target, being the
    prototype of `Object` and the\nsource of `Object` as defined by the attacker.
    Properties are then\ncopied on the `Object` prototype.\n\nClone operations are
    a special sub-class of unsafe recursive merges,\nwhich occur when a recursive
    merge is conducted on an empty object:\n`merge({},source)`.\n\n`lodash` and `Hoek`
    are examples of libraries susceptible to recursive\nmerge attacks.\n\n### Property
    definition by path   {#property-definition-by-path}\n\nThere are a few JavaScript
    libraries that use an API to define property\nvalues on an object based on a given
    path. The function that is\ngenerally affected contains this signature: `theFunction(object,
    path,\nvalue)`\n\nIf the attacker can control the value of “path”, they can set
    this value\nto `_proto_.myValue`. `myValue` is then assigned to the prototype
    of the\nclass of the object.\n\n"
  affected_package: notevil
  vulnerable_versions:
  - "<1.3.3"
  severity: medium
  package_manager: npm
  cwe:
  - CWE-693
  disclosed_date: 2019-11-20
  created_date: 2020-03-04
  last_modified_date: 2020-03-04
  credit:
  - posix
  references:
  - https://www.npmjs.com/advisories/1338
  source_url: https://snyk.io/vuln/SNYK-JS-NOTEVIL-559176
