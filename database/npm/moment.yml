---
- id: npmjs:npm:moment:532
  title: Regular Expression Denial of Service
  description: Affected versions of `moment` are vulnerable to a low severity regular
    expression denial of service when parsing dates as strings.
  affected_package: moment
  vulnerable_versions:
  - "<2.19.3"
  severity: low
  package_manager: npm
  cwe: CWE-400
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: Cristian-Alexandru Staicu
- id: npmjs:npm:moment:55
  title: Regular Expression Denial of Service
  description: |-
    Versions of `moment` prior to 2.11.2 are affected by a regular expression denial of service vulnerability. The vulnerability is triggered when arbitrary user input is passed into `moment.duration()`.


    ## Proof of concept
    ```
    var moment = require('moment');

    var genstr = function (len, chr) {
        var result = "";
        for (i=0; i<=len; i++) {
            result = result + chr;
        }

        return result;
    }


    for (i=20000;i<=10000000;i=i+10000) {
        console.log("COUNT: " + i);
        var str = '-' + genstr(i, '1')
        console.log("LENGTH: " + str.length);
        var start = process.hrtime();
        moment.duration(str)

        var end = process.hrtime(start);
        console.log(end);
    }
    ```

    ### Results
    ```
    $ node moment.js
    COUNT: 20000
    LENGTH: 20002
    [ 0, 618931029 ]
    COUNT: 30001
    LENGTH: 30003
    [ 1, 401413894 ]
    COUNT: 40002
    LENGTH: 40004
    [ 2, 437075303 ]
    COUNT: 50003
    LENGTH: 50005
    [ 3, 824664804 ]
    COUNT: 60004
    LENGTH: 60006
    [ 5, 651335262 ]
    ```
  affected_package: moment
  vulnerable_versions:
  - "<2.11.2"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2016-4055
  cwe: CWE-400
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: Adam Baldwin
- id: ossindex:npm:moment:8398655539
  title: Regular Expression Denial of Service (ReDoS)
  description: "> Via the Node Security Project: https://nodesecurity.io/advisories/55\n>
    \n> ...\n> \n> moment is vulnerable to regular expression denial of service when
    user input is passed unchecked into moment.duration() blocking the event loop
    for a period of time.\n> \n> -- [github.com](https://github.com/moment/moment/issues/2936)\n"
  affected_package: moment
  vulnerable_versions:
  - "<2.11.2"
  package_manager: npm
  disclosed_date: 2016-11-01
  created_date: 2016-11-01
  last_modified_date: 2017-07-30
  credit:
  - OSSIndex
  references:
  - https://cwe.mitre.org/data/definitions/400.html
  - https://github.com/moment/moment/issues/2936
  - https://nodesecurity.io/advisories/55
  - https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS
  source_url: https://ossindex.net/resource/package/7014146991/vulnerabilities
- id: ossindex:npm:moment:8402800195
  title: "[CVE-2016-4055]  Resource Management Errors"
  description: The duration function in the moment package before 2.11.2 for Node.js
    allows remote attackers to cause a denial of service (CPU consumption) via a long
    string, aka a "regular expression Denial of Service (ReDoS)."
  affected_package: moment
  vulnerable_versions:
  - "<2.11.2"
  package_manager: npm
  cve:
  - CVE-2016-4055
  disclosed_date: 2017-01-23
  created_date: 2017-01-23
  last_modified_date: 2017-07-30
  credit:
  - OSSIndex
  references:
  - http://www.openwall.com/lists/oss-security/2016/04/20/11
  - http://www.securityfocus.com/bid/95849
  - https://nodesecurity.io/advisories/55
  source_url: https://ossindex.net/resource/package/7014146991/vulnerabilities
- id: snykio:npm:moment:20160126
  title: Regular Expression Denial of Service (ReDoS)
  description: "[`moment`][1] is a lightweight JavaScript date library for parsing,\nvalidating,
    manipulating, and formatting dates.\n\nAn attacker can provide a long value to
    the `duration` function, which\nnearly matches the pattern being matched. This
    will cause the regular\nexpression matching to take a long time, all the while
    occupying the\nevent loop and preventing it from processing other requests and
    making\nthe server unavailable (a Denial of Service attack).\n\n\n\n[1]: https://www.npmjs.com/package/moment\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n{: .language-js}\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n{: .language-bash}\n\nThe entire
    process of testing it against a 30 characters long string\ntakes around ~52ms.
    But when given an invalid string, it takes nearly\ntwo seconds to complete the
    test, over ten times as long as it took to\ntest a valid string. The dramatic
    difference is due to the way regular\nexpressions get evaluated.\n\nMost Regex
    engines will work very similarly (with minor differences).\nThe engine will match
    the first possible way to accept the current\ncharacter and proceed to the next
    one. If it then fails to match the\nnext one, it will backtrack and see if there
    was another way to digest\nthe previous character. If it goes too far down the
    rabbit hole only to\nfind out the string doesn’t match in the end, and if many
    characters\nhave multiple valid regex paths, the number of backtracking steps
    can\nbecome very large, resulting in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s
    look at how our expression runs into this problem, using a\nshorter string: \\\"ACCCX\\\".
    While it seems fairly straightforward, there\nare still four different ways that
    the engine could match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.
    \ C+C+C.\n\nThe engine has to try each of those combinations to see if any of
    them\npotentially match against the expression. When you combine that with the\nother
    steps the engine must take, we can use [RegEx 101 debugger][1] to\nsee the engine
    has to take a total of 38 steps before it can determine\nthe string doesn\\'t
    match.\n\nFrom there, the number of steps the engine must use to validate a string\njust
    continues to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n|
    ACCCX | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX
    | 14 | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to
    take over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n"
  affected_package: moment
  vulnerable_versions:
  - "<2.11.2"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2016-4055
  cwe:
  - CWE-400
  disclosed_date: 2016-01-26
  created_date: 2016-02-01
  last_modified_date: 2016-02-01
  credit:
  - Adam Baldwin
  references:
  - https://github.com/moment/moment/commit/52a807b961ead925be11ff5e632c8f7325a9ce36
  - https://github.com/moment/moment/issues/2936
  - https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS
  source_url: https://snyk.io/vuln/npm:moment:20160126
- id: snykio:npm:moment:20161019
  title: Regular Expression Denial of Service (ReDoS)
  description: "[`moment`][1] is a lightweight JavaScript date library for parsing,\nvalidating,
    manipulating, and formatting dates.\n\nAffected versions of the package are vulnerable
    to Regular Expression\nDenial of Service (ReDoS) attacks for any locale that has
    separate\nformat and standalone options and `format` input can be controlled by\nthe
    user.\n\nAn attacker can provide a specially crafted input to the `format`\nfunction,
    which nearly matches the pattern being matched. This will\ncause the regular expression
    matching to take a long time, all the while\noccupying the event loop and preventing
    it from processing other\nrequests and making the server unavailable (a Denial
    of Service attack).\n\n\n\n[1]: https://www.npmjs.com/package/moment\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n{: .language-js}\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n{: .language-bash}\n\nThe entire
    process of testing it against a 30 characters long string\ntakes around ~52ms.
    But when given an invalid string, it takes nearly\ntwo seconds to complete the
    test, over ten times as long as it took to\ntest a valid string. The dramatic
    difference is due to the way regular\nexpressions get evaluated.\n\nMost Regex
    engines will work very similarly (with minor differences).\nThe engine will match
    the first possible way to accept the current\ncharacter and proceed to the next
    one. If it then fails to match the\nnext one, it will backtrack and see if there
    was another way to digest\nthe previous character. If it goes too far down the
    rabbit hole only to\nfind out the string doesn’t match in the end, and if many
    characters\nhave multiple valid regex paths, the number of backtracking steps
    can\nbecome very large, resulting in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s
    look at how our expression runs into this problem, using a\nshorter string: \\\"ACCCX\\\".
    While it seems fairly straightforward, there\nare still four different ways that
    the engine could match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.
    \ C+C+C.\n\nThe engine has to try each of those combinations to see if any of
    them\npotentially match against the expression. When you combine that with the\nother
    steps the engine must take, we can use [RegEx 101 debugger][1] to\nsee the engine
    has to take a total of 38 steps before it can determine\nthe string doesn\\'t
    match.\n\nFrom there, the number of steps the engine must use to validate a string\njust
    continues to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n|
    ACCCX | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX
    | 14 | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to
    take over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n"
  affected_package: moment
  vulnerable_versions:
  - "<2.15.2"
  severity: medium
  package_manager: npm
  cwe:
  - CWE-400
  disclosed_date: 2016-10-18
  created_date: 2016-10-24
  last_modified_date: 2016-10-24
  credit:
  - Snyk Security Research Team
  references:
  - https://gist.github.com/grnd/50192ce22681848a7de812d95241b7fc
  - https://github.com/moment/moment/commit/663f33e333212b3800b63592cd8e237ac8fabdb9
  source_url: https://snyk.io/vuln/npm:moment:20161019
- id: snykio:npm:moment:20170905
  title: Regular Expression Denial of Service (ReDoS)
  description: "[moment][1] is a lightweight JavaScript date library for parsing,\nvalidating,
    manipulating, and formatting dates.\n\nAffected versions of this package are vulnerable
    to Regular Expression\nDenial of Service (ReDoS). It used a regular expression\n(`/[0-9]*['a-z\\u00A0-\\u05FF\\u0700-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+|[\\u0600-\\u06FF\\/]+(\\s*?[\\u0600-\\u06FF]+){1,2}/i`)\nin
    order to parse dates specified as strings. This can cause a very low\nimpact of
    about 2 seconds matching time for data 50k characters long.\n\n\n\n[1]: https://www.npmjs.com/package/moment\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n{: .language-js}\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n{: .language-bash}\n\nThe entire
    process of testing it against a 30 characters long string\ntakes around ~52ms.
    But when given an invalid string, it takes nearly\ntwo seconds to complete the
    test, over ten times as long as it took to\ntest a valid string. The dramatic
    difference is due to the way regular\nexpressions get evaluated.\n\nMost Regex
    engines will work very similarly (with minor differences).\nThe engine will match
    the first possible way to accept the current\ncharacter and proceed to the next
    one. If it then fails to match the\nnext one, it will backtrack and see if there
    was another way to digest\nthe previous character. If it goes too far down the
    rabbit hole only to\nfind out the string doesn’t match in the end, and if many
    characters\nhave multiple valid regex paths, the number of backtracking steps
    can\nbecome very large, resulting in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s
    look at how our expression runs into this problem, using a\nshorter string: \\\"ACCCX\\\".
    While it seems fairly straightforward, there\nare still four different ways that
    the engine could match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.
    \ C+C+C.\n\nThe engine has to try each of those combinations to see if any of
    them\npotentially match against the expression. When you combine that with the\nother
    steps the engine must take, we can use [RegEx 101 debugger][1] to\nsee the engine
    has to take a total of 38 steps before it can determine\nthe string doesn\\'t
    match.\n\nFrom there, the number of steps the engine must use to validate a string\njust
    continues to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n|
    ACCCX | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX
    | 14 | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to
    take over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n"
  affected_package: moment
  vulnerable_versions:
  - "<2.19.3"
  severity: low
  package_manager: npm
  cve:
  - CVE-2017-18214
  cwe:
  - CWE-400
  disclosed_date: 2017-09-05
  created_date: 2017-11-28
  last_modified_date: 2017-11-28
  credit:
  - CristianAlexandru Staicu
  references:
  - https://github.com/moment/moment/issues/4163
  - https://github.com/moment/moment/pull/4326
  source_url: https://snyk.io/vuln/npm:moment:20170905
