---
- id: npmjs:npm:dojo:107
  title: Cross-Site Scripting
  description: Affected versions of `dojo` are susceptible to a cross-site scripting
    vulnerability in the `dijit.Editor` and `textarea` components, which execute their
    contents as Javascript, even when sanitized.
  affected_package: dojo
  vulnerable_versions:
  - "<= 1.0"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2008-6681
  cwe: CWE-725
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: Unknown
- id: npmjs:npm:dojo:972
  title: Cross-Site Scripting
  description: Versions of `dojo` prior to 1.4.2 are vulnerable to DOM-based Cross-Site
    Scripting (XSS). The package does not sanitize URL parameters in the `_testCommon.js`
    and `runner.html` test files, allowing attackers to execute arbitrary JavaScript
    in the victim's browser.
  affected_package: dojo
  vulnerable_versions:
  - "<1.4.2"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2010-2273
  cwe: CWE-79
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: bix
- id: npmjs:npm:dojo:973
  title: Cross-Site Scripting
  description: Versions of `dojo` prior to 1.2.0 are vulnerable to Cross-Site Scripting
    (XSS). The package fails to sanitize HTML code in user-controlled input, allowing
    attackers to execute arbitrary JavaScript in the victim's browser.
  affected_package: dojo
  vulnerable_versions:
  - "<1.2.0"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2015-5654
  cwe: CWE-79
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: Unknown
- id: ossindex:npm:dojo:323342
  title: "[CVE-2007-2376] The Dojo framework exchanges data using JavaScript Object
    Notation (JSON) withou..."
  description: The Dojo framework exchanges data using JavaScript Object Notation
    (JSON) without an associated protection scheme, which allows remote attackers
    to obtain the data via a web page that retrieves the data through a URL in the
    SRC attribute of a SCRIPT element and captures the data using other JavaScript
    code, aka "JavaScript Hijacking."
  affected_package: dojo
  vulnerable_versions:
  - "*"
  package_manager: npm
  cve:
  - CVE-2007-2376
  disclosed_date: 2007-04-30
  created_date: 2007-04-30
  last_modified_date: 2008-11-13
  credit:
  - OSSIndex
  references:
  - http://osvdb.org/43323
  - http://www.fortifysoftware.com/servlet/downloads/public/JavaScript_Hijacking.pdf
  source_url: https://ossindex.net/resource/package/7013486248/vulnerabilities
- id: ossindex:npm:dojo:327519
  title: '[CVE-2007-6726]  Improper Neutralization of Input During Web Page Generation
    ("Cross-site Scripting")'
  description: Multiple cross-site scripting (XSS) vulnerabilities in Dojo 0.4.1 and
    0.4.2, as used in Apache Struts and other products, allow remote attackers to
    inject arbitrary web script or HTML via unspecified vectors involving (1) xip_client.html
    and (2) xip_server.html in src/io/.
  affected_package: dojo
  vulnerable_versions:
  - 0.4.1
  - 0.4.2
  package_manager: npm
  cve:
  - CVE-2007-6726
  disclosed_date: 2009-04-09
  created_date: 2009-04-09
  last_modified_date: 2017-04-19
  credit:
  - OSSIndex
  references:
  - http://www.dojotoolkit.org/0-4-3-and-updated-0-4-1-0-4-2-builds
  - http://www.dojotoolkit.org/2007/05/26/0-4-3-released-0-4-2-and-0-4-1-users-should-upgrade-immediately
  - http://www.dojotoolkit.org/releaseNotes/0.4.3
  - http://www.securityfocus.com/bid/34660
  - http://xforce.iss.net/xforce/xfdb/49884
  - https://issues.apache.org/struts/browse/WW-2134
  source_url: https://ossindex.net/resource/package/7013486248/vulnerabilities
- id: ossindex:npm:dojo:333957
  title: '[CVE-2008-6681]  Improper Neutralization of Input During Web Page Generation
    ("Cross-site Scripting")'
  description: Cross-site scripting (XSS) vulnerability in dijit.Editor in Dojo before
    1.1 allows remote attackers to inject arbitrary web script or HTML via XML entities
    in a TEXTAREA element.
  affected_package: dojo
  vulnerable_versions:
  - "<=1.0.0"
  package_manager: npm
  cve:
  - CVE-2008-6681
  disclosed_date: 2009-04-09
  created_date: 2009-04-09
  last_modified_date: 2017-07-30
  credit:
  - OSSIndex
  references:
  - http://trac.dojotoolkit.org/ticket/2140
  - http://www.dojotoolkit.org/book/dojo-1-1-release-notes
  - http://www.securityfocus.com/bid/34661
  - http://xforce.iss.net/xforce/xfdb/49883
  source_url: https://ossindex.net/resource/package/7013486248/vulnerabilities
- id: ossindex:npm:dojo:341633
  title: "[CVE-2010-2272] Unspecified vulnerability in iframe&#95;history.html in
    Dojo 0.4.x before 0.4.4 has ..."
  description: Unspecified vulnerability in iframe_history.html in Dojo 0.4.x before
    0.4.4 has unknown impact and remote attack vectors.
  affected_package: dojo
  vulnerable_versions:
  - 0.4.0
  - 0.4.1
  - 0.4.2
  - 0.4.3
  package_manager: npm
  cve:
  - CVE-2010-2272
  disclosed_date: 2010-06-15
  created_date: 2010-06-15
  last_modified_date: 2010-06-16
  credit:
  - OSSIndex
  references:
  - http://dojotoolkit.org/blog/post/dylan/2010/03/dojo-security-advisory/
  - http://secunia.com/advisories/38964
  source_url: https://ossindex.net/resource/package/7013486248/vulnerabilities
- id: ossindex:npm:dojo:341634
  title: '[CVE-2010-2273]  Improper Neutralization of Input During Web Page Generation
    ("Cross-site Scripting")'
  description: Multiple cross-site scripting (XSS) vulnerabilities in Dojo 1.0.x before
    1.0.3, 1.1.x before 1.1.2, 1.2.x before 1.2.4, 1.3.x before 1.3.3, and 1.4.x before
    1.4.2 allow remote attackers to inject arbitrary web script or HTML via unspecified
    vectors, possibly related to dojo/resources/iframe_history.html, dojox/av/FLAudio.js,
    dojox/av/FLVideo.js, dojox/av/resources/audio.swf, dojox/av/resources/video.swf,
    util/buildscripts/jslib/build.js, and util/buildscripts/jslib/buildUtil.js, as
    demonstrated by the (1) dojoUrl and (2) testUrl parameters to util/doh/runner.html.
  affected_package: dojo
  vulnerable_versions:
  - '1.0'
  - 1.0.1
  - 1.0.2
  - '1.1'
  - 1.1.1
  - '1.2'
  - 1.2.1
  - 1.2.2
  - 1.2.3
  - '1.3'
  - 1.3.1
  - 1.3.2
  - '1.4'
  - 1.4.1
  package_manager: npm
  cve:
  - CVE-2010-2273
  disclosed_date: 2010-06-15
  created_date: 2010-06-15
  last_modified_date: 2010-06-16
  credit:
  - OSSIndex
  references:
  - http://bugs.dojotoolkit.org/ticket/10773
  - http://dojotoolkit.org/blog/post/dylan/2010/03/dojo-security-advisory/
  - http://secunia.com/advisories/38964
  - http://secunia.com/advisories/40007
  - http://www-01.ibm.com/support/docview.wss?uid=swg21431472
  - http://www-1.ibm.com/support/docview.wss?uid=swg1LO50994
  - http://www.gdssecurity.com/l/b/2010/03/12/multiple-dom-based-xss-in-dojo-toolkit-sdk/
  - http://www.vupen.com/english/advisories/2010/1281
  source_url: https://ossindex.net/resource/package/7013486248/vulnerabilities
- id: ossindex:npm:dojo:341635
  title: "[CVE-2010-2274] Multiple open redirect vulnerabilities in Dojo 1.0.x before
    1.0.3, 1.1.x before ..."
  description: Multiple open redirect vulnerabilities in Dojo 1.0.x before 1.0.3,
    1.1.x before 1.1.2, 1.2.x before 1.2.4, 1.3.x before 1.3.3, and 1.4.x before 1.4.2
    allow remote attackers to redirect users to arbitrary web sites and conduct phishing
    attacks via unspecified vectors, possibly related to dojo/resources/iframe_history.html,
    dojox/av/FLAudio.js, dojox/av/FLVideo.js, dojox/av/resources/audio.swf, dojox/av/resources/video.swf,
    util/buildscripts/jslib/build.js, util/buildscripts/jslib/buildUtil.js, and util/doh/runner.html.
  affected_package: dojo
  vulnerable_versions:
  - '1.0'
  - 1.0.1
  - 1.0.2
  - '1.1'
  - 1.1.1
  - '1.2'
  - 1.2.1
  - 1.2.2
  - 1.2.3
  - '1.3'
  - 1.3.1
  - 1.3.2
  - '1.4'
  - 1.4.1
  package_manager: npm
  cve:
  - CVE-2010-2274
  disclosed_date: 2010-06-15
  created_date: 2010-06-15
  last_modified_date: 2010-06-17
  credit:
  - OSSIndex
  references:
  - http://dojotoolkit.org/blog/post/dylan/2010/03/dojo-security-advisory/
  - http://secunia.com/advisories/38964
  - http://secunia.com/advisories/40007
  - http://www-01.ibm.com/support/docview.wss?uid=swg21431472
  - http://www-1.ibm.com/support/docview.wss?uid=swg1LO50994
  - http://www.vupen.com/english/advisories/2010/1281
  source_url: https://ossindex.net/resource/package/7013486248/vulnerabilities
- id: ossindex:npm:dojo:341636
  title: '[CVE-2010-2275]  Improper Neutralization of Input During Web Page Generation
    ("Cross-site Scripting")'
  description: Cross-site scripting (XSS) vulnerability in dijit/tests/_testCommon.js
    in Dojo Toolkit SDK before 1.4.2 allows remote attackers to inject arbitrary web
    script or HTML via the theme parameter, as demonstrated by an attack against dijit/tests/form/test_Button.html.
  affected_package: dojo
  vulnerable_versions:
  - 0.1.0
  - 0.2.0
  - 0.2.1
  - 0.2.2
  - 0.3.0
  - 0.3.1
  - 0.4.0
  - 0.4.1
  - 0.4.2
  - 0.4.3
  - 0.9.0
  - '1.0'
  - 1.0.1
  - 1.0.2
  - '1.1'
  - 1.1.1
  - '1.2'
  - 1.2.1
  - 1.2.2
  - 1.2.3
  - '1.3'
  - 1.3.1
  - 1.3.2
  - '1.4'
  - 1.4.1
  package_manager: npm
  cve:
  - CVE-2010-2275
  disclosed_date: 2010-06-15
  created_date: 2010-06-15
  last_modified_date: 2010-06-16
  credit:
  - OSSIndex
  references:
  - http://bugs.dojotoolkit.org/ticket/10773
  - http://secunia.com/advisories/38964
  - http://secunia.com/advisories/40007
  - http://www-01.ibm.com/support/docview.wss?uid=swg21431472
  - http://www-1.ibm.com/support/docview.wss?uid=swg1LO50896
  - http://www-1.ibm.com/support/docview.wss?uid=swg1LO50994
  - http://www.gdssecurity.com/l/b/2010/03/12/multiple-dom-based-xss-in-dojo-toolkit-sdk/
  - http://www.vupen.com/english/advisories/2010/1281
  source_url: https://ossindex.net/resource/package/7013486248/vulnerabilities
- id: ossindex:npm:dojo:341637
  title: "[CVE-2010-2276] The default configuration of the build process in Dojo 0.4.x
    before 0.4.4, 1.0.x..."
  description: The default configuration of the build process in Dojo 0.4.x before
    0.4.4, 1.0.x before 1.0.3, 1.1.x before 1.1.2, 1.2.x before 1.2.4, 1.3.x before
    1.3.3, and 1.4.x before 1.4.2 has the copyTests=true and mini=false options, which
    makes it easier for remote attackers to have an unspecified impact via a request
    to a (1) test or (2) demo component.
  affected_package: dojo
  vulnerable_versions:
  - 0.4.0
  - 0.4.1
  - 0.4.2
  - 0.4.3
  - '1.0'
  - 1.0.1
  - 1.0.2
  - '1.1'
  - 1.1.1
  - '1.2'
  - 1.2.1
  - 1.2.2
  - 1.2.3
  - '1.3'
  - 1.3.1
  - 1.3.2
  - '1.4'
  - 1.4.1
  package_manager: npm
  cve:
  - CVE-2010-2276
  disclosed_date: 2010-06-15
  created_date: 2010-06-15
  last_modified_date: 2010-06-16
  credit:
  - OSSIndex
  references:
  - http://dojotoolkit.org/blog/post/dylan/2010/03/dojo-security-advisory/
  - http://secunia.com/advisories/38964
  - http://secunia.com/advisories/40007
  - http://www-01.ibm.com/support/docview.wss?uid=swg21431472
  - http://www-1.ibm.com/support/docview.wss?uid=swg1LO50994
  - http://www.vupen.com/english/advisories/2010/1281
  source_url: https://ossindex.net/resource/package/7013486248/vulnerabilities
- id: ossindex:npm:dojo:343732
  title: "[CVE-2010-4600]  Information Exposure"
  description: Dojo Toolkit, as used in the Web client in IBM Rational ClearQuest
    7.1.1.x before 7.1.1.4 and 7.1.2.x before 7.1.2.1, allows remote attackers to
    read cookies by navigating to a Dojo file, related to an "open direct" issue.
  affected_package: dojo
  vulnerable_versions:
  - "*"
  package_manager: npm
  cve:
  - CVE-2010-4600
  disclosed_date: 2010-12-29
  created_date: 2010-12-29
  last_modified_date: 2011-01-04
  credit:
  - OSSIndex
  references:
  - ftp://public.dhe.ibm.com/software/rational/clearquest/7.1.1/7.1.1.4-RATL-RCQ/7.1.1.4-RATL-RCQ.ux.readme
  - http://secunia.com/advisories/42624
  - http://www-01.ibm.com/support/docview.wss?uid=swg1PM15146
  source_url: https://ossindex.net/resource/package/7013486248/vulnerabilities
- id: ossindex:npm:dojo:8396414434
  title: '[CVE-2015-5654]  Improper Neutralization of Input During Web Page Generation
    ("Cross-site Scripting")'
  description: Cross-site scripting (XSS) vulnerability in Dojo Toolkit before 1.2
    allows remote attackers to inject arbitrary web script or HTML via unspecified
    vectors.
  affected_package: dojo
  vulnerable_versions:
  - 1.1.1
  package_manager: npm
  cve:
  - CVE-2015-5654
  disclosed_date: 2015-10-11
  created_date: 2015-10-11
  last_modified_date: 2016-12-06
  credit:
  - OSSIndex
  references:
  - http://jvn.jp/en/jp/JVN13456571/index.html
  - http://jvndb.jvn.jp/jvndb/JVNDB-2015-000153
  - http://www-01.ibm.com/support/docview.wss?uid=swg21975256
  - http://www.securityfocus.com/bid/77026
  - http://www.securitytracker.com/id/1034848
  source_url: https://ossindex.net/resource/package/7013486248/vulnerabilities
- id: ossindex:npm:dojo:8398984586
  title: "[Duplicate]Dojo Security Advisory"
  description: "See https://ossindex.net/resource/cve/341633\n\nIf you have Dojo 0.4
    through Dojo 1.4 installed on your site, you are strongly encouraged to read all
    of this message and take immediate action.\n\nWe recently had a security review
    done on the Dojo codebase, and some issues were discovered. Most of the issues
    were in test files or related PHP files, but there were some issues discovered
    with a few files used by modules. "
  affected_package: dojo
  vulnerable_versions:
  - ">0.4.0 <0.4.4"
  package_manager: npm
  disclosed_date: 2016-05-20
  created_date: 2016-05-20
  last_modified_date: 2017-03-04
  credit:
  - OSSIndex
  references:
  - http://dojotoolkit.org/blog/dojo-security-advisory
  - http://www.cvedetails.com/cve/CVE-2010-2272/
  - http://www.cvedetails.com/cve/CVE-2010-2276/
  source_url: https://ossindex.net/resource/package/7013486248/vulnerabilities
- id: ossindex:npm:dojo:8398984587
  title: "[Duplicate] Dojo Security Advisory"
  description: |-
    See https://ossindex.net/resource/cve/341634

    If you have Dojo 0.4 through Dojo 1.4 installed on your site, you are strongly encouraged to read all of this message and take immediate action.

    We recently had a security review done on the Dojo codebase, and some issues were discovered. Most of the issues were in test files or related PHP files, but there were some issues discovered with a few files used by modules. You are strongly encouraged to remove some files immediately to give yourself the best protection.
  affected_package: dojo
  vulnerable_versions:
  - ">1.0.0 <1.0.3"
  package_manager: npm
  disclosed_date: 2016-05-20
  created_date: 2016-05-20
  last_modified_date: 2017-03-04
  credit:
  - OSSIndex
  references:
  - http://dojotoolkit.org/blog/dojo-security-advisory#2
  - http://www.cvedetails.com/cve/CVE-2008-6681/
  - http://www.cvedetails.com/cve/CVE-2010-2273/
  - http://www.cvedetails.com/cve/CVE-2010-2274/
  - http://www.cvedetails.com/cve/CVE-2010-2276/
  source_url: https://ossindex.net/resource/package/7013486248/vulnerabilities
- id: ossindex:npm:dojo:8398984588
  title: "[Duplicate]Dojo Security Advisory"
  description: "See https://ossindex.net/resource/cve/341635\n\nIf you have Dojo 0.4
    through Dojo 1.4 installed on your site, you are strongly encouraged to read all
    of this message and take immediate action.\n\nWe recently had a security review
    done on the Dojo codebase, and some issues were discovered. Most of the issues
    were in test files or related PHP files, but there were some issues discovered
    with a few files used by modules. You are strongly encouraged to remove some files
    immediately to give yourself the best protection. "
  affected_package: dojo
  vulnerable_versions:
  - ">1.1.0 <1.1.2"
  package_manager: npm
  disclosed_date: 2016-05-20
  created_date: 2016-05-20
  last_modified_date: 2017-03-04
  credit:
  - OSSIndex
  references:
  - http://dojotoolkit.org/blog/dojo-security-advisory#3
  - http://www.cvedetails.com/cve/CVE-2010-2273/
  - http://www.cvedetails.com/cve/CVE-2010-2274/
  - http://www.cvedetails.com/cve/CVE-2010-2276/
  source_url: https://ossindex.net/resource/package/7013486248/vulnerabilities
- id: ossindex:npm:dojo:8398984589
  title: "[Duplicate] Dojo Security Advisory"
  description: "See https://ossindex.net/resource/cve/341635\n\nIf you have Dojo 0.4
    through Dojo 1.4 installed on your site, you are strongly encouraged to read all
    of this message and take immediate action.\n\nWe recently had a security review
    done on the Dojo codebase, and some issues were discovered. Most of the issues
    were in test files or related PHP files, but there were some issues discovered
    with a few files used by modules. "
  affected_package: dojo
  vulnerable_versions:
  - ">1.2 <1.2.4"
  package_manager: npm
  disclosed_date: 2016-05-20
  created_date: 2016-05-20
  last_modified_date: 2017-03-04
  credit:
  - OSSIndex
  references:
  - http://dojotoolkit.org/blog/dojo-security-advisory#4
  - http://www.cvedetails.com/cve/CVE-2010-2273/
  - http://www.cvedetails.com/cve/CVE-2010-2274/
  - http://www.cvedetails.com/cve/CVE-2010-2276/
  source_url: https://ossindex.net/resource/package/7013486248/vulnerabilities
- id: ossindex:npm:dojo:8398984590
  title: "[Duplicate] Dojo Security Advisory"
  description: |-
    See https://ossindex.net/resource/cve/341635

    If you have Dojo 0.4 through Dojo 1.4 installed on your site, you are strongly encouraged to read all of this message and take immediate action.

    We recently had a security review done on the Dojo codebase, and some issues were discovered. Most of the issues were in test files or related PHP files, but there were some issues discovered with a few files used by modules. You are strongly encouraged to remove some files immediately to give yourself the best protection.
  affected_package: dojo
  vulnerable_versions:
  - ">1.3 <1.3.3"
  package_manager: npm
  disclosed_date: 2016-05-20
  created_date: 2016-05-20
  last_modified_date: 2017-03-04
  credit:
  - OSSIndex
  references:
  - http://dojotoolkit.org/blog/dojo-security-advisory#5
  - http://www.cvedetails.com/cve/CVE-2010-2273/
  - http://www.cvedetails.com/cve/CVE-2010-2274/
  - http://www.cvedetails.com/cve/CVE-2010-2276/
  source_url: https://ossindex.net/resource/package/7013486248/vulnerabilities
- id: ossindex:npm:dojo:8398984591
  title: "[Duplicate] Dojo Security Advisory"
  description: |-
    See https://ossindex.net/resource/cve/341637

    If you have Dojo 0.4 through Dojo 1.4 installed on your site, you are strongly encouraged to read all of this message and take immediate action.

    We recently had a security review done on the Dojo codebase, and some issues were discovered. Most of the issues were in test files or related PHP files, but there were some issues discovered with a few files used by modules. You are strongly encouraged to remove some files immediately to give yourself the best protection.
  affected_package: dojo
  vulnerable_versions:
  - ">1.4.0 <1.4.2"
  package_manager: npm
  disclosed_date: 2016-05-20
  created_date: 2016-05-20
  last_modified_date: 2017-03-04
  credit:
  - OSSIndex
  references:
  - http://dojotoolkit.org/blog/dojo-security-advisory#6
  - http://www.cvedetails.com/cve/CVE-2010-2273/
  - http://www.cvedetails.com/cve/CVE-2010-2274/
  - http://www.cvedetails.com/cve/CVE-2010-2275/
  - http://www.cvedetails.com/cve/CVE-2010-2276/
  source_url: https://ossindex.net/resource/package/7013486248/vulnerabilities
- id: snykio:npm:dojo:1
  title: Cross-site Scripting (XSS)
  description: |+
    The default configuration of the build process in Dojo 0.4.x before
    0.4.4, 1.0.x before 1.0.3, 1.1.x before 1.1.2, 1.2.x before 1.2.4, 1.3.x
    before 1.3.3, and 1.4.x before 1.4.2 has the copyTests=true and
    mini=false options, which makes it easier for remote attackers to have
    an unspecified impact via a request to a (1) test or (2) demo component.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: dojo
  vulnerable_versions:
  - ">=0.4 <0.4.4"
  - ">=1.0 <1.0.3"
  - ">=1.1 <1.1.2"
  - ">=1.2 <1.2.4"
  - ">=1.3 <1.3.3"
  - ">=1.4 <1.4.2"
  severity: high
  package_manager: npm
  cve:
  - CVE-2010-2272
  - CVE-2010-2276
  cwe:
  - CWE-16
  disclosed_date: 2015-11-06
  created_date: 2015-11-06
  last_modified_date: 2015-11-06
  references:
  - http://dojotoolkit.org/blog/dojo-security-advisory
  - http://www.cvedetails.com/cve/CVE-2010-2272/
  - http://www.cvedetails.com/cve/CVE-2010-2276/
  source_url: https://snyk.io/vuln/npm:dojo:20100614-1
- id: snykio:npm:dojo:174933
  title: Cross-site Scripting (XSS)
  description: |
    [dojo][1] is a foundation package for the Dojo 1 Toolkit. While still
    being maintained, new development is primarily focused on modern Dojo.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). The Dojo Toolkit does not properly filter HTML code from
    user-supplied input before displaying the input. A remote user can
    create a specially crafted URL that, when loaded by a target user, will
    cause arbitrary scripting code to be executed by the target user\'s
    browser.



    [1]: https://dojo.io/
  affected_package: dojo
  vulnerable_versions:
  - "<1.2.0"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2015-5654
  cwe:
  - CWE-79
  disclosed_date: 2015-10-10
  created_date: 2019-06-07
  last_modified_date: 2019-06-07
  credit:
  - Unknown
  references:
  - https://www.securitytracker.com/id/1034848
  source_url: https://snyk.io/vuln/SNYK-JS-DOJO-174933
- id: snykio:npm:dojo:174934
  title: Cross-site Scripting (XSS)
  description: |
    [dojo][1] is a foundation package for the Dojo 1 Toolkit. While still
    being maintained, new development is primarily focused on modern Dojo.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). Multiple cross-site scripting (XSS) vulnerabilities in Dojo allow
    remote attackers to inject arbitrary web script or HTML via unspecified
    vectors, possibly related to:

    * `dojo/resources/iframe_history.html`
    * \'dojox/av/FLAudio.js, dojox/av/FLVideo.js,
      dojox/av/resources/audio.swf\'
    * \'dojox/av/resources/video.swf, util/buildscripts/jslib/build.js\'
    * \'util/buildscripts/jslib/buildUtil.js\'

    as demonstrated by the (1) dojoUrl and (2) testUrl parameters to
    `util/doh/runner.html`.



    [1]: https://dojo.io/
  affected_package: dojo
  vulnerable_versions:
  - ">=1.0.0 <1.0.3"
  - ">=1.1.0 <1.1.2"
  - ">=1.2.0 <1.2.4"
  - ">=1.3.0 <1.3.3"
  - ">=1.4.0 <1.4.2"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2010-2273
  cwe:
  - CWE-79
  disclosed_date: 2010-05-16
  created_date: 2019-06-07
  last_modified_date: 2019-06-07
  credit:
  - bix
  references:
  - https://blog.gdssecurity.com/labs/2010/3/12/multiple-dom-based-xss-in-dojo-toolkit-sdk.html
  - https://bugs.dojotoolkit.org/ticket/10773
  source_url: https://snyk.io/vuln/SNYK-JS-DOJO-174934
- id: snykio:npm:dojo:20090409
  title: Cross-site Scripting (XSS)
  description: |+
    Cross-site Scripting (XSS) vulnerability in dijit.Editor in Dojo before
    1.1 allows remote attackers to inject arbitrary web script or HTML via
    XML entities in a TEXTAREA element.

    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: dojo
  vulnerable_versions:
  - "<1.1"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2008-6681
  cwe:
  - CWE-79
  disclosed_date: 2009-04-09
  created_date: 2015-11-06
  last_modified_date: 2015-11-06
  references:
  - http://www.cvedetails.com/cve/CVE-2008-6681/
  source_url: https://snyk.io/vuln/npm:dojo:20090409
- id: snykio:npm:dojo:20100614
  title: Cross-site Scripting (XSS)
  description: |+
    The default configuration of the build process in Dojo 0.4.x before
    0.4.4, 1.0.x before 1.0.3, 1.1.x before 1.1.2, 1.2.x before 1.2.4, 1.3.x
    before 1.3.3, and 1.4.x before 1.4.2 has the copyTests=true and
    mini=false options, which makes it easier for remote attackers to have
    an unspecified impact via a request to a (1) test or (2) demo component.

    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: dojo
  vulnerable_versions:
  - ">=0.4 <0.4.4"
  - ">=1.0 <1.0.3"
  - ">=1.1 <1.1.2"
  - ">=1.2 <1.2.4"
  - ">=1.3 <1.3.3"
  - ">=1.4 <1.4.2"
  severity: high
  package_manager: npm
  cve:
  - CVE-2010-2272
  - CVE-2010-2276
  cwe:
  - CWE-16
  disclosed_date: 2010-06-15
  created_date: 2015-11-06
  last_modified_date: 2015-11-06
  references:
  - http://dojotoolkit.org/blog/dojo-security-advisory
  - http://www.cvedetails.com/cve/CVE-2010-2272/
  - http://www.cvedetails.com/cve/CVE-2010-2276/
  source_url: https://snyk.io/vuln/npm:dojo:20100614
- id: snykio:npm:dojo:20160523
  title: Cross-site Scripting (XSS)
  description: |+
    The editor widget of `dojo`, a popular JavaScript toolkit, is vulnerable
    to XSS attacks.

    When saving (potentially) encoded HTML scripts in the editor and loading
    them again, the scripts are executed anyway.

  affected_package: dojo
  vulnerable_versions:
  - "<1.1.0"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2008-6681
  cwe:
  - CWE-79
  disclosed_date: 2009-04-09
  created_date: 2016-06-22
  last_modified_date: 2016-06-22
  credit:
  - Unknown
  references:
  - https://bugs.dojotoolkit.org/changeset/8069/legacy
  - https://bugs.dojotoolkit.org/ticket/2140
  source_url: https://snyk.io/vuln/npm:dojo:20160523
- id: snykio:npm:dojo:20180818
  title: Cross-site Scripting (XSS)
  description: |+
    [dojo][1] is a foundation package for the Dojo 1 Toolkit. While still
    being maintained, new development is primarily focused on modern Dojo.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS).



    [1]: https://dojo.io/
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: dojo
  vulnerable_versions:
  - "<1.10.10"
  - ">=1.11.0 <1.11.6"
  - ">=1.12.0 <1.12.4"
  - ">=1.13.0 <1.13.1"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2018-5673
  cwe:
  - CWE-79
  disclosed_date: 2018-01-13
  created_date: 2018-08-19
  last_modified_date: 2018-08-19
  credit:
  - bryanforbes
  references:
  - https://dojotoolkit.org/blog/dojo-1-14-released
  - https://github.com/dojo/dojo/commit/33eb767c477c6953446d9af8f5229d44d3dd8500
  - https://github.com/dojo/dojo/pull/307
  source_url: https://snyk.io/vuln/npm:dojo:20180818
- id: snykio:npm:dojo:559224
  title: Prototype Pollution
  description: "[dojo][1] is a foundation package for the Dojo 1 Toolkit. While still\nbeing
    maintained, new development is primarily focused on modern Dojo.\n\nAffected versions
    of this package are vulnerable to Prototype Pollution.\nThe `deepCopy` method
    within dojo could be tricked into adding or\nmodifying properties of `Object.prototype`\n\n###
    PoC by Snyk   {#poc-by-snyk}\n\n        require([\"dojo/request/util\"], function(lang)
    {\n            var malicious_payload = '{\"__proto__\":{\"vulnerable\":\"Polluted\"}}';\n
    \           var a = { b: \"c\", d: \"e\" };\n            var newOjb = lang.deepCopy(a,
    JSON.parse(malicious_payload));\n            console.log({}.vulnerable);\n    \n
    \     })\n\n\n\n[1]: https://dojo.io/\n\\nDenial of Service (DoS) describes a
    family of attacks, all aimed at\nmaking a system inaccessible to its original
    and legitimate users. There\nare many types of DoS attacks, ranging from trying
    to clog the network\npipes to the system by generating a large volume of traffic
    from many\nmachines (a Distributed Denial of Service - DDoS - attack) to sending\ncrafted
    requests that cause a system to crash or take a disproportional\namount of time
    to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial
    of\nService attack. Regular expressions are incredibly powerful, but they\naren\\'t
    very intuitive and can ultimately end up making it easy for\nattackers to take
    your site down.\n\nLet’s take the following regular expression as an example:\n\n
    \   regex = /A(B|C+)+D/\n{: .language-js}\n\nThis regular expression accomplishes
    the following:\n\n* `A` The string must start with the letter \\'A\\'\n* `(B|C+)+`
    The string must then follow the letter A with either the\n  letter \\'B\\' or
    some number of occurrences of the letter \\'C\\' (the\n  `+` matches one or more
    times). The `+` at the end of this section\n  states that we can look for one
    or more matches of this section.\n* `D` Finally, we ensure this section of the
    string ends with a \\'D\\'\n\nThe expression would match inputs such as `ABBD`,
    `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases, it doesn\\'t take very
    long for a regex engine to find a\nmatch:\n\n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n
    \   0.04s user 0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n{: .language-bash}\n\nThe entire
    process of testing it against a 30 characters long string\ntakes around ~52ms.
    But when given an invalid string, it takes nearly\ntwo seconds to complete the
    test, over ten times as long as it took to\ntest a valid string. The dramatic
    difference is due to the way regular\nexpressions get evaluated.\n\nMost Regex
    engines will work very similarly (with minor differences).\nThe engine will match
    the first possible way to accept the current\ncharacter and proceed to the next
    one. If it then fails to match the\nnext one, it will backtrack and see if there
    was another way to digest\nthe previous character. If it goes too far down the
    rabbit hole only to\nfind out the string doesn’t match in the end, and if many
    characters\nhave multiple valid regex paths, the number of backtracking steps
    can\nbecome very large, resulting in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s
    look at how our expression runs into this problem, using a\nshorter string: \\\"ACCCX\\\".
    While it seems fairly straightforward, there\nare still four different ways that
    the engine could match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.
    \ C+C+C.\n\nThe engine has to try each of those combinations to see if any of
    them\npotentially match against the expression. When you combine that with the\nother
    steps the engine must take, we can use [RegEx 101 debugger][1] to\nsee the engine
    has to take a total of 38 steps before it can determine\nthe string doesn\\'t
    match.\n\nFrom there, the number of steps the engine must use to validate a string\njust
    continues to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n|
    ACCCX | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX
    | 14 | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to
    take over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n"
  affected_package: dojo
  vulnerable_versions:
  - "<1.11.10"
  - ">=1.12.0 <1.12.8"
  - ">=1.13.0 <1.13.7"
  - ">=1.14.0 <1.14.6"
  - ">=1.15.0 <1.15.3"
  - ">=1.16.0 <1.16.2"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2020-5258
  cwe:
  - CWE-400
  disclosed_date: 2020-03-04
  created_date: 2020-03-11
  last_modified_date: 2020-03-11
  credit:
  - Snyk Security Team
  references:
  - https://github.com/dojo/dojo/commit/20a00afb68f5587946dc76fbeaa68c39bda2171d
  - https://github.com/dojo/dojo/security/advisories/GHSA-jxfh-8wgv-vfr2
  source_url: https://snyk.io/vuln/SNYK-JS-DOJO-559224
- id: snykio:npm:dojo:6
  title: Cross-site Scripting (XSS)
  description: |+
    Cross-site Scripting (XSS) vulnerability in `dijit/tests/_testCommon.js`
    in Dojo Toolkit SDK before 1.4.2 allows remote attackers to inject
    arbitrary web script or HTML via the theme parameter, as demonstrated by
    an attack against dijit/tests/form/test\_Button.html.

    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: dojo
  vulnerable_versions:
  - "<1.4.2"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2010-2275
  cwe:
  - CWE-79
  disclosed_date: 2010-06-15
  created_date: 2015-11-06
  last_modified_date: 2015-11-06
  references:
  - http://www.cvedetails.com/cve/CVE-2010-2275/
  source_url: https://snyk.io/vuln/npm:dojo:20100614-6
- id: snykio:npm:dojo:72305
  title: Cross-site Scripting (XSS)
  description: |+
    [dojo][1] is a foundation package for the Dojo 1 Toolkit. While still
    being maintained, new development is primarily focused on modern Dojo.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS).



    [1]: https://dojo.io/
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: dojo
  vulnerable_versions:
  - "<1.14"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2018-1000665
  cwe:
  - CWE-79
  disclosed_date: 2018-09-06
  created_date: 2018-09-06
  last_modified_date: 2018-09-06
  credit:
  - bryanforbes
  references:
  - https://dojotoolkit.org/blog/dojo-1-14-released
  - https://github.com/dojo/dojo/commit/9117ffd5a3863e44c92fcd58564c0da22be858f4
  - https://github.com/dojo/dojo/pull/307
  source_url: https://snyk.io/vuln/SNYK-JS-DOJO-72305
