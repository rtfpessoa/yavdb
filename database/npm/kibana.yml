---
- id: snykio:npm:kibana:1
  title: Open Redirect
  description: |
    [`Kibana`][1] is an open source (Apache Licensed), browser-based
    analytics and search dashboard for Elasticsearch.

    Affected versions of this package are vulnerable to Open Redirect.

    The Kibana fix for CVE-2017-8451 was found to be incomplete. With X-Pack
    installed, Kibana versions before 6.0.1 and 5.6.5 have an open redirect
    vulnerability on the login page that would enable an attacker to craft a
    link that redirects to an arbitrary website.



    [1]: https://www.npmjs.com/package/kibana
  affected_package: kibana
  vulnerable_versions:
  - "<5.6.5"
  - ">=6 <6.0.1"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2017-11482
  cwe:
  - CWE-601
  disclosed_date: 2017-12-06
  created_date: 2018-01-22
  last_modified_date: 2018-01-22
  credit:
  - Unknown
  references:
  - https://discuss.elastic.co/t/kibana-6-0-1-and-5-6-5-security-update/110571
  source_url: https://snyk.io/vuln/npm:kibana:20171206-1
- id: snykio:npm:kibana:2
  title: Open Redirect
  description: |
    [`kibana`][1] is Kibana is an open source (Apache Licensed), browser
    based analytics and search dashboard for Elasticsearch. Kibana is a snap
    to setup and start using. Kibana strives to be easy to get started with,
    while also being flexible and powerful, just like Elastic.

    Affected versions of the package are vulnerable to Open Redirect the
    login page that would enable an attacker to craft a link that redirects
    to an arbitrary website.



    [1]: https://www.npmjs.com/package/kibana
  affected_package: kibana
  vulnerable_versions:
  - ">=5.1.1 <5.6.7"
  - ">=6.0.0 <6.1.3"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2018-3819
  cwe:
  - CWE-601
  disclosed_date: 2018-01-29
  created_date: 2018-03-01
  last_modified_date: 2018-03-01
  credit:
  - Unknown
  references:
  - https://www.elastic.co/community/security
  source_url: https://snyk.io/vuln/npm:kibana:20180130-2
- id: snykio:npm:kibana:20160628
  title: Cross-site Scripting (XSS)
  description: |+
    [`kibana`][1] is an open source (Apache Licensed), browser based
    analytics and search dashboard for Elasticsearch. Kibana is a snap to
    setup and start using. Kibana strives to be easy to get started with,
    while also being flexible and powerful, just like Elastic.

    Affected versions of the package are vulnerable to Cross-site Scripting
    (XSS).



    [1]: https://www.npmjs.com/package/kibana
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: kibana
  vulnerable_versions:
  - "<5.0.0-alpha5"
  severity: medium
  package_manager: npm
  cwe:
  - CWE-79
  disclosed_date: 2016-06-27
  created_date: 2017-12-25
  last_modified_date: 2017-12-25
  credit:
  - Unknown
  references:
  - https://github.com/elastic/kibana/commit/271aa697075bc2c8f931a1310b20a4ced119bcd5
  - https://github.com/elastic/kibana/issues/7566
  - https://github.com/elastic/kibana/pull/7568
  source_url: https://snyk.io/vuln/npm:kibana:20160628
- id: snykio:npm:kibana:20170214
  title: Denial of Service (DoS)
  description: |+
    [`kibana`][1] is an open source, browser-based analytics and search
    dashboard for Elasticsearch.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS).

    Kibana versions prior to 5.2.1 configured for SSL client access, file
    descriptors will fail to be cleaned up after certain requests and will
    accumulate over time until the process crashes.



    [1]: https://www.npmjs.com/package/kibana
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: kibana
  vulnerable_versions:
  - "<5.2.1"
  severity: high
  package_manager: npm
  cve:
  - CVE-2017-8452
  cwe:
  - CWE-400
  disclosed_date: 2017-02-14
  created_date: 2018-01-04
  last_modified_date: 2018-01-04
  credit:
  - Unknown
  references:
  - https://www.elastic.co/blog/kibana-5-2-1-released
  source_url: https://snyk.io/vuln/npm:kibana:20170214
- id: snykio:npm:kibana:20170526
  title: Cross-site Scripting (XSS)
  description: |+
    [kibana][1] is an open source (Apache Licensed), browser-based analytics
    and search dashboard for Elasticsearch.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks in the Time Series Visual Builder. It could allow an
    attacker to obtain sensitive information from Kibana users.



    [1]: https://github.com/elastic/kibana
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: kibana
  vulnerable_versions:
  - "<5.4.1"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2017-8439
  cwe:
  - CWE-79
  disclosed_date: 2017-05-26
  created_date: 2018-04-08
  last_modified_date: 2018-04-08
  credit:
  - Unknown
  references:
  - https://discuss.elastic.co/t/elastic-stack-5-4-1-and-5-3-3-security-updates/87952
  - https://nvd.nist.gov/vuln/detail/CVE-2017-8439
  source_url: https://snyk.io/vuln/npm:kibana:20170526
- id: snykio:npm:kibana:20170605
  title: Cross-site Scripting (XSS)
  description: |+
    [`Kibana`][1] is an open source, browser-based analytics and search
    dashboard for Elasticsearch.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS).

    Starting in version 5.3.0, Kibana had a cross-site scripting (XSS)
    vulnerability in the Discover page that could allow an attacker to
    obtain sensitive information from or perform destructive actions on
    behalf of other Kibana users.



    [1]: https://www.npmjs.com/package/kibana
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: kibana
  vulnerable_versions:
  - ">=5.3.0 <5.3.3"
  - ">=5.4.0 <5.4.1"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2017-8440
  cwe:
  - CWE-79
  disclosed_date: 2017-06-05
  created_date: 2018-01-04
  last_modified_date: 2018-01-04
  credit:
  - Thomas Goytil
  source_url: https://snyk.io/vuln/npm:kibana:20170605
- id: snykio:npm:kibana:20170616
  title: Open Redirect
  description: |
    [`Kibana`][1] is an open source (Apache Licensed), browser-based
    analytics and search dashboard for Elasticsearch.

    Affected versions of this package are vulnerable to Open Redirect.

    With X-Pack installed, Kibana versions before 5.3.1 have an open
    redirect vulnerability on the login page that would enable an attacker
    to craft a link that redirects to an arbitrary website. Shield versions
    for Kibana prior to 2.4.5 are also affected.



    [1]: https://www.npmjs.com/package/kibana
  affected_package: kibana
  vulnerable_versions:
  - "<5.3.1"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2017-8451
  cwe:
  - CWE-79
  disclosed_date: 2017-06-16
  created_date: 2018-01-22
  last_modified_date: 2018-01-22
  credit:
  - Unknown
  references:
  - http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-8451
  - https://www.elastic.co/community/security
  source_url: https://snyk.io/vuln/npm:kibana:20170616
- id: snykio:npm:kibana:20170628
  title: Information Exposure
  description: |
    [`Kibana`][1] is an open source, browser-based analytics and search
    dashboard for Elasticsearch.

    Affected versions of this package are vulnerable to Information
    Exposure.

    In Kibana X-Pack security versions prior to 5.4.3 if a Kibana user opens
    a crafted Kibana URL the result could be a redirect to an improperly
    initialized Kibana login screen. If the user enters credentials on this
    screen, the credentials will appear in the URL bar. The credentials
    could then be viewed by untrusted parties or logged into the Kibana
    access logs.



    [1]: https://www.npmjs.com/package/kibana
  affected_package: kibana
  vulnerable_versions:
  - "<5.4.3"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2017-8443
  cwe:
  - CWE-200
  disclosed_date: 2017-06-28
  created_date: 2018-01-04
  last_modified_date: 2018-01-04
  credit:
  - Unknown
  references:
  - https://discuss.elastic.co/t/elastic-stack-5-4-3-security-update/91006
  source_url: https://snyk.io/vuln/npm:kibana:20170628
- id: snykio:npm:kibana:20170928
  title: Cross-site Scripting (XSS)
  description: |+
    [kibana][1] is an open source (Apache Licensed), browser-based analytics
    and search dashboard for Elasticsearch.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks in Timelion. It could allow an attacker to obtain
    sensitive information from or perform destructive actions on behalf of
    other Kibana users.



    [1]: https://github.com/elastic/kibana
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: kibana
  vulnerable_versions:
  - "<5.6.1"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2017-11479
  cwe:
  - CWE-79
  disclosed_date: 2017-09-28
  created_date: 2018-01-04
  last_modified_date: 2018-01-04
  credit:
  - Unknown
  references:
  - https://discuss.elastic.co/t/x-pack-alerting-and-kibana-5-6-1-security-update/101884
  - https://nvd.nist.gov/vuln/detail/CVE-2017-11479
  source_url: https://snyk.io/vuln/npm:kibana:20170928
- id: snykio:npm:kibana:20171206
  title: Cross-site Scripting (XSS)
  description: |+
    [`Kibana`][1] is an open source (Apache Licensed), browser-based
    analytics and search dashboard for Elasticsearch.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS).

    Kibana versions prior to 6.0.1 and 5.6.5 had a cross-site scripting
    (XSS) vulnerability via URL fields that could allow an attacker to
    obtain sensitive information from or perform destructive actions on
    behalf of other Kibana users.



    [1]: https://www.npmjs.com/package/kibana
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: kibana
  vulnerable_versions:
  - "<5.6.5"
  - ">=6 <6.0.1"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2017-11481
  cwe:
  - CWE-79
  disclosed_date: 2017-12-06
  created_date: 2018-01-22
  last_modified_date: 2018-01-22
  credit:
  - Unknown
  references:
  - https://discuss.elastic.co/t/kibana-6-0-1-and-5-6-5-security-update/110571
  source_url: https://snyk.io/vuln/npm:kibana:20171206
- id: snykio:npm:kibana:20180116
  title: Cross-site Scripting (XSS)
  description: |+
    [kibana][1] is an open source (Apache Licensed), browser-based analytics
    and search dashboard for Elasticsearch.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks via the colored fields formatter that could allow an
    attacker to obtain sensitive information from or perform destructive
    actions on behalf of other Kibana users.



    [1]: https://github.com/elastic/kibana
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: kibana
  vulnerable_versions:
  - ">=5.1.1 <5.6.6"
  - ">=6.0.0 <6.1.2"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2018-3818
  cwe:
  - CWE-79
  disclosed_date: 2018-01-16
  created_date: 2018-04-08
  last_modified_date: 2018-04-08
  credit:
  - Unknown
  references:
  - https://discuss.elastic.co/t/elastic-stack-6-1-2-and-5-6-6-security-update/115763
  - https://nvd.nist.gov/vuln/detail/CVE-2018-3818
  - https://www.securityfocus.com/bid/102734
  source_url: https://snyk.io/vuln/npm:kibana:20180116
- id: snykio:npm:kibana:20180130
  title: Cross-site Scripting (XSS)
  description: |+
    [`kibana`][1] is Kibana is an open source (Apache Licensed), browser
    based analytics and search dashboard for Elasticsearch. Kibana is a snap
    to setup and start using. Kibana strives to be easy to get started with,
    while also being flexible and powerful, just like Elastic.

    Affected versions of the package are vulnerable to Cross-site Scripting
    (XSS).



    [1]: https://www.npmjs.com/package/kibana
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: kibana
  vulnerable_versions:
  - ">=6.1.0 <6.1.3"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2018-3820
  cwe:
  - CWE-79
  disclosed_date: 2018-01-29
  created_date: 2018-03-01
  last_modified_date: 2018-03-01
  credit:
  - Unknown
  references:
  - https://www.elastic.co/community/security
  source_url: https://snyk.io/vuln/npm:kibana:20180130
- id: snykio:npm:kibana:451474
  title: Open Redirect
  description: |
    [kibana][1] is a open source (Apache Licensed), browser-based analytics
    and search dashboard for Elasticsearch.

    Affected versions of this package are vulnerable to Open Redirect. An
    attacker can craft a link in the Kibana domain that redirects to an
    arbitrary website.



    [1]: https://www.elastic.co/products/kibana
  affected_package: kibana
  vulnerable_versions:
  - "<4.6.2"
  - ">=5.0.0 <5.0.1"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2016-10365
  cwe:
  - CWE-601
  disclosed_date: 2017-06-16
  created_date: 2019-07-03
  last_modified_date: 2019-07-03
  credit:
  - Unknown
  references:
  - https://www.elastic.co/community/security
  source_url: https://snyk.io/vuln/SNYK-JS-KIBANA-451474
- id: snykio:npm:kibana:451475
  title: Cross-site Scripting (XSS)
  description: |+
    [kibana][1] is an open source (Apache Licensed), browser-based analytics
    and search dashboard for Elasticsearch.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS).



    [1]: https://www.elastic.co/products/kibana
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: kibana
  vulnerable_versions:
  - ">=4.3.0 <4.6.2"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2016-10366
  cwe:
  - CWE-79
  disclosed_date: 2017-06-16
  created_date: 2019-07-03
  last_modified_date: 2019-07-03
  credit:
  - Unknown
  references:
  - https://www.elastic.co/community/security
  source_url: https://snyk.io/vuln/SNYK-JS-KIBANA-451475
- id: snykio:npm:kibana:451541
  title: Cross-site Scripting (XSS)
  description: |+
    [kibana][1] is an open source (Apache Licensed), browser-based analytics
    and search dashboard for Elasticsearch.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS).



    [1]: https://www.elastic.co/products/kibana
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: kibana
  vulnerable_versions:
  - ">=4.1.0 <4.1.11"
  - ">=4.5.0 <4.5.4"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2016-1000220
  cwe:
  - CWE-79
  disclosed_date: 2017-06-16
  created_date: 2019-07-04
  last_modified_date: 2019-07-04
  credit:
  - Unknown
  references:
  - https://www.elastic.co/community/security
  - https://www.securityfocus.com/bid/99179/exploit
  source_url: https://snyk.io/vuln/SNYK-JS-KIBANA-451541
- id: snykio:npm:kibana:451545
  title: Cross-site Request Forgery (CSRF)
  description: |
    [kibana][1] is a open source (Apache Licensed), browser-based analytics
    and search dashboard for Elasticsearch.

    Affected versions of this package are vulnerable to Cross-site Request
    Forgery (CSRF). Allows remote attackers to hijack the authentication of
    unspecified victims via unknown vectors.



    [1]: https://www.elastic.co/products/kibana
  affected_package: kibana
  vulnerable_versions:
  - "<4.1.3"
  - ">=4.2.0 <4.2.1"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2015-8131
  cwe:
  - CWE-275
  - CWE-352
  disclosed_date: 2015-07-12
  created_date: 2019-07-05
  last_modified_date: 2019-07-05
  credit:
  - Unknown
  references:
  - http://www.securityfocus.com/archive/1/536935/100/0/threaded
  - https://www.elastic.co/community/security/
  source_url: https://snyk.io/vuln/SNYK-JS-KIBANA-451545
- id: snykio:npm:kibana:451546
  title: Information Exposure
  description: |
    [kibana][1] is a open source (Apache Licensed), browser-based analytics
    and search dashboard for Elasticsearch.

    Affected versions of this package are vulnerable to Information
    Exposure. Does not properly authenticating requests to advanced settings
    and the short URL service, so any authenticated user can make requests
    to those services regardless of their own permissions.



    [1]: https://www.elastic.co/products/kibana
  affected_package: kibana
  vulnerable_versions:
  - ">=5.0.0 <5.0.2"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2016-10364
  cwe:
  - CWE-532
  disclosed_date: 2017-06-16
  created_date: 2019-07-05
  last_modified_date: 2019-07-05
  credit:
  - Unknown
  references:
  - https://www.elastic.co/community/security
  source_url: https://snyk.io/vuln/SNYK-JS-KIBANA-451546
- id: snykio:npm:kibana:571289
  title: Cross-site Scripting (XSS)
  description: |+
    [kibana][1] is an open source (Apache Licensed), browser-based analytics
    and search dashboard for Elasticsearch.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). A stored XSS flaw exists in the TSVB visualization. An attacker
    who is able to edit or create a TSVB visualization could allow the
    attacker to obtain sensitive information from, or perform destructive
    actions, on behalf of Kibana users who edit the TSVB visualization.



    [1]: https://www.elastic.co/products/kibana
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: kibana
  vulnerable_versions:
  - "<6.8.9"
  - "<7.7.0"
  severity: high
  package_manager: npm
  cve:
  - CVE-2020-7015
  cwe:
  - CWE-79
  disclosed_date: 2020-06-04
  created_date: 2020-06-04
  last_modified_date: 2020-06-04
  credit:
  - Unknown
  references:
  - https://www.elastic.co/community/security/
  source_url: https://snyk.io/vuln/SNYK-JS-KIBANA-571289
- id: snykio:npm:kibana:571290
  title: Prototype Pollution
  description: "[kibana][1] is an open source (Apache Licensed), browser-based analytics\nand
    search dashboard for Elasticsearch.\n\nAffected versions of this package are vulnerable
    to Prototype Pollution.\nA prototype pollution flaw exists in TSVB. An authenticated
    attacker\nwith privileges to create TSVB visualizations could insert data that\nwould
    cause Kibana to execute arbitrary code. This could possibly lead\nto an attacker
    executing code with the permissions of the Kibana process\non the host system.\n\n\n\n[1]:
    https://www.elastic.co/products/kibana\n\\nPrototype Pollution is a vulnerability
    affecting JavaScript. Prototype\nPollution refers to the ability to inject properties
    into existing\nJavaScript language construct prototypes, such as objects. JavaScript\nallows
    all Object attributes to be altered, including their magical\nattributes such
    as `_proto_`, `constructor` and `prototype`. An attacker\nmanipulates these attributes
    to overwrite, or pollute, a JavaScript\napplication object prototype of the base
    object by injecting other\nvalues. Properties on the `Object.prototype` are then
    inherited by all\nthe JavaScript objects through the prototype chain. When that
    happens,\nthis leads to either denial of service by triggering JavaScript\nexceptions,
    or it tampers with the application source code to force the\ncode path that the
    attacker injects, thereby leading to remote code\nexecution.\n\nThere are two
    main ways in which the pollution of prototypes occurs:\n\n* Unsafe `Object` recursive
    merge\n\n* Property definition by path\n\n### Unsafe Object recursive merge   {#unsafe-object-recursive-merge}\n\nThe
    logic of a vulnerable recursive merge function follows the following\nhigh-level
    model:\n\n    merge (target, source)\n    \n      foreach property of source\n
    \   \n        if property exists and is an object on both the target and the source\n
    \   \n          merge(target[property], source[property])\n    \n        else\n
    \   \n          target[property] = source[property]\n\n&lt;br&gt;\n\nWhen the
    source object contains a property named `_proto_` defined with\n`Object.defineProperty()`
    , the condition that checks if the property\nexists and is an object on both the
    target and the source passes and the\nmerge recurses with the target, being the
    prototype of `Object` and the\nsource of `Object` as defined by the attacker.
    Properties are then\ncopied on the `Object` prototype.\n\nClone operations are
    a special sub-class of unsafe recursive merges,\nwhich occur when a recursive
    merge is conducted on an empty object:\n`merge({},source)`.\n\n`lodash` and `Hoek`
    are examples of libraries susceptible to recursive\nmerge attacks.\n\n### Property
    definition by path   {#property-definition-by-path}\n\nThere are a few JavaScript
    libraries that use an API to define property\nvalues on an object based on a given
    path. The function that is\ngenerally affected contains this signature: `theFunction(object,
    path,\nvalue)`\n\nIf the attacker can control the value of “path”, they can set
    this value\nto `_proto_.myValue`. `myValue` is then assigned to the prototype
    of the\nclass of the object.\n\n"
  affected_package: kibana
  vulnerable_versions:
  - "<6.8.9"
  - "<7.7.0"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2020-7013
  cwe:
  - CWE-400
  disclosed_date: 2020-06-04
  created_date: 2020-06-04
  last_modified_date: 2020-06-04
  credit:
  - Unknown
  references:
  - https://www.elastic.co/community/security/
  source_url: https://snyk.io/vuln/SNYK-JS-KIBANA-571290
- id: snykio:npm:kibana:571291
  title: Prototype Pollution
  description: "[kibana][1] is an open source (Apache Licensed), browser-based analytics\nand
    search dashboard for Elasticsearch.\n\nAffected versions of this package are vulnerable
    to Prototype Pollution.\nA prototype pollution flaw exists in the Upgrade Assistant.
    An\nauthenticated attacker with privileges to write to the Kibana index\ncould
    insert data that would cause Kibana to execute arbitrary code.\nThis could possibly
    lead to an attacker executing code with the\npermissions of the Kibana process
    on the host system.\n\n\n\n[1]: https://www.elastic.co/products/kibana\n\\nPrototype
    Pollution is a vulnerability affecting JavaScript. Prototype\nPollution refers
    to the ability to inject properties into existing\nJavaScript language construct
    prototypes, such as objects. JavaScript\nallows all Object attributes to be altered,
    including their magical\nattributes such as `_proto_`, `constructor` and `prototype`.
    An attacker\nmanipulates these attributes to overwrite, or pollute, a JavaScript\napplication
    object prototype of the base object by injecting other\nvalues. Properties on
    the `Object.prototype` are then inherited by all\nthe JavaScript objects through
    the prototype chain. When that happens,\nthis leads to either denial of service
    by triggering JavaScript\nexceptions, or it tampers with the application source
    code to force the\ncode path that the attacker injects, thereby leading to remote
    code\nexecution.\n\nThere are two main ways in which the pollution of prototypes
    occurs:\n\n* Unsafe `Object` recursive merge\n\n* Property definition by path\n\n###
    Unsafe Object recursive merge   {#unsafe-object-recursive-merge}\n\nThe logic
    of a vulnerable recursive merge function follows the following\nhigh-level model:\n\n
    \   merge (target, source)\n    \n      foreach property of source\n    \n        if
    property exists and is an object on both the target and the source\n    \n          merge(target[property],
    source[property])\n    \n        else\n    \n          target[property] = source[property]\n\n&lt;br&gt;\n\nWhen
    the source object contains a property named `_proto_` defined with\n`Object.defineProperty()`
    , the condition that checks if the property\nexists and is an object on both the
    target and the source passes and the\nmerge recurses with the target, being the
    prototype of `Object` and the\nsource of `Object` as defined by the attacker.
    Properties are then\ncopied on the `Object` prototype.\n\nClone operations are
    a special sub-class of unsafe recursive merges,\nwhich occur when a recursive
    merge is conducted on an empty object:\n`merge({},source)`.\n\n`lodash` and `Hoek`
    are examples of libraries susceptible to recursive\nmerge attacks.\n\n### Property
    definition by path   {#property-definition-by-path}\n\nThere are a few JavaScript
    libraries that use an API to define property\nvalues on an object based on a given
    path. The function that is\ngenerally affected contains this signature: `theFunction(object,
    path,\nvalue)`\n\nIf the attacker can control the value of “path”, they can set
    this value\nto `_proto_.myValue`. `myValue` is then assigned to the prototype
    of the\nclass of the object.\n\n"
  affected_package: kibana
  vulnerable_versions:
  - ">=6.7.0 <6.8.9"
  - ">=7.0.0 <7.6.3"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2020-7012
  cwe:
  - CWE-400
  disclosed_date: 2020-06-04
  created_date: 2020-06-04
  last_modified_date: 2020-06-04
  credit:
  - Unknown
  references:
  - https://www.elastic.co/community/security/
  source_url: https://snyk.io/vuln/SNYK-JS-KIBANA-571291
- id: snykio:npm:kibana:72628
  title: Arbitrary Command Execution
  description: |
    [kibana][1] is an open source (Apache Licensed), browser-based analytics
    and search dashboard for Elasticsearch.

    Affected versions of this package are vulnerable to Arbitrary Command
    Execution due to a file inclusion flaw in the Console plugin.



    [1]: https://www.npmjs.com/package/kibana
  affected_package: kibana
  vulnerable_versions:
  - "<5.3.13"
  - ">=6.4.0 <6.4.3"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2018-17246
  cwe:
  - CWE-94
  disclosed_date: 2018-10-23
  created_date: 2018-11-22
  last_modified_date: 2018-11-22
  credit:
  - Andrej Nemec
  references:
  - https://bugzilla.redhat.com/show_bug.cgi?id=1647344
  - https://github.com/elastic/kibana/commit/51aff7d3c49724fcbaba4353dff0cd7c3be799b0
  source_url: https://snyk.io/vuln/SNYK-JS-KIBANA-72628
