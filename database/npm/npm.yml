---
- id: npmjs:npm:npm:1434
  title: Arbitrary File Write
  description: |-
    Versions of the npm CLI prior to 6.13.3 are vulnerable to an Arbitrary File Write. It fails to prevent access to folders outside of the intended node_modules folder through the bin field. A properly constructed entry in the package.json bin field would allow a package publisher to create files on a user's system when the package is installed. It is only possible to affect files that the user running `npm install` has access to and it is not possible to over write files that already exist on disk.

    This behavior is still possible through install scripts. This vulnerability bypasses a user using the --ignore-scripts install option.
  affected_package: npm
  vulnerable_versions:
  - "<6.13.3"
  severity: low
  package_manager: npm
  cwe: CWE-22
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: Daniel Ruf
- id: npmjs:npm:npm:1436
  title: Symlink reference outside of node_modules
  description: "Versions of the npm CLI prior to 6.13.3 are vulnerable to a symlink
    reference outside of node_modules. It is possible for packages to create symlinks
    to files outside of the`node_modules` folder through the `bin` field upon installation.
    A properly constructed entry in the package.json bin field would allow a package
    publisher to create a symlink pointing to arbitrary files on a user’s system when
    the package is installed. Only files accessible by the user running the `npm install`
    are affected.  \n\nThis behavior is still possible through install scripts. This
    vulnerability bypasses a user using the --ignore-scripts install option."
  affected_package: npm
  vulnerable_versions:
  - "<6.13.3"
  severity: low
  package_manager: npm
  cwe: CWE-552
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: Daniel Ruf
- id: npmjs:npm:npm:1437
  title: Global node_modules Binary Overwrite
  description: "Versions of  the npm CLI prior to 6.13.4 are vulnerable to a Global
    node_modules Binary Overwrite. It fails to prevent existing globally-installed
    binaries to be overwritten by other package installations. \n\nFor example, if
    a package was installed globally and created a `serve` binary, any subsequent
    installs of packages that also create a `serve` binary would overwrite the first
    binary. This will not overwrite system binaries but only binaries put into the
    global node_modules directory.\n\nThis behavior is still allowed in local installations
    and also through install scripts. This vulnerability bypasses a user using the
    --ignore-scripts install option."
  affected_package: npm
  vulnerable_versions:
  - "<6.13.4"
  severity: low
  package_manager: npm
  cwe: CWE-22
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: Daniel Ruf
- id: npmjs:npm:npm:152
  title: Local Privilege Escalation
  description: 'Affected versions of `npm` use predictable temporary file names during
    archive unpacking. If an attacker can create a symbolic link at the location of
    one of these temporary file names, the attacker can arbitrarily write to any file
    that the user which owns the `npm` process has permission to write to, potentially
    resulting in local privilege escalation.

'
  affected_package: npm
  vulnerable_versions:
  - "<1.3.3"
  severity: low
  package_manager: npm
  cve:
  - CVE-2013-4116
  cwe: CWE-377
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: Jérémy Lal
- id: npmjs:npm:npm:98
  title: npm Token Leak
  description: "Affected versions of the `npm` package include the bearer token of
    the logged in user in every request made by the CLI, even if the request is not
    directed towards the user's active registry. \n\nAn attacker could create an HTTP
    server to collect tokens, and by various means including but not limited to install
    scripts, cause the npm CLI to make a request to that server, which would compromise
    the user's token.\n\nThis compromised token could be used to do anything that
    the user could do, including publishing new packages.\n\n"
  affected_package: npm
  vulnerable_versions:
  - "<= 2.15.0"
  - ">= 3.0.0 <= 3.8.2"
  severity: high
  package_manager: npm
  cve:
  - CVE-2016-3956
  cwe: CWE-200
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: Mitar, Will White & the team at Mapbox, Max Motovilov, and James Taylor
- id: ossindex:npm:npm:357354
  title: '[CVE-2013-4116]  Improper Link Resolution Before File Access ("Link Following")'
  description: lib/npm.js in Node Packaged Modules (npm) before 1.3.3 allows local
    users to overwrite arbitrary files via a symlink attack on temporary files with
    predictable names that are created when unpacking archives.
  affected_package: npm
  vulnerable_versions:
  - "<1.3.3"
  package_manager: npm
  cve:
  - CVE-2013-4116
  disclosed_date: 2014-04-22
  created_date: 2014-04-22
  last_modified_date: 2017-07-30
  credit:
  - OSSIndex
  references:
  - http://www.openwall.com/lists/oss-security/2013/07/10/17
  - http://www.openwall.com/lists/oss-security/2013/07/11/9
  - http://www.securityfocus.com/bid/61083
  - http://xforce.iss.net/xforce/xfdb/87141
  - https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=715325
  - https://bugzilla.redhat.com/show_bug.cgi?id=983917
  - https://exchange.xforce.ibmcloud.com/vulnerabilities/87141
  - https://github.com/npm/npm/commit/f4d31693
  - https://github.com/npm/npm/issues/3635
  source_url: https://ossindex.net/resource/package/7014236987/vulnerabilities
- id: ossindex:npm:npm:8398925249
  title: "[Duplicate] npm security update (token leak)"
  description: "See https://ossindex.net/resource/vulnerability/8398938409\n\nThis
    vulnerability could cause the unintentional leakage of bearer tokens. "
  affected_package: npm
  vulnerable_versions:
  - ">= 3.0.0 <= 3.8.2"
  package_manager: npm
  disclosed_date: 2016-05-19
  created_date: 2016-05-19
  last_modified_date: 2017-03-04
  credit:
  - OSSIndex
  references:
  - http://blog.npmjs.org/post/142036323955/fixing-a-bearer-token-vulnerability#2
  - https://cwe.mitre.org/data/definitions/200.html
  - https://nodejs.org/en/blog/vulnerability/npm-tokens-leak-march-2016/#2
  - https://nodesecurity.io/advisories/98#2
  source_url: https://ossindex.net/resource/package/7014236987/vulnerabilities
- id: ossindex:npm:npm:8398938409
  title: npm security update (token leak)
  description: This vulnerability could cause the unintentional leakage of bearer
    tokens.
  affected_package: npm
  vulnerable_versions:
  - "<= 2.15.0"
  - ">= 3.0.0 <= 3.8.2"
  package_manager: npm
  disclosed_date: 2016-05-17
  created_date: 2016-05-17
  last_modified_date: 2017-03-04
  credit:
  - OSSIndex
  references:
  - http://blog.npmjs.org/post/142036323955/fixing-a-bearer-token-vulnerability
  - https://cwe.mitre.org/data/definitions/200.html
  - https://nodejs.org/en/blog/vulnerability/npm-tokens-leak-march-2016/#2
  - https://nodesecurity.io/advisories/98
  source_url: https://ossindex.net/resource/package/7014236987/vulnerabilities
- id: ossindex:npm:npm:8399924166
  title: "[CVE-2016-3956]  Information Exposure"
  description: The CLI in npm before 2.15.1 and 3.x before 3.8.3, as used in Node.js
    0.10 before 0.10.44, 0.12 before 0.12.13, 4 before 4.4.2, and 5 before 5.10.0,
    includes bearer tokens with arbitrary requests, which allows remote HTTP servers
    to obtain sensitive information by reading Authorization headers.
  affected_package: npm
  vulnerable_versions:
  - "<=2.15.0 | >=3.0.0 <=3.8.2"
  package_manager: npm
  cve:
  - CVE-2016-3956
  disclosed_date: 2016-07-02
  created_date: 2016-07-02
  last_modified_date: 2017-07-30
  credit:
  - OSSIndex
  references:
  - http://blog.npmjs.org/post/142036323955/fixing-a-bearer-token-vulnerability
  - http://www-01.ibm.com/support/docview.wss?uid=swg21980827
  - https://github.com/npm/npm/commit/f67ecad59e99a03e5aad8e93cd1a086ae087cb29
  - https://github.com/npm/npm/commit/fea8cc92cee02c720b58f95f14d315507ccad401
  - https://github.com/npm/npm/issues/8380
  - https://nodejs.org/en/blog/vulnerability/npm-tokens-leak-march-2016/
  source_url: https://ossindex.net/resource/package/7014236987/vulnerabilities
- id: snykio:npm:npm:20130708
  title: Symlink attack due to predictable tmp folder names
  description: |
    [`npm`][1] is a package manager for JavaScript. Affected versions of the
    package are vulnerable to Symlink attack due to predictable tmp folder
    names, which were named `/tmp/npm-$PID`. An attacker waiting for a
    process named `npm-` to load could then go to the folder and arbitrarily
    change the files in the tmp folder.



    [1]: https://www.npmjs.com/package/npm
  affected_package: npm
  vulnerable_versions:
  - "<1.3.3"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2013-4116
  - CVE-2017-16017
  cwe:
  - CWE-377
  disclosed_date: 2013-07-07
  created_date: 2017-02-13
  last_modified_date: 2017-02-13
  credit:
  - Daniel Kahn Gillmor
  references:
  - http://www.openwall.com/lists/oss-security/2013/07/10/17
  - https://github.com/npm/npm/commit/f4d31693
  - https://github.com/npm/npm/issues/3635
  source_url: https://snyk.io/vuln/npm:npm:20130708
- id: snykio:npm:npm:20160418
  title: npm Token Leak
  description: |+
    This vulnerability could cause the unintentional leakage of bearer
    tokens. A design flaw in npm\'s registry allows an attacker to set up an
    HTTP server that could collect authentication information, and then use
    this authentication information to impersonate the users whose tokens
    they collected. The attacker could do anything the compromised users
    could do, including publishing new versions of packages.

    \nThe primary npm registry has, since late 2014, used HTTP bearer tokens
    to authenticate requests from the npm command-line interface. Due to a
    design flaw in the CLI, these bearer tokens were sent with every request
    made by logged-in users, regardless of the destination of the request.
    (The bearers only should have been included for requests made against a
    registry or registries used for the current install.)

    This flaw allows an attacker to set up an HTTP server that could collect
    authentication information. They could then use this information to
    impersonate the users whose tokens they collected. This impersonation
    would allow them to do anything the compromised users could do,
    including publishing new versions of packages.

    With the fixes npm have released, the CLI will only send bearer tokens
    with requests made against a registry. npm’s CLI team believe that the
    fix won’t break any existing registry setups. However, it’s possible the
    change will be breaking in some cases, due to the large number of
    registry software suites used.

  affected_package: npm
  vulnerable_versions:
  - "<2.15.1"
  - ">=3.0.0 <3.8.4"
  severity: medium
  package_manager: npm
  cwe:
  - CWE-200
  disclosed_date: 2016-04-18
  created_date: 2016-04-20
  last_modified_date: 2016-04-20
  credit:
  - James Taylor
  - Max Motovilov
  - Mitar
  - Will White & the team at Mapbox
  references:
  - http://blog.npmjs.org/post/142036323955/fixing-a-bearer-token-vulnerability
  - https://github.com/npm/npm/commit/fea8cc92cee02c720b58f95f14d315507ccad401
  - https://github.com/npm/npm/issues/8380
  - https://nodejs.org/en/blog/vulnerability/npm-tokens-leak-march-2016/
  source_url: https://snyk.io/vuln/npm:npm:20160418
- id: snykio:npm:npm:20180222
  title: Access Restriction Bypass
  description: |
    [npm][1] is a package manager for JavaScript.

    Affected versions of this package are vulnerable to Access Restriction
    Bypass. It might allow local users to bypass intended filesystem access
    restrictions due to ownerships of `/etc` and `/usr` directories are
    being changed unexpectedly, related to a \"correctMkdir\" issue.



    [1]: https://www.npmjs.com/package/npm
  affected_package: npm
  vulnerable_versions:
  - "<5.7.1"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2018-7408
  cwe:
  - CWE-284
  disclosed_date: 2018-02-22
  created_date: 2018-03-21
  last_modified_date: 2018-03-21
  credit:
  - Unknown
  references:
  - https://github.com/npm/npm/commit/74e149da6efe6ed89477faa81fef08eee7999ad0
  - https://github.com/npm/npm/issues/19883
  source_url: https://snyk.io/vuln/npm:npm:20180222
- id: snykio:npm:npm:537603
  title: Arbitrary File Overwrite
  description: |
    [npm][1] is a package manager for JavaScript.

    Affected versions of this package are vulnerable to Arbitrary File
    Overwrite. It fails to prevent existing globally-installed binaries to
    be overwritten by other package installations. For example, if a package
    was installed globally and created a `serve` binary, any subsequent
    installs of packages that also create a `serve` binary would overwrite
    the first binary. This only affects files in `/usr/local/bin`.

    For `npm`, this behaviour is still allowed in local installations and
    also through install scripts. This vulnerability bypasses a user using
    the `--ignore-scripts` install option.



    [1]: https://www.npmjs.com/package/npm
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
  affected_package: npm
  vulnerable_versions:
  - "<6.13.4"
  severity: high
  package_manager: npm
  cve:
  - CVE-2019-16777
  cwe:
  - CWE-22
  disclosed_date: 2019-12-11
  created_date: 2019-12-12
  last_modified_date: 2019-12-12
  credit:
  - Daniel Ruf
  references:
  - https://blog.daniel-ruf.de/critical-design-flaw-npm-pnpm-yarn/
  - https://blog.npmjs.org/post/189618601100/binary-planting-with-the-npm-cli
  - https://nodejs.org/en/blog/vulnerability/december-2019-security-releases/
  - https://snyk.io/blog/understanding-filesystem-takeover-vulnerabilities-in-npm-javascript-package-manager
  - https://www.npmjs.com/advisories/1437
  - https://www.npmjs.com/advisories/1438
  source_url: https://snyk.io/vuln/SNYK-JS-NPM-537603
- id: snykio:npm:npm:537604
  title: Unauthorized File Access
  description: |
    [npm][1] is a package manager for JavaScript.

    Affected versions of this package are vulnerable to Unauthorized File
    Access. It is possible for packages to create symlinks to files outside
    of the`node_modules` folder through the `bin` field upon installation.

    For `npm`, a properly constructed entry in the `package.json` bin field
    would allow a package publisher to create a symlink pointing to
    arbitrary files on a user’s system when the package is installed. This
    behaviour is possible through install scripts. This vulnerability
    bypasses a user using the `--ignore-scripts` install option.



    [1]: https://www.npmjs.com/package/npm
  affected_package: npm
  vulnerable_versions:
  - "<6.13.3"
  severity: low
  package_manager: npm
  cve:
  - CVE-2019-16775
  cwe:
  - CWE-552
  disclosed_date: 2019-12-11
  created_date: 2019-12-12
  last_modified_date: 2019-12-12
  credit:
  - Daniel Ruf
  references:
  - https://blog.daniel-ruf.de/critical-design-flaw-npm-pnpm-yarn/
  - https://nodejs.org/en/blog/vulnerability/december-2019-security-releases/
  - https://www.npmjs.com/advisories/1435
  - https://www.npmjs.com/advisories/1436
  source_url: https://snyk.io/vuln/SNYK-JS-NPM-537604
- id: snykio:npm:npm:537606
  title: Arbitrary File Write
  description: |
    [npm][1] is a package manager for JavaScript.

    Affected versions of this package are vulnerable to Arbitrary File
    Write. It fails to prevent access to folders outside of the intended
    `node_modules` folder through the bin field.

    For `npm`, a properly constructed entry in the `package.json` bin field
    would allow a package publisher to modify and/or gain access to
    arbitrary files on a user’s system when the package is installed. This
    behaviour is possible through install scripts. This vulnerability
    bypasses a user using the `--ignore-scripts install` option.



    [1]: https://www.npmjs.com/package/npm
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
  affected_package: npm
  vulnerable_versions:
  - "<6.13.3"
  severity: high
  package_manager: npm
  cve:
  - CVE-2019-16776
  cwe:
  - CWE-22
  disclosed_date: 2019-12-11
  created_date: 2019-12-12
  last_modified_date: 2019-12-12
  credit:
  - Daniel Ruf
  references:
  - https://blog.daniel-ruf.de/critical-design-flaw-npm-pnpm-yarn/
  - https://nodejs.org/en/blog/vulnerability/december-2019-security-releases/
  - https://snyk.io/blog/understanding-filesystem-takeover-vulnerabilities-in-npm-javascript-package-manager/
  - https://www.npmjs.com/advisories/1427
  - https://www.npmjs.com/advisories/1434
  source_url: https://snyk.io/vuln/SNYK-JS-NPM-537606
