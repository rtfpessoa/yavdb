---
- id: npmjs:npm:mathjs:551
  title: Arbitrary Code Execution
  description: math.js before 3.17.0 had an issue where private properties such as
    a constructor could be replaced by using unicode characters when creating an object.
  affected_package: mathjs
  vulnerable_versions:
  - "<3.17.0"
  severity: high
  package_manager: npm
  cve:
  - CVE-2017-1001003
  cwe: CWE-94
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: Masato Kinugawa
- id: npmjs:npm:mathjs:552
  title: Arbitrary Code Execution
  description: math.js before 3.17.0 had an arbitrary code execution in the JavaScript
    engine. Creating a typed function with JavaScript code in the name could result
    arbitrary execution.
  affected_package: mathjs
  vulnerable_versions:
  - "<3.17.0"
  severity: high
  package_manager: npm
  cve:
  - CVE-2017-1001002
  cwe: CWE-94
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: Masato Kinugawa
- id: snykio:npm:mathjs:1
  title: Arbitrary Code Execution
  description: |
    [`mathjs`][1] is an extensive math library for JavaScript and Node.js

    Affected versions of the package are vulnerable to Arbitrary Code
    Execution. Forbidden properties like constructor could be replaced by
    using unicode characters when creating an object.



    [1]: https://www.npmjs.com/package/mathjs
  affected_package: mathjs
  vulnerable_versions:
  - "<3.17.0"
  severity: high
  package_manager: npm
  cve:
  - CVE-2017-1001003
  cwe:
  - CWE-94
  disclosed_date: 2017-11-18
  created_date: 2017-11-28
  last_modified_date: 2017-11-28
  credit:
  - Masato Kinugawa
  references:
  - https://github.com/josdejong/mathjs/blob/master/HISTORY.md#2017-11-18-version-3170
  - https://github.com/josdejong/mathjs/commit/a60f3c8d9dd714244aed7a5569c3dccaa3a4e761
  source_url: https://snyk.io/vuln/npm:mathjs:20171118-1
- id: snykio:npm:mathjs:1016401
  title: Prototype Pollution
  description: "[mathjs][1] is a math library for JavaScript and Node.js. It features
    a\nflexible expression parser with support for symbolic computation, comes\nwith
    a large set of built-in functions and constants, and offers an\nintegrated solution
    to work with diff.\n\nAffected versions of this package are vulnerable to Prototype
    Pollution\nvia the `deepExtend function` that runs upon configuration updates.\n\n\n\n[1]:
    https://github.com/josdejong/mathjs\n\\nPrototype Pollution is a vulnerability
    affecting JavaScript. Prototype\nPollution refers to the ability to inject properties
    into existing\nJavaScript language construct prototypes, such as objects. JavaScript\nallows
    all Object attributes to be altered, including their magical\nattributes such
    as `_proto_`, `constructor` and `prototype`. An attacker\nmanipulates these attributes
    to overwrite, or pollute, a JavaScript\napplication object prototype of the base
    object by injecting other\nvalues. Properties on the `Object.prototype` are then
    inherited by all\nthe JavaScript objects through the prototype chain. When that
    happens,\nthis leads to either denial of service by triggering JavaScript\nexceptions,
    or it tampers with the application source code to force the\ncode path that the
    attacker injects, thereby leading to remote code\nexecution.\n\nThere are two
    main ways in which the pollution of prototypes occurs:\n\n* Unsafe `Object` recursive
    merge\n\n* Property definition by path\n\n### Unsafe Object recursive merge   {#unsafe-object-recursive-merge}\n\nThe
    logic of a vulnerable recursive merge function follows the following\nhigh-level
    model:\n\n    merge (target, source)\n    \n      foreach property of source\n
    \   \n        if property exists and is an object on both the target and the source\n
    \   \n          merge(target[property], source[property])\n    \n        else\n
    \   \n          target[property] = source[property]\n\n\n\nWhen the source object
    contains a property named `_proto_` defined with\n`Object.defineProperty()` ,
    the condition that checks if the property\nexists and is an object on both the
    target and the source passes and the\nmerge recurses with the target, being the
    prototype of `Object` and the\nsource of `Object` as defined by the attacker.
    Properties are then\ncopied on the `Object` prototype.\n\nClone operations are
    a special sub-class of unsafe recursive merges,\nwhich occur when a recursive
    merge is conducted on an empty object:\n`merge({},source)`.\n\n`lodash` and `Hoek`
    are examples of libraries susceptible to recursive\nmerge attacks.\n\n### Property
    definition by path   {#property-definition-by-path}\n\nThere are a few JavaScript
    libraries that use an API to define property\nvalues on an object based on a given
    path. The function that is\ngenerally affected contains this signature: `theFunction(object,
    path,\nvalue)`\n\nIf the attacker can control the value of “path”, they can set
    this value\nto `_proto_.myValue`. `myValue` is then assigned to the prototype
    of the\nclass of the object.\n\n"
  affected_package: mathjs
  vulnerable_versions:
  - "<7.5.1"
  severity: high
  package_manager: npm
  cve:
  - CVE-2020-7743
  cwe:
  - CWE-400
  disclosed_date: 2020-10-07
  created_date: 2020-10-13
  last_modified_date: 2020-10-13
  credit:
  - Alessio Della Libera (d3lla)
  references:
  - https://github.com/josdejong/mathjs/blob/develop/src/utils/object.js#L82
  - https://github.com/josdejong/mathjs/commit/ecb80514e80bce4e6ec7e71db8ff79954f07c57e
  source_url: https://snyk.io/vuln/SNYK-JS-MATHJS-1016401
- id: snykio:npm:mathjs:20170331
  title: Arbitrary Code Execution
  description: |
    [`mathjs`][1] is an extensive math library for JavaScript and Node.js.

    Affected versions of the package are vulnerable to Arbitrary Code
    Execution.

    The expression parser in mathjs uses the `eval` and the `new Function`
    methods insecurely which could allow an attacker to execute arbitrary
    code on the remote server.



    [1]: https://www.npmjs.com/package/mathjs
  affected_package: mathjs
  vulnerable_versions:
  - "<3.10.3"
  severity: high
  package_manager: npm
  cwe:
  - CWE-94
  disclosed_date: 2017-03-31
  created_date: 2018-01-28
  last_modified_date: 2018-01-28
  credit:
  - CapacitorSet
  - denvit
  references:
  - https://github.com/josdejong/mathjs/blob/v3.11.5/HISTORY.md#2017-03-31-version-3103
  - https://github.com/josdejong/mathjs/compare/v3.10.1...v3.10.3
  source_url: https://snyk.io/vuln/npm:mathjs:20170331
- id: snykio:npm:mathjs:20170402
  title: Arbitrary Code Execution
  description: |
    [`mathjs`][1] is an extensive math library for JavaScript and Node.js.

    Affected versions of the package are vulnerable to Arbitrary Code
    Execution.

    The expression parser in mathjs uses the `eval` and the `new Function`
    methods insecurely which could allow an attacker to execute arbitrary
    code on the remote server.

    this is due to an incomplete fix for [npm:mathjs:20170331][2].



    [1]: https://www.npmjs.com/package/mathjs
    [2]: https://snyk.io/vuln/npm:mathjs:20170331
  affected_package: mathjs
  vulnerable_versions:
  - "<3.11.5"
  severity: medium
  package_manager: npm
  cwe:
  - CWE-94
  disclosed_date: 2017-04-02
  created_date: 2018-01-28
  last_modified_date: 2018-01-28
  credit:
  - comex
  - Joe Vennix
  - Konrad Borowski
  references:
  - https://github.com/josdejong/mathjs/blob/master/HISTORY.md#2017-04-08-version-3115
  - https://github.com/josdejong/mathjs/compare/v3.10.3...v3.11.5
  - https://github.com/josdejong/mathjs/issues/821
  - https://github.com/josdejong/mathjs/issues/822
  source_url: https://snyk.io/vuln/npm:mathjs:20170402
- id: snykio:npm:mathjs:20170527
  title: Arbitrary Code Execution
  description: |
    [`mathjs`][1] is an extensive math library for JavaScript and Node.js.

    Affected versions of the package are vulnerable to Arbitrary Code
    Execution. The `isSafeMethod` was able to call other methods (like bind)
    which is not allowed and could cause code execution on the remote
    server.



    [1]: https://www.npmjs.com/package/mathjs
  affected_package: mathjs
  vulnerable_versions:
  - "<3.13.3"
  severity: medium
  package_manager: npm
  cwe:
  - CWE-94
  disclosed_date: 2017-05-27
  created_date: 2018-01-28
  last_modified_date: 2018-01-28
  credit:
  - Jos De Jong
  references:
  - https://github.com/josdejong/mathjs/blob/master/HISTORY.md#2017-05-27-version-3133
  - https://github.com/josdejong/mathjs/commit/ed5f2cebaf873ba1e57acbce2a3668686ac69331
  source_url: https://snyk.io/vuln/npm:mathjs:20170527
- id: snykio:npm:mathjs:20171118
  title: Arbitrary Code Execution
  description: |
    [`mathjs`][1] is an extensive math library for JavaScript and Node.js

    Affected versions of the package are vulnerable to Arbitrary Code
    Execution via `typed-function`. A malicious user could possibly execute
    arbitrary code in the JavaScript engine, by creating a typed function
    with JavaScript code in the name.



    [1]: https://www.npmjs.com/package/mathjs
  affected_package: mathjs
  vulnerable_versions:
  - "<3.17.0"
  severity: high
  package_manager: npm
  cve:
  - CVE-2017-1001002
  cwe:
  - CWE-94
  disclosed_date: 2017-11-18
  created_date: 2017-11-28
  last_modified_date: 2017-11-28
  credit:
  - Masato Kinugawa
  references:
  - https://github.com/josdejong/mathjs/blob/master/HISTORY.md#2017-11-18-version-3170
  - https://github.com/josdejong/mathjs/commit/8d2d48d81b3c233fb64eb2ec1d7a9e1cf6a55a90
  source_url: https://snyk.io/vuln/npm:mathjs:20171118
