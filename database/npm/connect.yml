---
- id: npmjs:npm:connect:3
  title: methodOverride Middleware Reflected Cross-Site Scripting
  description: |+
    Connect is a stack of middleware that is executed in order in each request.

    The "methodOverride" middleware allows the http post to override the method of the request with the value of the "_method" post key or with the header "x-http-method-override".

    Because the user post input was not checked, req.method could contain any kind of value. Because the req.method did not match any common method VERB, connect answered with a 404 page containing the "Cannot `[method]` `[url]`" content. The method was not properly encoded for output in the browser.


    ###Example:
    ```
    ~ curl "localhost:3000" -d "_method=<script src=http://nodesecurity.io/xss.js></script>"
    Cannot <SCRIPT SRC=HTTP://NODESECURITY.IO/XSS.JS></SCRIPT> /
    ```

  affected_package: connect
  vulnerable_versions:
  - "<=2.8.0"
  severity: low
  package_manager: npm
  cve:
  - CVE-2013-7370
  - CVE-2013-7371
  cwe: CWE-79
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: Sergio Arcos
- id: ossindex:npm:connect:8266923740
  title: Cross-Site Scripting with connect.methodOverride()
  description: |-
    This middleware overwrite req.method with the req.body['_method'] value. When you don't catch the error it responds with a default error msg: "Cannot [METHOD] [URL]" (https://github.com/senchalabs/connect/blob/6db901f967036ccc3c892b4bcb5bcb59e0b0dca9/lib/proto.js#L155). Because this is not enough sanitized, you can force a Cross-Site Scripting in the response:

    ~ curl "localhost:3000" -d "_method=<script src=http://martes13.net/a.js></script>"
    Cannot <SCRIPT SRC=HTTP://MARTES13.NET/A.JS></SCRIPT> /
    This is very dangerous because in a server like ExpressJS it won't be handled with a app.all('/*', ...), so all servers using this middleware are vulnerable.
  affected_package: connect
  vulnerable_versions:
  - "<=2.8.0"
  package_manager: npm
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 2017-03-03
  credit:
  - OSSIndex
  references:
  - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-7370
  - https://github.com/senchalabs/connect/issues/831
  - https://nodesecurity.io/advisories/3
  source_url: https://ossindex.net/resource/package/7012220816/vulnerabilities
- id: ossindex:npm:connect:8402517478
  title: Cross Site Scripting (XSS)
  description: A cross site scripting attack is possible in 404 messages due to missing
    escaping.
  affected_package: connect
  vulnerable_versions:
  - "<0.8.6"
  package_manager: npm
  disclosed_date: 2017-03-03
  created_date: 2017-03-03
  last_modified_date: 2017-03-04
  credit:
  - OSSIndex
  references:
  - https://cwe.mitre.org/data/definitions/79.html
  - https://github.com/senchalabs/connect/commit/c1daf27b2067b07fe3e9a66ce7f9121a0fa597b3
  - https://github.com/senchalabs/connect/issues/473
  source_url: https://ossindex.net/resource/package/7012220816/vulnerabilities
- id: ossindex:npm:connect:8402517487
  title: Directory traversal vulnerability in staticProvider
  description: "> staticProvider lets attacker to use relative paths in requests by
    escaping the \"..\" with \"%2e%2e\". It checks for containing relative paths _before_
    unescaping so it never gets caught.\n> \n> -- [github.com](https://github.com/senchalabs/connect/issues/198)"
  affected_package: connect
  vulnerable_versions:
  - "<0.5.10"
  package_manager: npm
  disclosed_date: 2017-03-03
  created_date: 2017-03-03
  last_modified_date: 2017-03-04
  credit:
  - OSSIndex
  references:
  - https://cwe.mitre.org/data/definitions/22.html
  - https://github.com/senchalabs/connect/commit/e59091052709411390343d2252fb17833649aeaf
  - https://github.com/senchalabs/connect/issues/198
  source_url: https://ossindex.net/resource/package/7012220816/vulnerabilities
- id: ossindex:npm:connect:8402517535
  title: Denial of Service (DoS)
  description: "> When using the static middleware, if the URL contains a valid file
    name and a trailing backslash the node server will crash with `Error: ENOENT,
    no such file or directory`.\n> \n> -- [github.com](https://github.com/senchalabs/connect/issues/452)"
  affected_package: connect
  vulnerable_versions:
  - "<0.8.6"
  - ">0.8.6 <2.0.0"
  package_manager: npm
  disclosed_date: 2017-03-03
  created_date: 2017-03-03
  last_modified_date: 2017-03-25
  credit:
  - OSSIndex
  references:
  - https://github.com/senchalabs/connect/commit/2b0e8d69a14312fa2fd3449685be0c0896dfe53e
  - https://github.com/senchalabs/connect/issues/452
  source_url: https://ossindex.net/resource/package/7012220816/vulnerabilities
- id: ossindex:npm:connect:8402517540
  title: Path Traversal
  description: 'A mishandling of adding `directory(''.'')` to `connect()` results
    any path beginning with `.` to pass the malicious directory check, allowing access
    to any file on the system.

'
  affected_package: connect
  vulnerable_versions:
  - "<2.9.2"
  package_manager: npm
  disclosed_date: 2017-03-03
  created_date: 2017-03-03
  last_modified_date: 2017-03-04
  credit:
  - OSSIndex
  references:
  - https://cwe.mitre.org/data/definitions/22.html
  - https://github.com/senchalabs/connect/commit/c2afb242d4fa9843fed52cb27fc9d940cf9bc69c
  - https://github.com/senchalabs/connect/issues/771
  source_url: https://ossindex.net/resource/package/7012220816/vulnerabilities
- id: snykio:npm:connect:20120107
  title: Denial of Service (DoS)
  description: |+
    [`connect`][1] is a high performance middleware framework.

    Affected versions of the package are vulnerable to Denial of Service
    (DoS) attacks. It is possible to crash the node server by requesting a
    url with a trailing backslash in the end.



    [1]: https://www.npmjs.com/package/connect
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: connect
  vulnerable_versions:
  - ">=1.4.0 <2.0.0"
  severity: medium
  package_manager: npm
  cwe:
  - CWE-400
  disclosed_date: 2012-01-06
  created_date: 2017-02-13
  last_modified_date: 2017-02-13
  credit:
  - bunkat
  references:
  - https://github.com/senchalabs/connect/commit/2b0e8d69a14312fa2fd3449685be0c0896dfe53e
  - https://github.com/senchalabs/connect/issues/452
  source_url: https://snyk.io/vuln/npm:connect:20120107
- id: snykio:npm:connect:20130701
  title: Cross-site Scripting (XSS)
  description: |
    [connect][1] is a stack of middleware that is executed in order in each
    request.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). The `methodOverride` middleware allows the http post to override
    the method of the request with the value of the `_method` post key or
    with the header `x-http-method-override`.

    Because the user post input was not checked, req.method could contain
    any kind of value. Because the req.method did not match any common
    method VERB, connect answered with a 404 page containing the \"Cannot
    \[method\] \[url\]\" content. The method was not properly encoded for
    output in the browser.

    **Example**

        ~ curl "localhost:3000" -d "_method=<script src=http://nodesecurity.io/xss.js></script>"
        Cannot <SCRIPT SRC=HTTP://NODESECURITY.IO/XSS.JS></SCRIPT> /

    **Mitigation factors**

    Update to version 2.8.2 or disable methodOverride. It is not possible to
    avoid the vulnerability if you have enabled this middleware in the top
    of your stack.

    **History**

    * (2013-06-27) [Bug reported][2]
    * (2013-06-27) [First fix: escape req.method output - v2.8.1][3]
    * (2013-06-27) [Second fix: whitelist - v2.8.2][4]
      ## Details   {#details}

    A cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.



    [1]: https://www.npmjs.com/package/connect
    [2]: https://github.com/senchalabs/connect/issues/831
    [3]: https://github.com/senchalabs/connect/commit/277e5aad6a95d00f55571a9a0e11f2fa190d8135
    [4]: https://github.com/senchalabs/connect/commit/126187c4e12162e231b87350740045e5bb06e93a
  affected_package: connect
  vulnerable_versions:
  - "<2.8.2"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2013-7370
  cwe:
  - CWE-79
  disclosed_date: 2013-06-30
  created_date: 2013-06-30
  last_modified_date: 2013-06-30
  credit:
  - Sergio Arcos
  references:
  - https://github.com/senchalabs/connect/commit/126187c4e12162e231b87350740045e5bb06e93a
  - https://github.com/senchalabs/connect/commit/277e5aad6a95d00f55571a9a0e11f2fa190d8135
  - https://www.npmjs.com/advisories/3
  source_url: https://snyk.io/vuln/npm:connect:20130701
