---
- id: npmjs:npm:bin-links:1427
  title: Arbitrary File Write
  description: Versions of `bin-links` prior to 1.1.5 are vulnerable to an Arbitrary
    File Write. The package fails to restrict access to folders outside of the intended
    `node_modules` folder through the `bin` field. This allows attackers to create
    arbitrary files in the system. Note it is not possible to overwrite files that
    already exist.
  affected_package: bin-links
  vulnerable_versions:
  - "<1.1.5"
  severity: low
  package_manager: npm
  cwe: CWE-22
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: Daniel Ruf
- id: npmjs:npm:bin-links:1435
  title: Symlink reference outside of node_modules
  description: Versions of `bin-links` prior to 1.1.5 are vulnerable to a Symlink
    reference outside of node_modules. It is possible to create symlinks to files
    outside of the`node_modules` folder through the `bin` field. This may allow attackers
    to access unauthorized files.
  affected_package: bin-links
  vulnerable_versions:
  - "<1.1.5"
  severity: low
  package_manager: npm
  cwe: CWE-552
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: Daniel Ruf
- id: npmjs:npm:bin-links:1438
  title: Global node_modules Binary Overwrite
  description: Versions of  `bin-links` prior to 1.1.6 are vulnerable to a Global
    node_modules Binary Overwrite. It fails to prevent globally-installed binaries
    to be overwritten by other package installs. For example, if a package was installed
    globally and created a `serve` binary, any subsequent installs of packages that
    also create a `serve` binary would overwrite the first binary. This behavior is
    still allowed in local installations.
  affected_package: bin-links
  vulnerable_versions:
  - "<1.1.6"
  severity: low
  package_manager: npm
  cwe: CWE-22
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: Daniel Ruf
- id: snykio:npm:bin-links:537608
  title: Arbitrary File Overwrite
  description: |
    [bin-links][1] is a `.bin/` script linker package.

    Affected versions of this package are vulnerable to Arbitrary File
    Overwrite. It fails to prevent existing globally-installed binaries to
    be overwritten by other package installations. For example, if a package
    was installed globally and created a `serve` binary, any subsequent
    installs of packages that also create a `serve` binary would overwrite
    the first binary. This only affects files in `/usr/local/bin`.

    For `npm`, this behaviour is still allowed in local installations and
    also through install scripts. This vulnerability bypasses a user using
    the `--ignore-scripts` install option.



    [1]: https://github.com/npm/bin-links
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
  affected_package: bin-links
  vulnerable_versions:
  - "<1.1.6"
  severity: high
  package_manager: npm
  cve:
  - CVE-2019-16777
  cwe:
  - CWE-22
  disclosed_date: 2019-12-11
  created_date: 2019-12-12
  last_modified_date: 2019-12-12
  credit:
  - Daniel Ruf
  references:
  - https://blog.daniel-ruf.de/critical-design-flaw-npm-pnpm-yarn/
  - https://blog.npmjs.org/post/189618601100/binary-planting-with-the-npm-cli
  - https://nodejs.org/en/blog/vulnerability/december-2019-security-releases/
  - https://snyk.io/blog/understanding-filesystem-takeover-vulnerabilities-in-npm-javascript-package-manager
  - https://www.npmjs.com/advisories/1437
  - https://www.npmjs.com/advisories/1438
  source_url: https://snyk.io/vuln/SNYK-JS-BINLINKS-537608
- id: snykio:npm:bin-links:537609
  title: Unauthorized File Access
  description: |
    [bin-links][1] is a `.bin/` script linker package.

    Affected versions of this package are vulnerable to Unauthorized File
    Access. It is possible for packages to create symlinks to files outside
    of the`node_modules` folder through the `bin` field upon installation.

    For `npm`, a properly constructed entry in the `package.json` bin field
    would allow a package publisher to create a symlink pointing to
    arbitrary files on a user’s system when the package is installed. This
    behaviour is possible through install scripts. This vulnerability
    bypasses a user using the `--ignore-scripts` install option.



    [1]: https://github.com/npm/bin-links
  affected_package: bin-links
  vulnerable_versions:
  - "<1.1.5"
  severity: low
  package_manager: npm
  cve:
  - CVE-2019-16775
  cwe:
  - CWE-552
  disclosed_date: 2019-12-11
  created_date: 2019-12-12
  last_modified_date: 2019-12-12
  credit:
  - Daniel Ruf
  references:
  - https://blog.daniel-ruf.de/critical-design-flaw-npm-pnpm-yarn/
  - https://nodejs.org/en/blog/vulnerability/december-2019-security-releases/
  - https://www.npmjs.com/advisories/1435
  - https://www.npmjs.com/advisories/1436
  source_url: https://snyk.io/vuln/SNYK-JS-BINLINKS-537609
- id: snykio:npm:bin-links:537610
  title: Arbitrary File Write
  description: |
    [bin-links][1] is a `.bin/` script linker package.

    Affected versions of this package are vulnerable to Arbitrary File
    Write. It fails to prevent access to folders outside of the intended
    `node_modules` folder through the bin field.

    For `npm`, a properly constructed entry in the `package.json` bin field
    would allow a package publisher to modify and/or gain access to
    arbitrary files on a user’s system when the package is installed. This
    behaviour is possible through install scripts. This vulnerability
    bypasses a user using the `--ignore-scripts install` option.



    [1]: https://github.com/npm/bin-links
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
  affected_package: bin-links
  vulnerable_versions:
  - "<1.1.5"
  severity: high
  package_manager: npm
  cve:
  - CVE-2019-16776
  cwe:
  - CWE-22
  disclosed_date: 2019-12-11
  created_date: 2019-12-12
  last_modified_date: 2019-12-12
  credit:
  - Daniel Ruf
  references:
  - https://blog.daniel-ruf.de/critical-design-flaw-npm-pnpm-yarn/
  - https://nodejs.org/en/blog/vulnerability/december-2019-security-releases/
  - https://snyk.io/blog/understanding-filesystem-takeover-vulnerabilities-in-npm-javascript-package-manager/
  - https://www.npmjs.com/advisories/1427
  - https://www.npmjs.com/advisories/1434
  source_url: https://snyk.io/vuln/SNYK-JS-BINLINKS-537610
