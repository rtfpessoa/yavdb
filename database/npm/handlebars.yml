---
- id: npmjs:npm:handlebars:1164
  title: Prototype Pollution
  description: Versions of `handlebars` prior to are vulnerable to Prototype Pollution
    leading to Remote Code Execution. Templates may alter an Objects' `__proto__`
    and `__defineGetter__` properties, which may allow an attacker to execute arbitrary
    code through crafted payloads.
  affected_package: handlebars
  vulnerable_versions:
  - "<4.3.0"
  severity: high
  package_manager: npm
  cve:
  - CVE-2019-19919
  cwe: CWE-471
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: itszn
  references: https://npmjs.com/advisories/1164
  source_url: https://npmjs.com/advisories/1164
- id: npmjs:npm:handlebars:1300
  title: Denial of Service
  description: Affected versions of `handlebars` are vulnerable to Denial of Service.
    The package's parser may be forced into an endless loop while processing specially-crafted
    templates. This may allow attackers to exhaust system resources leading to Denial
    of Service.
  affected_package: handlebars
  vulnerable_versions:
  - ">=4.0.0 <4.4.5"
  severity: medium
  package_manager: npm
  cwe: CWE-400
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: Nils Knappmeier
  references: https://npmjs.com/advisories/1300
  source_url: https://npmjs.com/advisories/1300
- id: npmjs:npm:handlebars:1316
  title: Arbitrary Code Execution
  description: "Versions of `handlebars` prior to 4.5.2 are vulnerable to Arbitrary
    Code Execution. The package's lookup helper fails to properly validate templates,
    allowing attackers to submit templates that execute arbitrary JavaScript in the
    system. It can be used to run arbitrary code in a server processing Handlebars
    templates or on a victim's browser (effectively serving as Cross-Site Scripting).\n\nThe
    following template can be used to demonstrate the vulnerability:  \n```{{#with
    \"constructor\"}}\n\t{{#with split as |a|}}\n\t\t{{pop (push \"alert('Vulnerable
    Handlebars JS');\")}}\n\t\t{{#with (concat (lookup join (slice 0 1)))}}\n\t\t\t{{#each
    (slice 2 3)}}\n\t\t\t\t{{#with (apply 0 a)}}\n\t\t\t\t\t{{.}}\n\t\t\t\t{{/with}}\n\t\t\t{{/each}}\n\t\t{{/with}}\n\t{{/with}}\n{{/with}}```"
  affected_package: handlebars
  vulnerable_versions:
  - "<4.5.2"
  severity: high
  package_manager: npm
  cwe: CWE-79
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: François Lajeunesse-Robert
  references: https://npmjs.com/advisories/1316
  source_url: https://npmjs.com/advisories/1316
- id: npmjs:npm:handlebars:1324
  title: Arbitrary Code Execution
  description: Versions of `handlebars` prior to 4.5.3 are vulnerable to Arbitrary
    Code Execution. The package's lookup helper fails to properly validate templates,
    allowing attackers to submit templates that execute arbitrary JavaScript in the
    system. It is due to an incomplete fix for a [previous issue](https://www.npmjs.com/advisories/1316).
    This vulnerability can be used to run arbitrary code in a server processing Handlebars
    templates or on a victim's browser (effectively serving as Cross-Site Scripting).
  affected_package: handlebars
  vulnerable_versions:
  - "<4.5.3"
  severity: high
  package_manager: npm
  cwe: CWE-79
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: Unknown
  references: https://npmjs.com/advisories/1324
  source_url: https://npmjs.com/advisories/1324
- id: npmjs:npm:handlebars:1325
  title: Prototype Pollution
  description: Versions of `handlebars` prior to 4.5.3 are vulnerable to prototype
    pollution. It is possible to add or modify properties to the Object prototype
    through a malicious template. This may allow attackers to crash the application
    or execute Arbitrary Code in specific conditions.
  affected_package: handlebars
  vulnerable_versions:
  - "<4.5.3"
  severity: high
  package_manager: npm
  cwe: CWE-471
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: Vladyslav Babkin
  references: https://npmjs.com/advisories/1325
  source_url: https://npmjs.com/advisories/1325
- id: npmjs:npm:handlebars:61
  title: Cross-Site Scripting
  description: |-
    Versions of `handlebars` prior to 4.0.0 are affected by a cross-site scripting vulnerability when attributes in handlebar templates are not quoted.


    ## Proof of Concept
    Template:
    ```<a href={{foo}}/>```

    Input:
    ```{ 'foo' : 'test.com onload=alert(1)'}```

    Rendered result:
    ```<a href=test.com onload=alert(1)/>```
  affected_package: handlebars
  vulnerable_versions:
  - "<4.0.0"
  severity: high
  package_manager: npm
  cve:
  - CVE-2015-8861
  cwe: CWE-79
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: Matias P. Brutti
  references: https://npmjs.com/advisories/61
  source_url: https://npmjs.com/advisories/61
- id: npmjs:npm:handlebars:755
  title: Prototype Pollution
  description: Versions of `handlebars` prior to 4.0.14 are vulnerable to Prototype
    Pollution. Templates may alter an Objects' prototype, thus allowing an attacker
    to execute arbitrary code on the server.
  affected_package: handlebars
  vulnerable_versions:
  - "<=4.0.13"
  - ">=4.1.0 <4.1.2"
  severity: high
  package_manager: npm
  cwe: CWE-471
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: Mahmoud Gamal, Matías Lang
  references: https://npmjs.com/advisories/755
  source_url: https://npmjs.com/advisories/755
- id: ossindex:npm:handlebars:8399958616
  title: Cross-Site Scripting (XSS)
  description: There are cases where un-escaped characters can result in a XSS vulnerability.
  affected_package: handlebars
  vulnerable_versions:
  - "<4.0.0"
  package_manager: npm
  disclosed_date: 2016-08-03
  created_date: 2016-08-03
  last_modified_date: 2017-02-08
  credit:
  - OSSIndex
  references:
  - https://cwe.mitre.org/data/definitions/79.html
  - https://github.com/wycats/handlebars.js/commit/83b8e846a3569bd366cf0b6bdc1e4604d1a2077e
  - https://github.com/wycats/handlebars.js/pull/1083
  source_url: https://ossindex.net/resource/package/7013824523/vulnerabilities
- id: ossindex:npm:handlebars:8402280045
  title: Cross Site Scripting (XSS)
  description: "The package is vulnerable to cross site scripting due to insufficient
    input escaping.\n\n> Handlebars template[s] that [use] user input in an HTML attribute
    value [are] wide open to a trivial XSS exploit. Note that unquoted attribute values
    are still open to attack, but this set of characters at least brings Handlebars
    in line with other Mustache implementations and other template languages.\n> \n>
    -- [github.com](https://github.com/wycats/handlebars.js/pull/68)"
  affected_package: handlebars
  vulnerable_versions:
  - "<1.0.rc.1"
  package_manager: npm
  disclosed_date: 2016-12-29
  created_date: 2016-12-29
  last_modified_date: 2017-07-26
  credit:
  - OSSIndex
  references:
  - https://cwe.mitre.org/data/definitions/79.html
  - https://github.com/wycats/handlebars.js/commit/f07f70ca420e20a8c9e43545ebcbf4026718c3dd
  - https://github.com/wycats/handlebars.js/issues/68
  source_url: https://ossindex.net/resource/package/7013824523/vulnerabilities
- id: ossindex:npm:handlebars:8402514936
  title: '[CVE-2015-8861]  Improper Neutralization of Input During Web Page Generation
    ("Cross-site Scripting")'
  description: The handlebars package before 4.0.0 for Node.js allows remote attackers
    to conduct cross-site scripting (XSS) attacks by leveraging a template with an
    attribute that is not quoted.
  affected_package: handlebars
  vulnerable_versions:
  - "<4.0.0"
  package_manager: npm
  cve:
  - CVE-2015-8861
  disclosed_date: 2017-01-23
  created_date: 2017-01-23
  last_modified_date: 2017-07-30
  credit:
  - OSSIndex
  references:
  - http://www.openwall.com/lists/oss-security/2016/04/20/11
  - http://www.securityfocus.com/bid/96434
  - https://www.sourceclear.com/blog/handlebars_vulnerability_research_findings/
  - https://www.tenable.com/security/tns-2016-18
  source_url: https://ossindex.net/resource/package/7013824523/vulnerabilities
- id: snykio:npm:handlebars:173692
  title: Prototype Pollution
  description: "[handlebars][1] is a extension to the Mustache templating language.\n\nAffected
    versions of this package are vulnerable to Prototype Pollution.\nTemplates may
    alter an Objects\\' prototype, thus allowing an attacker to\nexecute arbitrary
    code on the server.\n\n\n\n[1]: https://www.npmjs.com/package/handlebars\n\\nPrototype
    Pollution is a vulnerability affecting JavaScript. Prototype\nPollution refers
    to the ability to inject properties into existing\nJavaScript language construct
    prototypes, such as objects. JavaScript\nallows all Object attributes to be altered,
    including their magical\nattributes such as `_proto_`, `constructor` and `prototype`.
    An attacker\nmanipulates these attributes to overwrite, or pollute, a JavaScript\napplication
    object prototype of the base object by injecting other\nvalues. Properties on
    the `Object.prototype` are then inherited by all\nthe JavaScript objects through
    the prototype chain. When that happens,\nthis leads to either denial of service
    by triggering JavaScript\nexceptions, or it tampers with the application source
    code to force the\ncode path that the attacker injects, thereby leading to remote
    code\nexecution.\n\nThere are two main ways in which the pollution of prototypes
    occurs:\n\n* Unsafe `Object` recursive merge\n\n* Property definition by path\n\n###
    Unsafe Object recursive merge   {#unsafe-object-recursive-merge}\n\nThe logic
    of a vulnerable recursive merge function follows the following\nhigh-level model:\n\n
    \   merge (target, source)\n    \n      foreach property of source\n    \n        if
    property exists and is an object on both the target and the source\n    \n          merge(target[property],
    source[property])\n    \n        else\n    \n          target[property] = source[property]\n\n&lt;br&gt;\n\nWhen
    the source object contains a property named `_proto_` defined with\n`Object.defineProperty()`
    , the condition that checks if the property\nexists and is an object on both the
    target and the source passes and the\nmerge recurses with the target, being the
    prototype of `Object` and the\nsource of `Object` as defined by the attacker.
    Properties are then\ncopied on the `Object` prototype.\n\nClone operations are
    a special sub-class of unsafe recursive merges,\nwhich occur when a recursive
    merge is conducted on an empty object:\n`merge({},source)`.\n\n`lodash` and `Hoek`
    are examples of libraries susceptible to recursive\nmerge attacks.\n\n### Property
    definition by path   {#property-definition-by-path}\n\nThere are a few JavaScript
    libraries that use an API to define property\nvalues on an object based on a given
    path. The function that is\ngenerally affected contains this signature: `theFunction(object,
    path,\nvalue)`\n\nIf the attacker can control the value of “path”, they can set
    this value\nto `_proto_.myValue`. `myValue` is then assigned to the prototype
    of the\nclass of the object.\n\n"
  affected_package: handlebars
  vulnerable_versions:
  - "<4.0.14"
  - ">=4.1.0 <4.1.2"
  severity: high
  package_manager: npm
  cwe:
  - CWE-471
  disclosed_date: 2018-12-28
  created_date: 2019-02-14
  last_modified_date: 2019-02-14
  credit:
  - Mahmoud Gamal
  - Matias Lang
  references:
  - https://github.com/wycats/handlebars.js/commit/7372d4e9dffc9d70c09671aa28b9392a1577fd86
  - https://github.com/wycats/handlebars.js/issues/1495
  - https://www.npmjs.com/advisories/755
  source_url: https://snyk.io/vuln/SNYK-JS-HANDLEBARS-173692
- id: snykio:npm:handlebars:174183
  title: Prototype Pollution
  description: "[handlebars][1] is a extension to the Mustache templating language.\n\nAffected
    versions of this package are vulnerable to Prototype Pollution.\nA Prototype Pollution
    allowing Remote Code Execution can be exploited\nusing the constructor, via the
    \\'lookup\\' helper. This vulnerability is\ndue to an incomplete fix for: `SNYK-JS-HANDLEBARS-173692`\n\n\n\n[1]:
    https://www.npmjs.com/package/handlebars\n\\nPrototype Pollution is a vulnerability
    affecting JavaScript. Prototype\nPollution refers to the ability to inject properties
    into existing\nJavaScript language construct prototypes, such as objects. JavaScript\nallows
    all Object attributes to be altered, including their magical\nattributes such
    as `_proto_`, `constructor` and `prototype`. An attacker\nmanipulates these attributes
    to overwrite, or pollute, a JavaScript\napplication object prototype of the base
    object by injecting other\nvalues. Properties on the `Object.prototype` are then
    inherited by all\nthe JavaScript objects through the prototype chain. When that
    happens,\nthis leads to either denial of service by triggering JavaScript\nexceptions,
    or it tampers with the application source code to force the\ncode path that the
    attacker injects, thereby leading to remote code\nexecution.\n\nThere are two
    main ways in which the pollution of prototypes occurs:\n\n* Unsafe `Object` recursive
    merge\n\n* Property definition by path\n\n### Unsafe Object recursive merge   {#unsafe-object-recursive-merge}\n\nThe
    logic of a vulnerable recursive merge function follows the following\nhigh-level
    model:\n\n    merge (target, source)\n    \n      foreach property of source\n
    \   \n        if property exists and is an object on both the target and the source\n
    \   \n          merge(target[property], source[property])\n    \n        else\n
    \   \n          target[property] = source[property]\n\n&lt;br&gt;\n\nWhen the
    source object contains a property named `_proto_` defined with\n`Object.defineProperty()`
    , the condition that checks if the property\nexists and is an object on both the
    target and the source passes and the\nmerge recurses with the target, being the
    prototype of `Object` and the\nsource of `Object` as defined by the attacker.
    Properties are then\ncopied on the `Object` prototype.\n\nClone operations are
    a special sub-class of unsafe recursive merges,\nwhich occur when a recursive
    merge is conducted on an empty object:\n`merge({},source)`.\n\n`lodash` and `Hoek`
    are examples of libraries susceptible to recursive\nmerge attacks.\n\n### Property
    definition by path   {#property-definition-by-path}\n\nThere are a few JavaScript
    libraries that use an API to define property\nvalues on an object based on a given
    path. The function that is\ngenerally affected contains this signature: `theFunction(object,
    path,\nvalue)`\n\nIf the attacker can control the value of “path”, they can set
    this value\nto `_proto_.myValue`. `myValue` is then assigned to the prototype
    of the\nclass of the object.\n\n"
  affected_package: handlebars
  vulnerable_versions:
  - ">=3.0.0 <3.0.7"
  - ">=4.0.0 <4.0.14"
  - ">=4.1.0 <4.1.2"
  severity: high
  package_manager: npm
  cwe:
  - CWE-471
  disclosed_date: 2019-04-13
  created_date: 2019-04-14
  last_modified_date: 2019-04-14
  credit:
  - Nils Knappmeier
  references:
  - https://github.com/wycats/handlebars.js/commit/cd38583216dce3252831916323202749431c773e
  - https://github.com/wycats/handlebars.js/issues/1495
  - https://snyk.io/vuln/SNYK-JS-HANDLEBARS-173692
  source_url: https://snyk.io/vuln/SNYK-JS-HANDLEBARS-174183
- id: snykio:npm:handlebars:20110425
  title: Cross-site Scripting (XSS)
  description: |+
    [handlebars][1] provides the power necessary to let you build semantic
    templates.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks. Only the `<` and `>` chars were escaped. This meant that
    any Handlebars template that user used input in an HTML attribute value
    was wide open to a trivial XSS exploit. Note that unquoted attribute
    values are still open to attack, but this set of characters at least
    brings Handlebars in line with other Mustache implementations and other
    template languages.



    [1]: https://github.com/wycats/handlebars.js/
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: handlebars
  vulnerable_versions:
  - "<=1.0.0-beta.3"
  severity: medium
  package_manager: npm
  cwe:
  - CWE-79
  disclosed_date: 2015-11-06
  created_date: 2015-11-06
  last_modified_date: 2015-11-06
  references:
  - https://github.com/wycats/handlebars.js/pull/68
  source_url: https://snyk.io/vuln/npm:handlebars:20110425
- id: snykio:npm:handlebars:20151207
  title: Cross-site Scripting (XSS)
  description: |+
    [handlebars][1] provides the power necessary to let you build semantic
    templates.

    When using attributes without quotes in a handlebars template, an
    attacker can manipulate the input to introduce additional attributes,
    potentially executing code. This may lead to a Cross-site Scripting
    (XSS) vulnerability, assuming an attacker can influence the value
    entered into the template. If the handlebars template is used to render
    user-generated content, this vulnerability may escalate to a persistent
    XSS vulnerability.



    [1]: https://github.com/wycats/handlebars.js/
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    **Example:**

    Assume handlebars was used to display user comments and avatar, using
    the following template: `<img src={{avatarUrl}}><pre>{{comment}}</pre>`

    If an attacker spoofed their avatar URL and provided the following
    value: `http://evil.org/avatar.png onload=alert(document.cookie)`

    The resulting HTML would be the following, triggering the script once
    the image loads: `<img src=http://evil.org/avatar.png
    onload=alert(document.cookie)><pre>Gotcha!</pre>`

  affected_package: handlebars
  vulnerable_versions:
  - "<4.0.0"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2015-8861
  cwe:
  - CWE-79
  disclosed_date: 2015-12-07
  created_date: 2015-12-14
  last_modified_date: 2015-12-14
  credit:
  - Matias P. Brutti
  references:
  - https://github.com/wycats/handlebars.js/commit/83b8e846a3569bd366cf0b6bdc1e4604d1a2077e
  source_url: https://snyk.io/vuln/npm:handlebars:20151207
- id: snykio:npm:handlebars:469063
  title: Prototype Pollution
  description: "[handlebars][1] is a extension to the Mustache templating language.\n\nAffected
    versions of this package are vulnerable to Prototype Pollution.\nTemplates may
    alter an Object\\'s `__proto__` and `__defineGetter__`\nproperties, which may
    allow an attacker to execute arbitrary code on the\nserver through crafted payloads.\n\n\n\n[1]:
    https://www.npmjs.com/package/handlebars\n\\nPrototype Pollution is a vulnerability
    affecting JavaScript. Prototype\nPollution refers to the ability to inject properties
    into existing\nJavaScript language construct prototypes, such as objects. JavaScript\nallows
    all Object attributes to be altered, including their magical\nattributes such
    as `_proto_`, `constructor` and `prototype`. An attacker\nmanipulates these attributes
    to overwrite, or pollute, a JavaScript\napplication object prototype of the base
    object by injecting other\nvalues. Properties on the `Object.prototype` are then
    inherited by all\nthe JavaScript objects through the prototype chain. When that
    happens,\nthis leads to either denial of service by triggering JavaScript\nexceptions,
    or it tampers with the application source code to force the\ncode path that the
    attacker injects, thereby leading to remote code\nexecution.\n\nThere are two
    main ways in which the pollution of prototypes occurs:\n\n* Unsafe `Object` recursive
    merge\n\n* Property definition by path\n\n### Unsafe Object recursive merge   {#unsafe-object-recursive-merge}\n\nThe
    logic of a vulnerable recursive merge function follows the following\nhigh-level
    model:\n\n    merge (target, source)\n    \n      foreach property of source\n
    \   \n        if property exists and is an object on both the target and the source\n
    \   \n          merge(target[property], source[property])\n    \n        else\n
    \   \n          target[property] = source[property]\n\n&lt;br&gt;\n\nWhen the
    source object contains a property named `_proto_` defined with\n`Object.defineProperty()`
    , the condition that checks if the property\nexists and is an object on both the
    target and the source passes and the\nmerge recurses with the target, being the
    prototype of `Object` and the\nsource of `Object` as defined by the attacker.
    Properties are then\ncopied on the `Object` prototype.\n\nClone operations are
    a special sub-class of unsafe recursive merges,\nwhich occur when a recursive
    merge is conducted on an empty object:\n`merge({},source)`.\n\n`lodash` and `Hoek`
    are examples of libraries susceptible to recursive\nmerge attacks.\n\n### Property
    definition by path   {#property-definition-by-path}\n\nThere are a few JavaScript
    libraries that use an API to define property\nvalues on an object based on a given
    path. The function that is\ngenerally affected contains this signature: `theFunction(object,
    path,\nvalue)`\n\nIf the attacker can control the value of “path”, they can set
    this value\nto `_proto_.myValue`. `myValue` is then assigned to the prototype
    of the\nclass of the object.\n\n"
  affected_package: handlebars
  vulnerable_versions:
  - "<4.3.0"
  severity: high
  package_manager: npm
  cve:
  - CVE-2019-19919
  cwe:
  - CWE-471
  disclosed_date: 2019-09-24
  created_date: 2019-09-25
  last_modified_date: 2019-09-25
  credit:
  - itszn
  references:
  - https://github.com/wycats/handlebars.js/blob/master/release-notes.md#v430---september-24th-2019
  - https://github.com/wycats/handlebars.js/commit/213c0bbe3c4bd83a534d67384e5afa0000347ff6
  - https://github.com/wycats/handlebars.js/commit/7b67a29a8c926b38af265c727ff6551fbb277111
  - https://github.com/wycats/handlebars.js/issues/1558
  - https://www.npmjs.com/advisories/1164
  source_url: https://snyk.io/vuln/SNYK-JS-HANDLEBARS-469063
- id: snykio:npm:handlebars:480388
  title: Denial of Service (DoS)
  description: |
    [handlebars][1] is an extension to the Mustache templating language.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS). The package\'s parser may be forced into an endless loop while
    processing specially-crafted templates, which may allow attackers to
    exhaust system resources leading to Denial of Service.



    [1]: https://www.npmjs.com/package/handlebars
  affected_package: handlebars
  vulnerable_versions:
  - ">=4.0.0 <4.4.5"
  severity: high
  package_manager: npm
  cwe:
  - CWE-400
  disclosed_date: 2019-10-30
  created_date: 2019-11-05
  last_modified_date: 2019-11-05
  credit:
  - Unknown
  references:
  - https://github.com/wycats/handlebars.js/commit/8d5530ee2c3ea9f0aee3fde310b9f36887d00b8b
  - https://github.com/wycats/handlebars.js/issues/1579
  - https://www.npmjs.com/advisories/1300
  source_url: https://snyk.io/vuln/SNYK-JS-HANDLEBARS-480388
- id: snykio:npm:handlebars:534478
  title: Arbitrary Code Execution
  description: |
    [handlebars][1] is a extension to the Mustache templating language.

    Affected versions of this package are vulnerable to Arbitrary Code
    Execution. The package\'s lookup helper doesn\'t validate templates
    correctly, allowing attackers to submit templates that execute arbitrary
    JavaScript in the system.



    [1]: https://www.npmjs.com/package/handlebars
  affected_package: handlebars
  vulnerable_versions:
  - "<4.5.3"
  severity: high
  package_manager: npm
  cwe:
  - CWE-94
  disclosed_date: 2019-11-14
  created_date: 2019-11-15
  last_modified_date: 2019-11-15
  credit:
  - Francois LajeunesseRobert
  references:
  - https://www.npmjs.com/advisories/1316
  - https://www.npmjs.com/advisories/1324
  source_url: https://snyk.io/vuln/SNYK-JS-HANDLEBARS-534478
- id: snykio:npm:handlebars:534988
  title: Prototype Pollution
  description: "[handlebars][1] is an extension to the Mustache templating language.\n\nAffected
    versions of this package are vulnerable to Prototype Pollution.\nIt is possible
    to add or modify properties to the Object prototype\nthrough a malicious template.
    This may allow attackers to crash the\napplication or execute Arbitrary Code in
    specific conditions.\n\n\n\n[1]: https://www.npmjs.com/package/handlebars\n\\nPrototype
    Pollution is a vulnerability affecting JavaScript. Prototype\nPollution refers
    to the ability to inject properties into existing\nJavaScript language construct
    prototypes, such as objects. JavaScript\nallows all Object attributes to be altered,
    including their magical\nattributes such as `_proto_`, `constructor` and `prototype`.
    An attacker\nmanipulates these attributes to overwrite, or pollute, a JavaScript\napplication
    object prototype of the base object by injecting other\nvalues. Properties on
    the `Object.prototype` are then inherited by all\nthe JavaScript objects through
    the prototype chain. When that happens,\nthis leads to either denial of service
    by triggering JavaScript\nexceptions, or it tampers with the application source
    code to force the\ncode path that the attacker injects, thereby leading to remote
    code\nexecution.\n\nThere are two main ways in which the pollution of prototypes
    occurs:\n\n* Unsafe `Object` recursive merge\n\n* Property definition by path\n\n###
    Unsafe Object recursive merge   {#unsafe-object-recursive-merge}\n\nThe logic
    of a vulnerable recursive merge function follows the following\nhigh-level model:\n\n
    \   merge (target, source)\n    \n      foreach property of source\n    \n        if
    property exists and is an object on both the target and the source\n    \n          merge(target[property],
    source[property])\n    \n        else\n    \n          target[property] = source[property]\n\n&lt;br&gt;\n\nWhen
    the source object contains a property named `_proto_` defined with\n`Object.defineProperty()`
    , the condition that checks if the property\nexists and is an object on both the
    target and the source passes and the\nmerge recurses with the target, being the
    prototype of `Object` and the\nsource of `Object` as defined by the attacker.
    Properties are then\ncopied on the `Object` prototype.\n\nClone operations are
    a special sub-class of unsafe recursive merges,\nwhich occur when a recursive
    merge is conducted on an empty object:\n`merge({},source)`.\n\n`lodash` and `Hoek`
    are examples of libraries susceptible to recursive\nmerge attacks.\n\n### Property
    definition by path   {#property-definition-by-path}\n\nThere are a few JavaScript
    libraries that use an API to define property\nvalues on an object based on a given
    path. The function that is\ngenerally affected contains this signature: `theFunction(object,
    path,\nvalue)`\n\nIf the attacker can control the value of “path”, they can set
    this value\nto `_proto_.myValue`. `myValue` is then assigned to the prototype
    of the\nclass of the object.\n\n"
  affected_package: handlebars
  vulnerable_versions:
  - "<4.5.3"
  severity: high
  package_manager: npm
  cwe:
  - CWE-400
  disclosed_date: 2019-11-18
  created_date: 2019-11-20
  last_modified_date: 2019-11-20
  credit:
  - Vladyslav Babkin
  references:
  - https://www.npmjs.com/advisories/1325
  source_url: https://snyk.io/vuln/SNYK-JS-HANDLEBARS-534988
