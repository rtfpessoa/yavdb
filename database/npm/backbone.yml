---
- id: npmjs:npm:backbone:108
  title: Cross-Site Scripting
  description: "Affected versions of `backbone` are vulnerable to cross-site scripting
    when users are allowed to supply input to the `Model#Escape` function, and the
    output is then written to the DOM. \n\nThe vulnerability occurs as a result of
    the regular expression used to encode metacharacters failing to take HTML Entities
    such as `&#60;` into account."
  affected_package: backbone
  vulnerable_versions:
  - "<= 0.3.3"
  severity: high
  package_manager: npm
  cve:
  - CVE-2016-10537
  cwe: CWE-725
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: Unknown
- id: ossindex:npm:backbone:8399184065
  title: Cross Site Scripting
  description: "> There exists a potential Cross Site Scripting vulnerability in the
    `Model#Escape` function if a user is able to supply input.\n> \n> This is due
    to the regex that's replacing things to miss the conversion of things such as
    `&#60;` to `<.`\n> \n> -- [nodesecurity.io](https://nodesecurity.io/advisories/108)"
  affected_package: backbone
  vulnerable_versions:
  - "<=0.3.3"
  package_manager: npm
  disclosed_date: 2016-06-06
  created_date: 2016-06-06
  last_modified_date: 2017-04-27
  credit:
  - OSSIndex
  references:
  - https://cwe.mitre.org/data/definitions/79.html
  - https://github.com/jashkenas/backbone/compare/0.3.3...0.5.0#diff-0d56d0d310de7ff18b3cef9c2f8f75dcL1008
  - https://nodesecurity.io/advisories/108
  source_url: https://ossindex.net/resource/package/7012103395/vulnerabilities
- id: ossindex:npm:backbone:8400185147
  title: Cross Site Scripting (XSS)
  description: The todo example code is vulnerable to a Cross Site Scripting attack.
  affected_package: backbone
  vulnerable_versions:
  - "<0.9.9"
  package_manager: npm
  disclosed_date: 2016-10-17
  created_date: 2016-10-17
  last_modified_date: 2016-10-17
  credit:
  - OSSIndex
  references:
  - https://cwe.mitre.org/data/definitions/79.html
  - https://github.com/jashkenas/backbone/commit/71d0fe3dccffc01f7badba5af4b2cae1c5af1aa8
  - https://github.com/jashkenas/backbone/issues/1540
  source_url: https://ossindex.net/resource/package/7012103395/vulnerabilities
- id: ossindex:npm:backbone:8400185164
  title: Cross Site Scripting (XSS) in Todos example
  description: The supplied "Todos" example does not escape its data, making it possible
    to inject and execute JavaScript code.
  affected_package: backbone
  vulnerable_versions:
  - "<0.9.9"
  package_manager: npm
  disclosed_date: 2016-10-17
  created_date: 2016-10-17
  last_modified_date: 2017-02-22
  credit:
  - OSSIndex
  references:
  - https://github.com/jashkenas/backbone/issues/1677
  source_url: https://ossindex.net/resource/package/7012103395/vulnerabilities
- id: ossindex:npm:backbone:8401420911
  title: "[Unconfirmed] Possible Cross Site Scripting (XSS)"
  description: |-
    Single quotes and forward slashes are not being escaped as per OWASP recommendations, resulting in the possibility of an XSS vulnerability.

    Flagged as unconfirmed since there is no provided/known vulnerability.
  affected_package: backbone
  vulnerable_versions:
  - "<0.5.0"
  package_manager: npm
  disclosed_date: 2016-11-10
  created_date: 2016-11-10
  last_modified_date: 2017-02-22
  credit:
  - OSSIndex
  references:
  - https://cwe.mitre.org/data/definitions/79.html
  - https://github.com/jashkenas/backbone/issues/262
  - https://github.com/jashkenas/backbone/pull/349
  - https://github.com/jashkenas/backbone/pull/349/commits/82c288c91e9c3781e3afeedf1aa30626e6f9a788
  source_url: https://ossindex.net/resource/package/7012103395/vulnerabilities
- id: snykio:npm:backbone:20110701
  title: Cross-site Scripting (XSS)
  description: |+
    Potential XSS Exploit With User-Supplied Data in Model#escape

    In applications that use the escape function, a specially-crafted
    payload could execute arbitrary JavaScript in the context of the current
    domain (\"XSS\").

    This vulnerability has not been assigned CVE identifier.

    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: backbone
  vulnerable_versions:
  - "<0.5.0"
  severity: medium
  package_manager: npm
  cwe:
  - CWE-79
  disclosed_date: 2015-11-06
  created_date: 2015-11-06
  last_modified_date: 2015-11-06
  references:
  - http://backbonejs.org/#changelog
  source_url: https://snyk.io/vuln/npm:backbone:20110701
- id: snykio:npm:backbone:20160523
  title: Cross-site Scripting (XSS)
  description: |+
    backbone is a module that adds in structure to a JavaScript heavy
    application through key-value pairs and custom events connecting to your
    RESTful API through JSON

    `backbone` is the npm package for Backbone.js, which uses key-value
    binding and custom events to connects existing API over a RESTful JSON
    interface.

    Backbone has a security control in its `Escape` function, which performs
    HTML encoding. However, the regex is incomplete, notably not properly
    handling cases such as HTML entities (e.g. not treating `&#60` as `<`).
    HTML Entities are often overlooked by HTML Encoding security controls,
    you can read more detail about a similar one in the [`Marked`
    package][1]

    This exposes a Cross-site Scripting (XSS) vulnerability if users can
    influence the input provided.



    [1]: https://snyk.io/blog/marked-xss-vulnerability/
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: backbone
  vulnerable_versions:
  - "<0.1.2"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2016-10537
  cwe:
  - CWE-79
  disclosed_date: 2016-05-23
  created_date: 2016-06-22
  last_modified_date: 2016-06-22
  credit:
  - Unknown
  source_url: https://snyk.io/vuln/npm:backbone:20160523
