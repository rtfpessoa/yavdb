---
- id: snykio:npm:rollup-plugin-serve-favicon:585950
  title: Directory Traversal
  description: "[rollup-plugin-serve-favicon][1] is a rollup plugin to serve bundles.\n\nAffected
    versions of this package are vulnerable to Directory Traversal.\nThere is no path
    sanitization in `readFile` operation.\n\n### PoC by JHU System Security Lab   {#poc-by-jhu-system-security-lab}\n\nStep
    1: start a server\n\n      var server = require(\"rollup-plugin-serve\");\n        server({\n
    \         host: 'localhost',\n          port: 9000\n        })\n\nStep 2: create
    a file named `file` in the parent directory of the\nserver\\'s home directory.
    \ \nStep 3: `curl -v --path-as-is http://127.0.0.1:9000/../file`\n\n\n\n[1]: https://www.npmjs.com/package/rollup-plugin-serve-favicon\n\\nA
    Directory Traversal attack (also known as path traversal) aims to\naccess files
    and directories that are stored outside the intended\nfolder. By manipulating
    files with \\\"dot-dot-slash (../)\\\" sequences and\nits variations, or by using
    absolute file paths, it may be possible to\naccess arbitrary files and directories
    stored on file system, including\napplication source code, configuration, and
    other critical system files.\n\nDirectory Traversal vulnerabilities can be generally
    divided into two\ntypes:\n\n* **Information Disclosure**\\: Allows the attacker
    to gain information\n  about the folder structure or read the contents of sensitive
    files on\n  the system.\n\n`st` is a module for serving static files on web pages,
    and contains a\n[vulnerability of this type][1]. In our example, we will serve
    files\nfrom the `public` route.\n\nIf an attacker requests the following URL from
    our server, it will in\nturn leak the sensitive private key of the root user.\n\n
    \   curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\n\n**Note**
    `%2e` is the URL encoded version of `.` (dot).\n\n* **Writing arbitrary files**\\:
    Allows the attacker to create or replace\n  existing files. This type of vulnerability
    is also known as\n  `Zip-Slip`.\n\nOne way to achieve this is by using a malicious
    `zip` archive that holds\npath traversal filenames. When each filename in the
    zip archive gets\nconcatenated to the target extraction folder, without validation,
    the\nfinal path ends up outside of the target folder. If an executable or a\nconfiguration
    file is overwritten with a file containing malicious code,\nthe problem can turn
    into an arbitrary code execution issue quite\neasily.\n\nThe following is an example
    of a `zip` archive with one benign file and\none malicious file. Extracting the
    malicious file will result in\ntraversing out of the target folder, ending up
    in `/root/.ssh/`\noverwriting the `authorized_keys` file:\n\n    2018-04-15 22:04:29
    .....           19           19  good.txt\n    2018-04-15 22:04:42 .....           20
    \          20  ../../../../../../root/.ssh/authorized_keys\n\n\n\n[1]: https://snyk.io/vuln/npm:st:20140206\n"
  affected_package: rollup-plugin-serve-favicon
  vulnerable_versions:
  - "*"
  severity: high
  package_manager: npm
  cve:
  - CVE-2020-7684
  cwe:
  - CWE-22
  disclosed_date: 2020-06-20
  created_date: 2020-06-20
  last_modified_date: 2020-06-20
  credit:
  - JHU System Security Lab
  references:
  - https://github.com/thgh/rollup-plugin-serve/commit/3d144f2f47e86fcba34f5a144968da94220e3969
  source_url: https://snyk.io/vuln/SNYK-JS-ROLLUPPLUGINSERVEFAVICON-585950
