---
- id: npmjs:npm:systeminformation:1590
  title: Command Injection
  description: |+
    There is a command injection vulnerability in systeminformation which allows for injection of commands to the command line of your machine. Affected commands: `inetLatency()`.

    The problem was fixed by sanitizing the shell string.

  affected_package: systeminformation
  vulnerable_versions:
  - "<4.31.1"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2020-26274
  cwe: CWE-78
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: Anonymous
- id: snykio:npm:systeminformation:1021909
  title: Command Injection
  description: |
    [systeminformation][1] is a Simple system and OS information library

    Affected versions of this package are vulnerable to Command Injection.
    This package is vulnerable to Command Injection. The attacker can
    concatenate curl\'s parameters to overwrite Javascript files and then
    execute any OS commands.



    [1]: https://www.npmjs.com/package/systeminformation
  affected_package: systeminformation
  vulnerable_versions:
  - "<4.27.11"
  severity: high
  package_manager: npm
  cve:
  - CVE-2020-7752
  cwe:
  - CWE-78
  disclosed_date: 2020-10-25
  created_date: 2020-10-26
  last_modified_date: 2020-10-26
  credit:
  - EffectRenan
  references:
  - https://github.com/sebhildebrandt/systeminformation/blob/master/lib/internet.js
  - https://github.com/sebhildebrandt/systeminformation/commit/931fecaec2c1a7dcc10457bb8cd552d08089da61
  source_url: https://snyk.io/vuln/SNYK-JS-SYSTEMINFORMATION-1021909
- id: snykio:npm:systeminformation:1023168
  title: Command Injection
  description: |
    [systeminformation][1] is a Simple system and OS information library

    Affected versions of this package are vulnerable to Command Injection
    via `is.services()`, `is.inetChecksite()`, `si.inetLatency()`,
    `si.networkStats()`, `is.services()` and `si.processLoad()`.



    [1]: https://www.npmjs.com/package/systeminformation
  affected_package: systeminformation
  vulnerable_versions:
  - "<4.26.2"
  severity: high
  package_manager: npm
  cwe:
  - CWE-78
  disclosed_date: 2020-10-27
  created_date: 2020-10-28
  last_modified_date: 2020-10-28
  credit:
  - Unknown
  references:
  - https://github.com/sebhildebrandt/systeminformation/security/advisories/GHSA-fj59-f6c3-3vw4
  source_url: https://snyk.io/vuln/SNYK-JS-SYSTEMINFORMATION-1023168
- id: snykio:npm:systeminformation:1043753
  title: Prototype Pollution
  description: "[systeminformation][1] is a Simple system and OS information library\n\nAffected
    versions of this package are vulnerable to Prototype Pollution.\nThe attacker
    can overwrite the properties and functions of an object,\nwhich can lead to executing
    OS commands.\n\n\n\n[1]: https://www.npmjs.com/package/systeminformation\n\\nPrototype
    Pollution is a vulnerability affecting JavaScript. Prototype\nPollution refers
    to the ability to inject properties into existing\nJavaScript language construct
    prototypes, such as objects. JavaScript\nallows all Object attributes to be altered,
    including their magical\nattributes such as `_proto_`, `constructor` and `prototype`.
    An attacker\nmanipulates these attributes to overwrite, or pollute, a JavaScript\napplication
    object prototype of the base object by injecting other\nvalues. Properties on
    the `Object.prototype` are then inherited by all\nthe JavaScript objects through
    the prototype chain. When that happens,\nthis leads to either denial of service
    by triggering JavaScript\nexceptions, or it tampers with the application source
    code to force the\ncode path that the attacker injects, thereby leading to remote
    code\nexecution.\n\nThere are two main ways in which the pollution of prototypes
    occurs:\n\n* Unsafe `Object` recursive merge\n\n* Property definition by path\n\n###
    Unsafe Object recursive merge   {#unsafe-object-recursive-merge}\n\nThe logic
    of a vulnerable recursive merge function follows the following\nhigh-level model:\n\n
    \   merge (target, source)\n    \n      foreach property of source\n    \n        if
    property exists and is an object on both the target and the source\n    \n          merge(target[property],
    source[property])\n    \n        else\n    \n          target[property] = source[property]\n\n\n\nWhen
    the source object contains a property named `_proto_` defined with\n`Object.defineProperty()`
    , the condition that checks if the property\nexists and is an object on both the
    target and the source passes and the\nmerge recurses with the target, being the
    prototype of `Object` and the\nsource of `Object` as defined by the attacker.
    Properties are then\ncopied on the `Object` prototype.\n\nClone operations are
    a special sub-class of unsafe recursive merges,\nwhich occur when a recursive
    merge is conducted on an empty object:\n`merge({},source)`.\n\n`lodash` and `Hoek`
    are examples of libraries susceptible to recursive\nmerge attacks.\n\n### Property
    definition by path   {#property-definition-by-path}\n\nThere are a few JavaScript
    libraries that use an API to define property\nvalues on an object based on a given
    path. The function that is\ngenerally affected contains this signature: `theFunction(object,
    path,\nvalue)`\n\nIf the attacker can control the value of “path”, they can set
    this value\nto `_proto_.myValue`. `myValue` is then assigned to the prototype
    of the\nclass of the object.\n\n"
  affected_package: systeminformation
  vulnerable_versions:
  - "<4.30.2"
  severity: high
  package_manager: npm
  cve:
  - CVE-2020-7778
  cwe:
  - CWE-400
  disclosed_date: 2020-11-23
  created_date: 2020-11-25
  last_modified_date: 2020-11-25
  credit:
  - EffectRenan
  references:
  - https://gist.github.com/EffectRenan/b434438938eed0b21b376cedf5c81e80
  - https://github.com/sebhildebrandt/systeminformation/commit/11103a447ab9550c25f1fbec7e6d903720b3fea8#diff-970ae648187190f86bafc8f193b7538200eba164fad0674428b6487582c089cc
  - https://github.com/sebhildebrandt/systeminformation/commit/73dce8d717ca9c3b7b0d0688254b8213b957f0fa#diff-970ae648187190f86bafc8f193b7538200eba164fad0674428b6487582c089cc
  source_url: https://snyk.io/vuln/SNYK-JS-SYSTEMINFORMATION-1043753
- id: snykio:npm:systeminformation:1047312
  title: Prototype Pollution
  description: "[systeminformation][1] is a Simple system and OS information library\n\nAffected
    versions of this package are vulnerable to Prototype Pollution\nvia improper shell
    sanitations in `si.inetChecksite()` leading to\nPrototype Pollution which can
    lead to Command Injection.\n\n*Note:* This is due to an incomplete fix in [CVE-2020-7778][2].\n\n\n\n[1]:
    https://www.npmjs.com/package/systeminformation\n[2]: https://snyk.io/vuln/SNYK-JS-SYSTEMINFORMATION-1043753\n\\nPrototype
    Pollution is a vulnerability affecting JavaScript. Prototype\nPollution refers
    to the ability to inject properties into existing\nJavaScript language construct
    prototypes, such as objects. JavaScript\nallows all Object attributes to be altered,
    including their magical\nattributes such as `_proto_`, `constructor` and `prototype`.
    An attacker\nmanipulates these attributes to overwrite, or pollute, a JavaScript\napplication
    object prototype of the base object by injecting other\nvalues. Properties on
    the `Object.prototype` are then inherited by all\nthe JavaScript objects through
    the prototype chain. When that happens,\nthis leads to either denial of service
    by triggering JavaScript\nexceptions, or it tampers with the application source
    code to force the\ncode path that the attacker injects, thereby leading to remote
    code\nexecution.\n\nThere are two main ways in which the pollution of prototypes
    occurs:\n\n* Unsafe `Object` recursive merge\n\n* Property definition by path\n\n###
    Unsafe Object recursive merge   {#unsafe-object-recursive-merge}\n\nThe logic
    of a vulnerable recursive merge function follows the following\nhigh-level model:\n\n
    \   merge (target, source)\n    \n      foreach property of source\n    \n        if
    property exists and is an object on both the target and the source\n    \n          merge(target[property],
    source[property])\n    \n        else\n    \n          target[property] = source[property]\n\n\n\nWhen
    the source object contains a property named `_proto_` defined with\n`Object.defineProperty()`
    , the condition that checks if the property\nexists and is an object on both the
    target and the source passes and the\nmerge recurses with the target, being the
    prototype of `Object` and the\nsource of `Object` as defined by the attacker.
    Properties are then\ncopied on the `Object` prototype.\n\nClone operations are
    a special sub-class of unsafe recursive merges,\nwhich occur when a recursive
    merge is conducted on an empty object:\n`merge({},source)`.\n\n`lodash` and `Hoek`
    are examples of libraries susceptible to recursive\nmerge attacks.\n\n### Property
    definition by path   {#property-definition-by-path}\n\nThere are a few JavaScript
    libraries that use an API to define property\nvalues on an object based on a given
    path. The function that is\ngenerally affected contains this signature: `theFunction(object,
    path,\nvalue)`\n\nIf the attacker can control the value of “path”, they can set
    this value\nto `_proto_.myValue`. `myValue` is then assigned to the prototype
    of the\nclass of the object.\n\n"
  affected_package: systeminformation
  vulnerable_versions:
  - "<4.30.5"
  severity: high
  package_manager: npm
  cve:
  - CVE-2020-26245
  cwe:
  - CWE-400
  - CWE-471
  - CWE-78
  disclosed_date: 2020-11-29
  created_date: 2020-11-29
  last_modified_date: 2020-11-29
  credit:
  - EffectRenan
  references:
  - https://github.com/sebhildebrandt/systeminformation/commit/8113ff0e87b2f422a5756c48f1057575e73af016
  source_url: https://snyk.io/vuln/SNYK-JS-SYSTEMINFORMATION-1047312
