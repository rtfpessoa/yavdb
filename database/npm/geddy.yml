---
- id: npmjs:npm:geddy:10
  title: Directory Traversal
  description: |-
    Versions 13.0.8 and earlier of geddy are vulnerable to a directory traversal attack via URI encoded attack vectors.

    ### Proof of Concept
    ```
    http://localhost:4000/..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2fetc/passwd
    ```
  affected_package: geddy
  vulnerable_versions:
  - "<13.0.8"
  severity: high
  package_manager: npm
  cve:
  - CVE-2015-5688
  cwe: CWE-22
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: Vikram Chaitanya
- id: ossindex:npm:geddy:7408810507
  title: '[CVE-2015-5688]  Improper Limitation of a Pathname to a Restricted Directory
    ("Path Traversal")'
  description: Directory traversal vulnerability in lib/app/index.js in Geddy before
    13.0.8 for Node.js allows remote attackers to read arbitrary files via a ..%2f
    (dot dot encoded slash) in the PATH_INFO to the default URI.
  affected_package: geddy
  vulnerable_versions:
  - "<13.0.8"
  package_manager: npm
  cve:
  - CVE-2015-5688
  disclosed_date: 2015-09-04
  created_date: 2015-09-04
  last_modified_date: 2017-07-30
  credit:
  - OSSIndex
  references:
  - https://github.com/geddy/geddy/commit/2de63b68b3aa6c08848f261ace550a37959ef231
  - https://github.com/geddy/geddy/issues/697
  - https://github.com/geddy/geddy/pull/699
  - https://github.com/geddy/geddy/releases/tag/v13.0.8
  - https://nodesecurity.io/advisories/geddy-directory-traversal
  source_url: https://ossindex.net/resource/package/7013656065/vulnerabilities
- id: snykio:npm:geddy:20150727
  title: Directory Traversal
  description: "Geddy static file serving allows directory traversal with a URI encoded\npath.\n\n*Source:
    [Node Security Project][1]*\n\n\n\n[1]: https://nodesecurity.io/advisories/10\n\\n**Example:**\n\n
    \   http://localhost:4000/..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2fetc/passwd\n
    \   \n    geddy is serving the output as it doesn't match the routes and it's
    a static file\n\n\\nA Directory Traversal attack (also known as path traversal)
    aims to\naccess files and directories that are stored outside the intended\nfolder.
    By manipulating files with \\\"dot-dot-slash (../)\\\" sequences and\nits variations,
    or by using absolute file paths, it may be possible to\naccess arbitrary files
    and directories stored on file system, including\napplication source code, configuration,
    and other critical system files.\n\nDirectory Traversal vulnerabilities can be
    generally divided into two\ntypes:\n\n* **Information Disclosure**\\: Allows the
    attacker to gain information\n  about the folder structure or read the contents
    of sensitive files on\n  the system.\n\n`st` is a module for serving static files
    on web pages, and contains a\n[vulnerability of this type][1]. In our example,
    we will serve files\nfrom the `public` route.\n\nIf an attacker requests the following
    URL from our server, it will in\nturn leak the sensitive private key of the root
    user.\n\n    curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\n\n**Note**
    `%2e` is the URL encoded version of `.` (dot).\n\n* **Writing arbitrary files**\\:
    Allows the attacker to create or replace\n  existing files. This type of vulnerability
    is also known as\n  `Zip-Slip`.\n\nOne way to achieve this is by using a malicious
    `zip` archive that holds\npath traversal filenames. When each filename in the
    zip archive gets\nconcatenated to the target extraction folder, without validation,
    the\nfinal path ends up outside of the target folder. If an executable or a\nconfiguration
    file is overwritten with a file containing malicious code,\nthe problem can turn
    into an arbitrary code execution issue quite\neasily.\n\nThe following is an example
    of a `zip` archive with one benign file and\none malicious file. Extracting the
    malicious file will result in\ntraversing out of the target folder, ending up
    in `/root/.ssh/`\noverwriting the `authorized_keys` file:\n\n    2018-04-15 22:04:29
    .....           19           19  good.txt\n    2018-04-15 22:04:42 .....           20
    \          20  ../../../../../../root/.ssh/authorized_keys\n\n\n\n[1]: https://snyk.io/vuln/npm:st:20140206\n"
  affected_package: geddy
  vulnerable_versions:
  - "<13.0.8"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2015-5688
  cwe:
  - CWE-22
  disclosed_date: 2015-07-27
  created_date: 2015-07-27
  last_modified_date: 2015-07-27
  credit:
  - Vikram Chaitanya
  references:
  - https://github.com/geddy/geddy/issues/697
  - https://github.com/geddy/geddy/pull/699
  source_url: https://snyk.io/vuln/npm:geddy:20150727
