---
- id: npmjs:npm:assign-deep:1014
  title: Prototype Pollution
  description: "Versions of `assign-deep` prior to 1.0.1 are vulnerable to Prototype
    Pollution. The `assign` function fails to validate which Object properties it
    updates. This allows attackers to modify the prototype of Object, causing the
    addition or modification of an existing property on all objects.\n\n"
  affected_package: assign-deep
  vulnerable_versions:
  - "<1.0.1"
  severity: high
  package_manager: npm
  cve:
  - CVE-2019-10745
  cwe: CWE-471
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: Snyk Security Team
- id: npmjs:npm:assign-deep:579
  title: Prototype Pollution
  description: Versions of `assign-deep` before 0.4.7 are vulnerable to prototype
    pollution via merging functions.
  affected_package: assign-deep
  vulnerable_versions:
  - "<0.4.7"
  severity: low
  package_manager: npm
  cve:
  - CVE-2018-3720
  cwe: CWE-471
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: Olivier Arteau (HoLyVieR)
- id: snykio:npm:assign-deep:20180215
  title: Prototype Pollution
  description: "[assign-deep][1] is a library for deeply assigning the values of all\nenumerable-own-properties
    and symbols from one or more source objects to\na target object.\n\nAffected versions
    of this package are vulnerable to Prototype Pollution\nvia merging functions.
    These functions allows a malicious user to modify\nthe prototype of `Object` via
    `__proto__`, causing the addition or\nmodification of an existing property that
    will exist on all objects.\n\n\n\n[1]: https://github.com/jonschlinkert/assign-deep\n\\nPrototype
    Pollution is a vulnerability affecting JavaScript. Prototype\nPollution refers
    to the ability to inject properties into existing\nJavaScript language construct
    prototypes, such as objects. JavaScript\nallows all Object attributes to be altered,
    including their magical\nattributes such as `_proto_`, `constructor` and `prototype`.
    An attacker\nmanipulates these attributes to overwrite, or pollute, a JavaScript\napplication
    object prototype of the base object by injecting other\nvalues. Properties on
    the `Object.prototype` are then inherited by all\nthe JavaScript objects through
    the prototype chain. When that happens,\nthis leads to either denial of service
    by triggering JavaScript\nexceptions, or it tampers with the application source
    code to force the\ncode path that the attacker injects, thereby leading to remote
    code\nexecution.\n\nThere are two main ways in which the pollution of prototypes
    occurs:\n\n* Unsafe `Object` recursive merge\n\n* Property definition by path\n\n###
    Unsafe Object recursive merge   {#unsafe-object-recursive-merge}\n\nThe logic
    of a vulnerable recursive merge function follows the following\nhigh-level model:\n\n
    \   merge (target, source)\n    \n      foreach property of source\n    \n        if
    property exists and is an object on both the target and the source\n    \n          merge(target[property],
    source[property])\n    \n        else\n    \n          target[property] = source[property]\n\n&lt;br&gt;\n\nWhen
    the source object contains a property named `_proto_` defined with\n`Object.defineProperty()`
    , the condition that checks if the property\nexists and is an object on both the
    target and the source passes and the\nmerge recurses with the target, being the
    prototype of `Object` and the\nsource of `Object` as defined by the attacker.
    Properties are then\ncopied on the `Object` prototype.\n\nClone operations are
    a special sub-class of unsafe recursive merges,\nwhich occur when a recursive
    merge is conducted on an empty object:\n`merge({},source)`.\n\n`lodash` and `Hoek`
    are examples of libraries susceptible to recursive\nmerge attacks.\n\n### Property
    definition by path   {#property-definition-by-path}\n\nThere are a few JavaScript
    libraries that use an API to define property\nvalues on an object based on a given
    path. The function that is\ngenerally affected contains this signature: `theFunction(object,
    path,\nvalue)`\n\nIf the attacker can control the value of “path”, they can set
    this value\nto `_proto_.myValue`. `myValue` is then assigned to the prototype
    of the\nclass of the object.\n\n"
  affected_package: assign-deep
  vulnerable_versions:
  - "<0.4.7"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2018-3720
  cwe:
  - CWE-400
  disclosed_date: 2018-02-15
  created_date: 2018-02-16
  last_modified_date: 2018-02-16
  credit:
  - Olivier Arteau (HoLyVieR)
  references:
  - https://hackerone.com/reports/310707
  source_url: https://snyk.io/vuln/npm:assign-deep:20180215
- id: snykio:npm:assign-deep:450211
  title: Prototype Pollution
  description: "[assign-deep][1] is a library for deeply assigning the values of all\nenumerable-own-properties
    and symbols from one or more source objects to\na target object.\n\nAffected versions
    of this package are vulnerable to Prototype Pollution.\nThe function `assign-deep`
    could be tricked into adding or modifying\nproperties of `Object.prototype` using
    either a `constructor` or a\n`_proto_` payload.\n\n\n\n[1]: https://github.com/jonschlinkert/assign-deep\n\\nPrototype
    Pollution is a vulnerability affecting JavaScript. Prototype\nPollution refers
    to the ability to inject properties into existing\nJavaScript language construct
    prototypes, such as objects. JavaScript\nallows all Object attributes to be altered,
    including their magical\nattributes such as `_proto_`, `constructor` and `prototype`.
    An attacker\nmanipulates these attributes to overwrite, or pollute, a JavaScript\napplication
    object prototype of the base object by injecting other\nvalues. Properties on
    the `Object.prototype` are then inherited by all\nthe JavaScript objects through
    the prototype chain. When that happens,\nthis leads to either denial of service
    by triggering JavaScript\nexceptions, or it tampers with the application source
    code to force the\ncode path that the attacker injects, thereby leading to remote
    code\nexecution.\n\nThere are two main ways in which the pollution of prototypes
    occurs:\n\n* Unsafe `Object` recursive merge\n\n* Property definition by path\n\n###
    Unsafe Object recursive merge   {#unsafe-object-recursive-merge}\n\nThe logic
    of a vulnerable recursive merge function follows the following\nhigh-level model:\n\n
    \   merge (target, source)\n    \n      foreach property of source\n    \n        if
    property exists and is an object on both the target and the source\n    \n          merge(target[property],
    source[property])\n    \n        else\n    \n          target[property] = source[property]\n\n&lt;br&gt;\n\nWhen
    the source object contains a property named `_proto_` defined with\n`Object.defineProperty()`
    , the condition that checks if the property\nexists and is an object on both the
    target and the source passes and the\nmerge recurses with the target, being the
    prototype of `Object` and the\nsource of `Object` as defined by the attacker.
    Properties are then\ncopied on the `Object` prototype.\n\nClone operations are
    a special sub-class of unsafe recursive merges,\nwhich occur when a recursive
    merge is conducted on an empty object:\n`merge({},source)`.\n\n`lodash` and `Hoek`
    are examples of libraries susceptible to recursive\nmerge attacks.\n\n### Property
    definition by path   {#property-definition-by-path}\n\nThere are a few JavaScript
    libraries that use an API to define property\nvalues on an object based on a given
    path. The function that is\ngenerally affected contains this signature: `theFunction(object,
    path,\nvalue)`\n\nIf the attacker can control the value of “path”, they can set
    this value\nto `_proto_.myValue`. `myValue` is then assigned to the prototype
    of the\nclass of the object.\n\n"
  affected_package: assign-deep
  vulnerable_versions:
  - "<0.4.8"
  - ">=1.0.0 <1.0.1"
  severity: high
  package_manager: npm
  cve:
  - CVE-2019-10745
  cwe:
  - CWE-400
  disclosed_date: 2019-06-19
  created_date: 2019-06-20
  last_modified_date: 2019-06-20
  credit:
  - Snyk Security Team
  references:
  - https://github.com/jonschlinkert/assign-deep/commit/90bf1c551d05940898168d04066bbf15060f50cc
  source_url: https://snyk.io/vuln/SNYK-JS-ASSIGNDEEP-450211
