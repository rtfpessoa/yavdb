---
- id: npmjs:npm:@commercial/subtext:1166
  title: Denial of Service
  description: Versions of `@commercial/subtext` prior to 5.1.1 are vulnerable to
    Denial of Service (DoS). The package fails to enforce the `maxBytes` configuration
    for payloads with chunked encoding that are written to the file system. This allows
    attackers to send requests with arbitrary payload sizes, which may exhaust system
    resources leading to Denial of Service.
  affected_package: "@commercial/subtext"
  vulnerable_versions:
  - "<5.1.1"
  severity: high
  package_manager: npm
  cwe: CWE-400
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: Yurii Chuhaienko
  references: https://npmjs.com/advisories/1166
  source_url: https://npmjs.com/advisories/1166
- id: npmjs:npm:@commercial/subtext:1477
  title: Denial of Service
  description: Version 5.1.1 of `@commercial/subtext` is vulnerable to Denial of Service.
    The Content-Encoding HTTP header parser has a vulnerability which will cause the
    function to throw a system error if the header contains some invalid values. Because
    hapi rethrows system errors (as opposed to catching expected application errors),
    the error is thrown all the way up the stack. If no unhandled exception handler
    is available, the application will exist, allowing an attacker to shut down services.
  affected_package: "@commercial/subtext"
  vulnerable_versions:
  - 5.1.1
  severity: high
  package_manager: npm
  cwe: CWE-400
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: Eran Hammer
  references: https://npmjs.com/advisories/1477
  source_url: https://npmjs.com/advisories/1477
- id: npmjs:npm:@commercial/subtext:1484
  title: Prototype Pollution
  description: Versions of `@commercial/subtext` prior to 5.1.2 are vulnerable to
    Prototype Pollution. A multipart payload can be constructed in a way that one
    of the parts’ content can be set as the entire payload object’s prototype. If
    this prototype contains data, it may bypass other validation rules which enforce
    access and privacy. If this prototype evaluates to null, it can cause unhandled
    exceptions when the request payload is accessed.
  affected_package: "@commercial/subtext"
  vulnerable_versions:
  - "<5.1.2"
  severity: high
  package_manager: npm
  cwe: CWE-400
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: Eran Hammer
  references: https://npmjs.com/advisories/1484
  source_url: https://npmjs.com/advisories/1484
- id: snykio:npm:@commercial/subtext:467263
  title: Denial of Service (DoS)
  description: |+
    [@commercial/subtext][1] is an HTTP payload parsing library.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS). The package fails to enforce the `maxBytes` configuration for
    payloads with chunked encoding that are written to the file system. This
    allows attackers to send requests with arbitrary payload sizes, which
    may exhaust system resources.



    [1]: https://www.npmjs.com/package/@commercial/subtext
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: "@commercial/subtext"
  vulnerable_versions:
  - "<5.1.1"
  severity: high
  package_manager: npm
  cwe:
  - CWE-400
  disclosed_date: 2019-09-16
  created_date: 2019-09-19
  last_modified_date: 2019-09-19
  credit:
  - Yurii Chuhaienko
  references:
  - https://github.com/brave-intl/subtext/commit/9557c115b1384191a0d6e4a9ea028fedf8b44ae6
  - https://github.com/hapijs/subtext/issues/72
  - https://www.npmjs.com/advisories/1166
  - https://www.npmjs.com/advisories/1168
  source_url: https://snyk.io/vuln/SNYK-JS-COMMERCIALSUBTEXT-467263
- id: snykio:npm:@commercial/subtext:548908
  title: Prototype Pollution
  description: "[@commercial/subtext][1] is a HTTP payload parsing library.\n\nAffected
    versions of this package are vulnerable to Prototype Pollution.\nA multipart payload
    can be constructed in a way that one of the parts’\ncontent can be set as the
    entire payload object’s prototype. If this\nprototype contains data, it may bypass
    other validation rules which\nenforce access and privacy. If this prototype evaluates
    to null, it can\ncause unhandled exceptions when the request payload is accessed.\n\n\n\n[1]:
    https://www.npmjs.com/package/@commercial/subtext\n\\nPrototype Pollution is a
    vulnerability affecting JavaScript. Prototype\nPollution refers to the ability
    to inject properties into existing\nJavaScript language construct prototypes,
    such as objects. JavaScript\nallows all Object attributes to be altered, including
    their magical\nattributes such as `_proto_`, `constructor` and `prototype`. An
    attacker\nmanipulates these attributes to overwrite, or pollute, a JavaScript\napplication
    object prototype of the base object by injecting other\nvalues. Properties on
    the `Object.prototype` are then inherited by all\nthe JavaScript objects through
    the prototype chain. When that happens,\nthis leads to either denial of service
    by triggering JavaScript\nexceptions, or it tampers with the application source
    code to force the\ncode path that the attacker injects, thereby leading to remote
    code\nexecution.\n\nThere are two main ways in which the pollution of prototypes
    occurs:\n\n* Unsafe `Object` recursive merge\n\n* Property definition by path\n\n###
    Unsafe Object recursive merge   {#unsafe-object-recursive-merge}\n\nThe logic
    of a vulnerable recursive merge function follows the following\nhigh-level model:\n\n
    \   merge (target, source)\n    \n      foreach property of source\n    \n        if
    property exists and is an object on both the target and the source\n    \n          merge(target[property],
    source[property])\n    \n        else\n    \n          target[property] = source[property]\n\n&lt;br&gt;\n\nWhen
    the source object contains a property named `_proto_` defined with\n`Object.defineProperty()`
    , the condition that checks if the property\nexists and is an object on both the
    target and the source passes and the\nmerge recurses with the target, being the
    prototype of `Object` and the\nsource of `Object` as defined by the attacker.
    Properties are then\ncopied on the `Object` prototype.\n\nClone operations are
    a special sub-class of unsafe recursive merges,\nwhich occur when a recursive
    merge is conducted on an empty object:\n`merge({},source)`.\n\n`lodash` and `Hoek`
    are examples of libraries susceptible to recursive\nmerge attacks.\n\n### Property
    definition by path   {#property-definition-by-path}\n\nThere are a few JavaScript
    libraries that use an API to define property\nvalues on an object based on a given
    path. The function that is\ngenerally affected contains this signature: `theFunction(object,
    path,\nvalue)`\n\nIf the attacker can control the value of “path”, they can set
    this value\nto `_proto_.myValue`. `myValue` is then assigned to the prototype
    of the\nclass of the object.\n\n"
  affected_package: "@commercial/subtext"
  vulnerable_versions:
  - "<5.1.2"
  severity: high
  package_manager: npm
  cwe:
  - CWE-400
  disclosed_date: 2020-02-17
  created_date: 2020-02-17
  last_modified_date: 2020-02-17
  credit:
  - Unknown
  references:
  - https://github.com/hapijs/subtext/commit/b55f5508e1688cc1024b75dc2301adb5c63ad4de
  - https://www.npmjs.com/advisories/1484
  source_url: https://snyk.io/vuln/SNYK-JS-COMMERCIALSUBTEXT-548908
- id: snykio:npm:@commercial/subtext:548914
  title: Denial of Service (DoS)
  description: |+
    [@commercial/subtext][1] is a HTTP payload parsing library.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS). The Content-Encoding HTTP header parser has a vulnerability which
    will cause the function to throw a system error if the header contains
    some invalid values. Because hapi rethrows system errors (as opposed to
    catching expected application errors), the error is thrown all the way
    up the stack. If no unhandled exception handler is available, the
    application will exist, allowing an attacker to shut down services.



    [1]: https://www.npmjs.com/package/@commercial/subtext
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: "@commercial/subtext"
  vulnerable_versions:
  - ">=5.1.1 <5.1.2"
  severity: high
  package_manager: npm
  cwe:
  - CWE-400
  disclosed_date: 2020-02-17
  created_date: 2020-02-17
  last_modified_date: 2020-02-17
  credit:
  - Gal Goldshtein (F5 Networks)
  references:
  - https://github.com/hapijs/subtext/commit/b55f5508e1688cc1024b75dc2301adb5c63ad4de
  - https://www.npmjs.com/advisories/1477
  source_url: https://snyk.io/vuln/SNYK-JS-COMMERCIALSUBTEXT-548914
