---
- id: snykio:npm:fast-http:20180226
  title: Directory Traversal
  description: |
    [`fast-http`][1] is a Create a tiny web server which does not support
    the MVC pattern, for simple Node.js app..

    Affected versions of the package are vulnerable to Directory Traversal,
    which may allow access to sensitive files and data on the server. For
    example, requesting the following url `/..%2f..%2fetc/passwd` would
    result in `/etc/passwd` leak.



    [1]: https://www.npmjs.com/package/fast-http
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
  affected_package: fast-http
  vulnerable_versions:
  - "*"
  severity: high
  package_manager: npm
  cwe:
  - CWE-22
  disclosed_date: 2018-02-26
  created_date: 2018-02-26
  last_modified_date: 2018-02-26
  credit:
  - Liang Gong
  references:
  - https://github.com/JacksonGL/NPM-Vuln-PoC/tree/master/directory-traversal/fast-http
  source_url: https://snyk.io/vuln/npm:fast-http:20180226
- id: snykio:npm:fast-http:572892
  title: Directory Traversal
  description: "[fast-http][1] is a library that allows you to create a tiny web server.\n\nAffected
    versions of this package are vulnerable to Directory Traversal.\nThere is no path
    sanitization in the path provided at `fs.readFile` in\n`index.js`.\n\n### PoC
    by JHU System Security Lab   {#poc-by-jhu-system-security-lab}\n\n1.  Start the
    server\n    \n        var Server = require(\"fast-http\");\n        var srv =
    new Server(8080,'./',true)\n\n2.  Create a file `sensitive-file` in the server\\'s
    parent directory\n\n3.  `curl -s --path-as-is http://127.0.0.1:8080/../sensitive-file`\n\n\n\n[1]:
    https://github.com/cedced19/fast-http\n\\nA Directory Traversal attack (also known
    as path traversal) aims to\naccess files and directories that are stored outside
    the intended\nfolder. By manipulating files with \\\"dot-dot-slash (../)\\\" sequences
    and\nits variations, or by using absolute file paths, it may be possible to\naccess
    arbitrary files and directories stored on file system, including\napplication
    source code, configuration, and other critical system files.\n\nDirectory Traversal
    vulnerabilities can be generally divided into two\ntypes:\n\n* **Information Disclosure**\\:
    Allows the attacker to gain information\n  about the folder structure or read
    the contents of sensitive files on\n  the system.\n\n`st` is a module for serving
    static files on web pages, and contains a\n[vulnerability of this type][1]. In
    our example, we will serve files\nfrom the `public` route.\n\nIf an attacker requests
    the following URL from our server, it will in\nturn leak the sensitive private
    key of the root user.\n\n    curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\n\n**Note**
    `%2e` is the URL encoded version of `.` (dot).\n\n* **Writing arbitrary files**\\:
    Allows the attacker to create or replace\n  existing files. This type of vulnerability
    is also known as\n  `Zip-Slip`.\n\nOne way to achieve this is by using a malicious
    `zip` archive that holds\npath traversal filenames. When each filename in the
    zip archive gets\nconcatenated to the target extraction folder, without validation,
    the\nfinal path ends up outside of the target folder. If an executable or a\nconfiguration
    file is overwritten with a file containing malicious code,\nthe problem can turn
    into an arbitrary code execution issue quite\neasily.\n\nThe following is an example
    of a `zip` archive with one benign file and\none malicious file. Extracting the
    malicious file will result in\ntraversing out of the target folder, ending up
    in `/root/.ssh/`\noverwriting the `authorized_keys` file:\n\n    2018-04-15 22:04:29
    .....           19           19  good.txt\n    2018-04-15 22:04:42 .....           20
    \          20  ../../../../../../root/.ssh/authorized_keys\n\n\n\n[1]: https://snyk.io/vuln/npm:st:20140206\n"
  affected_package: fast-http
  vulnerable_versions:
  - "*"
  severity: high
  package_manager: npm
  cve:
  - CVE-2020-7687
  cwe:
  - CWE-22
  disclosed_date: 2020-06-20
  created_date: 2020-06-20
  last_modified_date: 2020-06-20
  credit:
  - JHU System Security Lab
  source_url: https://snyk.io/vuln/SNYK-JS-FASTHTTP-572892
