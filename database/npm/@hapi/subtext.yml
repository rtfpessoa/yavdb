---
- id: npmjs:npm:@hapi/subtext:1165
  title: Denial of Service
  description: Versions of `@hapi/subtext` prior to 6.1.2 are vulnerable to Denial
    of Service (DoS). The package fails to enforce the `maxBytes` configuration for
    payloads with chunked encoding that are written to the file system. This allows
    attackers to send requests with arbitrary payload sizes, which may exhaust system
    resources leading to Denial of Service.
  affected_package: "@hapi/subtext"
  vulnerable_versions:
  - "<6.1.2"
  severity: high
  package_manager: npm
  cwe: CWE-400
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: Yurii Chuhaienko
- id: npmjs:npm:@hapi/subtext:1476
  title: Denial of Service
  description: Versions of `@hapi/subtext` prior to 6.1.3 or 7.0.3 are vulnerable
    to Denial of Service. The Content-Encoding HTTP header parser has a vulnerability
    which will cause the function to throw a system error if the header contains some
    invalid values. Because hapi rethrows system errors (as opposed to catching expected
    application errors), the error is thrown all the way up the stack. If no unhandled
    exception handler is available, the application will exist, allowing an attacker
    to shut down services.
  affected_package: "@hapi/subtext"
  vulnerable_versions:
  - ">= 7.0.0 <7.0.3"
  - ">=4.1.0 <6.1.3"
  severity: high
  package_manager: npm
  cwe: CWE-400
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: Eran Hammer
- id: npmjs:npm:@hapi/subtext:1480
  title: Prototype Pollution
  description: Versions of `@hapi/subtext` prior to 6.1.3 or 7.0.3 are vulnerable
    to Prototype Pollution. A multipart payload can be constructed in a way that one
    of the parts’ content can be set as the entire payload object’s prototype. If
    this prototype contains data, it may bypass other validation rules which enforce
    access and privacy. If this prototype evaluates to null, it can cause unhandled
    exceptions when the request payload is accessed.
  affected_package: "@hapi/subtext"
  vulnerable_versions:
  - "<6.1.3"
  - ">=7.0.0 <7.0.3"
  severity: high
  package_manager: npm
  cwe: CWE-400
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: Eran Hammer
- id: snykio:npm:@hapi/subtext:467262
  title: Denial of Service (DoS)
  description: |+
    [@hapi/subtext][1] is an HTTP payload parsing library.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS). The package fails to enforce the `maxBytes` configuration for
    payloads with chunked encoding that are written to the file system. This
    allows attackers to send requests with arbitrary payload sizes, which
    may exhaust system resources.



    [1]: https://github.com/hapijs/subtext
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: "@hapi/subtext"
  vulnerable_versions:
  - "<6.1.2"
  severity: high
  package_manager: npm
  cwe:
  - CWE-400
  disclosed_date: 2019-09-16
  created_date: 2019-09-19
  last_modified_date: 2019-09-19
  credit:
  - Yurii Chuhaienko
  references:
  - https://github.com/brave-intl/subtext/commit/9557c115b1384191a0d6e4a9ea028fedf8b44ae6
  - https://github.com/hapijs/subtext/issues/72
  - https://www.npmjs.com/advisories/1165
  - https://www.npmjs.com/advisories/1168
  source_url: https://snyk.io/vuln/SNYK-JS-HAPISUBTEXT-467262
- id: snykio:npm:@hapi/subtext:541186
  title: Prototype Poisoning
  description: "[@hapi/subtext][1] is a HTTP payload parsing library.\n\nAffected
    versions of this package are vulnerable to Prototype Poisoning\nvia the `JSON.parse()`
    function.\n\n\n\n[1]: https://github.com/hapijs/subtext\n\\nDenial of Service
    (DoS) describes a family of attacks, all aimed at\nmaking a system inaccessible
    to its original and legitimate users. There\nare many types of DoS attacks, ranging
    from trying to clog the network\npipes to the system by generating a large volume
    of traffic from many\nmachines (a Distributed Denial of Service - DDoS - attack)
    to sending\ncrafted requests that cause a system to crash or take a disproportional\namount
    of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type
    of Denial of\nService attack. Regular expressions are incredibly powerful, but
    they\naren\\'t very intuitive and can ultimately end up making it easy for\nattackers
    to take your site down.\n\nLet’s take the following regular expression as an example:\n\n
    \   regex = /A(B|C+)+D/\n{: .language-js}\n\nThis regular expression accomplishes
    the following:\n\n* `A` The string must start with the letter \\'A\\'\n* `(B|C+)+`
    The string must then follow the letter A with either the\n  letter \\'B\\' or
    some number of occurrences of the letter \\'C\\' (the\n  `+` matches one or more
    times). The `+` at the end of this section\n  states that we can look for one
    or more matches of this section.\n* `D` Finally, we ensure this section of the
    string ends with a \\'D\\'\n\nThe expression would match inputs such as `ABBD`,
    `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases, it doesn\\'t take very
    long for a regex engine to find a\nmatch:\n\n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n
    \   0.04s user 0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n{: .language-bash}\n\nThe entire
    process of testing it against a 30 characters long string\ntakes around ~52ms.
    But when given an invalid string, it takes nearly\ntwo seconds to complete the
    test, over ten times as long as it took to\ntest a valid string. The dramatic
    difference is due to the way regular\nexpressions get evaluated.\n\nMost Regex
    engines will work very similarly (with minor differences).\nThe engine will match
    the first possible way to accept the current\ncharacter and proceed to the next
    one. If it then fails to match the\nnext one, it will backtrack and see if there
    was another way to digest\nthe previous character. If it goes too far down the
    rabbit hole only to\nfind out the string doesn’t match in the end, and if many
    characters\nhave multiple valid regex paths, the number of backtracking steps
    can\nbecome very large, resulting in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s
    look at how our expression runs into this problem, using a\nshorter string: \\\"ACCCX\\\".
    While it seems fairly straightforward, there\nare still four different ways that
    the engine could match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.
    \ C+C+C.\n\nThe engine has to try each of those combinations to see if any of
    them\npotentially match against the expression. When you combine that with the\nother
    steps the engine must take, we can use [RegEx 101 debugger][1] to\nsee the engine
    has to take a total of 38 steps before it can determine\nthe string doesn\\'t
    match.\n\nFrom there, the number of steps the engine must use to validate a string\njust
    continues to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n|
    ACCCX | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX
    | 14 | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to
    take over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n"
  affected_package: "@hapi/subtext"
  vulnerable_versions:
  - "<5.0.1"
  - ">=6.0.0 <6.0.12"
  severity: medium
  package_manager: npm
  cwe:
  - CWE-400
  disclosed_date: 2019-01-31
  created_date: 2019-01-31
  last_modified_date: 2019-01-31
  credit:
  - Unknown
  references:
  - https://github.com/hapijs/statehood/commit/582000f83cf0f4d71b6dff72c689fb4629e5e945
  - https://github.com/hapijs/subtext/commit/1b969962c2d610703ef6baf51a99ed68b31f4703
  - https://github.com/hapijs/wreck/commit/aeeb4c4be7b5d0a72791a694c83694827aa2e00e
  - https://hueniverse.com/a-tale-of-prototype-poisoning-2610fa170061
  source_url: https://snyk.io/vuln/SNYK-JS-HAPISUBTEXT-541186
- id: snykio:npm:@hapi/subtext:548912
  title: Prototype Pollution
  description: "[@hapi/subtext][1] is a HTTP payload parsing library.\n\nAffected
    versions of this package are vulnerable to Prototype Pollution.\nA multipart payload
    can be constructed in a way that one of the parts’\ncontent can be set as the
    entire payload object’s prototype. If this\nprototype contains data, it may bypass
    other validation rules which\nenforce access and privacy. If this prototype evaluates
    to null, it can\ncause unhandled exceptions when the request payload is accessed.\n\n\n\n[1]:
    https://github.com/hapijs/subtext\n\\nDenial of Service (DoS) describes a family
    of attacks, all aimed at\nmaking a system inaccessible to its original and legitimate
    users. There\nare many types of DoS attacks, ranging from trying to clog the network\npipes
    to the system by generating a large volume of traffic from many\nmachines (a Distributed
    Denial of Service - DDoS - attack) to sending\ncrafted requests that cause a system
    to crash or take a disproportional\namount of time to process.\n\nThe Regular
    expression Denial of Service (ReDoS) is a type of Denial of\nService attack. Regular
    expressions are incredibly powerful, but they\naren\\'t very intuitive and can
    ultimately end up making it easy for\nattackers to take your site down.\n\nLet’s
    take the following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n{:
    .language-js}\n\nThis regular expression accomplishes the following:\n\n* `A`
    The string must start with the letter \\'A\\'\n* `(B|C+)+` The string must then
    follow the letter A with either the\n  letter \\'B\\' or some number of occurrences
    of the letter \\'C\\' (the\n  `+` matches one or more times). The `+` at the end
    of this section\n  states that we can look for one or more matches of this section.\n*
    `D` Finally, we ensure this section of the string ends with a \\'D\\'\n\nThe expression
    would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt
    most cases, it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n
    \   $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s
    user 0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n{: .language-bash}\n\nThe entire
    process of testing it against a 30 characters long string\ntakes around ~52ms.
    But when given an invalid string, it takes nearly\ntwo seconds to complete the
    test, over ten times as long as it took to\ntest a valid string. The dramatic
    difference is due to the way regular\nexpressions get evaluated.\n\nMost Regex
    engines will work very similarly (with minor differences).\nThe engine will match
    the first possible way to accept the current\ncharacter and proceed to the next
    one. If it then fails to match the\nnext one, it will backtrack and see if there
    was another way to digest\nthe previous character. If it goes too far down the
    rabbit hole only to\nfind out the string doesn’t match in the end, and if many
    characters\nhave multiple valid regex paths, the number of backtracking steps
    can\nbecome very large, resulting in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s
    look at how our expression runs into this problem, using a\nshorter string: \\\"ACCCX\\\".
    While it seems fairly straightforward, there\nare still four different ways that
    the engine could match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.
    \ C+C+C.\n\nThe engine has to try each of those combinations to see if any of
    them\npotentially match against the expression. When you combine that with the\nother
    steps the engine must take, we can use [RegEx 101 debugger][1] to\nsee the engine
    has to take a total of 38 steps before it can determine\nthe string doesn\\'t
    match.\n\nFrom there, the number of steps the engine must use to validate a string\njust
    continues to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n|
    ACCCX | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX
    | 14 | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to
    take over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n"
  affected_package: "@hapi/subtext"
  vulnerable_versions:
  - "<6.1.3"
  - ">=7.0.0 <7.0.3"
  severity: high
  package_manager: npm
  cwe:
  - CWE-400
  disclosed_date: 2020-02-17
  created_date: 2020-02-17
  last_modified_date: 2020-02-17
  credit:
  - Unknown
  references:
  - https://github.com/hapijs/subtext/commit/0c1a3f6e3384324a4ac7a1cee36634e9bf2be9d8
  - https://www.npmjs.com/advisories/1480
  source_url: https://snyk.io/vuln/SNYK-JS-HAPISUBTEXT-548912
- id: snykio:npm:@hapi/subtext:548916
  title: Denial of Service (DoS)
  description: "[@hapi/subtext][1] is a HTTP payload parsing library.\n\nAffected
    versions of this package are vulnerable to Denial of Service\n(DoS). The Content-Encoding
    HTTP header parser has a vulnerability which\nwill cause the function to throw
    a system error if the header contains\nsome invalid values. Because hapi rethrows
    system errors (as opposed to\ncatching expected application errors), the error
    is thrown all the way\nup the stack. If no unhandled exception handler is available,
    the\napplication will exist, allowing an attacker to shut down services.\n\n\n\n[1]:
    https://github.com/hapijs/subtext\n\\nDenial of Service (DoS) describes a family
    of attacks, all aimed at\nmaking a system inaccessible to its original and legitimate
    users. There\nare many types of DoS attacks, ranging from trying to clog the network\npipes
    to the system by generating a large volume of traffic from many\nmachines (a Distributed
    Denial of Service - DDoS - attack) to sending\ncrafted requests that cause a system
    to crash or take a disproportional\namount of time to process.\n\nThe Regular
    expression Denial of Service (ReDoS) is a type of Denial of\nService attack. Regular
    expressions are incredibly powerful, but they\naren\\'t very intuitive and can
    ultimately end up making it easy for\nattackers to take your site down.\n\nLet’s
    take the following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n{:
    .language-js}\n\nThis regular expression accomplishes the following:\n\n* `A`
    The string must start with the letter \\'A\\'\n* `(B|C+)+` The string must then
    follow the letter A with either the\n  letter \\'B\\' or some number of occurrences
    of the letter \\'C\\' (the\n  `+` matches one or more times). The `+` at the end
    of this section\n  states that we can look for one or more matches of this section.\n*
    `D` Finally, we ensure this section of the string ends with a \\'D\\'\n\nThe expression
    would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt
    most cases, it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n
    \   $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s
    user 0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n{: .language-bash}\n\nThe entire
    process of testing it against a 30 characters long string\ntakes around ~52ms.
    But when given an invalid string, it takes nearly\ntwo seconds to complete the
    test, over ten times as long as it took to\ntest a valid string. The dramatic
    difference is due to the way regular\nexpressions get evaluated.\n\nMost Regex
    engines will work very similarly (with minor differences).\nThe engine will match
    the first possible way to accept the current\ncharacter and proceed to the next
    one. If it then fails to match the\nnext one, it will backtrack and see if there
    was another way to digest\nthe previous character. If it goes too far down the
    rabbit hole only to\nfind out the string doesn’t match in the end, and if many
    characters\nhave multiple valid regex paths, the number of backtracking steps
    can\nbecome very large, resulting in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s
    look at how our expression runs into this problem, using a\nshorter string: \\\"ACCCX\\\".
    While it seems fairly straightforward, there\nare still four different ways that
    the engine could match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.
    \ C+C+C.\n\nThe engine has to try each of those combinations to see if any of
    them\npotentially match against the expression. When you combine that with the\nother
    steps the engine must take, we can use [RegEx 101 debugger][1] to\nsee the engine
    has to take a total of 38 steps before it can determine\nthe string doesn\\'t
    match.\n\nFrom there, the number of steps the engine must use to validate a string\njust
    continues to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n|
    ACCCX | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX
    | 14 | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to
    take over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n"
  affected_package: "@hapi/subtext"
  vulnerable_versions:
  - ">=4.1.0 <6.1.3"
  - ">=7.0.0 <7.0.3"
  severity: high
  package_manager: npm
  cwe:
  - CWE-400
  disclosed_date: 2020-02-17
  created_date: 2020-02-17
  last_modified_date: 2020-02-17
  credit:
  - Gal Goldshtein (F5 Networks)
  references:
  - https://github.com/hapijs/subtext/commit/d21f9608043476c234c7a642777351a62301553d
  - https://www.npmjs.com/advisories/1476
  source_url: https://snyk.io/vuln/SNYK-JS-HAPISUBTEXT-548916
