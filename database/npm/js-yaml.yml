---
- id: npmjs:npm:js-yaml:16
  title: Deserialization Code Execution
  description: "Versions 2.0.4 and earlier of `js-yaml` are affected by a code execution
    vulnerability in the YAML deserializer.\n\n## Proof of Concept\n```\nconst yaml
    = require('js-yaml');\n\nconst x = `test: !!js/function >\nfunction f() { \nconsole.log(1);
    \n}();`\n\nyaml.load(x);\n```"
  affected_package: js-yaml
  vulnerable_versions:
  - "<  2.0.5"
  severity: high
  package_manager: npm
  cve:
  - CVE-2013-4660
  cwe: CWE-502
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: Neal Poole
- id: npmjs:npm:js-yaml:788
  title: Denial of Service
  description: Versions of `js-yaml` prior to 3.13.0 are vulnerable to Denial of Service.
    By parsing a carefully-crafted YAML file, the node process stalls and may exhaust
    system resources leading to a Denial of Service.
  affected_package: js-yaml
  vulnerable_versions:
  - "<3.13.0"
  severity: medium
  package_manager: npm
  cwe: CWE-400
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: Shawn Rasheed, Jens DIetrich
- id: npmjs:npm:js-yaml:813
  title: Code Injection
  description: "Versions of `js-yaml` prior to 3.13.1 are vulnerable to Code Injection.
    The `load()` function may execute arbitrary code injected through a malicious
    YAML file. Objects that have `toString` as key, JavaScript code as value and are
    used as explicit mapping keys allow attackers to execute the supplied code through
    the `load()` function. The `safeLoad()` function is unaffected.\n\nAn example
    payload is \n`{ toString: !<tag:yaml.org,2002:js/function> 'function (){return
    Date.now()}' } : 1` \nwhich returns the object \n{\n  \"1553107949161\": 1\n}"
  affected_package: js-yaml
  vulnerable_versions:
  - "<3.13.1"
  severity: high
  package_manager: npm
  cwe: CWE-94
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: Alex Kocharin
- id: ossindex:npm:js-yaml:357790
  title: "[CVE-2013-4660]  Improper Input Validation"
  description: The JS-YAML module before 2.0.5 for Node.js parses input without properly
    considering the unsafe !!js/function tag, which allows remote attackers to execute
    arbitrary code via a crafted string that triggers an eval operation.
  affected_package: js-yaml
  vulnerable_versions:
  - 0.2.0
  - 0.2.1
  - 0.2.2
  - 0.3.0
  - 0.3.1
  - 0.3.2
  - 0.3.3
  - 0.3.4
  - 0.3.5
  - 0.3.6
  - 0.3.7
  - 1.0.0
  - 1.0.1
  - 1.0.2
  - 1.0.3
  - 2.0.0
  - 2.0.1
  - 2.0.2
  - 2.0.3
  - 2.0.4
  package_manager: npm
  cve:
  - CVE-2013-4660
  disclosed_date: 2013-06-28
  created_date: 2013-06-28
  last_modified_date: 2013-07-01
  credit:
  - OSSIndex
  references:
  - http://portal.nodesecurity.io/advisories/js-yaml
  - https://nealpoole.com/blog/2013/06/code-execution-via-yaml-in-js-yaml-nodejs-module/
  source_url: https://ossindex.net/resource/package/7014007971/vulnerabilities
- id: snykio:npm:js-yaml:173999
  title: Denial of Service (DoS)
  description: |+
    [js-yaml][1] is a human-friendly data serialization language.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS). The parsing of a specially crafted YAML file may exhaust the
    system resources.



    [1]: https://www.npmjs.com/package/js-yaml
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: js-yaml
  vulnerable_versions:
  - ">=3.0.0 <3.13.0"
  severity: medium
  package_manager: npm
  cwe:
  - CWE-400
  disclosed_date: 2019-03-18
  created_date: 2019-03-24
  last_modified_date: 2019-03-24
  credit:
  - Jens DIetrich
  - Shawn Rasheed
  references:
  - https://github.com/nodeca/js-yaml/commit/a567ef3c6e61eb319f0bfc2671d91061afb01235
  - https://github.com/nodeca/js-yaml/issues/475
  source_url: https://snyk.io/vuln/SNYK-JS-JSYAML-173999
- id: snykio:npm:js-yaml:174117
  title: Denial of Service (DoS)
  description: |+
    [js-yaml][1] is a human-friendly data serialization language.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS). It\'s possible to abuse aliases to create an exponential tree of
    nodes consisting of collections that each have multiple references. When
    such a tree is used as the key of a mapping it is then converted to a JS
    object, which is then parsed by `JSON.stringify()`, which causes the
    process to run out of memory creating the string.



    [1]: https://www.npmjs.com/package/js-yaml
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: js-yaml
  vulnerable_versions:
  - "<1.5.0"
  severity: medium
  package_manager: npm
  cwe:
  - CWE-400
  disclosed_date: 2019-04-04
  created_date: 2019-04-05
  last_modified_date: 2019-04-05
  credit:
  - eemeli
  references:
  - https://github.com/eemeli/yaml/commit/d42b492c4eb4d976881230444d0eb039bf81cee0
  - https://github.com/eemeli/yaml/pull/104
  source_url: https://snyk.io/vuln/SNYK-JS-JSYAML-174117
- id: snykio:npm:js-yaml:174129
  title: Arbitrary Code Execution
  description: |
    [js-yaml][1] is a human-friendly data serialization language.

    Affected versions of this package are vulnerable to Arbitrary Code
    Execution. When an object with an executable `toString()` property used
    as a map key, it will execute that function. This happens only for
    `load()`, which should not be used with untrusted data anyway.
    `safeLoad()` is not affected because it can\'t parse functions.



    [1]: https://www.npmjs.com/package/js-yaml
  affected_package: js-yaml
  vulnerable_versions:
  - "<3.13.1"
  severity: high
  package_manager: npm
  cwe:
  - CWE-94
  disclosed_date: 2019-04-05
  created_date: 2019-04-07
  last_modified_date: 2019-04-07
  credit:
  - Alex Kocharin
  references:
  - https://github.com/nodeca/js-yaml/pull/480
  - https://github.com/nodeca/js-yaml/pull/480/commits/e18afbf1edcafb7add2c4c7b22abc8d6ebc2fa61
  - https://www.npmjs.com/advisories/813
  source_url: https://snyk.io/vuln/SNYK-JS-JSYAML-174129
- id: snykio:npm:js-yaml:20130623
  title: Code Execution due to Deserialization
  description: "The JS-YAML module for Node.js contained a code execution vulnerability\nprior
    to version 2.0.5. The maintainers of JS-YAML have patched this\nvulnerability
    and, beginning in version 2.1.0, have provided a safeLoad\nmethod for parsing
    YAML. Developers that use this module should make\nsure they have upgraded and
    should strongly consider porting their code\nto use the new safeLoad method.\n\n*Source:
    [Node Security Project][1]*\n\n### Details   {#details}\n\nThe module allowed
    code execution due to a custom data-type that it\ndefined and parsed called !!js/function.
    The way it would parse the data\nwas to create a new Function object in JavaScript
    based on the input,\nwhich is equivalent to calling eval on the input:\n\n    function
    resolveJavascriptFunction(object /*, explicit*/) {\n      /*jslint evil:true*/\n
    \     var func;\n    \n      try {\n        func = new Function('return ' + object);\n
    \       return func();\n      } catch (error) {\n        return NIL;\n      }\n
    \   }\n\nThat meant the code snippet below, when run, would execute code instead\nof
    simply defining a function:\n\n    var yaml = require('js-yaml');\n    \n    x
    = \"test: !!js/function > \\n  \\\n    function f() { \\n    \\\n    console.log(1);
    \\n  \\\n    }();\"\n    \n    yaml.load(x);\n\n\n\n[1]: https://nodesecurity.io/advisories/16\n"
  affected_package: js-yaml
  vulnerable_versions:
  - "<2.0.5"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2013-4660
  cwe:
  - CWE-20
  disclosed_date: 2013-06-23
  created_date: 2013-06-23
  last_modified_date: 2013-06-23
  credit:
  - Neal Poole
  references:
  - https://nealpoole.com/blog/2013/06/code-execution-via-yaml-in-js-yaml-nodejs-module/
  source_url: https://snyk.io/vuln/npm:js-yaml:20130623
