---
- id: npmjs:npm:express-cart:676
  title: Path Traversal
  description: Versions of `express-cart` before 1.1.7 are vulnerable to Path Traversal.
  affected_package: express-cart
  vulnerable_versions:
  - "<=1.1.5"
  severity: high
  package_manager: npm
  cwe: CWE-22
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: Patrick
- id: npmjs:npm:express-cart:724
  title: NoSQL injection
  description: "Versions of `express-cart` before 1.1.8 are vulnerable to NoSQL injection.
    \n\nThe vulnerability is caused by the lack of user input sanitization in the
    login handlers. In both cases, the customer login and the admin login, parameters
    from the JSON body are sent directly into the MongoDB query which allows to insert
    operators. \n\nThese operators can be used to extract the value of the field blindly
    in the same manner of a blind SQL injection. In this case, the `$regex` operator
    is used to guess each character of the token from the start."
  affected_package: express-cart
  vulnerable_versions:
  - "<=1.1.7"
  severity: high
  package_manager: npm
  cwe: CWE-943
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: Benoit Côté-Jodoin
- id: npmjs:npm:express-cart:730
  title: Privilege Escalation
  description: Versions of `express-cart` before 1.1.6 are vulnerable to privilege
    escalation. This vulnerability can be exploited so that normal users can escalate
    their privilege and add new administrator users.
  affected_package: express-cart
  vulnerable_versions:
  - "<=1.1.5"
  severity: high
  package_manager: npm
  cwe: CWE-284
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: Patrick
- id: npmjs:npm:express-cart:808
  title: Cross-Site Scripting
  description: All versions of `harp` are vulnerable to Cross-Site Scripting. In the
    admin page it is possible to inject arbitrary JavaScript as a new product option,
    allowing attackers to execute arbitrary code. This is limited to the admin page
    and does not affect other pages.
  affected_package: express-cart
  vulnerable_versions:
  - ">=0"
  severity: low
  package_manager: npm
  cwe: CWE-79
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: Avinash Hanwate
- id: snykio:npm:express-cart:174131
  title: Cross-site Scripting (XSS)
  description: |+
    [express-cart][1] is a fully functional shopping cart built in Node.js
    (Express, MongoDB) with Stripe, PayPal and Authorize.net payments.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). It allows a user to insert malicious payload in the user input
    field and the script gets reflected in the browser.



    [1]: https://www.npmjs.com/package/express-cart
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: express-cart
  vulnerable_versions:
  - "*"
  severity: medium
  package_manager: npm
  cwe:
  - CWE-79
  disclosed_date: 2019-04-07
  created_date: 2019-04-07
  last_modified_date: 2019-04-07
  credit:
  - Avinash Hanwate
  references:
  - https://hackerone.com/reports/395944
  source_url: https://snyk.io/vuln/SNYK-JS-EXPRESSCART-174131
- id: snykio:npm:express-cart:20180606
  title: Arbitrary Code Execution
  description: |
    [express-cart][1] is a fully functional shopping cart built in Node.js
    (Express, MongoDB) with Stripe, PayPal and Authorize.net payments.

    Affected versions of this package are vulnerable to Arbitrary Code
    Execution. It allows a privileged users to upload files to the server,
    and choose which path it\'ll be saved in. The path does not do through
    validation, nor is the file type or size validated. This may allow an
    attacker to upload malicious files that may execute code on the server,
    send data back to the attacker or cause a denial of service.



    [1]: https://www.npmjs.com/package/express-cart
  affected_package: express-cart
  vulnerable_versions:
  - "<1.1.7"
  severity: high
  package_manager: npm
  cve:
  - CVE-2018-3758
  cwe:
  - CWE-94
  disclosed_date: 2018-06-06
  created_date: 2018-06-06
  last_modified_date: 2018-06-06
  credit:
  - Patrick (patrickrbc)
  references:
  - https://github.com/mrvautin/expressCart/commit/65b18cfe426fa217aa6ada1d4162891883137893
  - https://hackerone.com/reports/343726
  source_url: https://snyk.io/vuln/npm:express-cart:20180606
- id: snykio:npm:express-cart:20180712
  title: Privilege Escalation
  description: |
    [`express-cart`][1] is a fully functioning Node.js shopping cart with
    Stripe, PayPal and Authorize.net payments.

    Affected versions of this package are vulnerable to Privilege
    Escalation. Users from expressCart could add new users as administrators
    to the application due to deficiency in the access control.



    [1]: https://www.npmjs.com/package/express-cart
  affected_package: express-cart
  vulnerable_versions:
  - "<1.1.6"
  severity: high
  package_manager: npm
  cve:
  - CVE-2018-16483
  cwe:
  - CWE-265
  disclosed_date: 2018-07-12
  created_date: 2018-08-21
  last_modified_date: 2018-08-21
  credit:
  - patrickrbc
  references:
  - https://hackerone.com/reports/343626
  source_url: https://snyk.io/vuln/npm:express-cart:20180712
- id: snykio:npm:express-cart:72404
  title: SQL Injection
  description: |
    [express-cart][1] is a fully functional shopping cart built in Node.js
    (Express, MongoDB) with Stripe, PayPal and Authorize.net payments.

    Affected versions of this package are vulnerable to SQL Injection due to
    a lack of user input sanitization in the login handlers. An attacker
    could enumerate the email address of the customers and the
    administrators.



    [1]: https://www.npmjs.com/package/express-cart
  affected_package: express-cart
  vulnerable_versions:
  - "<1.1.8"
  severity: high
  package_manager: npm
  cwe:
  - CWE-89
  disclosed_date: 2018-09-11
  created_date: 2018-09-26
  last_modified_date: 2018-09-26
  credit:
  - becojo
  references:
  - https://github.com/mrvautin/expressCart/commit/b2234ef4f28225bb42f74bf6cf33759048aba518
  - https://hackerone.com/reports/397445
  source_url: https://snyk.io/vuln/SNYK-JS-EXPRESSCART-72404
