---
- id: npmjs:npm:dompurify:1205
  title: Cross-Site Scripting
  description: 'Versions of `dompurify` prior to 2.0.3 are vulnerable to Cross-Site
    Scripting (XSS). The package has an XSS filter bypass due to Mutation XSS in both
    Chrome and Safari through a combination of `<svg>`/`<math>` elements and `</p>`/`</br>`.
    An example payload is: `<svg></p><style><a id="</style><img src=1 onerror=alert(1)>">`.
    This allows attackers to bypass the XSS protection and execute arbitrary JavaScript
    in a victim''s browser.'
  affected_package: dompurify
  vulnerable_versions:
  - "<2.0.3"
  severity: high
  package_manager: npm
  cve:
  - CVE-2019-16728
  cwe: CWE-79
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: Michał Bentkowski
- id: npmjs:npm:dompurify:1223
  title: Cross-Site Scripting
  description: Versions of `dompurify` prior to 2.0.7 are vulnerable to Cross-Site
    Scripting (XSS). It is possible to bypass the package sanitization through Mutation
    XSS, which may allow an attacker to execute arbitrary JavaScript in a victim's
    browser.
  affected_package: dompurify
  vulnerable_versions:
  - "<2.0.7"
  severity: high
  package_manager: npm
  cve:
  - CVE-2019-16728
  cwe: CWE-79
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: Masato Kinugawa
- id: ossindex:npm:dompurify:8399952557
  title: Unspecified Vulnerabilities
  description: Fixed several security issues identified by a 3rd party code audit.
  affected_package: dompurify
  vulnerable_versions:
  - "<0.6.1"
  package_manager: npm
  disclosed_date: 2016-07-28
  created_date: 2016-07-28
  last_modified_date: 2016-07-28
  credit:
  - OSSIndex
  references:
  - https://github.com/cure53/DOMPurify/releases/tag/0.6.1
  source_url: https://ossindex.net/resource/package/7013489057/vulnerabilities
- id: ossindex:npm:dompurify:8402398103
  title: Possible Cross Site Scripting (XSS) through DOM Clobbering
  description: It is possible for an attacker to overwrite part of the DOM and enable
    an XSS attack.
  affected_package: dompurify
  vulnerable_versions:
  - "<0.3"
  package_manager: npm
  disclosed_date: 2017-02-12
  created_date: 2017-02-12
  last_modified_date: 2017-04-25
  credit:
  - OSSIndex
  references:
  - https://cwe.mitre.org/data/definitions/79.html
  - https://github.com/cure53/DOMPurify/commit/29de89a87416446fd90242321f8275daea7e22b2
  - https://github.com/cure53/DOMPurify/commit/78037ea4db57daba7e171242378d3d97c517dd08
  - https://github.com/cure53/DOMPurify/issues/14
  source_url: https://ossindex.net/resource/package/7013489057/vulnerabilities
- id: ossindex:npm:dompurify:8405007857
  title: Cross Site Scripting (XSS)
  description: It is possible to avoid the attribute name whitelist, allowing the
    setting of arbitrary javascript attributes.
  affected_package: dompurify
  vulnerable_versions:
  - "<0.8.1"
  package_manager: npm
  disclosed_date: 2017-08-01
  created_date: 2017-08-01
  last_modified_date: 2017-08-01
  credit:
  - OSSIndex
  references:
  - https://github.com/cure53/DOMPurify/commit/48f1a9cd1c52ec0ba8cd8ea636cdfd31c12e79e3
  - https://github.com/cure53/DOMPurify/pull/166
  source_url: https://ossindex.net/resource/package/7013489057/vulnerabilities
- id: snykio:npm:dompurify:1016634
  title: Cross-site Scripting (XSS)
  description: |+
    [dompurify][1] is a DOM-only XSS sanitizer for HTML, MathML and SVG.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). Cure53 DOMPurify before 2.0.17 allows mutation XSS. This occurs
    because a serialize-parse roundtrip does not necessarily return the
    original DOM tree, and a namespace can change from HTML to MathML, as
    demonstrated by nesting of FORM elements.



    [1]: https://github.com/cure53/DOMPurify
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: dompurify
  vulnerable_versions:
  - "<2.0.17"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2020-26870
  cwe:
  - CWE-79
  disclosed_date: 2020-10-08
  created_date: 2020-10-08
  last_modified_date: 2020-10-08
  credit:
  - Unknown
  references:
  - https://github.com/cure53/DOMPurify/commit/02724b8eb048dd219d6725b05c3000936f11d62d
  - https://research.securitum.com/mutation-xss-via-mathml-mutation-dompurify-2-0-17-bypass/
  source_url: https://snyk.io/vuln/SNYK-JS-DOMPURIFY-1016634
- id: snykio:npm:dompurify:1035544
  title: Cross-site Scripting (XSS)
  description: |+
    [dompurify][1] is a DOM-only XSS sanitizer for HTML, MathML and SVG.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) when converting from SVG namespace.



    [1]: https://github.com/cure53/DOMPurify
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: dompurify
  vulnerable_versions:
  - "<2.2.2"
  severity: medium
  package_manager: npm
  cwe:
  - CWE-79
  disclosed_date: 2020-11-03
  created_date: 2020-11-03
  last_modified_date: 2020-11-03
  credit:
  - bananabr
  references:
  - https://github.com/cure53/DOMPurify/issues/482
  source_url: https://snyk.io/vuln/SNYK-JS-DOMPURIFY-1035544
- id: snykio:npm:dompurify:20140308
  title: Insecure Defaults
  description: |
    [`dompurify`][1] is a DOM-only XSS sanitizer for HTML, MathML and SVG.
    Affected versions of the package are vulnerable to Cross-site Scripting
    (XSS) and DOM Clobbering due to Insecure Defaults. The default
    configuration allowed DOM Clobbering when used by a sanitized website.
    The default was changed to pevent such situations.

    You can read more about `Insecure Defaults` on our [blog][2].



    [1]: https://www.npmjs.com/package/dompurify
    [2]: https://snyk.io/blog/mongodb-hack-and-secure-defaults/
  affected_package: dompurify
  vulnerable_versions:
  - "<0.3"
  severity: medium
  package_manager: npm
  cwe:
  - CWE-79
  disclosed_date: 2014-03-07
  created_date: 2017-04-24
  last_modified_date: 2017-04-24
  credit:
  - cure53
  references:
  - https://github.com/cure53/DOMPurify/commit/78037ea4db57daba7e171242378d3d97c517dd08
  - https://github.com/cure53/DOMPurify/issues/14
  source_url: https://snyk.io/vuln/npm:dompurify:20140308
- id: snykio:npm:dompurify:20141008
  title: Cross-site Scripting (XSS)
  description: |+
    [`dompurify`][1] is a DOM-only XSS sanitizer for HTML, MathML and SVG.
    Affected versions of the package are vulnerable to Cross-site Scripting
    (XSS) which is caused by Double-Clobbering.



    [1]: https://www.npmjs.com/package/dompurify
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: dompurify
  vulnerable_versions:
  - "<0.4.4"
  severity: medium
  package_manager: npm
  cwe:
  - CWE-79
  disclosed_date: 2014-10-07
  created_date: 2017-04-24
  last_modified_date: 2017-04-24
  credit:
  - Mathias Karlsson
  source_url: https://snyk.io/vuln/npm:dompurify:20141008
- id: snykio:npm:dompurify:20150217
  title: Cross-site Scripting (XSS)
  description: |+
    [`dompurify`][1] is a DOM-only XSS sanitizer for HTML, MathML and SVG.
    Affected versions of the package are vulnerable to Cross-site Scripting
    (XSS).



    [1]: https://www.npmjs.com/package/dompurify
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: dompurify
  vulnerable_versions:
  - "<0.6.1 >=0.4.0"
  severity: medium
  package_manager: npm
  cwe:
  - CWE-79
  disclosed_date: 2015-02-16
  created_date: 2017-04-24
  last_modified_date: 2017-04-24
  credit:
  - Unknown
  references:
  - https://github.com/cure53/DOMPurify/commit/16e431f9749c7bc8c4e9ed438df1098d57b3aa2f
  source_url: https://snyk.io/vuln/npm:dompurify:20150217
- id: snykio:npm:dompurify:20160412
  title: Cross-site Scripting (XSS)
  description: |+
    [`dompurify`][1] is a DOM-only XSS sanitizer for HTML, MathML and SVG.
    Affected versions of the package are vulnerable to Cross-site Scripting
    (XSS) attacks. SVG tags are case sensitive, but DOMPurify transforms
    these tags to lowercase. This causes the SVG document to render
    incorrectly, and may trigger a flaw in the Opera browser.



    [1]: https://www.npmjs.com/package/dompurify
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: dompurify
  vulnerable_versions:
  - ">=0.7.3 <0.8.0"
  severity: medium
  package_manager: npm
  cwe:
  - CWE-79
  disclosed_date: 2016-04-11
  created_date: 2017-04-24
  last_modified_date: 2017-04-24
  credit:
  - jampy
  references:
  - https://github.com/cure53/DOMPurify/commit/6eccdd38fc11bc6df22386700ec2278cb743f8eb
  - https://github.com/cure53/DOMPurify/issues/148
  source_url: https://snyk.io/vuln/npm:dompurify:20160412
- id: snykio:npm:dompurify:20170421
  title: Cross-site Scripting (XSS)
  description: |+
    [`DOMPurify`][1] is a DOM-only XSS sanitizer for HTML, MathML and SVG.

    Affected versions of this package are vulnerable to a Cross-site
    Scripting (XSS) bug in Safari (&gt;= versions 10.1). Specifically, when
    DOMPurify attempts to parse a string like:

        <svg onload=alert(document.domain)>
    {: .language-html}

    it will result in XSS.



    [1]: https://www.npmjs.com/package/dompurify
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: dompurify
  vulnerable_versions:
  - "<0.8.6"
  severity: medium
  package_manager: npm
  cwe:
  - CWE-79
  disclosed_date: 2017-04-21
  created_date: 2017-04-24
  last_modified_date: 2017-04-24
  credit:
  - Unknown
  references:
  - https://github.com/cure53/DOMPurify/commit/27908090e4a2d0a75f15924d68bed07ea5e52998
  - https://github.com/cure53/DOMPurify/releases/tag/0.8.6
  source_url: https://snyk.io/vuln/npm:dompurify:20170421
- id: snykio:npm:dompurify:468981
  title: Cross-site Scripting (XSS)
  description: |+
    [dompurify][1] is a DOM-only XSS sanitizer for HTML, MathML and SVG.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) via innerHTML mutation XSS (mXSS) for an SVG element or a MATH
    element, as demonstrated by Chrome and Safari.



    [1]: https://github.com/cure53/DOMPurify
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: dompurify
  vulnerable_versions:
  - "<2.0.3"
  severity: high
  package_manager: npm
  cve:
  - CVE-2019-16728
  cwe:
  - CWE-79
  disclosed_date: 2019-09-24
  created_date: 2019-09-24
  last_modified_date: 2019-09-24
  credit:
  - Michal Bentkowski
  references:
  - https://research.securitum.com/dompurify-bypass-using-mxss/
  source_url: https://snyk.io/vuln/SNYK-JS-DOMPURIFY-468981
- id: snykio:npm:dompurify:474012
  title: Cross-site Scripting (XSS)
  description: |+
    [dompurify][1] is a DOM-only XSS sanitizer for HTML, MathML and SVG.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). It is possible to bypass the package sanitization through
    Mutation XSS, which may allow an attacker to execute arbitrary
    JavaScript in a victim\'s browser.



    [1]: https://github.com/cure53/DOMPurify
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: dompurify
  vulnerable_versions:
  - "<2.0.7"
  severity: high
  package_manager: npm
  cve:
  - CVE-2019-16728
  cwe:
  - CWE-79
  disclosed_date: 2019-09-24
  created_date: 2019-10-22
  last_modified_date: 2019-10-22
  credit:
  - Masato Kinugawa
  references:
  - https://github.com/cure53/DOMPurify/releases/tag/2.0.7
  - https://www.npmjs.com/advisories/1223
  source_url: https://snyk.io/vuln/SNYK-JS-DOMPURIFY-474012
