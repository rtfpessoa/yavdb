---
- id: npmjs:npm:electron:539
  title: Chromium Remote Code Execution
  description: 'Affected versions of `ElectronJS` are susceptible to a remote code
    execution vulnerability that occurs when an affected application access remote
    content, even if the [sandbox option](https://electron.atom.io/docs/api/sandbox-option)
    is enabled.

'
  affected_package: electron
  vulnerable_versions:
  - ">0.4.1 <1.6.14"
  - ">= 1.7.0 < 1.7.8"
  severity: high
  package_manager: npm
  cve:
  - CVE-2017-16151
  cwe: CWE-94
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: Electron Team
  references: https://npmjs.com/advisories/539
  source_url: https://npmjs.com/advisories/539
- id: npmjs:npm:electron:563
  title: Remote Code Execution
  description: |-
    Affected versions of `electron` may be susceptible to a remote code execution flaw when certain conditions are met:
    1. The electron application is running on Windows.
    2. The electron application registers as the default handler for a protocol, such as `nodeapp://`.

    This vulnerability is caused by a failure to sanitize additional arguments to chromium in the command line handler for Electron.

    MacOS and Linux are not vulnerable.
  affected_package: electron
  vulnerable_versions:
  - ">0.4.1 <=1.6.16"
  - ">= 1.8.0 <1.8.2"
  - ">=1.7.0 <=1.7.11"
  severity: high
  package_manager: npm
  cve:
  - CVE-2018-1000006
  cwe: CWE-94
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: Zeke Sikelianos
  references: https://npmjs.com/advisories/563
  source_url: https://npmjs.com/advisories/563
- id: npmjs:npm:electron:574
  title: Code Execution by Re-enabling Node.js integration
  description: "Versions of electron \nA vulnerability has been discovered which allows
    Node.js integration to be re-enabled in some Electron applications that disable
    it.\n\nFor the application to be impacted by this vulnerability it must meet all
    of these conditions\n\n- Runs on Electron 1.7, 1.8, or a 2.0.0-beta\n- Allows
    execution of arbitrary remote code\n- Disables Node.js integration\n- Does not
    explicitly declare webviewTag: false in its webPreferences\n- Does not enable
    the nativeWindowOption option\n- Does not intercept new-window events and manually
    override event.newGuest without using the supplied options tag"
  affected_package: electron
  vulnerable_versions:
  - 2.0.0-beta.1
  - 2.0.0-beta.2
  - 2.0.0-beta.3
  - 2.0.0-beta.4
  - ">0.4.1 < 1.7.13"
  - ">=1.8.0 <1.8.4"
  severity: high
  package_manager: npm
  cwe: CWE-
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: Brendan Scarvell
  references: https://npmjs.com/advisories/574
  source_url: https://npmjs.com/advisories/574
- id: npmjs:npm:electron:732
  title: Remote Code Execution
  description: |-
    GitHub Electron 1.7.15, 1.8.7, 2.0.7, and 3.0.0-beta.6, in certain scenarios involving IFRAME elements and "nativeWindowOpen: true" or "sandbox: true" options, is affected by a WebPreferences vulnerability that can be leveraged to perform remote code execution.

    More information to determine if you are impacted can be found on the [electron blog](https://electronjs.org/blog/web-preferences-fix).
  affected_package: electron
  vulnerable_versions:
  - ">=1.7.0 <1.7.16"
  - ">=1.8.0 <1.8.8"
  - ">=2.0.0 <2.0.8"
  - ">=3.0.0-beta.1 <3.0.0-beta.7"
  severity: high
  package_manager: npm
  cve:
  - CVE-2018-15685
  cwe: CWE-94
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: Matt Austin
  references: https://npmjs.com/advisories/732
  source_url: https://npmjs.com/advisories/732
- id: snykio:npm:electron:174045
  title: Use After Free
  description: |
    [electron][1] is a framework which lets you write cross-platform desktop
    applications using JavaScript, HTML and CSS.

    Affected versions of this package are vulnerable to Use After Free via
    the Chromium FileReader.

    *Note: This vulnerability affects all software based on Chromium,
    including Electron.*



    [1]: https://www.npmjs.com/package/electron
  affected_package: electron
  vulnerable_versions:
  - "<2.0.18"
  - ">=3.0.0 <3.0.16"
  - ">=3.0.0 <3.1.6"
  - ">=4.0.0 <4.0.8"
  severity: high
  package_manager: npm
  cve:
  - CVE-2019-5786
  cwe:
  - CWE-416
  disclosed_date: 2019-03-07
  created_date: 2019-03-31
  last_modified_date: 2019-03-31
  credit:
  - Unknown
  references:
  - https://chromereleases.googleblog.com/2019/03/stable-channel-update-for-desktop.html
  - https://electronjs.org/blog/filereader-fix#mitigation
  - https://exploit-db.com/exploits/46812
  - https://github.com/electron/electron/commit/34c1a534415d0d5e099dc4a42af4d1bfd660d03a
  - https://www.exploit-db.com/exploits/46812
  source_url: https://snyk.io/vuln/SNYK-JS-ELECTRON-174045
- id: snykio:npm:electron:20160903
  title: Uninitialized Memory Exposure
  description: |
    [`electron`][1] is a framework for creating native applications with web
    technologies like JavaScript, HTML, and CSS. It takes care of the hard
    parts so you can focus on the core of your application.

    Affected versions of the package are vulnerable to Uninitialized Memory
    Exposure. The [Buffer][2] class in Node.js is available as global, even
    if the `nodeintegration` attribute is not added. This could result in
    concatenation of uninitialized memory to the buffer collection.

    This is a result of unobstructed use of the `Buffer` constructor, whose
    [insecure default constructor increases the odds of memory leakage][3].



    [1]: https://www.npmjs.com/package/electron
    [2]: https://nodejs.org/api/buffer.html
    [3]: https://snyk.io/blog/exploiting-buffer/
  affected_package: electron
  vulnerable_versions:
  - "<1.6.1"
  severity: high
  package_manager: npm
  cwe:
  - CWE-200
  disclosed_date: 2016-09-02
  created_date: 2017-10-09
  last_modified_date: 2017-10-09
  credit:
  - Unknown
  references:
  - https://github.com/electron/electron/commit/624e44dd6fb585cc9acd4a0b56c0568c789b5bd1
  - https://github.com/electron/electron/issues/7081
  - https://github.com/electron/electron/pull/8605
  - https://github.com/electron/electron/releases/tag/v1.6.1
  source_url: https://snyk.io/vuln/npm:electron:20160903
- id: snykio:npm:electron:20160926
  title: Denial of Service (DoS)
  description: |+
    [`electron`][1] is a framework for creating native applications with web
    technologies like JavaScript, HTML, and CSS. It takes care of the hard
    parts so you can focus on the core of your application.

    Affected versions of the package are vulnerable to Denial of Service
    (DoS) due to an uncaught error when handling the `window.alert`,
    `window.close`, and `window.confirm` functions, causing the service to
    crash.



    [1]: https://www.npmjs.com/package/electron
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: electron
  vulnerable_versions:
  - ">=1.3.0 <1.3.13"
  - ">=1.4.0 <1.4.11"
  severity: high
  package_manager: npm
  cwe:
  - CWE-248
  disclosed_date: 2016-09-25
  created_date: 2017-10-09
  last_modified_date: 2017-10-09
  credit:
  - Paul Pirosca
  references:
  - https://github.com/electron/electron/commit/3fe9762082f6cfdc071053995a41af5bfcca6057
  - https://github.com/electron/electron/commit/a9d4d9ad85f8969dbc532dc9781645c01da4bdbc
  - https://github.com/electron/electron/issues/7351
  - https://github.com/electron/electron/pull/8110
  - https://github.com/electron/electron/releases/tag/v1.3.13
  - https://github.com/electron/electron/releases/tag/v1.4.11
  source_url: https://snyk.io/vuln/npm:electron:20160926
- id: snykio:npm:electron:20161210
  title: Man-in-the-Middle (MitM)
  description: |
    [`electron`][1] is a framework for creating native applications with web
    technologies like JavaScript, HTML, and CSS. It takes care of the hard
    parts so you can focus on the core of your application.

    Affected versions of the package would incorrectly reject certain
    certificates during HTTPS requests, due to a flaw in Chrome where
    SSL/TLS certificates are incorrectly rejected 10 weeks from the build
    time of `libchromiumcontent`. This could cause users to use an insecure
    protocol and be vulnerable to a Man-in-the-Middle (MitM) attack.



    [1]: https://www.npmjs.com/package/electron
  affected_package: electron
  vulnerable_versions:
  - "<1.4.12 >=1.4.0"
  severity: medium
  package_manager: npm
  cwe:
  - CWE-295
  disclosed_date: 2016-12-09
  created_date: 2017-10-09
  last_modified_date: 2017-10-09
  credit:
  - Unknown
  references:
  - https://electron.atom.io/blog/2016/12/09/certificate-transparency-fix
  - https://github.com/electron/electron/commit/c751d42d1a98e9428e6bcb7992a7d495a79aec6a
  - https://github.com/electron/electron/pull/8176
  - https://github.com/electron/electron/releases/tag/v1.4.12
  source_url: https://snyk.io/vuln/npm:electron:20161210
- id: snykio:npm:electron:20170105
  title: Arbitrary Code Injection
  description: |
    [`electron`][1] is a framework for creating native applications with web
    technologies like JavaScript, HTML, and CSS. It takes care of the hard
    parts so you can focus on the core of your application.

    Affected versions of the package are vulnerable to Arbitrary Code
    Injection. A malicious user can create a specially crafted site which
    will be loaded in the `preload` script and would run in the main
    JavaScript context.



    [1]: https://www.npmjs.com/package/electron
  affected_package: electron
  vulnerable_versions:
  - "<1.4.15"
  severity: high
  package_manager: npm
  cwe:
  - CWE-284
  disclosed_date: 2017-01-04
  created_date: 2017-10-09
  last_modified_date: 2017-10-09
  credit:
  - Unknown
  references:
  - https://github.com/electron/electron/commit/feac8685f41fabbdce6c659db0a9be971e33c291
  - https://github.com/electron/electron/pull/8348
  source_url: https://snyk.io/vuln/npm:electron:20170105
- id: snykio:npm:electron:20170421
  title: Cross-site Scripting (XSS)
  description: |+
    [`electron`][1] is a framework for creating native applications with web
    technologies like JavaScript, HTML, and CSS. It takes care of the hard
    parts so you can focus on the core of your application.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks. A new window opened from within a window that had
    javascript disabled, would have javascript enabled by default.



    [1]: https://www.npmjs.com/package/electron
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: electron
  vulnerable_versions:
  - "<1.6.8"
  severity: medium
  package_manager: npm
  cwe:
  - CWE-79
  disclosed_date: 2017-04-20
  created_date: 2017-10-09
  last_modified_date: 2017-10-09
  credit:
  - Unknown
  references:
  - https://github.com/electron/electron/commit/c9ec45d9d8b6f3fa82b5f47ab8a6f7f1cece436c
  - https://github.com/electron/electron/pull/9250
  source_url: https://snyk.io/vuln/npm:electron:20170421
- id: snykio:npm:electron:20170422
  title: Denial of Service (DoS)
  description: |+
    [`electron`][1] is a framework for creating native applications with web
    technologies like JavaScript, HTML, and CSS. It takes care of the hard
    parts so you can focus on the core of your application.

    Affected versions of the package are vulnerable to Denial of Service
    (DoS). Certain built-in window APIs like `alert`, `confirm`, `open`,
    `history.go`, and `postMessage` would throw errors in the main process
    instead of the renderer processes when the arguments were invalid,
    causing the service to crash.



    [1]: https://www.npmjs.com/package/electron
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: electron
  vulnerable_versions:
  - "<1.6.8"
  severity: low
  package_manager: npm
  cwe:
  - CWE-248
  disclosed_date: 2017-04-20
  created_date: 2017-10-09
  last_modified_date: 2017-10-09
  credit:
  - Unknown
  references:
  - https://github.com/electron/electron/commit/2e223288d23ba9fb95d08d0d006e9a7ec9a7f583
  - https://github.com/electron/electron/pull/9252
  source_url: https://snyk.io/vuln/npm:electron:20170422
- id: snykio:npm:electron:20170423
  title: Cross-site Scripting (XSS)
  description: |+
    [`electron`][1] is a framework for creating native applications with web
    technologies like JavaScript, HTML, and CSS. It takes care of the hard
    parts so you can focus on the core of your application.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks.



    [1]: https://www.npmjs.com/package/electron
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: electron
  vulnerable_versions:
  - "<1.6.8"
  severity: medium
  package_manager: npm
  cwe:
  - CWE-79
  disclosed_date: 2017-04-20
  created_date: 2017-10-09
  last_modified_date: 2017-10-09
  credit:
  - Unknown
  references:
  - https://github.com/electron/electron/commit/c146f8a308a5eb8d74fcd2fc566dc43e4eeca467
  - https://github.com/electron/electron/pull/9249
  source_url: https://snyk.io/vuln/npm:electron:20170423
- id: snykio:npm:electron:20170425
  title: Denial of Service (DoS)
  description: |+
    [`electron`][1] is a framework for creating native applications with web
    technologies like JavaScript, HTML, and CSS. It takes care of the hard
    parts so you can focus on the core of your application.

    Affected versions of the package are vulnerable to Denial of Service
    (DoS). Valid frame names passed into `window.open` would throw errors
    and cause the service to crash.



    [1]: https://www.npmjs.com/package/electron
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: electron
  vulnerable_versions:
  - "<1.6.8"
  severity: medium
  package_manager: npm
  cwe:
  - CWE-248
  disclosed_date: 2017-04-24
  created_date: 2017-10-09
  last_modified_date: 2017-10-09
  credit:
  - Unknown
  references:
  - https://github.com/electron/electron/commit/0aa53f4af7d13ea4c516999605b5d644a48a8f81
  - https://github.com/electron/electron/pull/9287
  source_url: https://snyk.io/vuln/npm:electron:20170425
- id: snykio:npm:electron:20170426
  title: Denial of Service (DoS)
  description: |+
    [`electron`][1] is a framework for creating native applications with web
    technologies like JavaScript, HTML, and CSS. It takes care of the hard
    parts so you can focus on the core of your application.

    Affected versions of the package are vulnerable to Denial of Service
    (DoS). When specifying `webPreferences` in the `features` parameter to
    the `window.open` function, it would throw an error in the main process
    and cause the service to crash.



    [1]: https://www.npmjs.com/package/electron
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: electron
  vulnerable_versions:
  - "<1.6.8"
  severity: medium
  package_manager: npm
  cwe:
  - CWE-248
  disclosed_date: 2017-04-25
  created_date: 2017-10-09
  last_modified_date: 2017-10-09
  credit:
  - Unknown
  references:
  - https://github.com/electron/electron/commit/8460a580b98f26e8a59ad421c33c87aec20c6a82
  - https://github.com/electron/electron/pull/9289
  source_url: https://snyk.io/vuln/npm:electron:20170426
- id: snykio:npm:electron:20170927
  title: Arbitrary Code Execution
  description: |
    [electron][1] is a framework which lets you write cross-platform desktop
    applications using JavaScript, HTML and CSS.

    Affected versions of this package are vulnerable to Arbitrary Code
    Execution. An arbitrary code execution vulnerability was discovered in
    Google Chromium, affecting many versions of Electron. Any Electron app
    that accesses remote content is vulnerable to this exploit, regardless
    of whether the sandbox option is enabled.



    [1]: https://www.npmjs.com/package/electron
  affected_package: electron
  vulnerable_versions:
  - "<1.6.14"
  - ">=1.7.0 <1.7.8"
  - ">=1.8.0 <1.8.1"
  severity: high
  package_manager: npm
  cve:
  - CVE-2017-16151
  cwe:
  - CWE-94
  disclosed_date: 2017-09-26
  created_date: 2017-09-28
  last_modified_date: 2017-09-28
  credit:
  - Electron Team
  references:
  - https://electron.atom.io/blog/2017/09/27/chromium-rce-vulnerability-fix
  - https://electronjs.org/releases#1.8.1
  source_url: https://snyk.io/vuln/npm:electron:20170927
- id: snykio:npm:electron:20180102
  title: URL Spoofing
  description: |
    [electron][1] is a framework which lets you write cross-platform desktop
    applications using JavaScript, HTML and CSS.

    Affected versions of this package are vulnerable to URL Spoofing. When
    opening PDFs in PDFium resulting loading arbitrary PDFs that a hacker
    can control.



    [1]: https://www.npmjs.com/package/electron
  affected_package: electron
  vulnerable_versions:
  - "<1.7.6"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2017-1000424
  cwe:
  - CWE-19
  disclosed_date: 2018-01-02
  created_date: 2018-02-06
  last_modified_date: 2018-02-06
  credit:
  - Unknown
  references:
  - https://github.com/electron/electron/pull/10008
  - https://github.com/electron/electron/pull/10008/commits/9a7651a93faaaef0534df1ab77268d7deb9d3165
  - https://nvd.nist.gov/vuln/detail/CVE-2017-1000424
  source_url: https://snyk.io/vuln/npm:electron:20180102
- id: snykio:npm:electron:20180123
  title: Directory Traversal
  description: |
    [electron][1] is a framework which lets you write cross-platform desktop
    applications using JavaScript, HTML and CSS.

    Affected versions of this package are vulnerable to Directory Traversal.
    Electron apps running on Windows that register themselves as the default
    handler for a protocol, like myapp://, are vulnerable.

    Such apps can be affected regardless of how the protocol is registered,
    e.g. using native code, the Windows registry, or Electron\'s
    app.setAsDefaultProtocolClient API.

    **Note:** MacOS and Linux are not affected by this vulnerability.



    [1]: https://www.npmjs.com/package/electron
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
  affected_package: electron
  vulnerable_versions:
  - "<1.6.16"
  - ">=1.7 <1.7.11"
  - ">=1.8 <1.8.2-beta.4"
  severity: high
  package_manager: npm
  cve:
  - CVE-2018-1000006
  cwe:
  - CWE-22
  disclosed_date: 2018-01-23
  created_date: 2018-01-25
  last_modified_date: 2018-01-25
  credit:
  - Zeke Sikelianos
  references:
  - https://electronjs.org/blog/protocol-handler-fix
  - https://exploit-db.com/exploits/44357
  - https://github.com/electron/electron/pull/12294
  - https://www.npmjs.com/advisories/563
  source_url: https://snyk.io/vuln/npm:electron:20180123
- id: snykio:npm:electron:20180307
  title: Arbitrary Code Execution
  description: |
    [electron][1] is a framework which lets you write cross-platform desktop
    applications using JavaScript, HTML and CSS.

    Affected versions of this package are vulnerable to Arbitrary Code
    Execution. It appears to be exploitable via the victim opening an
    electron protocol handler in their browser.

    This issue is due to an incomplete fix for [CVE-2018-1000006][2],
    specifically the black list used was not case insensitive allowing an
    attacker to potentially bypass it.



    [1]: https://www.npmjs.com/package/electron
    [2]: https://snyk.io/vuln/npm:electron:20180123
  affected_package: electron
  vulnerable_versions:
  - "<1.8.2-beta.5"
  severity: high
  package_manager: npm
  cve:
  - CVE-2018-1000118
  cwe:
  - CWE-264
  disclosed_date: 2018-03-07
  created_date: 2018-03-12
  last_modified_date: 2018-03-12
  credit:
  - Unknown
  references:
  - https://electronjs.org/releases#1.8.2-beta.5
  - https://github.com/electron/electron/commit/ce361a12e355f9e1e99c989f1ea056c9e502dbe7
  - https://nvd.nist.gov/vuln/detail/CVE-2018-1000118
  source_url: https://snyk.io/vuln/npm:electron:20180307
- id: snykio:npm:electron:20180323
  title: Arbitrary Code Execution
  description: |
    [electron][1] is a framework which lets you write cross-platform desktop
    applications using JavaScript, HTML and CSS.

    Affected versions of this package are vulnerable to Arbitrary Code
    Execution. It contains an improper handling of values vulnerability in
    Webviews. This attack appear to be exploitable via an app which allows
    execution of 3rd party code AND disallows node integration AND has not
    specified if webview is enabled/disabled.



    [1]: https://www.npmjs.com/package/electron
  affected_package: electron
  vulnerable_versions:
  - ">=1.7.0 <1.7.13"
  - ">=1.8.1 <1.8.4"
  - ">=2.0.0-beta.1 <2.0.0-beta.4"
  severity: high
  package_manager: npm
  cve:
  - CVE-2018-1000136
  cwe:
  - CWE-228
  disclosed_date: 2018-03-23
  created_date: 2018-03-27
  last_modified_date: 2018-03-27
  credit:
  - Unknown
  references:
  - https://bugzilla.redhat.com/show_bug.cgi?id=1560094
  - https://www.npmjs.com/advisories/574
  source_url: https://snyk.io/vuln/npm:electron:20180323
- id: snykio:npm:electron:20180822
  title: Arbitrary Code Execution
  description: |
    [electron][1] is a framework which lets you write cross-platform desktop
    applications using JavaScript, HTML and CSS.

    Affected versions of this package are vulnerable to Arbitrary Code
    Execution. **Note:** This vulnerability affects only users who embed any
    remote user content, even in a sandbox and accept user input with any
    XSS vulnerabilities.



    [1]: https://www.npmjs.com/package/electron
  affected_package: electron
  vulnerable_versions:
  - ">=1.7.0 <1.7.16"
  - ">=1.8.0 <1.8.8"
  - ">=2.0.0 <2.0.8"
  - ">=3.0.0-beta6 <3.0.0-beta.7"
  severity: high
  package_manager: npm
  cve:
  - CVE-2018-15685
  cwe:
  - CWE-94
  disclosed_date: 2018-08-22
  created_date: 2018-08-27
  last_modified_date: 2018-08-27
  credit:
  - Matt Austin
  references:
  - https://electronjs.org/blog/web-preferences-fix
  - https://www.exploit-db.com/exploits/45272
  - https://www.npmjs.com/advisories/732
  source_url: https://snyk.io/vuln/npm:electron:20180822
- id: snykio:npm:electron:455615
  title: Privilege Escalation
  description: |
    [electron][1] is a framework which lets you write cross-platform desktop
    applications using JavaScript, HTML and CSS.

    Affected versions of this package are vulnerable to Privilege
    Escalation. It allowed local users to gain privileges via a Trojan horse
    Node.js module in a parent directory of a directory named on a require
    line.



    [1]: https://www.npmjs.com/package/electron
  affected_package: electron
  vulnerable_versions:
  - "<0.33.5"
  severity: high
  package_manager: npm
  cve:
  - CVE-2016-1202
  cwe:
  - CWE-284
  disclosed_date: 2016-04-05
  created_date: 2019-07-30
  last_modified_date: 2019-07-30
  credit:
  - Unknown
  references:
  - https://github.com/electron/electron/commit/9a2e2b365d061ec10cd861391fd5b1344af7194d
  - https://github.com/electron/electron/pull/2976
  source_url: https://snyk.io/vuln/SNYK-JS-ELECTRON-455615
- id: snykio:npm:electron:483050
  title: Arbitrary Code Execution
  description: |
    [electron][1] is a framework which lets you write cross-platform desktop
    applications using JavaScript, HTML and CSS.

    Affected versions of this package are vulnerable to Arbitrary Code
    Execution. Opening a `BrowserView` with `sandbox: true` or
    `nativeWindowOpen: true` and `nodeIntegration: false` results in a
    `webContents` where `window.open()` can be called and the newly opened
    child will have nodeIntegration enabled.



    [1]: https://www.npmjs.com/package/electron
  affected_package: electron
  vulnerable_versions:
  - "<2.0.17"
  - ">=3.0.0 <3.0.15"
  - ">=3.1.0 <3.1.3"
  - ">=4.0.0 <4.0.4"
  - ">=5.0.0-beta.1 <5.0.0-beta.2"
  severity: high
  package_manager: npm
  cwe:
  - CWE-1188
  disclosed_date: 2019-01-31
  created_date: 2019-11-11
  last_modified_date: 2019-11-11
  credit:
  - PalmerAL
  references:
  - https://electronjs.org/blog/window-open-fix
  - https://github.com/electron/electron/commit/0309654cc19e07a9a028293aa39a51a1bf18d844
  - https://github.com/electron/electron/releases/tag/v2.0.17
  source_url: https://snyk.io/vuln/SNYK-JS-ELECTRON-483050
- id: snykio:npm:electron:483056
  title: Arbitrary Code Execution
  description: |
    [electron][1] is a framework which lets you write cross-platform desktop
    applications using JavaScript, HTML and CSS.

    Affected versions of this package are vulnerable to Arbitrary Code
    Execution due to Node being enabled in a webview because the default
    values of `nodeIntegration` and `webviewTag` were set to `true` when
    they where undefined by a user. The fix allows users to prevent Node and
    webview being enabled, when undefined, by setting the default values of
    `nodeIntegration` and `webviewTag` to `false`.



    [1]: https://www.npmjs.com/package/electron
  affected_package: electron
  vulnerable_versions:
  - "<5.0.0-beta.1"
  severity: high
  package_manager: npm
  cwe:
  - CWE-453
  disclosed_date: 2019-01-07
  created_date: 2019-11-11
  last_modified_date: 2019-11-11
  credit:
  - Unknown
  references:
  - https://github.com/electron/electron/commit/fade3eb67999a11f17a8b64e63653d25f7bfe065
  - https://github.com/electron/electron/pull/16235
  source_url: https://snyk.io/vuln/SNYK-JS-ELECTRON-483056
- id: snykio:npm:electron:564272
  title: Use After Free
  description: |
    [electron][1] is a framework which lets you write cross-platform desktop
    applications using JavaScript, HTML and CSS.

    Affected versions of this package are vulnerable to Use After Free.
    Multiple user after free vulnerabilities exists in the WebAudio
    component of `chromium.`



    [1]: https://www.npmjs.com/package/electron
  affected_package: electron
  vulnerable_versions:
  - "<8.2.1"
  severity: high
  package_manager: npm
  cve:
  - CVE-2020-6450
  - CVE-2020-6451
  cwe:
  - CWE-416
  disclosed_date: 2020-04-02
  created_date: 2020-04-02
  last_modified_date: 2020-04-02
  credit:
  - Semmle Security Research
  references:
  - https://bugzilla.redhat.com/show_bug.cgi?id=1820155
  - https://chromereleases.googleblog.com/2020/03/stable-channel-update-for-desktop_31.html
  - https://github.com/electron/electron/commit/e7fce151521ad60f02e1c4b425de101baa2bdb34
  - https://github.com/electron/electron/pull/22869#issuecomment-607403571
  - https://github.com/electron/electron/pull/22870
  - https://github.com/electron/electron/pull/22870/commits/d6e5fb4052b027eb43e4e355ce40827406753c46
  source_url: https://snyk.io/vuln/SNYK-JS-ELECTRON-564272
- id: snykio:npm:electron:565051
  title: Heap Overflow
  description: |
    [electron][1] is a framework which lets you write cross-platform desktop
    applications using JavaScript, HTML and CSS.

    Affected versions of this package are vulnerable to Heap Overflow. A
    Heap buffer overflow exists in the media component of Google Chrome,
    which also affects chromium.



    [1]: https://www.npmjs.com/package/electron
  affected_package: electron
  vulnerable_versions:
  - "<8.2.1"
  severity: high
  package_manager: npm
  cve:
  - CVE-2020-6452
  cwe:
  - CWE-125
  disclosed_date: 2020-04-02
  created_date: 2020-04-02
  last_modified_date: 2020-04-02
  credit:
  - Unknown
  references:
  - https://bugzilla.redhat.com/show_bug.cgi?id=1820157
  - https://chromereleases.googleblog.com/2020/03/stable-channel-update-for-desktop_31.html
  - https://github.com/electron/electron/pull/23044
  source_url: https://snyk.io/vuln/SNYK-JS-ELECTRON-565051
- id: snykio:npm:electron:565052
  title: Out-of-bounds Read
  description: |
    [electron][1] is a framework which lets you write cross-platform desktop
    applications using JavaScript, HTML and CSS.

    Affected versions of this package are vulnerable to Out-of-bounds Read.
    The input to `sctp_load_addresses_from_init` is verified by calling
    `sctp_arethere_unrecognized_parameters`, however there is a difference
    in how these functions handle parameter bounds. The function
    `sctp_arethere_unrecognized_parameters` does not process a parameter
    that is partially outside of the limit of the chunk, meanwhile,
    `sctp_load_addresses_from_init` will continue processing until a
    parameter that is entirely outside of the chunk occurs.

    This means that the last parameter of a chunk is not always verified,
    which can lead to parameters with very short `plen` values being
    processed by `sctp_load_addresses_from_init`. This can lead to
    out-of-bounds reads whenever the `plen` is subtracted from the header
    `len`.



    [1]: https://www.npmjs.com/package/electron
  affected_package: electron
  vulnerable_versions:
  - "<8.2.0"
  severity: high
  package_manager: npm
  cve:
  - CVE-2019-20503
  cwe:
  - CWE-125
  disclosed_date: 2020-03-06
  created_date: 2020-03-09
  last_modified_date: 2020-03-09
  credit:
  - Natalie Silvanovich
  references:
  - https://bugs.chromium.org/p/project-zero/issues/detail?id=1992
  - https://github.com/electron/electron/pull/22986
  - https://github.com/sctplab/usrsctp/commit/790a7a2555aefb392a5a69923f1e9d17b4968467
  source_url: https://snyk.io/vuln/SNYK-JS-ELECTRON-565052
