---
- id: npmjs:npm:node-sass:961
  title: Denial of Service
  description: Affected versions of `node-sass` are vulnerable to Denial of Service
    (DoS). Crafted objects passed to the `renderSync` function may trigger C++ assertions
    in `CustomImporterBridge::get_importer_entry` and `CustomImporterBridge::post_process_return_value`
    that crash the Node process. This may allow attackers to crash the system's running
    Node process and lead to Denial of Service.
  affected_package: node-sass
  vulnerable_versions:
  - ">=3.3.0 <4.13.1"
  severity: low
  package_manager: npm
  cwe: CWE-400
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: Alexander Jordan
- id: snykio:npm:node-sass:1059081
  title: Improper Certificate Validation
  description: |
    [node-sass][1] is a Node.js bindings package for libsass.

    Affected versions of this package are vulnerable to Improper Certificate
    Validation. Certificate validation is disabled by default when
    requesting binaries, even if the user is not specifying an alternative
    download path.



    [1]: https://npmjs.org/package/node-sass
  affected_package: node-sass
  vulnerable_versions:
  - ">=2.0.0 <4.14.1"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2020-24025
  cwe:
  - CWE-295
  disclosed_date: 2021-01-12
  created_date: 2021-01-12
  last_modified_date: 2021-01-12
  credit:
  - Lorenzo Stella
  references:
  - https://github.com/sass/node-sass/pull/567#issuecomment-656609236
  source_url: https://snyk.io/vuln/SNYK-JS-NODESASS-1059081
- id: snykio:npm:node-sass:535497
  title: Use After Free
  description: |
    [node-sass][1] is a Node.js bindings package for libsass.

    Affected versions of this package are vulnerable to Use After Free. A
    use-after-free vulnerability exists in `handle_error()` in
    `sass_context.cpp` in LibSass 3.4.x and 3.5.x through 3.5.4 that could
    be leveraged to cause a denial of service (application crash) or
    possibly unspecified other impact. `node-sass` is affected by this
    vulnerability due to its usage of `libsass`.



    [1]: https://npmjs.org/package/node-sass
  affected_package: node-sass
  vulnerable_versions:
  - ">=4.4.0"
  severity: high
  package_manager: npm
  cve:
  - CVE-2018-11499
  cwe:
  - CWE-416
  disclosed_date: 2018-05-26
  created_date: 2019-11-25
  last_modified_date: 2019-11-25
  credit:
  - Unkown
  references:
  - https://github.com/sass/libsass/issues/2643
  source_url: https://snyk.io/vuln/SNYK-JS-NODESASS-535497
- id: snykio:npm:node-sass:535498
  title: Out-of-Bounds
  description: |
    [node-sass][1] is a Node.js bindings package for libsass.

    Affected versions of this package are vulnerable to Out-of-Bounds. In
    LibSass 3.5.5, a heap-based buffer over-read exists in
    `Sass::Prelexer::parenthese_scope` in `prelexer.hpp`. `node-sass` is
    affected by this vulnerability due to its bundled usage of `libsass`.



    [1]: https://npmjs.org/package/node-sass
  affected_package: node-sass
  vulnerable_versions:
  - "*"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2019-6283
  cwe:
  - CWE-119
  disclosed_date: 2019-01-14
  created_date: 2019-11-25
  last_modified_date: 2019-11-25
  credit:
  - Unknown
  references:
  - https://github.com/sass/libsass/issues/2814
  source_url: https://snyk.io/vuln/SNYK-JS-NODESASS-535498
- id: snykio:npm:node-sass:535499
  title: Out-of-bounds Read
  description: |
    [node-sass][1] is a Node.js bindings package for libsass.

    Affected versions of this package are vulnerable to Out-of-bounds Read.
    \]There is a heap-based buffer over-read in the
    `Sass::Prelexer::re_linebreak` function in `lexer.cpp` in LibSass 3.4.5.
    A crafted input will lead to a remote denial of service attack.



    [1]: https://npmjs.org/package/node-sass
  affected_package: node-sass
  vulnerable_versions:
  - "<4.2.0"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2017-11608
  cwe:
  - CWE-125
  disclosed_date: 2017-07-24
  created_date: 2019-11-25
  last_modified_date: 2019-11-25
  credit:
  - Unknown
  references:
  - https://bugzilla.redhat.com/show_bug.cgi?id=1474276
  - https://github.com/sass/libsass/commit/648f763ede97f9a2c2c843a0a18ac18bbde3507b
  - https://github.com/sass/node-sass/releases/tag/v4.2.0
  source_url: https://snyk.io/vuln/SNYK-JS-NODESASS-535499
- id: snykio:npm:node-sass:535500
  title: NULL Pointer Dereference
  description: |
    [node-sass][1] is a Node.js bindings package for libsass.

    Affected versions of this package are vulnerable to NULL Pointer
    Dereference. An issue was discovered in LibSass through 3.5.4. A NULL
    pointer dereference was found in the function
    `Sass::Functions::selector_append` which could be leveraged by an
    attacker to cause a denial of service (application crash) or possibly
    have unspecified other impact. `node-sass` is affected by this
    vulnerability due to its bundled usage of `libsass`.



    [1]: https://npmjs.org/package/node-sass
  affected_package: node-sass
  vulnerable_versions:
  - "<4.11.0"
  severity: high
  package_manager: npm
  cve:
  - CVE-2018-11694
  cwe:
  - CWE-476
  disclosed_date: 2018-06-03
  created_date: 2019-11-25
  last_modified_date: 2019-11-25
  credit:
  - Unknown
  references:
  - https://github.com/sass/libsass/commit/280ffd8c692cc24199b678f38fc796825d7df4a1
  - https://github.com/sass/libsass/commit/c93f0581c6b7794d8c1d5637c5c4dabd591b1d57
  - https://github.com/sass/libsass/issues/2663
  source_url: https://snyk.io/vuln/SNYK-JS-NODESASS-535500
- id: snykio:npm:node-sass:535501
  title: Out-of-bounds Read
  description: |
    [node-sass][1] is a Node.js bindings package for libsass.

    Affected versions of this package are vulnerable to Out-of-bounds Read.
    An issue was discovered in LibSass through 3.5.4. An out-of-bounds read
    of a memory region was found in the function
    `Sass::Prelexer::skip_over_scopes` which could be leveraged by an
    attacker to disclose information or manipulated to read from unmapped
    memory causing a denial of service. `node-sass` is affected by this
    vulnerability due to its bundled usage of `libsass`.



    [1]: https://npmjs.org/package/node-sass
  affected_package: node-sass
  vulnerable_versions:
  - "<4.11.0"
  severity: high
  package_manager: npm
  cve:
  - CVE-2018-11693
  cwe:
  - CWE-125
  disclosed_date: 2018-06-04
  created_date: 2019-11-25
  last_modified_date: 2019-11-25
  credit:
  - Unknown
  references:
  - https://github.com/sass/libsass/commit/c0a6cf39dea9b2522a08d61b731bc72dfb362584
  - https://github.com/sass/libsass/issues/2661
  source_url: https://snyk.io/vuln/SNYK-JS-NODESASS-535501
- id: snykio:npm:node-sass:535502
  title: NULL Pointer Dereference
  description: |
    [node-sass][1] is a Node.js bindings package for libsass.

    Affected versions of this package are vulnerable to NULL Pointer
    Dereference. In LibSass 3.5.5, a NULL Pointer Dereference in the
    function ``` Sass::Eval::operator()``(Sass::Supports_Operator*) ``` in
    `eval.cpp` may cause a Denial of Service (application crash) via a
    crafted sass input file.



    [1]: https://npmjs.org/package/node-sass
  affected_package: node-sass
  vulnerable_versions:
  - "*"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2018-20190
  cwe:
  - CWE-476
  disclosed_date: 2018-12-17
  created_date: 2019-11-25
  last_modified_date: 2019-11-25
  credit:
  - Unknown
  references:
  - https://github.com/sass/libsass/commit/69ae7ef4775e1dbd5985940927e28fe34201331d
  - https://github.com/sass/libsass/issues/2786
  - https://github.com/sass/libsass/pull/2860
  source_url: https://snyk.io/vuln/SNYK-JS-NODESASS-535502
- id: snykio:npm:node-sass:535503
  title: Uncontrolled Recursion
  description: |
    [node-sass][1] is a Node.js bindings package for libsass.

    Affected versions of this package are vulnerable to Uncontrolled
    Recursion. There is a stack consumption vulnerability in the
    Parser::advanceToNextToken function in parser.cpp in LibSass 3.4.5. A
    crafted input may lead to remote denial of service. `node-sass` is
    affected by this vulnerability due to its bundled usage of `libsass`.



    [1]: https://npmjs.org/package/node-sass
  affected_package: node-sass
  vulnerable_versions:
  - "<4.8.0"
  severity: high
  package_manager: npm
  cve:
  - CVE-2017-11556
  cwe:
  - CWE-674
  disclosed_date: 2017-07-23
  created_date: 2019-11-25
  last_modified_date: 2019-11-25
  credit:
  - Unknown
  references:
  - https://github.com/sass/libsass/commit/7664114543757e932f5b1a2ff5295aa9b34f8623
  - https://github.com/sass/libsass/issues/2447
  - https://github.com/sass/node-sass/releases/tag/v4.8.0
  source_url: https://snyk.io/vuln/SNYK-JS-NODESASS-535503
- id: snykio:npm:node-sass:535504
  title: Resource Exhaustion
  description: "[node-sass][1] is a Node.js bindings package for libsass.\n\nAffected
    versions of this package are vulnerable to Resource Exhaustion.\nIn LibSass prior
    to 3.5.5,\n`Sass::Eval::operator()(Sass::Binary_Expression*)` inside `eval.cpp`\nallows
    attackers to cause a denial-of-service resulting from stack\nconsumption via a
    crafted sass file, because of certain incorrect\nparsing of \\'%\\' as a modulo
    operator in `parser.cpp`.\n\n\n\n[1]: https://npmjs.org/package/node-sass\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n{: .language-js}\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n{: .language-bash}\n\nThe entire
    process of testing it against a 30 characters long string\ntakes around ~52ms.
    But when given an invalid string, it takes nearly\ntwo seconds to complete the
    test, over ten times as long as it took to\ntest a valid string. The dramatic
    difference is due to the way regular\nexpressions get evaluated.\n\nMost Regex
    engines will work very similarly (with minor differences).\nThe engine will match
    the first possible way to accept the current\ncharacter and proceed to the next
    one. If it then fails to match the\nnext one, it will backtrack and see if there
    was another way to digest\nthe previous character. If it goes too far down the
    rabbit hole only to\nfind out the string doesn’t match in the end, and if many
    characters\nhave multiple valid regex paths, the number of backtracking steps
    can\nbecome very large, resulting in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s
    look at how our expression runs into this problem, using a\nshorter string: \\\"ACCCX\\\".
    While it seems fairly straightforward, there\nare still four different ways that
    the engine could match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.
    \ C+C+C.\n\nThe engine has to try each of those combinations to see if any of
    them\npotentially match against the expression. When you combine that with the\nother
    steps the engine must take, we can use [RegEx 101 debugger][1] to\nsee the engine
    has to take a total of 38 steps before it can determine\nthe string doesn\\'t
    match.\n\nFrom there, the number of steps the engine must use to validate a string\njust
    continues to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n|
    ACCCX | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX
    | 14 | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to
    take over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n"
  affected_package: node-sass
  vulnerable_versions:
  - "<4.11.0"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2018-19837
  cwe:
  - CWE-400
  disclosed_date: 2018-12-04
  created_date: 2019-11-25
  last_modified_date: 2019-11-25
  credit:
  - Unknown
  references:
  - https://github.com/sass/libsass/commit/210fdff7a65370c2ae24e022a2b35da8c423cc5f
  - https://github.com/sass/libsass/issues/2659
  - https://github.com/sass/node-sass/releases/tag/v4.11.0
  source_url: https://snyk.io/vuln/SNYK-JS-NODESASS-535504
- id: snykio:npm:node-sass:535505
  title: NULL Pointer Dereference
  description: |
    [node-sass][1] is a Node.js bindings package for libsass.

    Affected versions of this package are vulnerable to NULL Pointer
    Dereference. An issue was discovered in LibSass through 3.5.4. A NULL
    pointer dereference was found in the function `Sass::Inspect::operator`
    which could be leveraged by an attacker to cause a denial of service
    (application crash) or possibly have unspecified other impact.



    [1]: https://npmjs.org/package/node-sass
  affected_package: node-sass
  vulnerable_versions:
  - "<4.11.0"
  severity: high
  package_manager: npm
  cve:
  - CVE-2018-11696
  cwe:
  - CWE-476
  disclosed_date: 2018-06-04
  created_date: 2019-11-25
  last_modified_date: 2019-11-25
  credit:
  - Unknown
  references:
  - https://github.com/sass/libsass/commit/38f4c3699d06b64128bebc7cf1e8b3125be74dc4
  - https://github.com/sass/libsass/issues/2665
  source_url: https://snyk.io/vuln/SNYK-JS-NODESASS-535505
- id: snykio:npm:node-sass:540956
  title: Out-of-bounds Read
  description: |+
    [node-sass][1] is a Node.js bindings package for libsass.

    Affected versions of this package are vulnerable to Out-of-bounds Read
    via the function `Sass::Prelexer::exactly()` which could be leveraged by
    an attacker to disclose information or manipulated to read from unmapped
    memory causing a denial of service. Note: `node-sass` is affected by
    this vulnerability due to its bundled usage of the `libsass` package.



    [1]: https://npmjs.org/package/node-sass
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: node-sass
  vulnerable_versions:
  - "*"
  severity: high
  package_manager: npm
  cve:
  - CVE-2018-11697
  cwe:
  - CWE-79
  disclosed_date: 2018-04-06
  created_date: 2020-01-08
  last_modified_date: 2020-01-08
  credit:
  - Unknown
  references:
  - https://github.com/sass/libsass/commit/eb15533b07773c30dc03c9d742865604f47120ef
  - https://nvd.nist.gov/vuln/detail/CVE-2018-11697
  source_url: https://snyk.io/vuln/SNYK-JS-NODESASS-540956
- id: snykio:npm:node-sass:540958
  title: Out-of-bounds Read
  description: "[node-sass][1] is a Node.js bindings package for libsass.\n\nAffected
    versions of this package are vulnerable to Out-of-bounds Read\nvia `Sass::weaveParents`
    in `ast_sel_weave.cpp`. Note: `node-sass` is\naffected by this vulnerability due
    to its bundled usage of the `libsass`\npackage.\n\n\n\n[1]: https://npmjs.org/package/node-sass\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n{: .language-js}\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n{: .language-bash}\n\nThe entire
    process of testing it against a 30 characters long string\ntakes around ~52ms.
    But when given an invalid string, it takes nearly\ntwo seconds to complete the
    test, over ten times as long as it took to\ntest a valid string. The dramatic
    difference is due to the way regular\nexpressions get evaluated.\n\nMost Regex
    engines will work very similarly (with minor differences).\nThe engine will match
    the first possible way to accept the current\ncharacter and proceed to the next
    one. If it then fails to match the\nnext one, it will backtrack and see if there
    was another way to digest\nthe previous character. If it goes too far down the
    rabbit hole only to\nfind out the string doesn’t match in the end, and if many
    characters\nhave multiple valid regex paths, the number of backtracking steps
    can\nbecome very large, resulting in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s
    look at how our expression runs into this problem, using a\nshorter string: \\\"ACCCX\\\".
    While it seems fairly straightforward, there\nare still four different ways that
    the engine could match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.
    \ C+C+C.\n\nThe engine has to try each of those combinations to see if any of
    them\npotentially match against the expression. When you combine that with the\nother
    steps the engine must take, we can use [RegEx 101 debugger][1] to\nsee the engine
    has to take a total of 38 steps before it can determine\nthe string doesn\\'t
    match.\n\nFrom there, the number of steps the engine must use to validate a string\njust
    continues to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n|
    ACCCX | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX
    | 14 | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to
    take over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n"
  affected_package: node-sass
  vulnerable_versions:
  - "*"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2019-18798
  cwe:
  - CWE-400
  disclosed_date: 2019-06-11
  created_date: 2020-01-08
  last_modified_date: 2020-01-08
  credit:
  - Unknown
  references:
  - https://github.com/sass/libsass/commit/e1c16e09b4a953757a15149deaaf28a3fd81dc97
  - https://nvd.nist.gov/vuln/detail/CVE-2019-18798
  source_url: https://snyk.io/vuln/SNYK-JS-NODESASS-540958
- id: snykio:npm:node-sass:540960
  title: Uncontrolled Recursion
  description: |+
    [node-sass][1] is a Node.js bindings package for libsass.

    Affected versions of this package are vulnerable to Uncontrolled
    Recursion via the function `Sass::Eval::operator()` in `eval.cpp`. It
    will lead to a remote denial of service attack. Note: `node-sass` is
    affected by this vulnerability due to its bundled usage of the `libsass`
    package.



    [1]: https://npmjs.org/package/node-sass
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: node-sass
  vulnerable_versions:
  - "<4.4.0"
  severity: high
  package_manager: npm
  cve:
  - CVE-2017-12964
  cwe:
  - CWE-79
  disclosed_date: 2017-08-18
  created_date: 2020-01-08
  last_modified_date: 2020-01-08
  credit:
  - Unknown
  references:
  - https://bugzilla.redhat.com/show_bug.cgi?id=1482397
  - https://nvd.nist.gov/vuln/detail/CVE-2017-12964
  source_url: https://snyk.io/vuln/SNYK-JS-NODESASS-540960
- id: snykio:npm:node-sass:540962
  title: Out-of-bounds Read
  description: |+
    [node-sass][1] is a Node.js bindings package for libsass.

    Affected versions of this package are vulnerable to Out-of-bounds Read
    via `lexer.hpp`. A crafted input will lead to a remote denial of service
    attack. Note: `node-sass` is affected by this vulnerability due to its
    bundled usage of the `libsass` package.



    [1]: https://npmjs.org/package/node-sass
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: node-sass
  vulnerable_versions:
  - "<4.4.0"
  severity: high
  package_manager: npm
  cve:
  - CVE-2017-11341
  cwe:
  - CWE-79
  disclosed_date: 2018-07-17
  created_date: 2020-01-08
  last_modified_date: 2020-01-08
  credit:
  - Unknown
  references:
  - https://bugzilla.redhat.com/show_bug.cgi?id=1470714
  - https://nvd.nist.gov/vuln/detail/CVE-2017-11341
  source_url: https://snyk.io/vuln/SNYK-JS-NODESASS-540962
- id: snykio:npm:node-sass:540964
  title: Uncontrolled Recursion
  description: |+
    [node-sass][1] is a Node.js bindings package for libsass.

    Affected versions of this package are vulnerable to Uncontrolled
    Recursion via `Sass::Eval::operator()(Sass::Binary_Expression*)` in
    `eval.cpp`. Note: `node-sass` is affected by this vulnerability due to
    its bundled usage of the `libsass` package.



    [1]: https://npmjs.org/package/node-sass
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: node-sass
  vulnerable_versions:
  - "*"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2019-18797
  cwe:
  - CWE-79
  disclosed_date: 2019-08-11
  created_date: 2020-01-08
  last_modified_date: 2020-01-08
  credit:
  - Unknown
  references:
  - https://github.com/sass/libsass/issues/3000
  - https://nvd.nist.gov/vuln/detail/CVE-2019-18797
  source_url: https://snyk.io/vuln/SNYK-JS-NODESASS-540964
- id: snykio:npm:node-sass:540966
  title: Improper Input Validation
  description: |+
    [node-sass][1] is a Node.js bindings package for libsass.

    Affected versions of this package are vulnerable to Improper Input
    Validation. There is an illegal address access in the `Eval::operator`
    function in `eval.cpp`. A crafted input will lead to a remote denial of
    service. Note: `node-sass` is affected by this vulnerability due to its
    bundled usage of the `libsass` package.



    [1]: https://npmjs.org/package/node-sass
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: node-sass
  vulnerable_versions:
  - "<4.4.0"
  severity: high
  package_manager: npm
  cve:
  - CVE-2017-11555
  cwe:
  - CWE-79
  disclosed_date: 2020-01-08
  created_date: 2020-01-08
  last_modified_date: 2020-01-08
  credit:
  - Unknown
  references:
  - https://bugzilla.redhat.com/show_bug.cgi?id=1471782
  - https://github.com/sass/libsass/issues/2446
  - https://github.com/sass/libsass/pull/2450
  source_url: https://snyk.io/vuln/SNYK-JS-NODESASS-540966
- id: snykio:npm:node-sass:540968
  title: Improper Input Validation
  description: |+
    [node-sass][1] is a Node.js bindings package for libsass.

    Affected versions of this package are vulnerable to Improper Input
    Validation. There is an illegal address access in`ast.cpp`. A crafted
    input will lead to a remote denial of service attack. Note: `node-sass`
    is affected by this vulnerability due to its bundled usage of the
    `libsass` package.



    [1]: https://npmjs.org/package/node-sass
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: node-sass
  vulnerable_versions:
  - "<4.4.0"
  severity: high
  package_manager: npm
  cve:
  - CVE-2017-11342
  cwe:
  - CWE-79
  disclosed_date: 2018-07-17
  created_date: 2020-01-08
  last_modified_date: 2020-01-08
  credit:
  - Unknown
  references:
  - https://bugzilla.redhat.com/show_bug.cgi?id=1470722
  - https://nvd.nist.gov/vuln/detail/CVE-2017-11342
  source_url: https://snyk.io/vuln/SNYK-JS-NODESASS-540968
- id: snykio:npm:node-sass:540970
  title: Uncontrolled Recursion
  description: |+
    [node-sass][1] is a Node.js bindings package for libsass.

    Affected versions of this package are vulnerable to Uncontrolled
    Recursion. There is a stack consumption vulnerability in the lex
    function in `parser.hpp` (as used in sassc). A crafted input will lead
    to a remote denial of service. Note: `node-sass` is affected by this
    vulnerability due to its bundled usage of the `libsass` package.



    [1]: https://npmjs.org/package/node-sass
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: node-sass
  vulnerable_versions:
  - "<4.4.0"
  severity: high
  package_manager: npm
  cve:
  - CVE-2017-11554
  cwe:
  - CWE-79
  disclosed_date: 2020-01-08
  created_date: 2020-01-08
  last_modified_date: 2020-01-08
  credit:
  - Unknown
  references:
  - https://github.com/sass/libsass/commit/7664114543757e932f5b1a2ff5295aa9b34f8623
  source_url: https://snyk.io/vuln/SNYK-JS-NODESASS-540970
- id: snykio:npm:node-sass:540972
  title: Out-of-bounds Read
  description: |+
    [node-sass][1] is a Node.js bindings package for libsass.

    Affected versions of this package are vulnerable to Out-of-bounds Read.
    There is an illegal address access in `Sass::Eval::operator()` in
    `eval.cpp`, leading to a remote denial of service attack. NOTE: this is
    similar to CVE-2017-11555 but remains exploitable after the vendor\'s
    CVE-2017-11555 fix (available from GitHub after 2017-07-24). Note:
    `node-sass` is affected by this vulnerability due to its bundled usage
    of the `libsass` package.



    [1]: https://npmjs.org/package/node-sass
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: node-sass
  vulnerable_versions:
  - "<4.4.0"
  severity: high
  package_manager: npm
  cve:
  - CVE-2017-12963
  cwe:
  - CWE-79
  disclosed_date: 2017-08-18
  created_date: 2020-01-08
  last_modified_date: 2020-01-08
  credit:
  - Unknown
  references:
  - https://bugzilla.redhat.com/show_bug.cgi?id=1482335
  source_url: https://snyk.io/vuln/SNYK-JS-NODESASS-540972
- id: snykio:npm:node-sass:540974
  title: NULL Pointer Dereference
  description: |+
    [node-sass][1] is a Node.js bindings package for libsass.

    Affected versions of this package are vulnerable to NULL Pointer
    Dereference via the function `Sass::Expand::operator` which could be
    leveraged by an attacker to cause a denial of service (application
    crash) or possibly have unspecified other impact. Note: `node-sass` is
    affected by this vulnerability due to its bundled usage of the `libsass`
    package.



    [1]: https://npmjs.org/package/node-sass
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: node-sass
  vulnerable_versions:
  - "*"
  severity: high
  package_manager: npm
  cve:
  - CVE-2018-11695
  cwe:
  - CWE-79
  disclosed_date: 2018-04-16
  created_date: 2020-01-08
  last_modified_date: 2020-01-08
  credit:
  - Unknown
  references:
  - https://github.com/sass/libsass/commit/0bc35e3d26922229d5a3e3308860cf0fcee5d1cf
  source_url: https://snyk.io/vuln/SNYK-JS-NODESASS-540974
- id: snykio:npm:node-sass:540978
  title: Denial of Service (DoS)
  description: |+
    [node-sass][1] is a Node.js bindings package for libsass.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS). Uncontrolled recursion is possible in
    `Sass::Complex_Selector::perform` in `ast.hpp` and
    `Sass::Inspect::operator` in `inspect.cpp`. Note: `node-sass` is
    affected by this vulnerability due to its bundled usage of the `libsass`
    package.



    [1]: https://npmjs.org/package/node-sass
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: node-sass
  vulnerable_versions:
  - "*"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2018-20822
  cwe:
  - CWE-79
  disclosed_date: 2018-06-13
  created_date: 2020-01-08
  last_modified_date: 2020-01-08
  credit:
  - Unknown
  references:
  - https://github.com/sass/libsass/issues/2671
  - https://nvd.nist.gov/vuln/detail/CVE-2018-20822
  source_url: https://snyk.io/vuln/SNYK-JS-NODESASS-540978
- id: snykio:npm:node-sass:540980
  title: Denial of Service (DoS)
  description: |+
    [node-sass][1] is a Node.js bindings package for libsass.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS). The parsing component allows attackers to cause uncontrolled
    recursion in `Sass::Parser::parse_css_variable_value` in parser.cpp.
    Note: `node-sass` is affected by this vulnerability due to its bundled
    usage of the `libsass` package.



    [1]: https://npmjs.org/package/node-sass
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: node-sass
  vulnerable_versions:
  - "*"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2018-20821
  cwe:
  - CWE-79
  disclosed_date: 2018-06-02
  created_date: 2020-01-08
  last_modified_date: 2020-01-08
  credit:
  - Unknown
  references:
  - https://github.com/sass/libsass/commit/f2db04883e5fff4e03777dcc1eb60d4373c45be1
  - https://github.com/sass/libsass/issues/2658
  source_url: https://snyk.io/vuln/SNYK-JS-NODESASS-540980
- id: snykio:npm:node-sass:540982
  title: Denial of Service (DoS)
  description: "[node-sass][1] is a Node.js bindings package for libsass.\n\nAffected
    versions of this package are vulnerable to Denial of Service\n(DoS). Functions
    inside `ast.cpp` for `IMPLEMENT_AST_OPERATORS`\nexpansion allow attackers to cause
    a denial-of-service resulting from\nstack consumption via a crafted sass file,
    as demonstrated by recursive\ncalls involving `clone()`, `cloneChildren()`, and
    `copy()`. Note:\n`node-sass` is affected by this vulnerability due to its bundled
    usage\nof the `libsass` package.\n\n\n\n[1]: https://npmjs.org/package/node-sass\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n{: .language-js}\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n{: .language-bash}\n\nThe entire
    process of testing it against a 30 characters long string\ntakes around ~52ms.
    But when given an invalid string, it takes nearly\ntwo seconds to complete the
    test, over ten times as long as it took to\ntest a valid string. The dramatic
    difference is due to the way regular\nexpressions get evaluated.\n\nMost Regex
    engines will work very similarly (with minor differences).\nThe engine will match
    the first possible way to accept the current\ncharacter and proceed to the next
    one. If it then fails to match the\nnext one, it will backtrack and see if there
    was another way to digest\nthe previous character. If it goes too far down the
    rabbit hole only to\nfind out the string doesn’t match in the end, and if many
    characters\nhave multiple valid regex paths, the number of backtracking steps
    can\nbecome very large, resulting in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s
    look at how our expression runs into this problem, using a\nshorter string: \\\"ACCCX\\\".
    While it seems fairly straightforward, there\nare still four different ways that
    the engine could match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.
    \ C+C+C.\n\nThe engine has to try each of those combinations to see if any of
    them\npotentially match against the expression. When you combine that with the\nother
    steps the engine must take, we can use [RegEx 101 debugger][1] to\nsee the engine
    has to take a total of 38 steps before it can determine\nthe string doesn\\'t
    match.\n\nFrom there, the number of steps the engine must use to validate a string\njust
    continues to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n|
    ACCCX | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX
    | 14 | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to
    take over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n"
  affected_package: node-sass
  vulnerable_versions:
  - "<4.11.0"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2018-19838
  cwe:
  - CWE-400
  disclosed_date: 2019-07-23
  created_date: 2020-01-08
  last_modified_date: 2020-01-08
  credit:
  - Unknown
  references:
  - https://github.com/sass/libsass/issues/2660
  - https://nvd.nist.gov/vuln/detail/CVE-2018-19838
  source_url: https://snyk.io/vuln/SNYK-JS-NODESASS-540982
- id: snykio:npm:node-sass:540984
  title: Out-of-bounds Read
  description: |+
    [node-sass][1] is a Node.js bindings package for libsass.

    Affected versions of this package are vulnerable to Out-of-bounds Read
    related to address `0xb4803ea1`. A crafted input will lead to a remote
    denial of service attack. Note: `node-sass` is affected by this
    vulnerability due to its bundled usage of the `libsass` package.



    [1]: https://npmjs.org/package/node-sass
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: node-sass
  vulnerable_versions:
  - "<4.3.0"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2017-11605
  cwe:
  - CWE-79
  disclosed_date: 2017-07-24
  created_date: 2020-01-08
  last_modified_date: 2020-01-08
  credit:
  - Unknown
  references:
  - https://bugzilla.redhat.com/show_bug.cgi?id=1474019
  - https://nvd.nist.gov/vuln/detail/CVE-2017-11605
  source_url: https://snyk.io/vuln/SNYK-JS-NODESASS-540984
- id: snykio:npm:node-sass:540986
  title: Out-of-bounds Read
  description: |+
    [node-sass][1] is a Node.js bindings package for libsass.

    Affected versions of this package are vulnerable to Out-of-bounds Read.
    A heap-based buffer over-read exists in the function `json_mkstream()`
    in `sass_context.cpp`. A crafted input will lead to a remote denial of
    service attack. Note: `node-sass` is affected by this vulnerability due
    to its bundled usage of the `libsass` package.



    [1]: https://npmjs.org/package/node-sass
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: node-sass
  vulnerable_versions:
  - "<4.4.0"
  severity: high
  package_manager: npm
  cve:
  - CVE-2017-10687
  cwe:
  - CWE-79
  disclosed_date: 2017-06-29
  created_date: 2020-01-08
  last_modified_date: 2020-01-08
  credit:
  - Unknown
  references:
  - https://bugzilla.redhat.com/show_bug.cgi?id=1466411
  - https://nvd.nist.gov/vuln/detail/CVE-2017-10687
  source_url: https://snyk.io/vuln/SNYK-JS-NODESASS-540986
- id: snykio:npm:node-sass:540988
  title: Denial of Service (DoS)
  description: |+
    [node-sass][1] is a Node.js bindings package for libsass.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS). There are memory leaks triggered by deeply nested code, such as
    code with a long sequence of open parenthesis characters, leading to a
    remote denial of service attack. Note: `node-sass` is affected by this
    vulnerability due to its bundled usage of the `libsass` package.



    [1]: https://npmjs.org/package/node-sass
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: node-sass
  vulnerable_versions:
  - "<4.4.0"
  severity: high
  package_manager: npm
  cve:
  - CVE-2017-12962
  cwe:
  - CWE-79
  disclosed_date: 2017-08-18
  created_date: 2020-01-08
  last_modified_date: 2020-01-08
  credit:
  - Unknown
  references:
  - https://bugzilla.redhat.com/show_bug.cgi?id=1482331
  - https://nvd.nist.gov/vuln/detail/CVE-2017-12962
  source_url: https://snyk.io/vuln/SNYK-JS-NODESASS-540988
- id: snykio:npm:node-sass:540990
  title: Out-of-bounds Read
  description: |+
    [node-sass][1] is a Node.js bindings package for libsass.

    Affected versions of this package are vulnerable to Out-of-bounds Read
    via `Sass::Prelexer::skip_over_scopes` in `prelexer.hpp` when called
    from `Sass::Parser::parse_import()`, a similar issue to CVE-2018-11693.
    Note: `node-sass` is affected by this vulnerability due to its bundled
    usage of the `libsass` package.



    [1]: https://npmjs.org/package/node-sass
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: node-sass
  vulnerable_versions:
  - "*"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2019-6286
  cwe:
  - CWE-79
  disclosed_date: 2019-04-08
  created_date: 2020-01-08
  last_modified_date: 2020-01-08
  credit:
  - Unknown
  references:
  - https://github.com/sass/libsass/commit/8e681e20795ee1cf203ff7002367c29735addf67
  - https://nvd.nist.gov/vuln/detail/CVE-2019-6286
  source_url: https://snyk.io/vuln/SNYK-JS-NODESASS-540990
- id: snykio:npm:node-sass:540992
  title: NULL Pointer Dereference
  description: |+
    [node-sass][1] is a Node.js bindings package for libsass.

    Affected versions of this package are vulnerable to NULL Pointer
    Dereference via `Sass::Parser::parseCompoundSelector`in
    `parser_selectors.cpp`. Note: `node-sass` is affected by this
    vulnerability due to its bundled usage of the `libsass` package.



    [1]: https://npmjs.org/package/node-sass
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: node-sass
  vulnerable_versions:
  - "*"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2019-18799
  cwe:
  - CWE-79
  disclosed_date: 2019-11-08
  created_date: 2020-01-08
  last_modified_date: 2020-01-08
  credit:
  - Unknown
  references:
  - https://github.com/sass/libsass/commit/e1c16e09b4a953757a15149deaaf28a3fd81dc97
  - https://nvd.nist.gov/vuln/detail/CVE-2019-18799
  source_url: https://snyk.io/vuln/SNYK-JS-NODESASS-540992
- id: snykio:npm:node-sass:540994
  title: NULL Pointer Dereference
  description: |+
    [node-sass][1] is a Node.js bindings package for libsass.

    Affected versions of this package are vulnerable to NULL Pointer
    Dereference. The function `Sass::Selector_List::populate_extends` in
    `SharedPtr.hpp` (used by `ast.cpp` and `ast_selectors.cpp`) may cause a
    Denial of Service (application crash) via a crafted sass input file.
    Note: `node-sass` is affected by this vulnerability due to its bundled
    usage of the `libsass` package.



    [1]: https://npmjs.org/package/node-sass
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: node-sass
  vulnerable_versions:
  - "*"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2018-19797
  cwe:
  - CWE-79
  disclosed_date: 2019-12-02
  created_date: 2020-01-08
  last_modified_date: 2020-01-08
  credit:
  - Unknown
  references:
  - https://github.com/sass/libsass/commit/e94b5f91ec372a84be1f9c0da32cb6e0af0b99fe
  - https://nvd.nist.gov/vuln/detail/CVE-2018-19797
  source_url: https://snyk.io/vuln/SNYK-JS-NODESASS-540994
- id: snykio:npm:node-sass:540996
  title: Out-of-bounds Read
  description: |+
    [node-sass][1] is a Node.js bindings package for libsass.

    Affected versions of this package are vulnerable to Out-of-bounds Read
    via the function `Sass::handle_error` which could be leveraged by an
    attacker to disclose information or manipulated to read from unmapped
    memory causing a denial of service. Note: `node-sass` is affected by
    this vulnerability due to its bundled usage of the `libsass` package.



    [1]: https://npmjs.org/package/node-sass
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: node-sass
  vulnerable_versions:
  - "*"
  severity: high
  package_manager: npm
  cve:
  - CVE-2018-11698
  cwe:
  - CWE-79
  disclosed_date: 2019-11-22
  created_date: 2020-01-08
  last_modified_date: 2020-01-08
  credit:
  - Unknown
  references:
  - https://github.com/sass/libsass/commit/8f40dc03e5ab5a8b2ebeb72b31f8d1adbb2fd6ae
  - https://nvd.nist.gov/vuln/detail/CVE-2018-11698
  source_url: https://snyk.io/vuln/SNYK-JS-NODESASS-540996
- id: snykio:npm:node-sass:540998
  title: Out-of-Bounds
  description: |+
    [node-sass][1] is a Node.js bindings package for libsass.

    Affected versions of this package are vulnerable to Out-of-Bounds via
    `Sass::Prelexer::alternatives` in `prelexer.hpp`. Note: `node-sass` is
    affected by this vulnerability due to its bundled usage of the `libsass`
    package.



    [1]: https://npmjs.org/package/node-sass
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: node-sass
  vulnerable_versions:
  - "*"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2019-6284
  cwe:
  - CWE-79
  disclosed_date: 2019-04-08
  created_date: 2020-01-08
  last_modified_date: 2020-01-08
  credit:
  - Unknown
  references:
  - https://github.com/sass/libsass/issues/2814
  - https://github.com/sass/libsass/pull/2857/commits/0f3d3f8df99af422af055c41d778ca9c5c60a0bb
  - https://nvd.nist.gov/vuln/detail/CVE-2019-6284
  source_url: https://snyk.io/vuln/SNYK-JS-NODESASS-540998
- id: snykio:npm:node-sass:541000
  title: Use After Free
  description: |+
    [node-sass][1] is a Node.js bindings package for libsass.

    Affected versions of this package are vulnerable to Use After Free via
    the `SharedPtr` class in `SharedPtr.cpp` (or `SharedPtr.hpp`) that may
    cause a denial of service (application crash) or possibly have
    unspecified other impact. Note: `node-sass` is affected by this
    vulnerability due to its bundled usage of the `libsass` package.



    [1]: https://npmjs.org/package/node-sass
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: node-sass
  vulnerable_versions:
  - "*"
  severity: high
  package_manager: npm
  cve:
  - CVE-2018-19827
  cwe:
  - CWE-79
  disclosed_date: 2019-12-03
  created_date: 2020-01-08
  last_modified_date: 2020-01-08
  credit:
  - Unknown
  references:
  - https://github.com/sass/libsass/commit/b21fb9f84096d9927780b86fa90629a096af358d
  - https://nvd.nist.gov/vuln/detail/CVE-2018-19827
  source_url: https://snyk.io/vuln/SNYK-JS-NODESASS-541000
- id: snykio:npm:node-sass:541002
  title: Out-of-bounds Read
  description: |+
    [node-sass][1] is a Node.js bindings package for libsass.

    Affected versions of this package are vulnerable to Out-of-bounds Read.
    The function `handle_error` in `sass_context.cpp` allows attackers to
    cause a denial-of-service resulting from a heap-based buffer over-read
    via a crafted sass file. Note: `node-sass` is affected by this
    vulnerability due to its bundled usage of the `libsass` package.



    [1]: https://npmjs.org/package/node-sass
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: node-sass
  vulnerable_versions:
  - "*"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2018-19839
  cwe:
  - CWE-79
  disclosed_date: 2018-11-28
  created_date: 2020-01-08
  last_modified_date: 2020-01-08
  credit:
  - Unknown
  references:
  - https://github.com/sass/libsass/commit/2cabd116b95d67dcd9d44fcb936dee03f4fc71b9
  - https://nvd.nist.gov/vuln/detail/CVE-2018-19839
  source_url: https://snyk.io/vuln/SNYK-JS-NODESASS-541002
- id: snykio:npm:node-sass:542662
  title: Denial of Service (DoS)
  description: "[node-sass][1] is a Node.js bindings package for libsass.\n\nAffected
    versions of this package are vulnerable to Denial of Service\n(DoS). Crafted objects
    passed to the `renderSync` function may trigger\nC++ assertions in `CustomImporterBridge::get_importer_entry`
    and\n`CustomImporterBridge::post_process_return_value` that crash the Node\nprocess.
    This may allow attackers to crash the system\\'s running Node\nprocess and lead
    to Denial of Service.\n\n\n\n[1]: https://npmjs.org/package/node-sass\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n{: .language-js}\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n{: .language-bash}\n\nThe entire
    process of testing it against a 30 characters long string\ntakes around ~52ms.
    But when given an invalid string, it takes nearly\ntwo seconds to complete the
    test, over ten times as long as it took to\ntest a valid string. The dramatic
    difference is due to the way regular\nexpressions get evaluated.\n\nMost Regex
    engines will work very similarly (with minor differences).\nThe engine will match
    the first possible way to accept the current\ncharacter and proceed to the next
    one. If it then fails to match the\nnext one, it will backtrack and see if there
    was another way to digest\nthe previous character. If it goes too far down the
    rabbit hole only to\nfind out the string doesn’t match in the end, and if many
    characters\nhave multiple valid regex paths, the number of backtracking steps
    can\nbecome very large, resulting in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s
    look at how our expression runs into this problem, using a\nshorter string: \\\"ACCCX\\\".
    While it seems fairly straightforward, there\nare still four different ways that
    the engine could match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.
    \ C+C+C.\n\nThe engine has to try each of those combinations to see if any of
    them\npotentially match against the expression. When you combine that with the\nother
    steps the engine must take, we can use [RegEx 101 debugger][1] to\nsee the engine
    has to take a total of 38 steps before it can determine\nthe string doesn\\'t
    match.\n\nFrom there, the number of steps the engine must use to validate a string\njust
    continues to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n|
    ACCCX | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX
    | 14 | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to
    take over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n"
  affected_package: node-sass
  vulnerable_versions:
  - ">=3.3.0 <4.13.1"
  severity: medium
  package_manager: npm
  cwe:
  - CWE-400
  disclosed_date: 2020-12-13
  created_date: 2020-01-19
  last_modified_date: 2020-01-19
  credit:
  - Alexander Jordan
  references:
  - https://github.com/sass/node-sass/commit/338fd7a14d3b8bd374a382336df16f9c6792b884
  - https://www.npmjs.com/advisories/961
  source_url: https://snyk.io/vuln/SNYK-JS-NODESASS-542662
