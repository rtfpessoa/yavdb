---
- id: npmjs:npm:express:8
  title: No Charset in Content-Type Header
  description: Vulnerable versions of express do not specify a charset field in the
    content-type header while displaying 400 level response messages. The lack of
    enforcing user's browser to set correct charset, could be leveraged by an attacker
    to perform a cross-site scripting attack, using non-standard encodings, like UTF-7.
  affected_package: express
  vulnerable_versions:
  - "<3.11"
  - ">= 4 <4.5"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2014-6393
  cwe: CWE-79
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: Paweł Hałdrzyński
- id: ossindex:npm:express:8269359139
  title: Cross-site scripting (XSS)
  description: "> Vulnerable versions of express do not specify a charset field in
    the content-type header while displaying 400 level response messages. The lack
    of enforcing user's browser to set correct charset, could be leveraged by an attacker
    to perform a cross-site scripting attack, using non-standard encodings, like UTF-7.\n>
    \n> --[nodesecurity.io](https://nodesecurity.io/advisories/8)"
  affected_package: express
  vulnerable_versions:
  - "<3.11"
  - ">= 4 <4.5"
  package_manager: npm
  disclosed_date: 2016-05-16
  created_date: 2016-05-16
  last_modified_date: 2017-02-12
  credit:
  - OSSIndex
  references:
  - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-6393
  - https://cwe.mitre.org/data/definitions/79.html
  - https://nodesecurity.io/advisories/8
  - https://nodesecurity.io/advisories/express-no-charset-in-content-type-header
  source_url: https://ossindex.net/resource/package/7013563171/vulnerabilities
- id: ossindex:npm:express:8301582599
  title: Root path disclosure vulnerability
  description: Fixed root path disclosure vulnerability in express.static, res.sendfile,
    and res.sendFile
  affected_package: express
  vulnerable_versions:
  - "<3.19.1"
  - ">=4.0.0 <4.11.1"
  package_manager: npm
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 2017-03-05
  credit:
  - OSSIndex
  references:
  - http://expressjs.com/advanced/security-updates.html#4.11.1
  source_url: https://ossindex.net/resource/package/7013563171/vulnerabilities
- id: ossindex:npm:express:8301637738
  title: Open redirect vulnerability
  description: There is an open redirect vulnerability in express.static
  affected_package: express
  vulnerable_versions:
  - "<3.19.0"
  - ">=4.0.0 <4.10.7"
  package_manager: npm
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 2017-03-05
  credit:
  - OSSIndex
  references:
  - http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-1164
  - http://expressjs.com/advanced/security-updates.html#3.19.0
  - http://expressjs.com/advanced/security-updates.html#4.10.7
  - https://nodesecurity.io/advisories/serve-static-open-redirect
  source_url: https://ossindex.net/resource/package/7013563171/vulnerabilities
- id: ossindex:npm:express:8301668133
  title: Directory traversal vulnerability
  description: Fixed directory traversal vulnerabilities in express.static (advisory
    , CVE-2014-6394)
  affected_package: express
  vulnerable_versions:
  - "<3.16.10"
  - ">=4.0.0 <4.8.8"
  package_manager: npm
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 2017-03-05
  credit:
  - OSSIndex
  references:
  - http://expressjs.com/advanced/security-updates.html#4.8.8
  - https://cwe.mitre.org/data/definitions/22.html
  - https://github.com/expressjs/express/issues/2486
  - https://github.com/expressjs/expressjs.com/issues/307
  - https://github.com/expressjs/expressjs.com/pull/308
  - https://github.com/TeamMentor/TM_4_0_Design/issues/206
  source_url: https://ossindex.net/resource/package/7013563171/vulnerabilities
- id: ossindex:npm:express:8301731649
  title: FD Resource Exhaustion
  description: Node.js 0.10 can leak fds in certain situations that affect express.static
    and res.sendfile. Malicious requests could cause fds to leak and eventually leak
    to EMFILE errors and server unresponsiveness.
  affected_package: express
  vulnerable_versions:
  - "<3.16.6"
  - ">=4.0.0 <4.8.8"
  package_manager: npm
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 2017-03-05
  credit:
  - OSSIndex
  references:
  - http://expressjs.com/advanced/security-updates.html#4.8.4
  - https://cwe.mitre.org/data/definitions/400.html
  source_url: https://ossindex.net/resource/package/7013563171/vulnerabilities
- id: ossindex:npm:express:8301765632
  title: Denial of Service
  description: Sparse arrays with extremely high indexes in query string could cause
    the process to run out of memory and crash the server.
  affected_package: express
  vulnerable_versions:
  - "<3.16.0"
  - ">=4.0.0 <4.8.0"
  package_manager: npm
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 2017-03-05
  credit:
  - OSSIndex
  references:
  - http://expressjs.com/advanced/security-updates.html#4.8.0-1
  - https://cwe.mitre.org/data/definitions/400.html
  source_url: https://ossindex.net/resource/package/7013563171/vulnerabilities
- id: ossindex:npm:express:8301791075
  title: "[Duplicate] Denial of Service"
  description: |-
    See https://ossindex.net/resource/vulnerability/8301765632

    Extremely nested query string objects could cause the process to block and make the server unresponsive temporarily.
  affected_package: express
  vulnerable_versions:
  - ">=4.0.0 <4.8.0"
  package_manager: npm
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 2017-03-04
  credit:
  - OSSIndex
  references:
  - http://expressjs.com/advanced/security-updates.html#4.8.0-2
  source_url: https://ossindex.net/resource/package/7013563171/vulnerabilities
- id: ossindex:npm:express:8301829290
  title: "[Duplicate] root path disclosure vulnerability"
  description: |-
    See https://ossindex.net/resource/vulnerability/8301582599

    Fixed root path disclosure vulnerability in express.static, res.sendfile, and res.sendFile
  affected_package: express
  vulnerable_versions:
  - "<3.19.1"
  package_manager: npm
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 2017-03-05
  credit:
  - OSSIndex
  references:
  - http://expressjs.com/advanced/security-updates.html#3.19.1
  source_url: https://ossindex.net/resource/package/7013563171/vulnerabilities
- id: ossindex:npm:express:8301851756
  title: "[Duplicate] open redirect vulnerability"
  description: See https://ossindex.net/resource/vulnerability/8301637738
  affected_package: express
  vulnerable_versions:
  - "<3.19.0"
  package_manager: npm
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 2017-03-05
  credit:
  - OSSIndex
  references:
  - http://expressjs.com/advanced/security-updates.html#3.19.0
  source_url: https://ossindex.net/resource/package/7013563171/vulnerabilities
- id: ossindex:npm:express:8301876097
  title: "[Duplicate] directory traversal vulnerabilities"
  description: |-
    See https://ossindex.net/resource/vulnerability/8301668133

    Fixed directory traversal vulnerabilities in express.static.
  affected_package: express
  vulnerable_versions:
  - "<3.16.10"
  package_manager: npm
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 2017-03-05
  credit:
  - OSSIndex
  references:
  - http://expressjs.com/advanced/security-updates.html#3.16.10
  source_url: https://ossindex.net/resource/package/7013563171/vulnerabilities
- id: ossindex:npm:express:8301898996
  title: "[Duplicate] Resource Exhaustion"
  description: |-
    See https://ossindex.net/resource/vulnerability/8301731649

    Node.js 0.10 can leak fds in certain situations that affect express.static and res.sendfile. Malicious requests could cause fds to leak and eventually leak to EMFILE errors and server unresponsiveness.
  affected_package: express
  vulnerable_versions:
  - "<3.16.6"
  package_manager: npm
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 2017-03-05
  credit:
  - OSSIndex
  references:
  - http://expressjs.com/advanced/security-updates.html#3.16.6
  source_url: https://ossindex.net/resource/package/7013563171/vulnerabilities
- id: ossindex:npm:express:8301940044
  title: "[Duplicate] Denial of Service"
  description: |-
    See https://ossindex.net/resource/vulnerability/8301765632

    Sparse arrays with extremely high indexes in query string could cause the process to run out of memory and crash the server.
  affected_package: express
  vulnerable_versions:
  - "<3.16.0"
  package_manager: npm
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 2017-03-05
  credit:
  - OSSIndex
  references:
  - http://expressjs.com/advanced/security-updates.html#3.16.0-1
  source_url: https://ossindex.net/resource/package/7013563171/vulnerabilities
- id: ossindex:npm:express:8301958434
  title: "[Duplicate] Denial of Service"
  description: |-
    See https://ossindex.net/resource/vulnerability/8301940044

    Extremely nested query string objects could cause the process to block and make the server unresponsive temporarily.
  affected_package: express
  vulnerable_versions:
  - "<3.16.0"
  package_manager: npm
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 2017-03-04
  credit:
  - OSSIndex
  references:
  - http://expressjs.com/advanced/security-updates.html#3.16.0-2
  source_url: https://ossindex.net/resource/package/7013563171/vulnerabilities
- id: ossindex:npm:express:8301983295
  title: cross-site scripting (XSS)
  description: The 404 response of an unsupported method override attempt was susceptible
    to cross-site scripting attacks.
  affected_package: express
  vulnerable_versions:
  - "<3.3.0"
  package_manager: npm
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit:
  - OSSIndex
  references:
  - http://expressjs.com/advanced/security-updates.html#3.3.0
  source_url: https://ossindex.net/resource/package/7013563171/vulnerabilities
- id: ossindex:npm:express:8398939381
  title: Cross-Site Scripting (XSS - UTF-7 vulnerability)
  description: Express was not specifying a charset field in the content-type header
    while displaying 400 level response messages. Old (or otherwise susceptible) browsers
    could auto-detect the charset as UTF-7 allowing an attacker to perform a cross-site
    scripting attack.
  affected_package: express
  vulnerable_versions:
  - ">=4 <4.5"
  package_manager: npm
  disclosed_date: 2016-05-16
  created_date: 2016-05-16
  last_modified_date: 2017-01-25
  credit:
  - OSSIndex
  references:
  - http://nedbatchelder.com/blog/200704/xss_with_utf7.html
  - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-6393
  - https://cwe.mitre.org/data/definitions/79.html
  - https://nodesecurity.io/advisories/8
  source_url: https://ossindex.net/resource/package/7013563171/vulnerabilities
- id: ossindex:npm:express:8400185144
  title: Cross Site Scripting (XSS) in 404
  description: Query text to a non-existent page is printed unescaped in the 404 response
    page, allowing for cross site scripting attacks.
  affected_package: express
  vulnerable_versions:
  - "<=2.5.9"
  package_manager: npm
  disclosed_date: 2016-10-17
  created_date: 2016-10-17
  last_modified_date: 2016-11-30
  credit:
  - OSSIndex
  references:
  - https://cwe.mitre.org/data/definitions/79.html
  - https://github.com/strongloop/express/issues/1084
  source_url: https://ossindex.net/resource/package/7013563171/vulnerabilities
- id: ossindex:npm:express:8402207877
  title: Escape URLs in text/plain res.redirect response
  description: The res.redirect URL was not being escaped, allowing some browsers
    (primarily old versions of IE) when attempt to sniff the Content-Type to evaluate
    it as HTML, which causes a cross-site scripting vulnerability.
  affected_package: express
  vulnerable_versions:
  - "<3.0.4"
  package_manager: npm
  disclosed_date: 2016-11-30
  created_date: 2016-11-30
  last_modified_date: 2016-12-06
  credit:
  - OSSIndex
  references:
  - https://github.com/expressjs/express/commit/5cf29a3d2906e8f2218ab1febbef392bb4925b14
  - https://github.com/strongloop/express/issues/1425
  source_url: https://ossindex.net/resource/package/7013563171/vulnerabilities
- id: ossindex:npm:express:8402207884
  title: Cross Site Scripting (XSS) in JSONP callbacks
  description: JSONP callbacks allow unsafe characters that may lead to Cross Site
    Scripting (XSS)
  affected_package: express
  vulnerable_versions:
  - "<1.0.3"
  package_manager: npm
  disclosed_date: 2016-11-30
  created_date: 2016-11-30
  last_modified_date: 2016-11-30
  credit:
  - OSSIndex
  references:
  - https://cwe.mitre.org/data/definitions/79.html
  - https://github.com/strongloop/express/issues/502
  source_url: https://ossindex.net/resource/package/7013563171/vulnerabilities
- id: ossindex:npm:express:8402382312
  title: HTTP Splitting Attack
  description: The express framework does not check for newline characters in URLs
    making it vulnerable to HTTP splitting attacks
  affected_package: express
  vulnerable_versions:
  - "<2.5.9"
  package_manager: npm
  disclosed_date: 2017-01-30
  created_date: 2017-01-30
  last_modified_date: 2017-02-02
  credit:
  - OSSIndex
  references:
  - https://gist.github.com/alpercelik/1654555
  - https://github.com/expressjs/express/issues/973
  - https://www.owasp.org/index.php/HTTP_Response_Splitting
  source_url: https://ossindex.net/resource/package/7013563171/vulnerabilities
- id: ossindex:npm:express:8402382313
  title: Cross Site Scripting (XSS)
  description: 'Some browsers (primarily old versions of IE) attempt to sniff the
    Content-Type and evaluate it as HTML, which can be used in XSS attacks since the
    URL is not escaped properly.

'
  affected_package: express
  vulnerable_versions:
  - "<3.0.4"
  package_manager: npm
  disclosed_date: 2017-01-30
  created_date: 2017-01-30
  last_modified_date: 2017-02-02
  credit:
  - OSSIndex
  references:
  - https://cwe.mitre.org/data/definitions/79.html
  - https://github.com/expressjs/express/commit/5cf29a3d2906e8f2218ab1febbef392bb4925b14
  - https://github.com/expressjs/express/issues/1425
  source_url: https://ossindex.net/resource/package/7013563171/vulnerabilities
- id: ossindex:npm:express:8405001083
  title: Infinite Loop Caused By Undefined Status Code
  description: An infinite error loop is caused when res.send(status) is undefined.
  affected_package: express
  vulnerable_versions:
  - "<3.2.5"
  package_manager: npm
  disclosed_date: 2017-07-30
  created_date: 2017-07-30
  last_modified_date: 2017-07-30
  credit:
  - OSSIndex
  references:
  - https://github.com/expressjs/express/commit/28b8a3b5f72829fecdaea5f0d585654470337a9a
  - https://github.com/expressjs/express/issues/1623
  source_url: https://ossindex.net/resource/package/7013563171/vulnerabilities
- id: snykio:npm:express:1
  title: Cross-site Scripting (XSS)
  description: |+
    [`express`][1] is a minimalist web framework.

    Affected versions of this package do not enforce the user\'s browser to
    set a specific charset in the content-type header while displaying 400
    level response messages. This could be used by remote attackers to
    perform a cross-site scripting attack, by using non-standard encodings
    like UTF-7.



    [1]: https://www.npmjs.com/package/express
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: express
  vulnerable_versions:
  - "<3.11"
  - ">=4 <4.5"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2014-6393
  cwe:
  - CWE-79
  disclosed_date: 2014-09-12
  created_date: 2014-09-12
  last_modified_date: 2014-09-12
  credit:
  - Paweł Hałdrzyński
  references:
  - https://github.com/expressjs/express/releases/tag/3.11.0
  - https://github.com/expressjs/express/releases/tag/4.5.0
  source_url: https://snyk.io/vuln/npm:express:20140912-1
- id: snykio:npm:express:20140912
  title: Cross-site Scripting (XSS)
  description: |+
    [`express`][1] is a minimalist web framework.

    Affected versions of this package do not enforce the user\'s browser to
    set a specific charset in the content-type header while displaying 400
    level response messages. This could be used by remote attackers to
    perform a cross-site scripting attack, by using non-standard encodings
    like UTF-7.



    [1]: https://www.npmjs.com/package/express
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: express
  vulnerable_versions:
  - "<3.11.0"
  - ">=4.0.0 <4.5.0"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2014-6393
  cwe:
  - CWE-79
  disclosed_date: 2014-09-12
  created_date: 2014-09-12
  last_modified_date: 2014-09-12
  credit:
  - Paweł Hałdrzyński
  references:
  - https://github.com/expressjs/express/releases/tag/3.11.0
  - https://github.com/expressjs/express/releases/tag/4.5.0
  source_url: https://snyk.io/vuln/npm:express:20140912
