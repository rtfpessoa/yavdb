---
- id: snykio:nuget:microsoft.netcore.app:173690
  title: Domain-Spoofing
  description: |
    [Microsoft.NETCore.App][1] is a set of .NET API\'s that are included in
    the default .NET Core application model.

    Affected versions of this package are vulnerable to Domain-Spoofing. It
    causes the meaning of a URI to change when International Domain Name
    encoding is applied. An attacker who successfully exploited the
    vulnerability could redirect a URI.



    [1]: https://www.nuget.org/packages/Microsoft.NETCore.App
  affected_package: microsoft.netcore.app
  vulnerable_versions:
  - ">= 2.1.0 < 2.1.8"
  - ">= 2.2.0 < 2.2.2"
  severity: high
  package_manager: nuget
  cve:
  - CVE-2019-0657
  cwe:
  - CWE-20
  disclosed_date: 2019-02-12
  created_date: 2019-02-14
  last_modified_date: 2019-02-14
  credit:
  - Unknown
  references:
  - https://bugzilla.redhat.com/show_bug.cgi?id=1673891
  - https://github.com/dotnet/announcements/issues/97
  source_url: https://snyk.io/vuln/SNYK-DOTNET-MICROSOFTNETCOREAPP-173690
- id: snykio:nuget:microsoft.netcore.app:173754
  title: Authentication Bypass by Spoofing
  description: |
    [Microsoft.NETCore.App][1] is a set of .NET API\'s that are included in
    the default .NET Core application model.

    Affected versions of this package are vulnerable to Authentication
    Bypass by Spoofing due to the way they parse URL\'s. An attacker could
    use it to bypass security logic intended to ensure that a user-provided
    URL belonged to a specific hostname or a subdomain of that hostname. To
    exploit the vulnerability, an attacker must provide a URL string to an
    application that attempts to verify that the URL belongs to a specific
    hostname or to a subdomain of that hostname. The application must then
    make an HTTP request to the attacker-provided URL either directly or by
    sending a processed version of the attacker-provided URL to a web
    browser.



    [1]: https://www.nuget.org/packages/Microsoft.NETCore.App
  affected_package: microsoft.netcore.app
  vulnerable_versions:
  - ">= 2.1.0 < 2.1.8"
  - ">= 2.2.0 < 2.2.2"
  severity: high
  package_manager: nuget
  cve:
  - CVE-2019-0657
  cwe:
  - CWE-290
  disclosed_date: 2019-02-12
  created_date: 2019-03-06
  last_modified_date: 2019-03-06
  credit:
  - Jonathan Birch of Microsoft Corporation
  references:
  - https://github.com/dotnet/announcements/issues/97
  - https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0657
  source_url: https://snyk.io/vuln/SNYK-DOTNET-MICROSOFTNETCOREAPP-173754
- id: snykio:nuget:microsoft.netcore.app:173778
  title: Denial of Service (DoS)
  description: "[Microsoft.NETCore.App][1] is a set of .NET API\\'s that are included
    in\nthe default .NET Core application model.\n\nAffected versions of this package
    are vulnerable to Denial of Service\n(DoS) due to improperly handling parsing
    certificate data. An attacker\nwho successfully exploited this vulnerability could
    cause a denial of\nservice against a .NET Core web application.\n\n\n\n[1]: https://www.nuget.org/packages/Microsoft.NETCore.App\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n{: .language-js}\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n{: .language-bash}\n\nThe entire
    process of testing it against a 30 characters long string\ntakes around ~52ms.
    But when given an invalid string, it takes nearly\ntwo seconds to complete the
    test, over ten times as long as it took to\ntest a valid string. The dramatic
    difference is due to the way regular\nexpressions get evaluated.\n\nMost Regex
    engines will work very similarly (with minor differences).\nThe engine will match
    the first possible way to accept the current\ncharacter and proceed to the next
    one. If it then fails to match the\nnext one, it will backtrack and see if there
    was another way to digest\nthe previous character. If it goes too far down the
    rabbit hole only to\nfind out the string doesn’t match in the end, and if many
    characters\nhave multiple valid regex paths, the number of backtracking steps
    can\nbecome very large, resulting in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s
    look at how our expression runs into this problem, using a\nshorter string: \\\"ACCCX\\\".
    While it seems fairly straightforward, there\nare still four different ways that
    the engine could match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.
    \ C+C+C.\n\nThe engine has to try each of those combinations to see if any of
    them\npotentially match against the expression. When you combine that with the\nother
    steps the engine must take, we can use [RegEx 101 debugger][1] to\nsee the engine
    has to take a total of 38 steps before it can determine\nthe string doesn\\'t
    match.\n\nFrom there, the number of steps the engine must use to validate a string\njust
    continues to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n|
    ACCCX | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX
    | 14 | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to
    take over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n"
  affected_package: microsoft.netcore.app
  vulnerable_versions:
  - "< 1.0.8"
  - ">= 1.1.0 < 1.1.5"
  - ">= 2.0.0 < 2.0.3"
  severity: high
  package_manager: nuget
  cve:
  - CVE-2017-11770
  cwe:
  - CWE-400
  disclosed_date: 2017-11-14
  created_date: 2019-03-13
  last_modified_date: 2019-03-13
  credit:
  - Bachraty Gergely
  references:
  - https://github.com/dotnet/core/blob/master/release-notes/2.0/2.0.3.md
  - https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2017-11770
  source_url: https://snyk.io/vuln/SNYK-DOTNET-MICROSOFTNETCOREAPP-173778
- id: snykio:nuget:microsoft.netcore.app:173977
  title: Denial of Service (DoS)
  description: "[Microsoft.NETCore.App][1] is a set of .NET API\\'s that are included
    in\nthe default .NET Core application model.\n\nAffected versions of this package
    are vulnerable to Denial of Service\n(DoS) due to improperly handling web requests
    in Microsoft Common Object\nRuntime Library.\n\n\n\n[1]: https://www.nuget.org/packages/Microsoft.NETCore.App\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n{: .language-js}\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n{: .language-bash}\n\nThe entire
    process of testing it against a 30 characters long string\ntakes around ~52ms.
    But when given an invalid string, it takes nearly\ntwo seconds to complete the
    test, over ten times as long as it took to\ntest a valid string. The dramatic
    difference is due to the way regular\nexpressions get evaluated.\n\nMost Regex
    engines will work very similarly (with minor differences).\nThe engine will match
    the first possible way to accept the current\ncharacter and proceed to the next
    one. If it then fails to match the\nnext one, it will backtrack and see if there
    was another way to digest\nthe previous character. If it goes too far down the
    rabbit hole only to\nfind out the string doesn’t match in the end, and if many
    characters\nhave multiple valid regex paths, the number of backtracking steps
    can\nbecome very large, resulting in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s
    look at how our expression runs into this problem, using a\nshorter string: \\\"ACCCX\\\".
    While it seems fairly straightforward, there\nare still four different ways that
    the engine could match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.
    \ C+C+C.\n\nThe engine has to try each of those combinations to see if any of
    them\npotentially match against the expression. When you combine that with the\nother
    steps the engine must take, we can use [RegEx 101 debugger][1] to\nsee the engine
    has to take a total of 38 steps before it can determine\nthe string doesn\\'t
    match.\n\nFrom there, the number of steps the engine must use to validate a string\njust
    continues to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n|
    ACCCX | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX
    | 14 | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to
    take over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n"
  affected_package: microsoft.netcore.app
  vulnerable_versions:
  - ">= 1.0.0 < 2.0.0"
  severity: high
  package_manager: nuget
  cve:
  - CVE-2017-8585
  cwe:
  - CWE-400
  disclosed_date: 2017-07-11
  created_date: 2017-07-11
  last_modified_date: 2017-07-11
  credit:
  - David Fernandez of Sidertia Solutions
  references:
  - https://github.com/dotnet/announcements/issues/34
  - https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2017-8585
  - https://www.sidertia.com/Home/Community/Blog/2017/07/14/Microsoft-fixes-the-CVE-2017-8585-security-vulnerability-discovered-by-Sidertia-Team
  source_url: https://snyk.io/vuln/SNYK-DOTNET-MICROSOFTNETCOREAPP-173977
- id: snykio:nuget:microsoft.netcore.app:173978
  title: Denial of Service (DoS)
  description: "[Microsoft.NETCore.App][1] is a set of .NET API\\'s that are included
    in\nthe default .NET Core application model.\n\nAffected versions of this package
    are vulnerable to Denial of Service\n(DoS). A hash collision may occur due to
    improperly handle of specially\ncrafted requests.\n\n\n\n[1]: https://www.nuget.org/packages/Microsoft.NETCore.App\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n{: .language-js}\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n{: .language-bash}\n\nThe entire
    process of testing it against a 30 characters long string\ntakes around ~52ms.
    But when given an invalid string, it takes nearly\ntwo seconds to complete the
    test, over ten times as long as it took to\ntest a valid string. The dramatic
    difference is due to the way regular\nexpressions get evaluated.\n\nMost Regex
    engines will work very similarly (with minor differences).\nThe engine will match
    the first possible way to accept the current\ncharacter and proceed to the next
    one. If it then fails to match the\nnext one, it will backtrack and see if there
    was another way to digest\nthe previous character. If it goes too far down the
    rabbit hole only to\nfind out the string doesn’t match in the end, and if many
    characters\nhave multiple valid regex paths, the number of backtracking steps
    can\nbecome very large, resulting in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s
    look at how our expression runs into this problem, using a\nshorter string: \\\"ACCCX\\\".
    While it seems fairly straightforward, there\nare still four different ways that
    the engine could match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.
    \ C+C+C.\n\nThe engine has to try each of those combinations to see if any of
    them\npotentially match against the expression. When you combine that with the\nother
    steps the engine must take, we can use [RegEx 101 debugger][1] to\nsee the engine
    has to take a total of 38 steps before it can determine\nthe string doesn\\'t
    match.\n\nFrom there, the number of steps the engine must use to validate a string\njust
    continues to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n|
    ACCCX | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX
    | 14 | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to
    take over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n"
  affected_package: microsoft.netcore.app
  vulnerable_versions:
  - ">= 1.0.0 < 2.0.6"
  severity: high
  package_manager: nuget
  cve:
  - CVE-2018-0875
  cwe:
  - CWE-400
  disclosed_date: 2018-03-13
  created_date: 2018-03-13
  last_modified_date: 2018-03-13
  credit:
  - Ben Adams of Illyriad Games
  references:
  - https://github.com/dotnet/core/blob/master/release-notes/2.0/2.0.6.md
  - https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-0875
  source_url: https://snyk.io/vuln/SNYK-DOTNET-MICROSOFTNETCOREAPP-173978
- id: snykio:nuget:microsoft.netcore.app:174376
  title: Denial of Service (DoS)
  description: |+
    [Microsoft.NETCore.App][1] is a set of .NET API\'s that are included in
    the default .NET Core application model..

    Affected versions of this package are vulnerable to Denial of Service
    (DoS) when specially crafted requests are submitted. This is because of
    the way .NET applications process XML documents. This CVE is different
    from `CVE-2018-0765`.



    [1]: https://www.nuget.org/packages/Microsoft.NETCore.App
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: microsoft.netcore.app
  vulnerable_versions:
  - ">= 1.0.0 < 1.0.9"
  - ">= 1.1.0 < 1.1.6"
  - ">= 2.0.0 < 2.0.5"
  severity: high
  package_manager: nuget
  cve:
  - CVE-2018-0764
  cwe:
  - CWE-400
  disclosed_date: 2018-01-09
  created_date: 2019-04-18
  last_modified_date: 2019-04-18
  credit:
  - Unknown
  references:
  - https://github.com/dotnet/core/blob/master/release-notes/2.0/2.0.5.md
  - https://github.com/dotnet/corefx/issues/26237
  - https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-0764
  source_url: https://snyk.io/vuln/SNYK-DOTNET-MICROSOFTNETCOREAPP-174376
- id: snykio:nuget:microsoft.netcore.app:174569
  title: Denial of Service (DoS)
  description: "[Microsoft.NETCore.App][1] is a set of .NET API\\'s that are included
    in\nthe default .NET Core application model.\n\nAffected versions of this package
    are vulnerable to Denial of Service\n(DoS) due to improperly handling of web requests.
    An attacker who\nsuccessfully exploited this vulnerability could cause a denial
    of\nservice against an ASP.NET Core web application.\n\n\n\n[1]: https://www.nuget.org/packages/Microsoft.NETCore.App\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n{: .language-js}\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n{: .language-bash}\n\nThe entire
    process of testing it against a 30 characters long string\ntakes around ~52ms.
    But when given an invalid string, it takes nearly\ntwo seconds to complete the
    test, over ten times as long as it took to\ntest a valid string. The dramatic
    difference is due to the way regular\nexpressions get evaluated.\n\nMost Regex
    engines will work very similarly (with minor differences).\nThe engine will match
    the first possible way to accept the current\ncharacter and proceed to the next
    one. If it then fails to match the\nnext one, it will backtrack and see if there
    was another way to digest\nthe previous character. If it goes too far down the
    rabbit hole only to\nfind out the string doesn’t match in the end, and if many
    characters\nhave multiple valid regex paths, the number of backtracking steps
    can\nbecome very large, resulting in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s
    look at how our expression runs into this problem, using a\nshorter string: \\\"ACCCX\\\".
    While it seems fairly straightforward, there\nare still four different ways that
    the engine could match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.
    \ C+C+C.\n\nThe engine has to try each of those combinations to see if any of
    them\npotentially match against the expression. When you combine that with the\nother
    steps the engine must take, we can use [RegEx 101 debugger][1] to\nsee the engine
    has to take a total of 38 steps before it can determine\nthe string doesn\\'t
    match.\n\nFrom there, the number of steps the engine must use to validate a string\njust
    continues to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n|
    ACCCX | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX
    | 14 | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to
    take over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n"
  affected_package: microsoft.netcore.app
  vulnerable_versions:
  - "< 2.0.0"
  severity: high
  package_manager: nuget
  cve:
  - CVE-2018-0808
  cwe:
  - CWE-400
  disclosed_date: 2018-03-13
  created_date: 2019-05-02
  last_modified_date: 2019-05-02
  credit:
  - Andrei Gorlov
  references:
  - https://github.com/aspnet/Announcements/issues/294
  - https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-0808
  source_url: https://snyk.io/vuln/SNYK-DOTNET-MICROSOFTNETCOREAPP-174569
- id: snykio:nuget:microsoft.netcore.app:174571
  title: Cross-site Request Forgery (CSRF)
  description: |
    [Microsoft.NETCore.App][1] is a set of .NET API\'s that are included in
    the default .NET Core application model.

    Affected versions of this package are vulnerable to Cross-site Request
    Forgery (CSRF) when the web application is created using vulnerable
    project templates.



    [1]: https://www.nuget.org/packages/Microsoft.NETCore.App
  affected_package: microsoft.netcore.app
  vulnerable_versions:
  - ">= 2.0.0 < 2.1.4"
  severity: medium
  package_manager: nuget
  cve:
  - CVE-2018-0785
  cwe:
  - CWE-352
  disclosed_date: 2018-01-09
  created_date: 2019-05-02
  last_modified_date: 2019-05-02
  credit:
  - Kevin Chalet
  references:
  - https://github.com/aspnet/Announcements/issues/284
  - https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-0785
  source_url: https://snyk.io/vuln/SNYK-DOTNET-MICROSOFTNETCOREAPP-174571
- id: snykio:nuget:microsoft.netcore.app:174572
  title: Privilege Escalation
  description: |
    [Microsoft.NETCore.App][1] is a set of .NET API\'s that are included in
    the default .NET Core application model.

    Affected versions of this package are vulnerable to Privilege
    Escalation. When using vulnerable project templates, it fails to
    properly sanitize web requests. An attacker who successfully exploited
    this vulnerability could perform content injection attacks and run
    script in the security context of the logged-on user.



    [1]: https://www.nuget.org/packages/Microsoft.NETCore.App
  affected_package: microsoft.netcore.app
  vulnerable_versions:
  - ">= 2.0.0 < 2.1.4"
  severity: high
  package_manager: nuget
  cve:
  - CVE-2018-0784
  cwe:
  - CWE-269
  disclosed_date: 2018-01-09
  created_date: 2019-05-02
  last_modified_date: 2019-05-02
  credit:
  - Kevin Chalet
  references:
  - https://github.com/aspnet/Announcements/issues/285
  - https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-0784
  source_url: https://snyk.io/vuln/SNYK-DOTNET-MICROSOFTNETCOREAPP-174572
- id: snykio:nuget:microsoft.netcore.app:174710
  title: Denial of Service (DoS)
  description: |+
    [Microsoft.NETCore.App][1] is a set of .NET API\'s that are included in
    the default .NET Core application model.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS).



    [1]: https://www.nuget.org/packages/Microsoft.NETCore.App
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: microsoft.netcore.app
  vulnerable_versions:
  - ">= 2.1.0 < 2.1.11"
  - ">= 2.2.0 < 2.2.5"
  severity: high
  package_manager: nuget
  cve:
  - CVE-2019-0982
  cwe:
  - CWE-400
  disclosed_date: 2019-05-14
  created_date: 2019-05-15
  last_modified_date: 2019-05-15
  credit:
  - Unknown
  references:
  - https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.5/2.2.5.md
  - https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0982
  source_url: https://snyk.io/vuln/SNYK-DOTNET-MICROSOFTNETCOREAPP-174710
- id: snykio:nuget:microsoft.netcore.app:451559
  title: Open Redirect
  description: |+
    Affected versions of this package are vulnerable to Open Redirect. A
    spoofing vulnerability exists that could lead to an redirection. An
    attacker who successfully exploits this vulnerability could redirect a
    targeted user to a malicious website.

  affected_package: microsoft.netcore.app
  vulnerable_versions:
  - ">= 2.1.0 < 2.1.12"
  - ">= 2.2.0 < 2.2.6"
  severity: medium
  package_manager: nuget
  cve:
  - CVE-2019-1075
  cwe:
  - CWE-601
  disclosed_date: 2019-07-09
  created_date: 2019-07-10
  last_modified_date: 2019-07-10
  credit:
  - Datalust
  references:
  - https://github.com/aspnet/Announcements/issues/373
  - https://github.com/aspnet/AspNetCore/commit/b9c8f3491937c5c756cfc244d1da5a956faca19e
  - https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-1075
  source_url: https://snyk.io/vuln/SNYK-DOTNET-MICROSOFTNETCOREAPP-451559
- id: snykio:nuget:microsoft.netcore.app:541848
  title: Remote Code Execution (RCE)
  description: |
    [Microsoft.NETCore.App][1] is a set of .NET API\'s that are included in
    the default .NET Core application model.

    Affected versions of this package are vulnerable to Remote Code
    Execution (RCE) when the software fails to check the source markup of a
    file. An attacker who successfully exploited the vulnerability could run
    arbitrary code in the context of the current user.



    [1]: https://www.nuget.org/packages/Microsoft.NETCore.App
  affected_package: microsoft.netcore.app
  vulnerable_versions:
  - ">= 3.0.1 < 3.0.2"
  - ">= 3.1.0 < 3.1.1"
  severity: high
  package_manager: nuget
  cve:
  - CVE-2020-0605
  cwe:
  - CWE-20
  disclosed_date: 2020-01-14
  created_date: 2020-01-15
  last_modified_date: 2020-01-15
  credit:
  - Soroush Dalili
  references:
  - https://bugzilla.redhat.com/show_bug.cgi?id=1789625
  - https://github.com/dotnet/announcements/issues/148
  source_url: https://snyk.io/vuln/SNYK-DOTNET-MICROSOFTNETCOREAPP-541848
- id: snykio:nuget:microsoft.netcore.app:541849
  title: Denial of Service (DoS)
  description: "[Microsoft.NETCore.App][1] is a set of .NET API\\'s that are included
    in\nthe default .NET Core application model.\n\nAffected versions of this package
    are vulnerable to Denial of Service\n(DoS). A remote unauthenticated attacker
    could exploit this\nvulnerability by issuing specially crafted requests to the
    ASP.NET Core\napplication.\n\n\n\n[1]: https://www.nuget.org/packages/Microsoft.NETCore.App\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n{: .language-js}\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n{: .language-bash}\n\nThe entire
    process of testing it against a 30 characters long string\ntakes around ~52ms.
    But when given an invalid string, it takes nearly\ntwo seconds to complete the
    test, over ten times as long as it took to\ntest a valid string. The dramatic
    difference is due to the way regular\nexpressions get evaluated.\n\nMost Regex
    engines will work very similarly (with minor differences).\nThe engine will match
    the first possible way to accept the current\ncharacter and proceed to the next
    one. If it then fails to match the\nnext one, it will backtrack and see if there
    was another way to digest\nthe previous character. If it goes too far down the
    rabbit hole only to\nfind out the string doesn’t match in the end, and if many
    characters\nhave multiple valid regex paths, the number of backtracking steps
    can\nbecome very large, resulting in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s
    look at how our expression runs into this problem, using a\nshorter string: \\\"ACCCX\\\".
    While it seems fairly straightforward, there\nare still four different ways that
    the engine could match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.
    \ C+C+C.\n\nThe engine has to try each of those combinations to see if any of
    them\npotentially match against the expression. When you combine that with the\nother
    steps the engine must take, we can use [RegEx 101 debugger][1] to\nsee the engine
    has to take a total of 38 steps before it can determine\nthe string doesn\\'t
    match.\n\nFrom there, the number of steps the engine must use to validate a string\njust
    continues to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n|
    ACCCX | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX
    | 14 | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to
    take over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n"
  affected_package: microsoft.netcore.app
  vulnerable_versions:
  - ">= 2.1.0 < 2.1.15"
  - ">= 3.0.0 < 3.0.1"
  - ">= 3.1.0 < 3.1.1"
  severity: high
  package_manager: nuget
  cve:
  - CVE-2020-0602
  cwe:
  - CWE-400
  disclosed_date: 2020-01-14
  created_date: 2020-01-15
  last_modified_date: 2020-01-15
  credit:
  - Tom Deseyn
  references:
  - https://bugzilla.redhat.com/show_bug.cgi?id=1789623
  - https://github.com/aspnet/Announcements/issues/402
  source_url: https://snyk.io/vuln/SNYK-DOTNET-MICROSOFTNETCOREAPP-541849
- id: snykio:nuget:microsoft.netcore.app:541850
  title: Remote Code Execution (RCE)
  description: |
    [Microsoft.NETCore.App][1] is a set of .NET API\'s that are included in
    the default .NET Core application model.

    Affected versions of this package are vulnerable to Remote Code
    Execution (RCE) due to improper handling of objects in memory. An
    attacker who successfully exploited the vulnerability could run
    arbitrary code in the context of the current user.



    [1]: https://www.nuget.org/packages/Microsoft.NETCore.App
  affected_package: microsoft.netcore.app
  vulnerable_versions:
  - ">= 2.1.0 < 2.1.15"
  - ">= 3.0.0 < 3.0.1"
  - ">= 3.1.0 < 3.1.1"
  severity: high
  package_manager: nuget
  cve:
  - CVE-2020-0603
  cwe:
  - CWE-119
  disclosed_date: 2020-01-14
  created_date: 2020-01-15
  last_modified_date: 2020-01-15
  credit:
  - Brennan Conroy
  references:
  - https://bugzilla.redhat.com/show_bug.cgi?id=1789624
  - https://github.com/aspnet/Announcements/issues/403
  source_url: https://snyk.io/vuln/SNYK-DOTNET-MICROSOFTNETCOREAPP-541850
- id: snykio:nuget:microsoft.netcore.app:541852
  title: Remote Code Execution (RCE)
  description: |
    [Microsoft.NETCore.App][1] is a set of .NET API\'s that are included in
    the default .NET Core application model.

    Affected versions of this package are vulnerable to Remote Code
    Execution (RCE) when the software fails to check the source markup of a
    file. An attacker who successfully exploited the vulnerability could run
    arbitrary code in the context of the current user.



    [1]: https://www.nuget.org/packages/Microsoft.NETCore.App
  affected_package: microsoft.netcore.app
  vulnerable_versions:
  - ">= 3.0.1 < 3.0.2"
  - ">= 3.1.0 < 3.1.1"
  severity: high
  package_manager: nuget
  cve:
  - CVE-2020-0606
  cwe:
  - CWE-20
  disclosed_date: 2020-01-14
  created_date: 2020-01-15
  last_modified_date: 2020-01-15
  credit:
  - Soroush Dalili
  references:
  - https://bugzilla.redhat.com/show_bug.cgi?id=1789626
  - https://github.com/dotnet/announcements/issues/149
  source_url: https://snyk.io/vuln/SNYK-DOTNET-MICROSOFTNETCOREAPP-541852
- id: snykio:nuget:microsoft.netcore.app:569073
  title: Denial of Service (DoS)
  description: |+
    [Microsoft.NETCore.App][1] is a set of .NET API\'s that are included in
    the default .NET Core application model.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS). An attacker who successfully exploited this vulnerability could
    cause a denial of service against a .NET Core or .NET Framework web
    application. The vulnerability can be exploited remotely, without
    authentication. A remote unauthenticated attacker could exploit this
    vulnerability by issuing specially crafted requests to the .NET Core or
    .NET Framework application. The update addresses the vulnerability by
    correcting how the .NET Core or .NET Framework web application handles
    web requests.



    [1]: https://www.nuget.org/packages/Microsoft.NETCore.App
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: microsoft.netcore.app
  vulnerable_versions:
  - ">= 2.1.0 < 2.1.18"
  - ">= 3.1.0 < 3.1.4"
  severity: high
  package_manager: nuget
  cve:
  - CVE-2020-1108
  cwe:
  - CWE-400
  disclosed_date: 2020-05-12
  created_date: 2020-05-13
  last_modified_date: 2020-05-13
  credit:
  - Unknown
  references:
  - https://github.com/dotnet/announcements/issues/156
  source_url: https://snyk.io/vuln/SNYK-DOTNET-MICROSOFTNETCOREAPP-569073
- id: snykio:nuget:microsoft.netcore.app:569074
  title: Denial of Service (DoS)
  description: |+
    [Microsoft.NETCore.App][1] is a set of .NET API\'s that are included in
    the default .NET Core application model.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS). An attacker who successfully exploited this vulnerability could
    cause a denial of service against an ASP.NET Core web application. The
    vulnerability can be exploited remotely, without authentication. A
    remote unauthenticated attacker could exploit this vulnerability by
    issuing specially crafted requests to the ASP.NET Core application. The
    update addresses the vulnerability by correcting how the ASP.NET Core
    web application handles web requests.



    [1]: https://www.nuget.org/packages/Microsoft.NETCore.App
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: microsoft.netcore.app
  vulnerable_versions:
  - ">= 3.10 < 3.1.4"
  severity: high
  package_manager: nuget
  cve:
  - CVE-2020-1161
  cwe:
  - CWE-400
  disclosed_date: 2020-05-12
  created_date: 2020-05-13
  last_modified_date: 2020-05-13
  credit:
  - Unknown
  references:
  - https://github.com/aspnet/Announcements/issues/416
  source_url: https://snyk.io/vuln/SNYK-DOTNET-MICROSOFTNETCOREAPP-569074
- id: snykio:nuget:microsoft.netcore.app:584431
  title: Remote Code Execution (RCE)
  description: |
    [Microsoft.NETCore.App][1] is a set of .NET API\'s that are included in
    the default .NET Core application model.

    Affected versions of this package are vulnerable to Remote Code
    Execution (RCE). The software fails to check the source markup of XML
    file input. An attacker who successfully exploited the vulnerability
    could run arbitrary code in the context of the process responsible for
    deserialization of the XML content. To exploit this vulnerability, an
    attacker could upload a specially crafted document to a server utilizing
    an affected product to process content.



    [1]: https://www.nuget.org/packages/Microsoft.NETCore.App
  affected_package: microsoft.netcore.app
  vulnerable_versions:
  - "< 2.1.20"
  - "< 3.1.6"
  severity: high
  package_manager: nuget
  cve:
  - CVE-2020-1147
  cwe:
  - CWE-94
  disclosed_date: 2020-07-14
  created_date: 2020-07-15
  last_modified_date: 2020-07-15
  credit:
  - Oleksandr Mirosh from Micro Focus Fortify
  references:
  - https://bugzilla.redhat.com/show_bug.cgi?id=1856929
  - https://github.com/dotnet/announcements/issues/159
  - https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2020-1147
  source_url: https://snyk.io/vuln/SNYK-DOTNET-MICROSOFTNETCOREAPP-584431
- id: snykio:nuget:microsoft.netcore.app:598231
  title: Denial of Service (DoS)
  description: |+
    [Microsoft.NETCore.App][1] is a set of .NET API\'s that are included in
    the default .NET Core application model.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS). Client disconnects were not properly handled in all
    circumstances. A remote, unauthenticated attacker could send specially
    crafted requests that would consume more disk and CPU resources than
    necessary potentially leading to a denial of service via resource
    exhaustion.



    [1]: https://www.nuget.org/packages/Microsoft.NETCore.App
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: microsoft.netcore.app
  vulnerable_versions:
  - ">= 2.1.0 < 2.1.21"
  - ">= 3.1.0 < 3.1.7"
  severity: high
  package_manager: nuget
  cve:
  - CVE-2020-1597
  cwe:
  - CWE-400
  disclosed_date: 2020-08-11
  created_date: 2020-08-12
  last_modified_date: 2020-08-12
  credit:
  - Unknown
  references:
  - https://bugzilla.redhat.com/show_bug.cgi?id=1861110
  - https://github.com/dotnet/announcements/issues/162
  - https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2020-1597
  source_url: https://snyk.io/vuln/SNYK-DOTNET-MICROSOFTNETCOREAPP-598231
- id: snykio:nuget:microsoft.netcore.app:72895
  title: Denial of Service (DoS)
  description: |
    [Microsoft.NETCore.App][1] is set of .NET API\'s that are included in
    the default .NET Core application model.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS). An unauthenticated attacker can cause a denial of service
    remotely, by issuing specially crafted requests to the .NET Core
    application. This is caused by an improper handling of a web request in
    ASP.NET Core. This CVE ID is unique from CVE-2019-0548.



    [1]: https://www.nuget.org/packages/Microsoft.NETCore.App
  affected_package: microsoft.netcore.app
  vulnerable_versions:
  - ">= 2.1.0 < 2.1.7"
  - ">= 2.2.0 < 2.2.1"
  severity: medium
  package_manager: nuget
  cve:
  - CVE-2019-0564
  cwe:
  - CWE-400
  disclosed_date: 2019-01-08
  created_date: 2019-01-10
  last_modified_date: 2019-01-10
  credit:
  - Barry Dorrans
  references:
  - https://github.com/aspnet/Announcements/issues/334
  - https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0564
  source_url: https://snyk.io/vuln/SNYK-DOTNET-MICROSOFTNETCOREAPP-72895
