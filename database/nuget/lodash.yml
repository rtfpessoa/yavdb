---
- id: snykio:nuget:lodash:540454
  title: Regular Expression Denial of Service (ReDoS)
  description: "[lodash][1] is a utility library delivering consistency, modularity,\nperformance,
    &amp; extras.\n\nAffected versions of this package are vulnerable to Regular Expression\nDenial
    of Service (ReDoS). It parses dates using regex strings, which\nmay cause a slowdown
    of 2 seconds per 50k characters.\n\n\n\n[1]: https://www.nuget.org/packages/lodash/\n\\nPrototype
    Pollution is a vulnerability affecting JavaScript. Prototype\nPollution refers
    to the ability to inject properties into existing\nJavaScript language construct
    prototypes, such as objects. JavaScript\nallows all Object attributes to be altered,
    including their magical\nattributes such as `_proto_`, `constructor` and `prototype`.
    An attacker\nmanipulates these attributes to overwrite, or pollute, a JavaScript\napplication
    object prototype of the base object by injecting other\nvalues. Properties on
    the `Object.prototype` are then inherited by all\nthe JavaScript objects through
    the prototype chain. When that happens,\nthis leads to either denial of service
    by triggering JavaScript\nexceptions, or it tampers with the application source
    code to force the\ncode path that the attacker injects, thereby leading to remote
    code\nexecution.\n\nThere are two main ways in which the pollution of prototypes
    occurs:\n\n* Unsafe `Object` recursive merge\n\n* Property definition by path\n\n###
    Unsafe Object recursive merge   {#unsafe-object-recursive-merge}\n\nThe logic
    of a vulnerable recursive merge function follows the following\nhigh-level model:\n\n
    \   merge (target, source)\n    \n      foreach property of source\n    \n        if
    property exists and is an object on both the target and the source\n    \n          merge(target[property],
    source[property])\n    \n        else\n    \n          target[property] = source[property]\n\n&lt;br&gt;\n\nWhen
    the source object contains a property named `_proto_` defined with\n`Object.defineProperty()`
    , the condition that checks if the property\nexists and is an object on both the
    target and the source passes and the\nmerge recurses with the target, being the
    prototype of `Object` and the\nsource of `Object` as defined by the attacker.
    Properties are then\ncopied on the `Object` prototype.\n\nClone operations are
    a special sub-class of unsafe recursive merges,\nwhich occur when a recursive
    merge is conducted on an empty object:\n`merge({},source)`.\n\n`lodash` and `Hoek`
    are examples of libraries susceptible to recursive\nmerge attacks.\n\n### Property
    definition by path   {#property-definition-by-path}\n\nThere are a few JavaScript
    libraries that use an API to define property\nvalues on an object based on a given
    path. The function that is\ngenerally affected contains this signature: `theFunction(object,
    path,\nvalue)`\n\nIf the attacker can control the value of “path”, they can set
    this value\nto `_proto_.myValue`. `myValue` is then assigned to the prototype
    of the\nclass of the object.\n\n"
  affected_package: lodash
  vulnerable_versions:
  - ">= 0"
  severity: medium
  package_manager: nuget
  cve:
  - CVE-2019-1010266
  cwe:
  - CWE-185
  disclosed_date: 2017-09-05
  created_date: 2019-04-05
  last_modified_date: 2019-04-05
  credit:
  - cristianstaicu
  references:
  - https://github.com/lodash/lodash/commit/5c08f18d365b64063bfbfa686cbb97cdd6267347
  - https://github.com/lodash/lodash/issues/3359
  - https://github.com/lodash/lodash/pull/4450
  source_url: https://snyk.io/vuln/SNYK-DOTNET-LODASH-540454
- id: snykio:nuget:lodash:540455
  title: Prototype Pollution
  description: "[lodash][1] is a utility library delivering consistency, modularity,\nperformance,
    &amp; extras.\n\nAffected versions of this package are vulnerable to Prototype
    Pollution.\nThe functions `merge`, `mergeWith`, and `defaultsDeep` could be tricked\ninto
    adding or modifying properties of `Object.prototype`. This is due\nto an incomplete
    fix to `CVE-2018-3721`.\n\n\n\n[1]: https://www.nuget.org/packages/lodash/\n\\nPrototype
    Pollution is a vulnerability affecting JavaScript. Prototype\nPollution refers
    to the ability to inject properties into existing\nJavaScript language construct
    prototypes, such as objects. JavaScript\nallows all Object attributes to be altered,
    including their magical\nattributes such as `_proto_`, `constructor` and `prototype`.
    An attacker\nmanipulates these attributes to overwrite, or pollute, a JavaScript\napplication
    object prototype of the base object by injecting other\nvalues. Properties on
    the `Object.prototype` are then inherited by all\nthe JavaScript objects through
    the prototype chain. When that happens,\nthis leads to either denial of service
    by triggering JavaScript\nexceptions, or it tampers with the application source
    code to force the\ncode path that the attacker injects, thereby leading to remote
    code\nexecution.\n\nThere are two main ways in which the pollution of prototypes
    occurs:\n\n* Unsafe `Object` recursive merge\n\n* Property definition by path\n\n###
    Unsafe Object recursive merge   {#unsafe-object-recursive-merge}\n\nThe logic
    of a vulnerable recursive merge function follows the following\nhigh-level model:\n\n
    \   merge (target, source)\n    \n      foreach property of source\n    \n        if
    property exists and is an object on both the target and the source\n    \n          merge(target[property],
    source[property])\n    \n        else\n    \n          target[property] = source[property]\n\n&lt;br&gt;\n\nWhen
    the source object contains a property named `_proto_` defined with\n`Object.defineProperty()`
    , the condition that checks if the property\nexists and is an object on both the
    target and the source passes and the\nmerge recurses with the target, being the
    prototype of `Object` and the\nsource of `Object` as defined by the attacker.
    Properties are then\ncopied on the `Object` prototype.\n\nClone operations are
    a special sub-class of unsafe recursive merges,\nwhich occur when a recursive
    merge is conducted on an empty object:\n`merge({},source)`.\n\n`lodash` and `Hoek`
    are examples of libraries susceptible to recursive\nmerge attacks.\n\n### Property
    definition by path   {#property-definition-by-path}\n\nThere are a few JavaScript
    libraries that use an API to define property\nvalues on an object based on a given
    path. The function that is\ngenerally affected contains this signature: `theFunction(object,
    path,\nvalue)`\n\nIf the attacker can control the value of “path”, they can set
    this value\nto `_proto_.myValue`. `myValue` is then assigned to the prototype
    of the\nclass of the object.\n\n"
  affected_package: lodash
  vulnerable_versions:
  - ">= 0"
  severity: high
  package_manager: nuget
  cve:
  - CVE-2018-16487
  cwe:
  - CWE-400
  disclosed_date: 2018-08-31
  created_date: 2019-02-01
  last_modified_date: 2019-02-01
  credit:
  - asgerf
  references:
  - https://github.com/lodash/lodash/commit/90e6199a161b6445b01454517b40ef65ebecd2ad
  - https://github.com/lodash/lodash/pull/4337
  - https://hackerone.com/reports/380873
  - https://www.npmjs.com/advisories/1066
  - https://www.npmjs.com/advisories/1068
  - https://www.npmjs.com/advisories/1071
  - https://www.npmjs.com/advisories/782
  source_url: https://snyk.io/vuln/SNYK-DOTNET-LODASH-540455
- id: snykio:nuget:lodash:540456
  title: Prototype Pollution
  description: "[lodash][1] is a utility library delivering consistency, modularity,\nperformance,
    &amp; extras.\n\nAffected versions of this package are vulnerable to Prototype
    Pollution.\nThe utilities function allow modification of the `Object` prototype.
    If\nan attacker can control part of the structure passed to this function,\nthey
    could add or modify an existing property.\n\n\n\n[1]: https://www.nuget.org/packages/lodash/\n\\nPrototype
    Pollution is a vulnerability affecting JavaScript. Prototype\nPollution refers
    to the ability to inject properties into existing\nJavaScript language construct
    prototypes, such as objects. JavaScript\nallows all Object attributes to be altered,
    including their magical\nattributes such as `_proto_`, `constructor` and `prototype`.
    An attacker\nmanipulates these attributes to overwrite, or pollute, a JavaScript\napplication
    object prototype of the base object by injecting other\nvalues. Properties on
    the `Object.prototype` are then inherited by all\nthe JavaScript objects through
    the prototype chain. When that happens,\nthis leads to either denial of service
    by triggering JavaScript\nexceptions, or it tampers with the application source
    code to force the\ncode path that the attacker injects, thereby leading to remote
    code\nexecution.\n\nThere are two main ways in which the pollution of prototypes
    occurs:\n\n* Unsafe `Object` recursive merge\n\n* Property definition by path\n\n###
    Unsafe Object recursive merge   {#unsafe-object-recursive-merge}\n\nThe logic
    of a vulnerable recursive merge function follows the following\nhigh-level model:\n\n
    \   merge (target, source)\n    \n      foreach property of source\n    \n        if
    property exists and is an object on both the target and the source\n    \n          merge(target[property],
    source[property])\n    \n        else\n    \n          target[property] = source[property]\n\n&lt;br&gt;\n\nWhen
    the source object contains a property named `_proto_` defined with\n`Object.defineProperty()`
    , the condition that checks if the property\nexists and is an object on both the
    target and the source passes and the\nmerge recurses with the target, being the
    prototype of `Object` and the\nsource of `Object` as defined by the attacker.
    Properties are then\ncopied on the `Object` prototype.\n\nClone operations are
    a special sub-class of unsafe recursive merges,\nwhich occur when a recursive
    merge is conducted on an empty object:\n`merge({},source)`.\n\n`lodash` and `Hoek`
    are examples of libraries susceptible to recursive\nmerge attacks.\n\n### Property
    definition by path   {#property-definition-by-path}\n\nThere are a few JavaScript
    libraries that use an API to define property\nvalues on an object based on a given
    path. The function that is\ngenerally affected contains this signature: `theFunction(object,
    path,\nvalue)`\n\nIf the attacker can control the value of “path”, they can set
    this value\nto `_proto_.myValue`. `myValue` is then assigned to the prototype
    of the\nclass of the object.\n\n"
  affected_package: lodash
  vulnerable_versions:
  - ">= 0"
  severity: medium
  package_manager: nuget
  cve:
  - CVE-2018-3721
  cwe:
  - CWE-400
  disclosed_date: 2018-01-30
  created_date: 2018-02-14
  last_modified_date: 2018-02-14
  credit:
  - Olivier Arteau (HoLyVieR)
  references:
  - https://github.com/lodash/lodash/commit/d8e069cc3410082e44eb18fcf8e7f3d08ebe1d4a
  - https://github.com/lodash/lodash/pull/4337
  - https://hackerone.com/reports/310443
  - https://www.npmjs.com/advisories/1067
  - https://www.npmjs.com/advisories/1069
  - https://www.npmjs.com/advisories/1070
  source_url: https://snyk.io/vuln/SNYK-DOTNET-LODASH-540456
- id: snykio:nuget:lodash:540457
  title: Prototype Pollution
  description: "[lodash][1] is a utility library delivering consistency, modularity,\nperformance,
    &amp; extras.\n\nAffected versions of this package are vulnerable to Prototype
    Pollution.\nThe function `defaultsDeep` could be tricked into adding or modifying\nproperties
    of `Object.prototype` using a `constructor` payload.\n\n\n\n[1]: https://www.nuget.org/packages/lodash/\n\\nPrototype
    Pollution is a vulnerability affecting JavaScript. Prototype\nPollution refers
    to the ability to inject properties into existing\nJavaScript language construct
    prototypes, such as objects. JavaScript\nallows all Object attributes to be altered,
    including their magical\nattributes such as `_proto_`, `constructor` and `prototype`.
    An attacker\nmanipulates these attributes to overwrite, or pollute, a JavaScript\napplication
    object prototype of the base object by injecting other\nvalues. Properties on
    the `Object.prototype` are then inherited by all\nthe JavaScript objects through
    the prototype chain. When that happens,\nthis leads to either denial of service
    by triggering JavaScript\nexceptions, or it tampers with the application source
    code to force the\ncode path that the attacker injects, thereby leading to remote
    code\nexecution.\n\nThere are two main ways in which the pollution of prototypes
    occurs:\n\n* Unsafe `Object` recursive merge\n\n* Property definition by path\n\n###
    Unsafe Object recursive merge   {#unsafe-object-recursive-merge}\n\nThe logic
    of a vulnerable recursive merge function follows the following\nhigh-level model:\n\n
    \   merge (target, source)\n    \n      foreach property of source\n    \n        if
    property exists and is an object on both the target and the source\n    \n          merge(target[property],
    source[property])\n    \n        else\n    \n          target[property] = source[property]\n\n&lt;br&gt;\n\nWhen
    the source object contains a property named `_proto_` defined with\n`Object.defineProperty()`
    , the condition that checks if the property\nexists and is an object on both the
    target and the source passes and the\nmerge recurses with the target, being the
    prototype of `Object` and the\nsource of `Object` as defined by the attacker.
    Properties are then\ncopied on the `Object` prototype.\n\nClone operations are
    a special sub-class of unsafe recursive merges,\nwhich occur when a recursive
    merge is conducted on an empty object:\n`merge({},source)`.\n\n`lodash` and `Hoek`
    are examples of libraries susceptible to recursive\nmerge attacks.\n\n### Property
    definition by path   {#property-definition-by-path}\n\nThere are a few JavaScript
    libraries that use an API to define property\nvalues on an object based on a given
    path. The function that is\ngenerally affected contains this signature: `theFunction(object,
    path,\nvalue)`\n\nIf the attacker can control the value of “path”, they can set
    this value\nto `_proto_.myValue`. `myValue` is then assigned to the prototype
    of the\nclass of the object.\n\n"
  affected_package: lodash
  vulnerable_versions:
  - ">= 0"
  severity: high
  package_manager: nuget
  cve:
  - CVE-2019-10744
  cwe:
  - CWE-400
  disclosed_date: 2019-06-19
  created_date: 2019-07-02
  last_modified_date: 2019-07-02
  credit:
  - Snyk Security Team
  references:
  - https://github.com/lodash/lodash/issues/4348
  - https://github.com/lodash/lodash/pull/4336
  - https://github.com/lodash/lodash/pull/4355
  - https://github.com/sailshq/lodash/pull/1
  - https://snyk.io/blog/snyk-research-team-discovers-severe-prototype-pollution-security-vulnerabilities-affecting-all-versions-of-lodash/
  - https://www.npmjs.com/advisories/1065
  source_url: https://snyk.io/vuln/SNYK-DOTNET-LODASH-540457
- id: snykio:nuget:lodash:567755
  title: Prototype Pollution
  description: "[lodash][1] is a utility library delivering consistency, modularity,\nperformance,
    &amp; extras.\n\nAffected versions of this package are vulnerable to Prototype
    Pollution.\nThe function `zipObjectDeep` can be tricked into adding or modifying\nproperties
    of the Object prototype. These properties will be present on\nall objects.\n\n\n\n[1]:
    https://www.nuget.org/packages/lodash/\n\\nPrototype Pollution is a vulnerability
    affecting JavaScript. Prototype\nPollution refers to the ability to inject properties
    into existing\nJavaScript language construct prototypes, such as objects. JavaScript\nallows
    all Object attributes to be altered, including their magical\nattributes such
    as `_proto_`, `constructor` and `prototype`. An attacker\nmanipulates these attributes
    to overwrite, or pollute, a JavaScript\napplication object prototype of the base
    object by injecting other\nvalues. Properties on the `Object.prototype` are then
    inherited by all\nthe JavaScript objects through the prototype chain. When that
    happens,\nthis leads to either denial of service by triggering JavaScript\nexceptions,
    or it tampers with the application source code to force the\ncode path that the
    attacker injects, thereby leading to remote code\nexecution.\n\nThere are two
    main ways in which the pollution of prototypes occurs:\n\n* Unsafe `Object` recursive
    merge\n\n* Property definition by path\n\n### Unsafe Object recursive merge   {#unsafe-object-recursive-merge}\n\nThe
    logic of a vulnerable recursive merge function follows the following\nhigh-level
    model:\n\n    merge (target, source)\n    \n      foreach property of source\n
    \   \n        if property exists and is an object on both the target and the source\n
    \   \n          merge(target[property], source[property])\n    \n        else\n
    \   \n          target[property] = source[property]\n\n&lt;br&gt;\n\nWhen the
    source object contains a property named `_proto_` defined with\n`Object.defineProperty()`
    , the condition that checks if the property\nexists and is an object on both the
    target and the source passes and the\nmerge recurses with the target, being the
    prototype of `Object` and the\nsource of `Object` as defined by the attacker.
    Properties are then\ncopied on the `Object` prototype.\n\nClone operations are
    a special sub-class of unsafe recursive merges,\nwhich occur when a recursive
    merge is conducted on an empty object:\n`merge({},source)`.\n\n`lodash` and `Hoek`
    are examples of libraries susceptible to recursive\nmerge attacks.\n\n### Property
    definition by path   {#property-definition-by-path}\n\nThere are a few JavaScript
    libraries that use an API to define property\nvalues on an object based on a given
    path. The function that is\ngenerally affected contains this signature: `theFunction(object,
    path,\nvalue)`\n\nIf the attacker can control the value of “path”, they can set
    this value\nto `_proto_.myValue`. `myValue` is then assigned to the prototype
    of the\nclass of the object.\n\n"
  affected_package: lodash
  vulnerable_versions:
  - ">= 0"
  severity: medium
  package_manager: nuget
  cwe:
  - CWE-400
  disclosed_date: 2020-04-27
  created_date: 2020-04-28
  last_modified_date: 2020-04-28
  credit:
  - posix
  references:
  - https://github.com/lodash/lodash/pull/4759
  - https://hackerone.com/reports/712065
  source_url: https://snyk.io/vuln/SNYK-DOTNET-LODASH-567755
