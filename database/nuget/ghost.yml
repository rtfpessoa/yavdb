---
- id: snykio:nuget:ghost:60156
  title: Information Exposure
  description: |
    [`ghost`][1] is Just a blogging platform. Affected versions of the
    package are vulnerable to Bearer token leakage, due to storing it in the
    `localStorage` of the browser. If used alongside a Cross-site Scripting
    (XSS) attack, a malicious user may hijack the user session.



    [1]: https://www.npmjs.com/package/ghost
  affected_package: ghost
  vulnerable_versions:
  - "< 0.5.9"
  severity: medium
  package_manager: nuget
  cve:
  - CVE-2015-1411
  cwe:
  - CWE-200
  disclosed_date: 2017-03-22
  created_date: 2017-03-22
  last_modified_date: 2017-03-22
  credit:
  - Matteo Beccaro
  references:
  - https://gist.github.com/ErisDS/6111e30e006ed34cf9f6
  - https://voidsec.com/ghost-blogging-platform/
  - https://voidsec.com/wp-content/uploads/2015/03/VoidSec-Ghost.pdf
  source_url: https://snyk.io/vuln/SNYK-DOTNET-GHOST-60156
- id: snykio:nuget:ghost:60157
  title: Identity Spoofing
  description: |
    [`ghost`][1] is a blogging platform. Affected versions of the package
    are vulnerable to Identity Spoofing, allowing an attacker to use the
    name of any author and publish an article in their name.



    [1]: https://www.npmjs.com/package/ghost
  affected_package: ghost
  vulnerable_versions:
  - "< 0.5.9"
  severity: medium
  package_manager: nuget
  cve:
  - CVE-2015-1410
  cwe:
  - CWE-285
  disclosed_date: 2017-03-22
  created_date: 2017-03-22
  last_modified_date: 2017-03-22
  credit:
  - Matteo Beccaro
  references:
  - https://gist.github.com/ErisDS/6111e30e006ed34cf9f6
  - https://voidsec.com/ghost-blogging-platform/
  - https://voidsec.com/wp-content/uploads/2015/03/VoidSec-Ghost.pdf
  source_url: https://snyk.io/vuln/SNYK-DOTNET-GHOST-60157
- id: snykio:nuget:ghost:60158
  title: Cross-site Scripting (XSS)
  description: |
    [`ghost`][1] is a blogging platform.

    Affected versions of the package are vulnerable to Cross-site Scripting
    (XSS) attacks. An authenticated user can embed code in the blog\'s
    images, like the user avatar, cover image and blog image, with possible
    malicious intent to execute the code on the client-side. Additionally,
    another Cross-site Scripting (XSS) has been found in the Tag Manager. An
    authenticated user can create a new post and tag it with a tag
    containing javascript code. An administrator may want to delete this
    tag, triggering the javascript code. This will result in the
    administrator token is stolen and his session hijacked.



    [1]: https://www.npmjs.com/package/ghost
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

    You can read more about `Cross-site Scripting (XSS)` on our [blog][1].



    [1]: https://snyk.io/blog/marked-xss-vulnerability/
  affected_package: ghost
  vulnerable_versions:
  - "< 0.5.9"
  severity: medium
  package_manager: nuget
  cve:
  - CVE-2015-1406
  cwe:
  - CWE-79
  disclosed_date: 2017-03-22
  created_date: 2017-03-22
  last_modified_date: 2017-03-22
  credit:
  - Abdel Adim Oisif
  references:
  - https://dev.ghost.org/ghost-0-5-9/
  - https://voidsec.com/ghost-blogging-platform/
  - https://voidsec.com/wp-content/uploads/2015/03/VoidSec-Ghost.pdf
  source_url: https://snyk.io/vuln/SNYK-DOTNET-GHOST-60158
- id: snykio:nuget:ghost:60159
  title: Authentication Bypass
  description: |
    [`ghost`][1] is a blogging platform. Affected versions of the package
    are vulnerable to Authentication Bypass via Privilege Reduction. An
    attacker can change the privileges of other users, and update their
    email.



    [1]: https://www.npmjs.com/package/ghost
  affected_package: ghost
  vulnerable_versions:
  - "< 0.5.9"
  severity: medium
  package_manager: nuget
  cve:
  - CVE-2015-1408
  cwe:
  - CWE-285
  disclosed_date: 2017-03-22
  created_date: 2017-03-22
  last_modified_date: 2017-03-22
  credit:
  - Matteo Beccaro
  references:
  - https://dev.ghost.org/ghost-0-5-9/
  - https://voidsec.com/ghost-blogging-platform/
  - https://voidsec.com/wp-content/uploads/2015/03/VoidSec-Ghost.pdf
  source_url: https://snyk.io/vuln/SNYK-DOTNET-GHOST-60159
- id: snykio:nuget:ghost:60160
  title: Authentication Bypass
  description: |
    [`ghost`][1] is a blogging platform. Affected versions of the package
    are vulnerable to Authentication Bypass. An authenticated user can spoof
    an `HTTP GET` request with any username to access any other users’
    drafts. This is due to the user parameter not being validated upon the
    request.



    [1]: https://www.npmjs.com/package/ghost
  affected_package: ghost
  vulnerable_versions:
  - "< 0.5.9"
  severity: medium
  package_manager: nuget
  cve:
  - CVE-2015-1409
  cwe:
  - CWE-285
  disclosed_date: 2017-03-22
  created_date: 2017-03-22
  last_modified_date: 2017-03-22
  credit:
  - Matteo Beccaro
  references:
  - https://dev.ghost.org/ghost-0-5-9/
  - https://voidsec.com/ghost-blogging-platform/
  - https://voidsec.com/wp-content/uploads/2015/03/VoidSec-Ghost.pdf
  source_url: https://snyk.io/vuln/SNYK-DOTNET-GHOST-60160
- id: snykio:nuget:ghost:60161
  title: Denial of Service (DoS)
  description: |+
    [`ghost`][1] is a blogging platform. Affected versions of the package
    are vulnerable to Denial of Service (DoS) attack, via filesystem
    exhaustion. When updating a user avatar, the pervious one is saved and
    not deleted. Also, the file size of the avatar is not limited.



    [1]: https://www.npmjs.com/package/ghost
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: ghost
  vulnerable_versions:
  - "< 0.5.9"
  severity: medium
  package_manager: nuget
  cve:
  - CVE-2015-1407
  cwe:
  - CWE-400
  disclosed_date: 2017-03-22
  created_date: 2017-03-22
  last_modified_date: 2017-03-22
  credit:
  - paolo Stagno
  references:
  - https://dev.ghost.org/ghost-0-5-9/
  - https://voidsec.com/ghost-blogging-platform/
  - https://voidsec.com/wp-content/uploads/2015/03/VoidSec-Ghost.pdf
  source_url: https://snyk.io/vuln/SNYK-DOTNET-GHOST-60161
- id: snykio:nuget:ghost:60162
  title: Open Redirect
  description: |
    [`ghost`][1] is a blogging platform. Affected versions of the package
    are vulnerable to Open Redirect attacks. A malicious user can create a
    link containing double slashes, which are treated as HTTP calls, and
    redirect to a site of their choosing.



    [1]: https://www.npmjs.com/package/ghost
  affected_package: ghost
  vulnerable_versions:
  - "< 0.10.0"
  severity: medium
  package_manager: nuget
  cwe:
  - CWE-601
  disclosed_date: 2017-03-22
  created_date: 2017-03-22
  last_modified_date: 2017-03-22
  credit:
  - Jesse Dijkstra
  references:
  - https://github.com/TryGhost/Ghost/commit/f546a5ce1d2dd7a018eeaf0413a23d71155f0869
  - https://github.com/TryGhost/Ghost/pull/7247
  source_url: https://snyk.io/vuln/SNYK-DOTNET-GHOST-60162
- id: snykio:nuget:ghost:60163
  title: Cross-site Scripting (XSS)
  description: |
    [`ghost`][1] is a blogging platform.

    Affected versions of the package are vulnerable to Cross-site Scripting
    (XSS) via the subscribe url. If an attacker set the location parameter
    to `javascript:alert(0)`, javascript will executed in the users browser
    when pressing the back button.



    [1]: https://www.npmjs.com/package/ghost
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

    You can read more about `Cross-site Scripting (XSS)` on our [blog][1].



    [1]: https://snyk.io/blog/marked-xss-vulnerability/
  affected_package: ghost
  vulnerable_versions:
  - ">= 0.8 < 0.11.2"
  - ">= 1.0.0-alpha.1 < 1.0.0-alpha.5"
  severity: medium
  package_manager: nuget
  cwe:
  - CWE-79
  disclosed_date: 2017-03-22
  created_date: 2017-03-22
  last_modified_date: 2017-03-22
  credit:
  - Shashank
  references:
  - https://github.com/TryGhost/Ghost/commit/03e4acdb374ce5067ce630b40f95743ca3e1ef21
  - https://github.com/TryGhost/Ghost/pull/7520
  - https://github.com/TryGhost/Ghost/pull/7539
  - https://github.com/TryGhost/Ghost/pull/7540
  source_url: https://snyk.io/vuln/SNYK-DOTNET-GHOST-60163
- id: snykio:nuget:ghost:60164
  title: Cross-site Scripting (XSS)
  description: |+
    [`ghost`][1] is a blogging platform. Affected versions of the package
    are vulnerable to Cross-site Scripting (XSS) because it fails to
    securely handle user data, making it possible for an attacker to supply
    crafted input in order to harm third party users.



    [1]: https://www.npmjs.com/package/ghost
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: ghost
  vulnerable_versions:
  - ">= 0.8.0 < 0.11.4"
  severity: medium
  package_manager: nuget
  cwe:
  - CWE-79
  disclosed_date: 2017-03-22
  created_date: 2017-03-22
  last_modified_date: 2017-03-22
  credit:
  - Katharina Irrgang
  references:
  - http://seclists.org/fulldisclosure/2017/Jan/49
  - https://github.com/TryGhost/Ghost/commit/32b9fc71a7f1400acff1f2446167b6c852769843
  - https://github.com/TryGhost/Ghost/issues/7832
  - https://github.com/TryGhost/Ghost/pull/7833
  source_url: https://snyk.io/vuln/SNYK-DOTNET-GHOST-60164
